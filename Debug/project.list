
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e894  08000200  08000200  00010200  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f70  0801ea98  0801ea98  0002ea98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020a08  08020a08  00040bb8  2**0
                  CONTENTS
  4 .ARM          00000008  08020a08  08020a08  00030a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a10  08020a10  00040bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020a10  08020a10  00030a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020a18  08020a18  00030a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bb8  20000000  08020a1c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e438  20000bb8  080215d4  00040bb8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000eff0  080215d4  0004eff0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040bb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027915  00000000  00000000  00040be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005078  00000000  00000000  000684fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  0006d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  0006f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009631  00000000  00000000  00070ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed5b  00000000  00000000  0007a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106cbc  00000000  00000000  00098e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a5  00000000  00000000  0019fb08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009364  00000000  00000000  0019fbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000bb8 	.word	0x20000bb8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ea7c 	.word	0x0801ea7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000bbc 	.word	0x20000bbc
 800023c:	0801ea7c 	.word	0x0801ea7c

08000240 <memcpy>:
 8000240:	4684      	mov	ip, r0
 8000242:	ea41 0300 	orr.w	r3, r1, r0
 8000246:	f013 0303 	ands.w	r3, r3, #3
 800024a:	d16d      	bne.n	8000328 <memcpy+0xe8>
 800024c:	3a40      	subs	r2, #64	; 0x40
 800024e:	d341      	bcc.n	80002d4 <memcpy+0x94>
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	3a40      	subs	r2, #64	; 0x40
 80002d2:	d2bd      	bcs.n	8000250 <memcpy+0x10>
 80002d4:	3230      	adds	r2, #48	; 0x30
 80002d6:	d311      	bcc.n	80002fc <memcpy+0xbc>
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	3a10      	subs	r2, #16
 80002fa:	d2ed      	bcs.n	80002d8 <memcpy+0x98>
 80002fc:	320c      	adds	r2, #12
 80002fe:	d305      	bcc.n	800030c <memcpy+0xcc>
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	3a04      	subs	r2, #4
 800030a:	d2f9      	bcs.n	8000300 <memcpy+0xc0>
 800030c:	3204      	adds	r2, #4
 800030e:	d008      	beq.n	8000322 <memcpy+0xe2>
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	bf1c      	itt	ne
 8000314:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000318:	f800 3b01 	strbne.w	r3, [r0], #1
 800031c:	d301      	bcc.n	8000322 <memcpy+0xe2>
 800031e:	880b      	ldrh	r3, [r1, #0]
 8000320:	8003      	strh	r3, [r0, #0]
 8000322:	4660      	mov	r0, ip
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	2a08      	cmp	r2, #8
 800032a:	d313      	bcc.n	8000354 <memcpy+0x114>
 800032c:	078b      	lsls	r3, r1, #30
 800032e:	d08d      	beq.n	800024c <memcpy+0xc>
 8000330:	f010 0303 	ands.w	r3, r0, #3
 8000334:	d08a      	beq.n	800024c <memcpy+0xc>
 8000336:	f1c3 0304 	rsb	r3, r3, #4
 800033a:	1ad2      	subs	r2, r2, r3
 800033c:	07db      	lsls	r3, r3, #31
 800033e:	bf1c      	itt	ne
 8000340:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000344:	f800 3b01 	strbne.w	r3, [r0], #1
 8000348:	d380      	bcc.n	800024c <memcpy+0xc>
 800034a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800034e:	f820 3b02 	strh.w	r3, [r0], #2
 8000352:	e77b      	b.n	800024c <memcpy+0xc>
 8000354:	3a04      	subs	r2, #4
 8000356:	d3d9      	bcc.n	800030c <memcpy+0xcc>
 8000358:	3a01      	subs	r2, #1
 800035a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800035e:	f800 3b01 	strb.w	r3, [r0], #1
 8000362:	d2f9      	bcs.n	8000358 <memcpy+0x118>
 8000364:	780b      	ldrb	r3, [r1, #0]
 8000366:	7003      	strb	r3, [r0, #0]
 8000368:	784b      	ldrb	r3, [r1, #1]
 800036a:	7043      	strb	r3, [r0, #1]
 800036c:	788b      	ldrb	r3, [r1, #2]
 800036e:	7083      	strb	r3, [r0, #2]
 8000370:	4660      	mov	r0, ip
 8000372:	4770      	bx	lr
	...
 8000380:	eba2 0003 	sub.w	r0, r2, r3
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop

08000388 <strcmp>:
 8000388:	7802      	ldrb	r2, [r0, #0]
 800038a:	780b      	ldrb	r3, [r1, #0]
 800038c:	2a01      	cmp	r2, #1
 800038e:	bf28      	it	cs
 8000390:	429a      	cmpcs	r2, r3
 8000392:	d1f5      	bne.n	8000380 <memcpy+0x140>
 8000394:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000398:	ea40 0401 	orr.w	r4, r0, r1
 800039c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80003a0:	f06f 0c00 	mvn.w	ip, #0
 80003a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80003a8:	b312      	cbz	r2, 80003f0 <strcmp+0x68>
 80003aa:	ea80 0401 	eor.w	r4, r0, r1
 80003ae:	f014 0f07 	tst.w	r4, #7
 80003b2:	d16a      	bne.n	800048a <strcmp+0x102>
 80003b4:	f000 0407 	and.w	r4, r0, #7
 80003b8:	f020 0007 	bic.w	r0, r0, #7
 80003bc:	f004 0503 	and.w	r5, r4, #3
 80003c0:	f021 0107 	bic.w	r1, r1, #7
 80003c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80003c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80003cc:	f014 0f04 	tst.w	r4, #4
 80003d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80003d4:	fa0c f405 	lsl.w	r4, ip, r5
 80003d8:	ea62 0204 	orn	r2, r2, r4
 80003dc:	ea66 0604 	orn	r6, r6, r4
 80003e0:	d00a      	beq.n	80003f8 <strcmp+0x70>
 80003e2:	ea63 0304 	orn	r3, r3, r4
 80003e6:	4662      	mov	r2, ip
 80003e8:	ea67 0704 	orn	r7, r7, r4
 80003ec:	4666      	mov	r6, ip
 80003ee:	e003      	b.n	80003f8 <strcmp+0x70>
 80003f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80003f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80003f8:	fa82 f54c 	uadd8	r5, r2, ip
 80003fc:	ea82 0406 	eor.w	r4, r2, r6
 8000400:	faa4 f48c 	sel	r4, r4, ip
 8000404:	bb6c      	cbnz	r4, 8000462 <strcmp+0xda>
 8000406:	fa83 f54c 	uadd8	r5, r3, ip
 800040a:	ea83 0507 	eor.w	r5, r3, r7
 800040e:	faa5 f58c 	sel	r5, r5, ip
 8000412:	b995      	cbnz	r5, 800043a <strcmp+0xb2>
 8000414:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000418:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800041c:	fa82 f54c 	uadd8	r5, r2, ip
 8000420:	ea82 0406 	eor.w	r4, r2, r6
 8000424:	faa4 f48c 	sel	r4, r4, ip
 8000428:	fa83 f54c 	uadd8	r5, r3, ip
 800042c:	ea83 0507 	eor.w	r5, r3, r7
 8000430:	faa5 f58c 	sel	r5, r5, ip
 8000434:	4325      	orrs	r5, r4
 8000436:	d0db      	beq.n	80003f0 <strcmp+0x68>
 8000438:	b99c      	cbnz	r4, 8000462 <strcmp+0xda>
 800043a:	ba2d      	rev	r5, r5
 800043c:	fab5 f485 	clz	r4, r5
 8000440:	f024 0407 	bic.w	r4, r4, #7
 8000444:	fa27 f104 	lsr.w	r1, r7, r4
 8000448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800044c:	fa23 f304 	lsr.w	r3, r3, r4
 8000450:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000454:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000458:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800045c:	eba0 0001 	sub.w	r0, r0, r1
 8000460:	4770      	bx	lr
 8000462:	ba24      	rev	r4, r4
 8000464:	fab4 f484 	clz	r4, r4
 8000468:	f024 0407 	bic.w	r4, r4, #7
 800046c:	fa26 f104 	lsr.w	r1, r6, r4
 8000470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000474:	fa22 f204 	lsr.w	r2, r2, r4
 8000478:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800047c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000480:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000484:	eba0 0001 	sub.w	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	f014 0f03 	tst.w	r4, #3
 800048e:	d13c      	bne.n	800050a <strcmp+0x182>
 8000490:	f010 0403 	ands.w	r4, r0, #3
 8000494:	d128      	bne.n	80004e8 <strcmp+0x160>
 8000496:	f850 2b08 	ldr.w	r2, [r0], #8
 800049a:	f851 3b08 	ldr.w	r3, [r1], #8
 800049e:	fa82 f54c 	uadd8	r5, r2, ip
 80004a2:	ea82 0503 	eor.w	r5, r2, r3
 80004a6:	faa5 f58c 	sel	r5, r5, ip
 80004aa:	b95d      	cbnz	r5, 80004c4 <strcmp+0x13c>
 80004ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80004b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80004b4:	fa82 f54c 	uadd8	r5, r2, ip
 80004b8:	ea82 0503 	eor.w	r5, r2, r3
 80004bc:	faa5 f58c 	sel	r5, r5, ip
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d0e8      	beq.n	8000496 <strcmp+0x10e>
 80004c4:	ba2d      	rev	r5, r5
 80004c6:	fab5 f485 	clz	r4, r5
 80004ca:	f024 0407 	bic.w	r4, r4, #7
 80004ce:	fa23 f104 	lsr.w	r1, r3, r4
 80004d2:	fa22 f204 	lsr.w	r2, r2, r4
 80004d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80004da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004e2:	eba0 0001 	sub.w	r0, r0, r1
 80004e6:	4770      	bx	lr
 80004e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80004ec:	f020 0003 	bic.w	r0, r0, #3
 80004f0:	f850 2b08 	ldr.w	r2, [r0], #8
 80004f4:	f021 0103 	bic.w	r1, r1, #3
 80004f8:	f851 3b08 	ldr.w	r3, [r1], #8
 80004fc:	fa0c f404 	lsl.w	r4, ip, r4
 8000500:	ea62 0204 	orn	r2, r2, r4
 8000504:	ea63 0304 	orn	r3, r3, r4
 8000508:	e7c9      	b.n	800049e <strcmp+0x116>
 800050a:	f010 0403 	ands.w	r4, r0, #3
 800050e:	d01a      	beq.n	8000546 <strcmp+0x1be>
 8000510:	eba1 0104 	sub.w	r1, r1, r4
 8000514:	f020 0003 	bic.w	r0, r0, #3
 8000518:	07e4      	lsls	r4, r4, #31
 800051a:	f850 2b04 	ldr.w	r2, [r0], #4
 800051e:	d006      	beq.n	800052e <strcmp+0x1a6>
 8000520:	d20f      	bcs.n	8000542 <strcmp+0x1ba>
 8000522:	788b      	ldrb	r3, [r1, #2]
 8000524:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000528:	1ae4      	subs	r4, r4, r3
 800052a:	d106      	bne.n	800053a <strcmp+0x1b2>
 800052c:	b12b      	cbz	r3, 800053a <strcmp+0x1b2>
 800052e:	78cb      	ldrb	r3, [r1, #3]
 8000530:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	d100      	bne.n	800053a <strcmp+0x1b2>
 8000538:	b91b      	cbnz	r3, 8000542 <strcmp+0x1ba>
 800053a:	4620      	mov	r0, r4
 800053c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000540:	4770      	bx	lr
 8000542:	f101 0104 	add.w	r1, r1, #4
 8000546:	f850 2b04 	ldr.w	r2, [r0], #4
 800054a:	07cc      	lsls	r4, r1, #31
 800054c:	f021 0103 	bic.w	r1, r1, #3
 8000550:	f851 3b04 	ldr.w	r3, [r1], #4
 8000554:	d848      	bhi.n	80005e8 <strcmp+0x260>
 8000556:	d224      	bcs.n	80005a2 <strcmp+0x21a>
 8000558:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800055c:	fa82 f54c 	uadd8	r5, r2, ip
 8000560:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000564:	faa5 f58c 	sel	r5, r5, ip
 8000568:	d10a      	bne.n	8000580 <strcmp+0x1f8>
 800056a:	b965      	cbnz	r5, 8000586 <strcmp+0x1fe>
 800056c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000570:	ea84 0402 	eor.w	r4, r4, r2
 8000574:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000578:	d10e      	bne.n	8000598 <strcmp+0x210>
 800057a:	f850 2b04 	ldr.w	r2, [r0], #4
 800057e:	e7eb      	b.n	8000558 <strcmp+0x1d0>
 8000580:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000584:	e055      	b.n	8000632 <strcmp+0x2aa>
 8000586:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800058a:	d14d      	bne.n	8000628 <strcmp+0x2a0>
 800058c:	7808      	ldrb	r0, [r1, #0]
 800058e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000592:	f1c0 0000 	rsb	r0, r0, #0
 8000596:	4770      	bx	lr
 8000598:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80005a0:	e047      	b.n	8000632 <strcmp+0x2aa>
 80005a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80005a6:	fa82 f54c 	uadd8	r5, r2, ip
 80005aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80005ae:	faa5 f58c 	sel	r5, r5, ip
 80005b2:	d10a      	bne.n	80005ca <strcmp+0x242>
 80005b4:	b965      	cbnz	r5, 80005d0 <strcmp+0x248>
 80005b6:	f851 3b04 	ldr.w	r3, [r1], #4
 80005ba:	ea84 0402 	eor.w	r4, r4, r2
 80005be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80005c2:	d10c      	bne.n	80005de <strcmp+0x256>
 80005c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80005c8:	e7eb      	b.n	80005a2 <strcmp+0x21a>
 80005ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80005ce:	e030      	b.n	8000632 <strcmp+0x2aa>
 80005d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80005d4:	d128      	bne.n	8000628 <strcmp+0x2a0>
 80005d6:	880b      	ldrh	r3, [r1, #0]
 80005d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80005dc:	e029      	b.n	8000632 <strcmp+0x2aa>
 80005de:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80005e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80005e6:	e024      	b.n	8000632 <strcmp+0x2aa>
 80005e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80005ec:	fa82 f54c 	uadd8	r5, r2, ip
 80005f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80005f4:	faa5 f58c 	sel	r5, r5, ip
 80005f8:	d10a      	bne.n	8000610 <strcmp+0x288>
 80005fa:	b965      	cbnz	r5, 8000616 <strcmp+0x28e>
 80005fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000600:	ea84 0402 	eor.w	r4, r4, r2
 8000604:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000608:	d109      	bne.n	800061e <strcmp+0x296>
 800060a:	f850 2b04 	ldr.w	r2, [r0], #4
 800060e:	e7eb      	b.n	80005e8 <strcmp+0x260>
 8000610:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000614:	e00d      	b.n	8000632 <strcmp+0x2aa>
 8000616:	f015 0fff 	tst.w	r5, #255	; 0xff
 800061a:	d105      	bne.n	8000628 <strcmp+0x2a0>
 800061c:	680b      	ldr	r3, [r1, #0]
 800061e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000622:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000626:	e004      	b.n	8000632 <strcmp+0x2aa>
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000630:	4770      	bx	lr
 8000632:	ba12      	rev	r2, r2
 8000634:	ba1b      	rev	r3, r3
 8000636:	fa82 f44c 	uadd8	r4, r2, ip
 800063a:	ea82 0403 	eor.w	r4, r2, r3
 800063e:	faa4 f58c 	sel	r5, r4, ip
 8000642:	fab5 f485 	clz	r4, r5
 8000646:	fa02 f204 	lsl.w	r2, r2, r4
 800064a:	fa03 f304 	lsl.w	r3, r3, r4
 800064e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000652:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000656:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800065a:	4770      	bx	lr
	...

08000680 <strlen>:
 8000680:	f890 f000 	pld	[r0]
 8000684:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000688:	f020 0107 	bic.w	r1, r0, #7
 800068c:	f06f 0c00 	mvn.w	ip, #0
 8000690:	f010 0407 	ands.w	r4, r0, #7
 8000694:	f891 f020 	pld	[r1, #32]
 8000698:	f040 8049 	bne.w	800072e <strlen+0xae>
 800069c:	f04f 0400 	mov.w	r4, #0
 80006a0:	f06f 0007 	mvn.w	r0, #7
 80006a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80006a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80006ac:	f100 0008 	add.w	r0, r0, #8
 80006b0:	fa82 f24c 	uadd8	r2, r2, ip
 80006b4:	faa4 f28c 	sel	r2, r4, ip
 80006b8:	fa83 f34c 	uadd8	r3, r3, ip
 80006bc:	faa2 f38c 	sel	r3, r2, ip
 80006c0:	bb4b      	cbnz	r3, 8000716 <strlen+0x96>
 80006c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80006c6:	fa82 f24c 	uadd8	r2, r2, ip
 80006ca:	f100 0008 	add.w	r0, r0, #8
 80006ce:	faa4 f28c 	sel	r2, r4, ip
 80006d2:	fa83 f34c 	uadd8	r3, r3, ip
 80006d6:	faa2 f38c 	sel	r3, r2, ip
 80006da:	b9e3      	cbnz	r3, 8000716 <strlen+0x96>
 80006dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80006e0:	fa82 f24c 	uadd8	r2, r2, ip
 80006e4:	f100 0008 	add.w	r0, r0, #8
 80006e8:	faa4 f28c 	sel	r2, r4, ip
 80006ec:	fa83 f34c 	uadd8	r3, r3, ip
 80006f0:	faa2 f38c 	sel	r3, r2, ip
 80006f4:	b97b      	cbnz	r3, 8000716 <strlen+0x96>
 80006f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80006fa:	f101 0120 	add.w	r1, r1, #32
 80006fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000702:	f100 0008 	add.w	r0, r0, #8
 8000706:	faa4 f28c 	sel	r2, r4, ip
 800070a:	fa83 f34c 	uadd8	r3, r3, ip
 800070e:	faa2 f38c 	sel	r3, r2, ip
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0c6      	beq.n	80006a4 <strlen+0x24>
 8000716:	2a00      	cmp	r2, #0
 8000718:	bf04      	itt	eq
 800071a:	3004      	addeq	r0, #4
 800071c:	461a      	moveq	r2, r3
 800071e:	ba12      	rev	r2, r2
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000728:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800072c:	4770      	bx	lr
 800072e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000732:	f004 0503 	and.w	r5, r4, #3
 8000736:	f1c4 0000 	rsb	r0, r4, #0
 800073a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800073e:	f014 0f04 	tst.w	r4, #4
 8000742:	f891 f040 	pld	[r1, #64]	; 0x40
 8000746:	fa0c f505 	lsl.w	r5, ip, r5
 800074a:	ea62 0205 	orn	r2, r2, r5
 800074e:	bf1c      	itt	ne
 8000750:	ea63 0305 	ornne	r3, r3, r5
 8000754:	4662      	movne	r2, ip
 8000756:	f04f 0400 	mov.w	r4, #0
 800075a:	e7a9      	b.n	80006b0 <strlen+0x30>
 800075c:	0000      	movs	r0, r0
	...

08000760 <memchr>:
 8000760:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000764:	2a10      	cmp	r2, #16
 8000766:	db2b      	blt.n	80007c0 <memchr+0x60>
 8000768:	f010 0f07 	tst.w	r0, #7
 800076c:	d008      	beq.n	8000780 <memchr+0x20>
 800076e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000772:	3a01      	subs	r2, #1
 8000774:	428b      	cmp	r3, r1
 8000776:	d02d      	beq.n	80007d4 <memchr+0x74>
 8000778:	f010 0f07 	tst.w	r0, #7
 800077c:	b342      	cbz	r2, 80007d0 <memchr+0x70>
 800077e:	d1f6      	bne.n	800076e <memchr+0xe>
 8000780:	b4f0      	push	{r4, r5, r6, r7}
 8000782:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000786:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800078a:	f022 0407 	bic.w	r4, r2, #7
 800078e:	f07f 0700 	mvns.w	r7, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000798:	3c08      	subs	r4, #8
 800079a:	ea85 0501 	eor.w	r5, r5, r1
 800079e:	ea86 0601 	eor.w	r6, r6, r1
 80007a2:	fa85 f547 	uadd8	r5, r5, r7
 80007a6:	faa3 f587 	sel	r5, r3, r7
 80007aa:	fa86 f647 	uadd8	r6, r6, r7
 80007ae:	faa5 f687 	sel	r6, r5, r7
 80007b2:	b98e      	cbnz	r6, 80007d8 <memchr+0x78>
 80007b4:	d1ee      	bne.n	8000794 <memchr+0x34>
 80007b6:	bcf0      	pop	{r4, r5, r6, r7}
 80007b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80007bc:	f002 0207 	and.w	r2, r2, #7
 80007c0:	b132      	cbz	r2, 80007d0 <memchr+0x70>
 80007c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80007c6:	3a01      	subs	r2, #1
 80007c8:	ea83 0301 	eor.w	r3, r3, r1
 80007cc:	b113      	cbz	r3, 80007d4 <memchr+0x74>
 80007ce:	d1f8      	bne.n	80007c2 <memchr+0x62>
 80007d0:	2000      	movs	r0, #0
 80007d2:	4770      	bx	lr
 80007d4:	3801      	subs	r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	2d00      	cmp	r5, #0
 80007da:	bf06      	itte	eq
 80007dc:	4635      	moveq	r5, r6
 80007de:	3803      	subeq	r0, #3
 80007e0:	3807      	subne	r0, #7
 80007e2:	f015 0f01 	tst.w	r5, #1
 80007e6:	d107      	bne.n	80007f8 <memchr+0x98>
 80007e8:	3001      	adds	r0, #1
 80007ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80007ee:	bf02      	ittt	eq
 80007f0:	3001      	addeq	r0, #1
 80007f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80007f6:	3001      	addeq	r0, #1
 80007f8:	bcf0      	pop	{r4, r5, r6, r7}
 80007fa:	3801      	subs	r0, #1
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <__aeabi_drsub>:
 8000800:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000804:	e002      	b.n	800080c <__adddf3>
 8000806:	bf00      	nop

08000808 <__aeabi_dsub>:
 8000808:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800080c <__adddf3>:
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000812:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000816:	ea94 0f05 	teq	r4, r5
 800081a:	bf08      	it	eq
 800081c:	ea90 0f02 	teqeq	r0, r2
 8000820:	bf1f      	itttt	ne
 8000822:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000826:	ea55 0c02 	orrsne.w	ip, r5, r2
 800082a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800082e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000832:	f000 80e2 	beq.w	80009fa <__adddf3+0x1ee>
 8000836:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800083a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800083e:	bfb8      	it	lt
 8000840:	426d      	neglt	r5, r5
 8000842:	dd0c      	ble.n	800085e <__adddf3+0x52>
 8000844:	442c      	add	r4, r5
 8000846:	ea80 0202 	eor.w	r2, r0, r2
 800084a:	ea81 0303 	eor.w	r3, r1, r3
 800084e:	ea82 0000 	eor.w	r0, r2, r0
 8000852:	ea83 0101 	eor.w	r1, r3, r1
 8000856:	ea80 0202 	eor.w	r2, r0, r2
 800085a:	ea81 0303 	eor.w	r3, r1, r3
 800085e:	2d36      	cmp	r5, #54	; 0x36
 8000860:	bf88      	it	hi
 8000862:	bd30      	pophi	{r4, r5, pc}
 8000864:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000870:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000874:	d002      	beq.n	800087c <__adddf3+0x70>
 8000876:	4240      	negs	r0, r0
 8000878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800087c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000888:	d002      	beq.n	8000890 <__adddf3+0x84>
 800088a:	4252      	negs	r2, r2
 800088c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000890:	ea94 0f05 	teq	r4, r5
 8000894:	f000 80a7 	beq.w	80009e6 <__adddf3+0x1da>
 8000898:	f1a4 0401 	sub.w	r4, r4, #1
 800089c:	f1d5 0e20 	rsbs	lr, r5, #32
 80008a0:	db0d      	blt.n	80008be <__adddf3+0xb2>
 80008a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008a6:	fa22 f205 	lsr.w	r2, r2, r5
 80008aa:	1880      	adds	r0, r0, r2
 80008ac:	f141 0100 	adc.w	r1, r1, #0
 80008b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80008b4:	1880      	adds	r0, r0, r2
 80008b6:	fa43 f305 	asr.w	r3, r3, r5
 80008ba:	4159      	adcs	r1, r3
 80008bc:	e00e      	b.n	80008dc <__adddf3+0xd0>
 80008be:	f1a5 0520 	sub.w	r5, r5, #32
 80008c2:	f10e 0e20 	add.w	lr, lr, #32
 80008c6:	2a01      	cmp	r2, #1
 80008c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008cc:	bf28      	it	cs
 80008ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008d2:	fa43 f305 	asr.w	r3, r3, r5
 80008d6:	18c0      	adds	r0, r0, r3
 80008d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80008dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008e0:	d507      	bpl.n	80008f2 <__adddf3+0xe6>
 80008e2:	f04f 0e00 	mov.w	lr, #0
 80008e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80008ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80008ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80008f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80008f6:	d31b      	bcc.n	8000930 <__adddf3+0x124>
 80008f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80008fc:	d30c      	bcc.n	8000918 <__adddf3+0x10c>
 80008fe:	0849      	lsrs	r1, r1, #1
 8000900:	ea5f 0030 	movs.w	r0, r0, rrx
 8000904:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000908:	f104 0401 	add.w	r4, r4, #1
 800090c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000910:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000914:	f080 809a 	bcs.w	8000a4c <__adddf3+0x240>
 8000918:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800091c:	bf08      	it	eq
 800091e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	ea41 0105 	orr.w	r1, r1, r5
 800092e:	bd30      	pop	{r4, r5, pc}
 8000930:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000934:	4140      	adcs	r0, r0
 8000936:	eb41 0101 	adc.w	r1, r1, r1
 800093a:	3c01      	subs	r4, #1
 800093c:	bf28      	it	cs
 800093e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000942:	d2e9      	bcs.n	8000918 <__adddf3+0x10c>
 8000944:	f091 0f00 	teq	r1, #0
 8000948:	bf04      	itt	eq
 800094a:	4601      	moveq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	fab1 f381 	clz	r3, r1
 8000952:	bf08      	it	eq
 8000954:	3320      	addeq	r3, #32
 8000956:	f1a3 030b 	sub.w	r3, r3, #11
 800095a:	f1b3 0220 	subs.w	r2, r3, #32
 800095e:	da0c      	bge.n	800097a <__adddf3+0x16e>
 8000960:	320c      	adds	r2, #12
 8000962:	dd08      	ble.n	8000976 <__adddf3+0x16a>
 8000964:	f102 0c14 	add.w	ip, r2, #20
 8000968:	f1c2 020c 	rsb	r2, r2, #12
 800096c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000970:	fa21 f102 	lsr.w	r1, r1, r2
 8000974:	e00c      	b.n	8000990 <__adddf3+0x184>
 8000976:	f102 0214 	add.w	r2, r2, #20
 800097a:	bfd8      	it	le
 800097c:	f1c2 0c20 	rsble	ip, r2, #32
 8000980:	fa01 f102 	lsl.w	r1, r1, r2
 8000984:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000988:	bfdc      	itt	le
 800098a:	ea41 010c 	orrle.w	r1, r1, ip
 800098e:	4090      	lslle	r0, r2
 8000990:	1ae4      	subs	r4, r4, r3
 8000992:	bfa2      	ittt	ge
 8000994:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000998:	4329      	orrge	r1, r5
 800099a:	bd30      	popge	{r4, r5, pc}
 800099c:	ea6f 0404 	mvn.w	r4, r4
 80009a0:	3c1f      	subs	r4, #31
 80009a2:	da1c      	bge.n	80009de <__adddf3+0x1d2>
 80009a4:	340c      	adds	r4, #12
 80009a6:	dc0e      	bgt.n	80009c6 <__adddf3+0x1ba>
 80009a8:	f104 0414 	add.w	r4, r4, #20
 80009ac:	f1c4 0220 	rsb	r2, r4, #32
 80009b0:	fa20 f004 	lsr.w	r0, r0, r4
 80009b4:	fa01 f302 	lsl.w	r3, r1, r2
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	fa21 f304 	lsr.w	r3, r1, r4
 80009c0:	ea45 0103 	orr.w	r1, r5, r3
 80009c4:	bd30      	pop	{r4, r5, pc}
 80009c6:	f1c4 040c 	rsb	r4, r4, #12
 80009ca:	f1c4 0220 	rsb	r2, r4, #32
 80009ce:	fa20 f002 	lsr.w	r0, r0, r2
 80009d2:	fa01 f304 	lsl.w	r3, r1, r4
 80009d6:	ea40 0003 	orr.w	r0, r0, r3
 80009da:	4629      	mov	r1, r5
 80009dc:	bd30      	pop	{r4, r5, pc}
 80009de:	fa21 f004 	lsr.w	r0, r1, r4
 80009e2:	4629      	mov	r1, r5
 80009e4:	bd30      	pop	{r4, r5, pc}
 80009e6:	f094 0f00 	teq	r4, #0
 80009ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80009ee:	bf06      	itte	eq
 80009f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80009f4:	3401      	addeq	r4, #1
 80009f6:	3d01      	subne	r5, #1
 80009f8:	e74e      	b.n	8000898 <__adddf3+0x8c>
 80009fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009fe:	bf18      	it	ne
 8000a00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a04:	d029      	beq.n	8000a5a <__adddf3+0x24e>
 8000a06:	ea94 0f05 	teq	r4, r5
 8000a0a:	bf08      	it	eq
 8000a0c:	ea90 0f02 	teqeq	r0, r2
 8000a10:	d005      	beq.n	8000a1e <__adddf3+0x212>
 8000a12:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a16:	bf04      	itt	eq
 8000a18:	4619      	moveq	r1, r3
 8000a1a:	4610      	moveq	r0, r2
 8000a1c:	bd30      	pop	{r4, r5, pc}
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf1e      	ittt	ne
 8000a24:	2100      	movne	r1, #0
 8000a26:	2000      	movne	r0, #0
 8000a28:	bd30      	popne	{r4, r5, pc}
 8000a2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a2e:	d105      	bne.n	8000a3c <__adddf3+0x230>
 8000a30:	0040      	lsls	r0, r0, #1
 8000a32:	4149      	adcs	r1, r1
 8000a34:	bf28      	it	cs
 8000a36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a3a:	bd30      	pop	{r4, r5, pc}
 8000a3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a40:	bf3c      	itt	cc
 8000a42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a46:	bd30      	popcc	{r4, r5, pc}
 8000a48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a5e:	bf1a      	itte	ne
 8000a60:	4619      	movne	r1, r3
 8000a62:	4610      	movne	r0, r2
 8000a64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a68:	bf1c      	itt	ne
 8000a6a:	460b      	movne	r3, r1
 8000a6c:	4602      	movne	r2, r0
 8000a6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a72:	bf06      	itte	eq
 8000a74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a78:	ea91 0f03 	teqeq	r1, r3
 8000a7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	bf00      	nop

08000a84 <__aeabi_ui2d>:
 8000a84:	f090 0f00 	teq	r0, #0
 8000a88:	bf04      	itt	eq
 8000a8a:	2100      	moveq	r1, #0
 8000a8c:	4770      	bxeq	lr
 8000a8e:	b530      	push	{r4, r5, lr}
 8000a90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a98:	f04f 0500 	mov.w	r5, #0
 8000a9c:	f04f 0100 	mov.w	r1, #0
 8000aa0:	e750      	b.n	8000944 <__adddf3+0x138>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2d>:
 8000aa4:	f090 0f00 	teq	r0, #0
 8000aa8:	bf04      	itt	eq
 8000aaa:	2100      	moveq	r1, #0
 8000aac:	4770      	bxeq	lr
 8000aae:	b530      	push	{r4, r5, lr}
 8000ab0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ab4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ab8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	f04f 0100 	mov.w	r1, #0
 8000ac4:	e73e      	b.n	8000944 <__adddf3+0x138>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_f2d>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000adc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000ae0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000ae4:	4770      	bxne	lr
 8000ae6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000aea:	bf08      	it	eq
 8000aec:	4770      	bxeq	lr
 8000aee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000af2:	bf04      	itt	eq
 8000af4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000af8:	4770      	bxeq	lr
 8000afa:	b530      	push	{r4, r5, lr}
 8000afc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b08:	e71c      	b.n	8000944 <__adddf3+0x138>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_ul2d>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	f04f 0500 	mov.w	r5, #0
 8000b1a:	e00a      	b.n	8000b32 <__aeabi_l2d+0x16>

08000b1c <__aeabi_l2d>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	b530      	push	{r4, r5, lr}
 8000b26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b2a:	d502      	bpl.n	8000b32 <__aeabi_l2d+0x16>
 8000b2c:	4240      	negs	r0, r0
 8000b2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b32:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b36:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b3e:	f43f aed8 	beq.w	80008f2 <__adddf3+0xe6>
 8000b42:	f04f 0203 	mov.w	r2, #3
 8000b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b4a:	bf18      	it	ne
 8000b4c:	3203      	addne	r2, #3
 8000b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b52:	bf18      	it	ne
 8000b54:	3203      	addne	r2, #3
 8000b56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b5a:	f1c2 0320 	rsb	r3, r2, #32
 8000b5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b6a:	ea40 000e 	orr.w	r0, r0, lr
 8000b6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b72:	4414      	add	r4, r2
 8000b74:	e6bd      	b.n	80008f2 <__adddf3+0xe6>
 8000b76:	bf00      	nop

08000b78 <__aeabi_dmul>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b86:	bf1d      	ittte	ne
 8000b88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b8c:	ea94 0f0c 	teqne	r4, ip
 8000b90:	ea95 0f0c 	teqne	r5, ip
 8000b94:	f000 f8de 	bleq	8000d54 <__aeabi_dmul+0x1dc>
 8000b98:	442c      	add	r4, r5
 8000b9a:	ea81 0603 	eor.w	r6, r1, r3
 8000b9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000ba2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000ba6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000baa:	bf18      	it	ne
 8000bac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bb8:	d038      	beq.n	8000c2c <__aeabi_dmul+0xb4>
 8000bba:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bbe:	f04f 0500 	mov.w	r5, #0
 8000bc2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000bc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000bca:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bce:	f04f 0600 	mov.w	r6, #0
 8000bd2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000bd6:	f09c 0f00 	teq	ip, #0
 8000bda:	bf18      	it	ne
 8000bdc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000be0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000be4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000be8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000bec:	d204      	bcs.n	8000bf8 <__aeabi_dmul+0x80>
 8000bee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000bf2:	416d      	adcs	r5, r5
 8000bf4:	eb46 0606 	adc.w	r6, r6, r6
 8000bf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000bfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c10:	bf88      	it	hi
 8000c12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c16:	d81e      	bhi.n	8000c56 <__aeabi_dmul+0xde>
 8000c18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000c1c:	bf08      	it	eq
 8000c1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c22:	f150 0000 	adcs.w	r0, r0, #0
 8000c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000c30:	ea46 0101 	orr.w	r1, r6, r1
 8000c34:	ea40 0002 	orr.w	r0, r0, r2
 8000c38:	ea81 0103 	eor.w	r1, r1, r3
 8000c3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c40:	bfc2      	ittt	gt
 8000c42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c4a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c50:	f04f 0e00 	mov.w	lr, #0
 8000c54:	3c01      	subs	r4, #1
 8000c56:	f300 80ab 	bgt.w	8000db0 <__aeabi_dmul+0x238>
 8000c5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000c5e:	bfde      	ittt	le
 8000c60:	2000      	movle	r0, #0
 8000c62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000c66:	bd70      	pople	{r4, r5, r6, pc}
 8000c68:	f1c4 0400 	rsb	r4, r4, #0
 8000c6c:	3c20      	subs	r4, #32
 8000c6e:	da35      	bge.n	8000cdc <__aeabi_dmul+0x164>
 8000c70:	340c      	adds	r4, #12
 8000c72:	dc1b      	bgt.n	8000cac <__aeabi_dmul+0x134>
 8000c74:	f104 0414 	add.w	r4, r4, #20
 8000c78:	f1c4 0520 	rsb	r5, r4, #32
 8000c7c:	fa00 f305 	lsl.w	r3, r0, r5
 8000c80:	fa20 f004 	lsr.w	r0, r0, r4
 8000c84:	fa01 f205 	lsl.w	r2, r1, r5
 8000c88:	ea40 0002 	orr.w	r0, r0, r2
 8000c8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000c90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000c94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c98:	fa21 f604 	lsr.w	r6, r1, r4
 8000c9c:	eb42 0106 	adc.w	r1, r2, r6
 8000ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	f1c4 040c 	rsb	r4, r4, #12
 8000cb0:	f1c4 0520 	rsb	r5, r4, #32
 8000cb4:	fa00 f304 	lsl.w	r3, r0, r4
 8000cb8:	fa20 f005 	lsr.w	r0, r0, r5
 8000cbc:	fa01 f204 	lsl.w	r2, r1, r4
 8000cc0:	ea40 0002 	orr.w	r0, r0, r2
 8000cc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ccc:	f141 0100 	adc.w	r1, r1, #0
 8000cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f1c4 0520 	rsb	r5, r4, #32
 8000ce0:	fa00 f205 	lsl.w	r2, r0, r5
 8000ce4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ce8:	fa20 f304 	lsr.w	r3, r0, r4
 8000cec:	fa01 f205 	lsl.w	r2, r1, r5
 8000cf0:	ea43 0302 	orr.w	r3, r3, r2
 8000cf4:	fa21 f004 	lsr.w	r0, r1, r4
 8000cf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cfc:	fa21 f204 	lsr.w	r2, r1, r4
 8000d00:	ea20 0002 	bic.w	r0, r0, r2
 8000d04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d0c:	bf08      	it	eq
 8000d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f094 0f00 	teq	r4, #0
 8000d18:	d10f      	bne.n	8000d3a <__aeabi_dmul+0x1c2>
 8000d1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000d1e:	0040      	lsls	r0, r0, #1
 8000d20:	eb41 0101 	adc.w	r1, r1, r1
 8000d24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d28:	bf08      	it	eq
 8000d2a:	3c01      	subeq	r4, #1
 8000d2c:	d0f7      	beq.n	8000d1e <__aeabi_dmul+0x1a6>
 8000d2e:	ea41 0106 	orr.w	r1, r1, r6
 8000d32:	f095 0f00 	teq	r5, #0
 8000d36:	bf18      	it	ne
 8000d38:	4770      	bxne	lr
 8000d3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	eb43 0303 	adc.w	r3, r3, r3
 8000d44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d48:	bf08      	it	eq
 8000d4a:	3d01      	subeq	r5, #1
 8000d4c:	d0f7      	beq.n	8000d3e <__aeabi_dmul+0x1c6>
 8000d4e:	ea43 0306 	orr.w	r3, r3, r6
 8000d52:	4770      	bx	lr
 8000d54:	ea94 0f0c 	teq	r4, ip
 8000d58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d5c:	bf18      	it	ne
 8000d5e:	ea95 0f0c 	teqne	r5, ip
 8000d62:	d00c      	beq.n	8000d7e <__aeabi_dmul+0x206>
 8000d64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d68:	bf18      	it	ne
 8000d6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d6e:	d1d1      	bne.n	8000d14 <__aeabi_dmul+0x19c>
 8000d70:	ea81 0103 	eor.w	r1, r1, r3
 8000d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d78:	f04f 0000 	mov.w	r0, #0
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d82:	bf06      	itte	eq
 8000d84:	4610      	moveq	r0, r2
 8000d86:	4619      	moveq	r1, r3
 8000d88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d8c:	d019      	beq.n	8000dc2 <__aeabi_dmul+0x24a>
 8000d8e:	ea94 0f0c 	teq	r4, ip
 8000d92:	d102      	bne.n	8000d9a <__aeabi_dmul+0x222>
 8000d94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000d98:	d113      	bne.n	8000dc2 <__aeabi_dmul+0x24a>
 8000d9a:	ea95 0f0c 	teq	r5, ip
 8000d9e:	d105      	bne.n	8000dac <__aeabi_dmul+0x234>
 8000da0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000da4:	bf1c      	itt	ne
 8000da6:	4610      	movne	r0, r2
 8000da8:	4619      	movne	r1, r3
 8000daa:	d10a      	bne.n	8000dc2 <__aeabi_dmul+0x24a>
 8000dac:	ea81 0103 	eor.w	r1, r1, r3
 8000db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000db4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000db8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
 8000dc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000dc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000dca:	bd70      	pop	{r4, r5, r6, pc}

08000dcc <__aeabi_ddiv>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000dd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000dda:	bf1d      	ittte	ne
 8000ddc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000de0:	ea94 0f0c 	teqne	r4, ip
 8000de4:	ea95 0f0c 	teqne	r5, ip
 8000de8:	f000 f8a7 	bleq	8000f3a <__aeabi_ddiv+0x16e>
 8000dec:	eba4 0405 	sub.w	r4, r4, r5
 8000df0:	ea81 0e03 	eor.w	lr, r1, r3
 8000df4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000dfc:	f000 8088 	beq.w	8000f10 <__aeabi_ddiv+0x144>
 8000e00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000e08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000e24:	429d      	cmp	r5, r3
 8000e26:	bf08      	it	eq
 8000e28:	4296      	cmpeq	r6, r2
 8000e2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000e2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000e32:	d202      	bcs.n	8000e3a <__aeabi_ddiv+0x6e>
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e3a:	1ab6      	subs	r6, r6, r2
 8000e3c:	eb65 0503 	sbc.w	r5, r5, r3
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000e4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e56:	bf22      	ittt	cs
 8000e58:	1ab6      	subcs	r6, r6, r2
 8000e5a:	4675      	movcs	r5, lr
 8000e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e6e:	bf22      	ittt	cs
 8000e70:	1ab6      	subcs	r6, r6, r2
 8000e72:	4675      	movcs	r5, lr
 8000e74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e86:	bf22      	ittt	cs
 8000e88:	1ab6      	subcs	r6, r6, r2
 8000e8a:	4675      	movcs	r5, lr
 8000e8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e9e:	bf22      	ittt	cs
 8000ea0:	1ab6      	subcs	r6, r6, r2
 8000ea2:	4675      	movcs	r5, lr
 8000ea4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000eac:	d018      	beq.n	8000ee0 <__aeabi_ddiv+0x114>
 8000eae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000eb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000eb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000eba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ebe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ec2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ec6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000eca:	d1c0      	bne.n	8000e4e <__aeabi_ddiv+0x82>
 8000ecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ed0:	d10b      	bne.n	8000eea <__aeabi_ddiv+0x11e>
 8000ed2:	ea41 0100 	orr.w	r1, r1, r0
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000ede:	e7b6      	b.n	8000e4e <__aeabi_ddiv+0x82>
 8000ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ee4:	bf04      	itt	eq
 8000ee6:	4301      	orreq	r1, r0
 8000ee8:	2000      	moveq	r0, #0
 8000eea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000eee:	bf88      	it	hi
 8000ef0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ef4:	f63f aeaf 	bhi.w	8000c56 <__aeabi_dmul+0xde>
 8000ef8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000efc:	bf04      	itt	eq
 8000efe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f06:	f150 0000 	adcs.w	r0, r0, #0
 8000f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000f14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f1c:	bfc2      	ittt	gt
 8000f1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f26:	bd70      	popgt	{r4, r5, r6, pc}
 8000f28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f2c:	f04f 0e00 	mov.w	lr, #0
 8000f30:	3c01      	subs	r4, #1
 8000f32:	e690      	b.n	8000c56 <__aeabi_dmul+0xde>
 8000f34:	ea45 0e06 	orr.w	lr, r5, r6
 8000f38:	e68d      	b.n	8000c56 <__aeabi_dmul+0xde>
 8000f3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f3e:	ea94 0f0c 	teq	r4, ip
 8000f42:	bf08      	it	eq
 8000f44:	ea95 0f0c 	teqeq	r5, ip
 8000f48:	f43f af3b 	beq.w	8000dc2 <__aeabi_dmul+0x24a>
 8000f4c:	ea94 0f0c 	teq	r4, ip
 8000f50:	d10a      	bne.n	8000f68 <__aeabi_ddiv+0x19c>
 8000f52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f56:	f47f af34 	bne.w	8000dc2 <__aeabi_dmul+0x24a>
 8000f5a:	ea95 0f0c 	teq	r5, ip
 8000f5e:	f47f af25 	bne.w	8000dac <__aeabi_dmul+0x234>
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	e72c      	b.n	8000dc2 <__aeabi_dmul+0x24a>
 8000f68:	ea95 0f0c 	teq	r5, ip
 8000f6c:	d106      	bne.n	8000f7c <__aeabi_ddiv+0x1b0>
 8000f6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f72:	f43f aefd 	beq.w	8000d70 <__aeabi_dmul+0x1f8>
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	e722      	b.n	8000dc2 <__aeabi_dmul+0x24a>
 8000f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f80:	bf18      	it	ne
 8000f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000f86:	f47f aec5 	bne.w	8000d14 <__aeabi_dmul+0x19c>
 8000f8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000f8e:	f47f af0d 	bne.w	8000dac <__aeabi_dmul+0x234>
 8000f92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000f96:	f47f aeeb 	bne.w	8000d70 <__aeabi_dmul+0x1f8>
 8000f9a:	e712      	b.n	8000dc2 <__aeabi_dmul+0x24a>

08000f9c <__gedf2>:
 8000f9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fa0:	e006      	b.n	8000fb0 <__cmpdf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__ledf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	e002      	b.n	8000fb0 <__cmpdf2+0x4>
 8000faa:	bf00      	nop

08000fac <__cmpdf2>:
 8000fac:	f04f 0c01 	mov.w	ip, #1
 8000fb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fc0:	bf18      	it	ne
 8000fc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000fc6:	d01b      	beq.n	8001000 <__cmpdf2+0x54>
 8000fc8:	b001      	add	sp, #4
 8000fca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fce:	bf0c      	ite	eq
 8000fd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fd4:	ea91 0f03 	teqne	r1, r3
 8000fd8:	bf02      	ittt	eq
 8000fda:	ea90 0f02 	teqeq	r0, r2
 8000fde:	2000      	moveq	r0, #0
 8000fe0:	4770      	bxeq	lr
 8000fe2:	f110 0f00 	cmn.w	r0, #0
 8000fe6:	ea91 0f03 	teq	r1, r3
 8000fea:	bf58      	it	pl
 8000fec:	4299      	cmppl	r1, r3
 8000fee:	bf08      	it	eq
 8000ff0:	4290      	cmpeq	r0, r2
 8000ff2:	bf2c      	ite	cs
 8000ff4:	17d8      	asrcs	r0, r3, #31
 8000ff6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ffa:	f040 0001 	orr.w	r0, r0, #1
 8000ffe:	4770      	bx	lr
 8001000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001008:	d102      	bne.n	8001010 <__cmpdf2+0x64>
 800100a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800100e:	d107      	bne.n	8001020 <__cmpdf2+0x74>
 8001010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001018:	d1d6      	bne.n	8000fc8 <__cmpdf2+0x1c>
 800101a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800101e:	d0d3      	beq.n	8000fc8 <__cmpdf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cdrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4610      	mov	r0, r2
 800102c:	4662      	mov	r2, ip
 800102e:	468c      	mov	ip, r1
 8001030:	4619      	mov	r1, r3
 8001032:	4663      	mov	r3, ip
 8001034:	e000      	b.n	8001038 <__aeabi_cdcmpeq>
 8001036:	bf00      	nop

08001038 <__aeabi_cdcmpeq>:
 8001038:	b501      	push	{r0, lr}
 800103a:	f7ff ffb7 	bl	8000fac <__cmpdf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	bf48      	it	mi
 8001042:	f110 0f00 	cmnmi.w	r0, #0
 8001046:	bd01      	pop	{r0, pc}

08001048 <__aeabi_dcmpeq>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff fff4 	bl	8001038 <__aeabi_cdcmpeq>
 8001050:	bf0c      	ite	eq
 8001052:	2001      	moveq	r0, #1
 8001054:	2000      	movne	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_dcmplt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffea 	bl	8001038 <__aeabi_cdcmpeq>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_dcmple>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffe0 	bl	8001038 <__aeabi_cdcmpeq>
 8001078:	bf94      	ite	ls
 800107a:	2001      	movls	r0, #1
 800107c:	2000      	movhi	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_dcmpge>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffce 	bl	8001028 <__aeabi_cdrcmple>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_dcmpgt>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffc4 	bl	8001028 <__aeabi_cdrcmple>
 80010a0:	bf34      	ite	cc
 80010a2:	2001      	movcc	r0, #1
 80010a4:	2000      	movcs	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_dcmpun>:
 80010ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010b4:	d102      	bne.n	80010bc <__aeabi_dcmpun+0x10>
 80010b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80010ba:	d10a      	bne.n	80010d2 <__aeabi_dcmpun+0x26>
 80010bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010c4:	d102      	bne.n	80010cc <__aeabi_dcmpun+0x20>
 80010c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80010ca:	d102      	bne.n	80010d2 <__aeabi_dcmpun+0x26>
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0001 	mov.w	r0, #1
 80010d6:	4770      	bx	lr

080010d8 <__aeabi_d2iz>:
 80010d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80010dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010e0:	d215      	bcs.n	800110e <__aeabi_d2iz+0x36>
 80010e2:	d511      	bpl.n	8001108 <__aeabi_d2iz+0x30>
 80010e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010ec:	d912      	bls.n	8001114 <__aeabi_d2iz+0x3c>
 80010ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80010fe:	fa23 f002 	lsr.w	r0, r3, r2
 8001102:	bf18      	it	ne
 8001104:	4240      	negne	r0, r0
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001112:	d105      	bne.n	8001120 <__aeabi_d2iz+0x48>
 8001114:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001118:	bf08      	it	eq
 800111a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800111e:	4770      	bx	lr
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <__aeabi_frsub>:
 8001128:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800112c:	e002      	b.n	8001134 <__addsf3>
 800112e:	bf00      	nop

08001130 <__aeabi_fsub>:
 8001130:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08001134 <__addsf3>:
 8001134:	0042      	lsls	r2, r0, #1
 8001136:	bf1f      	itttt	ne
 8001138:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800113c:	ea92 0f03 	teqne	r2, r3
 8001140:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8001144:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001148:	d06a      	beq.n	8001220 <__addsf3+0xec>
 800114a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800114e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8001152:	bfc1      	itttt	gt
 8001154:	18d2      	addgt	r2, r2, r3
 8001156:	4041      	eorgt	r1, r0
 8001158:	4048      	eorgt	r0, r1
 800115a:	4041      	eorgt	r1, r0
 800115c:	bfb8      	it	lt
 800115e:	425b      	neglt	r3, r3
 8001160:	2b19      	cmp	r3, #25
 8001162:	bf88      	it	hi
 8001164:	4770      	bxhi	lr
 8001166:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800116a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800116e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001172:	bf18      	it	ne
 8001174:	4240      	negne	r0, r0
 8001176:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800117a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800117e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001182:	bf18      	it	ne
 8001184:	4249      	negne	r1, r1
 8001186:	ea92 0f03 	teq	r2, r3
 800118a:	d03f      	beq.n	800120c <__addsf3+0xd8>
 800118c:	f1a2 0201 	sub.w	r2, r2, #1
 8001190:	fa41 fc03 	asr.w	ip, r1, r3
 8001194:	eb10 000c 	adds.w	r0, r0, ip
 8001198:	f1c3 0320 	rsb	r3, r3, #32
 800119c:	fa01 f103 	lsl.w	r1, r1, r3
 80011a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80011a4:	d502      	bpl.n	80011ac <__addsf3+0x78>
 80011a6:	4249      	negs	r1, r1
 80011a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80011ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80011b0:	d313      	bcc.n	80011da <__addsf3+0xa6>
 80011b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011b6:	d306      	bcc.n	80011c6 <__addsf3+0x92>
 80011b8:	0840      	lsrs	r0, r0, #1
 80011ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80011be:	f102 0201 	add.w	r2, r2, #1
 80011c2:	2afe      	cmp	r2, #254	; 0xfe
 80011c4:	d251      	bcs.n	800126a <__addsf3+0x136>
 80011c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80011ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011ce:	bf08      	it	eq
 80011d0:	f020 0001 	biceq.w	r0, r0, #1
 80011d4:	ea40 0003 	orr.w	r0, r0, r3
 80011d8:	4770      	bx	lr
 80011da:	0049      	lsls	r1, r1, #1
 80011dc:	eb40 0000 	adc.w	r0, r0, r0
 80011e0:	3a01      	subs	r2, #1
 80011e2:	bf28      	it	cs
 80011e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80011e8:	d2ed      	bcs.n	80011c6 <__addsf3+0x92>
 80011ea:	fab0 fc80 	clz	ip, r0
 80011ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80011f2:	ebb2 020c 	subs.w	r2, r2, ip
 80011f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80011fa:	bfaa      	itet	ge
 80011fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001200:	4252      	neglt	r2, r2
 8001202:	4318      	orrge	r0, r3
 8001204:	bfbc      	itt	lt
 8001206:	40d0      	lsrlt	r0, r2
 8001208:	4318      	orrlt	r0, r3
 800120a:	4770      	bx	lr
 800120c:	f092 0f00 	teq	r2, #0
 8001210:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8001214:	bf06      	itte	eq
 8001216:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800121a:	3201      	addeq	r2, #1
 800121c:	3b01      	subne	r3, #1
 800121e:	e7b5      	b.n	800118c <__addsf3+0x58>
 8001220:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001224:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001228:	bf18      	it	ne
 800122a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800122e:	d021      	beq.n	8001274 <__addsf3+0x140>
 8001230:	ea92 0f03 	teq	r2, r3
 8001234:	d004      	beq.n	8001240 <__addsf3+0x10c>
 8001236:	f092 0f00 	teq	r2, #0
 800123a:	bf08      	it	eq
 800123c:	4608      	moveq	r0, r1
 800123e:	4770      	bx	lr
 8001240:	ea90 0f01 	teq	r0, r1
 8001244:	bf1c      	itt	ne
 8001246:	2000      	movne	r0, #0
 8001248:	4770      	bxne	lr
 800124a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800124e:	d104      	bne.n	800125a <__addsf3+0x126>
 8001250:	0040      	lsls	r0, r0, #1
 8001252:	bf28      	it	cs
 8001254:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001258:	4770      	bx	lr
 800125a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800125e:	bf3c      	itt	cc
 8001260:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8001264:	4770      	bxcc	lr
 8001266:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800126a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800126e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001272:	4770      	bx	lr
 8001274:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001278:	bf16      	itet	ne
 800127a:	4608      	movne	r0, r1
 800127c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001280:	4601      	movne	r1, r0
 8001282:	0242      	lsls	r2, r0, #9
 8001284:	bf06      	itte	eq
 8001286:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800128a:	ea90 0f01 	teqeq	r0, r1
 800128e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8001292:	4770      	bx	lr

08001294 <__aeabi_ui2f>:
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	e004      	b.n	80012a4 <__aeabi_i2f+0x8>
 800129a:	bf00      	nop

0800129c <__aeabi_i2f>:
 800129c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80012a0:	bf48      	it	mi
 80012a2:	4240      	negmi	r0, r0
 80012a4:	ea5f 0c00 	movs.w	ip, r0
 80012a8:	bf08      	it	eq
 80012aa:	4770      	bxeq	lr
 80012ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80012b0:	4601      	mov	r1, r0
 80012b2:	f04f 0000 	mov.w	r0, #0
 80012b6:	e01c      	b.n	80012f2 <__aeabi_l2f+0x2a>

080012b8 <__aeabi_ul2f>:
 80012b8:	ea50 0201 	orrs.w	r2, r0, r1
 80012bc:	bf08      	it	eq
 80012be:	4770      	bxeq	lr
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e00a      	b.n	80012dc <__aeabi_l2f+0x14>
 80012c6:	bf00      	nop

080012c8 <__aeabi_l2f>:
 80012c8:	ea50 0201 	orrs.w	r2, r0, r1
 80012cc:	bf08      	it	eq
 80012ce:	4770      	bxeq	lr
 80012d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80012d4:	d502      	bpl.n	80012dc <__aeabi_l2f+0x14>
 80012d6:	4240      	negs	r0, r0
 80012d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012dc:	ea5f 0c01 	movs.w	ip, r1
 80012e0:	bf02      	ittt	eq
 80012e2:	4684      	moveq	ip, r0
 80012e4:	4601      	moveq	r1, r0
 80012e6:	2000      	moveq	r0, #0
 80012e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80012ec:	bf08      	it	eq
 80012ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80012f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80012f6:	fabc f28c 	clz	r2, ip
 80012fa:	3a08      	subs	r2, #8
 80012fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001300:	db10      	blt.n	8001324 <__aeabi_l2f+0x5c>
 8001302:	fa01 fc02 	lsl.w	ip, r1, r2
 8001306:	4463      	add	r3, ip
 8001308:	fa00 fc02 	lsl.w	ip, r0, r2
 800130c:	f1c2 0220 	rsb	r2, r2, #32
 8001310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001314:	fa20 f202 	lsr.w	r2, r0, r2
 8001318:	eb43 0002 	adc.w	r0, r3, r2
 800131c:	bf08      	it	eq
 800131e:	f020 0001 	biceq.w	r0, r0, #1
 8001322:	4770      	bx	lr
 8001324:	f102 0220 	add.w	r2, r2, #32
 8001328:	fa01 fc02 	lsl.w	ip, r1, r2
 800132c:	f1c2 0220 	rsb	r2, r2, #32
 8001330:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8001334:	fa21 f202 	lsr.w	r2, r1, r2
 8001338:	eb43 0002 	adc.w	r0, r3, r2
 800133c:	bf08      	it	eq
 800133e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001342:	4770      	bx	lr

08001344 <__aeabi_ldivmod>:
 8001344:	b97b      	cbnz	r3, 8001366 <__aeabi_ldivmod+0x22>
 8001346:	b972      	cbnz	r2, 8001366 <__aeabi_ldivmod+0x22>
 8001348:	2900      	cmp	r1, #0
 800134a:	bfbe      	ittt	lt
 800134c:	2000      	movlt	r0, #0
 800134e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001352:	e006      	blt.n	8001362 <__aeabi_ldivmod+0x1e>
 8001354:	bf08      	it	eq
 8001356:	2800      	cmpeq	r0, #0
 8001358:	bf1c      	itt	ne
 800135a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800135e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001362:	f000 b9db 	b.w	800171c <__aeabi_idiv0>
 8001366:	f1ad 0c08 	sub.w	ip, sp, #8
 800136a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800136e:	2900      	cmp	r1, #0
 8001370:	db09      	blt.n	8001386 <__aeabi_ldivmod+0x42>
 8001372:	2b00      	cmp	r3, #0
 8001374:	db1a      	blt.n	80013ac <__aeabi_ldivmod+0x68>
 8001376:	f000 f86f 	bl	8001458 <__udivmoddi4>
 800137a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800137e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001382:	b004      	add	sp, #16
 8001384:	4770      	bx	lr
 8001386:	4240      	negs	r0, r0
 8001388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	db1b      	blt.n	80013c8 <__aeabi_ldivmod+0x84>
 8001390:	f000 f862 	bl	8001458 <__udivmoddi4>
 8001394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800139c:	b004      	add	sp, #16
 800139e:	4240      	negs	r0, r0
 80013a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80013a4:	4252      	negs	r2, r2
 80013a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80013aa:	4770      	bx	lr
 80013ac:	4252      	negs	r2, r2
 80013ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80013b2:	f000 f851 	bl	8001458 <__udivmoddi4>
 80013b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80013ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013be:	b004      	add	sp, #16
 80013c0:	4240      	negs	r0, r0
 80013c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80013c6:	4770      	bx	lr
 80013c8:	4252      	negs	r2, r2
 80013ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80013ce:	f000 f843 	bl	8001458 <__udivmoddi4>
 80013d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80013d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013da:	b004      	add	sp, #16
 80013dc:	4252      	negs	r2, r2
 80013de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80013e2:	4770      	bx	lr

080013e4 <__aeabi_uldivmod>:
 80013e4:	b953      	cbnz	r3, 80013fc <__aeabi_uldivmod+0x18>
 80013e6:	b94a      	cbnz	r2, 80013fc <__aeabi_uldivmod+0x18>
 80013e8:	2900      	cmp	r1, #0
 80013ea:	bf08      	it	eq
 80013ec:	2800      	cmpeq	r0, #0
 80013ee:	bf1c      	itt	ne
 80013f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80013f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80013f8:	f000 b990 	b.w	800171c <__aeabi_idiv0>
 80013fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8001400:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001404:	f000 f828 	bl	8001458 <__udivmoddi4>
 8001408:	f8dd e004 	ldr.w	lr, [sp, #4]
 800140c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001410:	b004      	add	sp, #16
 8001412:	4770      	bx	lr

08001414 <__clear_cache>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <__aeabi_f2ulz>:
 8001418:	b5d0      	push	{r4, r6, r7, lr}
 800141a:	f7ff fb55 	bl	8000ac8 <__aeabi_f2d>
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__aeabi_f2ulz+0x38>)
 8001420:	2200      	movs	r2, #0
 8001422:	4606      	mov	r6, r0
 8001424:	460f      	mov	r7, r1
 8001426:	f7ff fba7 	bl	8000b78 <__aeabi_dmul>
 800142a:	f000 f979 	bl	8001720 <__aeabi_d2uiz>
 800142e:	4604      	mov	r4, r0
 8001430:	f7ff fb28 	bl	8000a84 <__aeabi_ui2d>
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <__aeabi_f2ulz+0x3c>)
 8001436:	2200      	movs	r2, #0
 8001438:	f7ff fb9e 	bl	8000b78 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4630      	mov	r0, r6
 8001442:	4639      	mov	r1, r7
 8001444:	f7ff f9e0 	bl	8000808 <__aeabi_dsub>
 8001448:	f000 f96a 	bl	8001720 <__aeabi_d2uiz>
 800144c:	4621      	mov	r1, r4
 800144e:	bdd0      	pop	{r4, r6, r7, pc}
 8001450:	3df00000 	.word	0x3df00000
 8001454:	41f00000 	.word	0x41f00000

08001458 <__udivmoddi4>:
 8001458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800145c:	9d08      	ldr	r5, [sp, #32]
 800145e:	4604      	mov	r4, r0
 8001460:	468c      	mov	ip, r1
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 8083 	bne.w	800156e <__udivmoddi4+0x116>
 8001468:	428a      	cmp	r2, r1
 800146a:	4617      	mov	r7, r2
 800146c:	d947      	bls.n	80014fe <__udivmoddi4+0xa6>
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	b142      	cbz	r2, 8001486 <__udivmoddi4+0x2e>
 8001474:	f1c2 0020 	rsb	r0, r2, #32
 8001478:	fa24 f000 	lsr.w	r0, r4, r0
 800147c:	4091      	lsls	r1, r2
 800147e:	4097      	lsls	r7, r2
 8001480:	ea40 0c01 	orr.w	ip, r0, r1
 8001484:	4094      	lsls	r4, r2
 8001486:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800148a:	0c23      	lsrs	r3, r4, #16
 800148c:	fbbc f6f8 	udiv	r6, ip, r8
 8001490:	fa1f fe87 	uxth.w	lr, r7
 8001494:	fb08 c116 	mls	r1, r8, r6, ip
 8001498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800149c:	fb06 f10e 	mul.w	r1, r6, lr
 80014a0:	4299      	cmp	r1, r3
 80014a2:	d909      	bls.n	80014b8 <__udivmoddi4+0x60>
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80014aa:	f080 8119 	bcs.w	80016e0 <__udivmoddi4+0x288>
 80014ae:	4299      	cmp	r1, r3
 80014b0:	f240 8116 	bls.w	80016e0 <__udivmoddi4+0x288>
 80014b4:	3e02      	subs	r6, #2
 80014b6:	443b      	add	r3, r7
 80014b8:	1a5b      	subs	r3, r3, r1
 80014ba:	b2a4      	uxth	r4, r4
 80014bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80014c0:	fb08 3310 	mls	r3, r8, r0, r3
 80014c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80014cc:	45a6      	cmp	lr, r4
 80014ce:	d909      	bls.n	80014e4 <__udivmoddi4+0x8c>
 80014d0:	193c      	adds	r4, r7, r4
 80014d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80014d6:	f080 8105 	bcs.w	80016e4 <__udivmoddi4+0x28c>
 80014da:	45a6      	cmp	lr, r4
 80014dc:	f240 8102 	bls.w	80016e4 <__udivmoddi4+0x28c>
 80014e0:	3802      	subs	r0, #2
 80014e2:	443c      	add	r4, r7
 80014e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80014e8:	eba4 040e 	sub.w	r4, r4, lr
 80014ec:	2600      	movs	r6, #0
 80014ee:	b11d      	cbz	r5, 80014f8 <__udivmoddi4+0xa0>
 80014f0:	40d4      	lsrs	r4, r2
 80014f2:	2300      	movs	r3, #0
 80014f4:	e9c5 4300 	strd	r4, r3, [r5]
 80014f8:	4631      	mov	r1, r6
 80014fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014fe:	b902      	cbnz	r2, 8001502 <__udivmoddi4+0xaa>
 8001500:	deff      	udf	#255	; 0xff
 8001502:	fab2 f282 	clz	r2, r2
 8001506:	2a00      	cmp	r2, #0
 8001508:	d150      	bne.n	80015ac <__udivmoddi4+0x154>
 800150a:	1bcb      	subs	r3, r1, r7
 800150c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001510:	fa1f f887 	uxth.w	r8, r7
 8001514:	2601      	movs	r6, #1
 8001516:	fbb3 fcfe 	udiv	ip, r3, lr
 800151a:	0c21      	lsrs	r1, r4, #16
 800151c:	fb0e 331c 	mls	r3, lr, ip, r3
 8001520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001524:	fb08 f30c 	mul.w	r3, r8, ip
 8001528:	428b      	cmp	r3, r1
 800152a:	d907      	bls.n	800153c <__udivmoddi4+0xe4>
 800152c:	1879      	adds	r1, r7, r1
 800152e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001532:	d202      	bcs.n	800153a <__udivmoddi4+0xe2>
 8001534:	428b      	cmp	r3, r1
 8001536:	f200 80e9 	bhi.w	800170c <__udivmoddi4+0x2b4>
 800153a:	4684      	mov	ip, r0
 800153c:	1ac9      	subs	r1, r1, r3
 800153e:	b2a3      	uxth	r3, r4
 8001540:	fbb1 f0fe 	udiv	r0, r1, lr
 8001544:	fb0e 1110 	mls	r1, lr, r0, r1
 8001548:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800154c:	fb08 f800 	mul.w	r8, r8, r0
 8001550:	45a0      	cmp	r8, r4
 8001552:	d907      	bls.n	8001564 <__udivmoddi4+0x10c>
 8001554:	193c      	adds	r4, r7, r4
 8001556:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800155a:	d202      	bcs.n	8001562 <__udivmoddi4+0x10a>
 800155c:	45a0      	cmp	r8, r4
 800155e:	f200 80d9 	bhi.w	8001714 <__udivmoddi4+0x2bc>
 8001562:	4618      	mov	r0, r3
 8001564:	eba4 0408 	sub.w	r4, r4, r8
 8001568:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800156c:	e7bf      	b.n	80014ee <__udivmoddi4+0x96>
 800156e:	428b      	cmp	r3, r1
 8001570:	d909      	bls.n	8001586 <__udivmoddi4+0x12e>
 8001572:	2d00      	cmp	r5, #0
 8001574:	f000 80b1 	beq.w	80016da <__udivmoddi4+0x282>
 8001578:	2600      	movs	r6, #0
 800157a:	e9c5 0100 	strd	r0, r1, [r5]
 800157e:	4630      	mov	r0, r6
 8001580:	4631      	mov	r1, r6
 8001582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001586:	fab3 f683 	clz	r6, r3
 800158a:	2e00      	cmp	r6, #0
 800158c:	d14a      	bne.n	8001624 <__udivmoddi4+0x1cc>
 800158e:	428b      	cmp	r3, r1
 8001590:	d302      	bcc.n	8001598 <__udivmoddi4+0x140>
 8001592:	4282      	cmp	r2, r0
 8001594:	f200 80b8 	bhi.w	8001708 <__udivmoddi4+0x2b0>
 8001598:	1a84      	subs	r4, r0, r2
 800159a:	eb61 0103 	sbc.w	r1, r1, r3
 800159e:	2001      	movs	r0, #1
 80015a0:	468c      	mov	ip, r1
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	d0a8      	beq.n	80014f8 <__udivmoddi4+0xa0>
 80015a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80015aa:	e7a5      	b.n	80014f8 <__udivmoddi4+0xa0>
 80015ac:	f1c2 0320 	rsb	r3, r2, #32
 80015b0:	fa20 f603 	lsr.w	r6, r0, r3
 80015b4:	4097      	lsls	r7, r2
 80015b6:	fa01 f002 	lsl.w	r0, r1, r2
 80015ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80015be:	40d9      	lsrs	r1, r3
 80015c0:	4330      	orrs	r0, r6
 80015c2:	0c03      	lsrs	r3, r0, #16
 80015c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80015c8:	fa1f f887 	uxth.w	r8, r7
 80015cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80015d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80015d4:	fb06 f108 	mul.w	r1, r6, r8
 80015d8:	4299      	cmp	r1, r3
 80015da:	fa04 f402 	lsl.w	r4, r4, r2
 80015de:	d909      	bls.n	80015f4 <__udivmoddi4+0x19c>
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80015e6:	f080 808d 	bcs.w	8001704 <__udivmoddi4+0x2ac>
 80015ea:	4299      	cmp	r1, r3
 80015ec:	f240 808a 	bls.w	8001704 <__udivmoddi4+0x2ac>
 80015f0:	3e02      	subs	r6, #2
 80015f2:	443b      	add	r3, r7
 80015f4:	1a5b      	subs	r3, r3, r1
 80015f6:	b281      	uxth	r1, r0
 80015f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80015fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8001600:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001604:	fb00 f308 	mul.w	r3, r0, r8
 8001608:	428b      	cmp	r3, r1
 800160a:	d907      	bls.n	800161c <__udivmoddi4+0x1c4>
 800160c:	1879      	adds	r1, r7, r1
 800160e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001612:	d273      	bcs.n	80016fc <__udivmoddi4+0x2a4>
 8001614:	428b      	cmp	r3, r1
 8001616:	d971      	bls.n	80016fc <__udivmoddi4+0x2a4>
 8001618:	3802      	subs	r0, #2
 800161a:	4439      	add	r1, r7
 800161c:	1acb      	subs	r3, r1, r3
 800161e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001622:	e778      	b.n	8001516 <__udivmoddi4+0xbe>
 8001624:	f1c6 0c20 	rsb	ip, r6, #32
 8001628:	fa03 f406 	lsl.w	r4, r3, r6
 800162c:	fa22 f30c 	lsr.w	r3, r2, ip
 8001630:	431c      	orrs	r4, r3
 8001632:	fa20 f70c 	lsr.w	r7, r0, ip
 8001636:	fa01 f306 	lsl.w	r3, r1, r6
 800163a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800163e:	fa21 f10c 	lsr.w	r1, r1, ip
 8001642:	431f      	orrs	r7, r3
 8001644:	0c3b      	lsrs	r3, r7, #16
 8001646:	fbb1 f9fe 	udiv	r9, r1, lr
 800164a:	fa1f f884 	uxth.w	r8, r4
 800164e:	fb0e 1119 	mls	r1, lr, r9, r1
 8001652:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001656:	fb09 fa08 	mul.w	sl, r9, r8
 800165a:	458a      	cmp	sl, r1
 800165c:	fa02 f206 	lsl.w	r2, r2, r6
 8001660:	fa00 f306 	lsl.w	r3, r0, r6
 8001664:	d908      	bls.n	8001678 <__udivmoddi4+0x220>
 8001666:	1861      	adds	r1, r4, r1
 8001668:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800166c:	d248      	bcs.n	8001700 <__udivmoddi4+0x2a8>
 800166e:	458a      	cmp	sl, r1
 8001670:	d946      	bls.n	8001700 <__udivmoddi4+0x2a8>
 8001672:	f1a9 0902 	sub.w	r9, r9, #2
 8001676:	4421      	add	r1, r4
 8001678:	eba1 010a 	sub.w	r1, r1, sl
 800167c:	b2bf      	uxth	r7, r7
 800167e:	fbb1 f0fe 	udiv	r0, r1, lr
 8001682:	fb0e 1110 	mls	r1, lr, r0, r1
 8001686:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800168a:	fb00 f808 	mul.w	r8, r0, r8
 800168e:	45b8      	cmp	r8, r7
 8001690:	d907      	bls.n	80016a2 <__udivmoddi4+0x24a>
 8001692:	19e7      	adds	r7, r4, r7
 8001694:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001698:	d22e      	bcs.n	80016f8 <__udivmoddi4+0x2a0>
 800169a:	45b8      	cmp	r8, r7
 800169c:	d92c      	bls.n	80016f8 <__udivmoddi4+0x2a0>
 800169e:	3802      	subs	r0, #2
 80016a0:	4427      	add	r7, r4
 80016a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80016a6:	eba7 0708 	sub.w	r7, r7, r8
 80016aa:	fba0 8902 	umull	r8, r9, r0, r2
 80016ae:	454f      	cmp	r7, r9
 80016b0:	46c6      	mov	lr, r8
 80016b2:	4649      	mov	r1, r9
 80016b4:	d31a      	bcc.n	80016ec <__udivmoddi4+0x294>
 80016b6:	d017      	beq.n	80016e8 <__udivmoddi4+0x290>
 80016b8:	b15d      	cbz	r5, 80016d2 <__udivmoddi4+0x27a>
 80016ba:	ebb3 020e 	subs.w	r2, r3, lr
 80016be:	eb67 0701 	sbc.w	r7, r7, r1
 80016c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80016c6:	40f2      	lsrs	r2, r6
 80016c8:	ea4c 0202 	orr.w	r2, ip, r2
 80016cc:	40f7      	lsrs	r7, r6
 80016ce:	e9c5 2700 	strd	r2, r7, [r5]
 80016d2:	2600      	movs	r6, #0
 80016d4:	4631      	mov	r1, r6
 80016d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016da:	462e      	mov	r6, r5
 80016dc:	4628      	mov	r0, r5
 80016de:	e70b      	b.n	80014f8 <__udivmoddi4+0xa0>
 80016e0:	4606      	mov	r6, r0
 80016e2:	e6e9      	b.n	80014b8 <__udivmoddi4+0x60>
 80016e4:	4618      	mov	r0, r3
 80016e6:	e6fd      	b.n	80014e4 <__udivmoddi4+0x8c>
 80016e8:	4543      	cmp	r3, r8
 80016ea:	d2e5      	bcs.n	80016b8 <__udivmoddi4+0x260>
 80016ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80016f0:	eb69 0104 	sbc.w	r1, r9, r4
 80016f4:	3801      	subs	r0, #1
 80016f6:	e7df      	b.n	80016b8 <__udivmoddi4+0x260>
 80016f8:	4608      	mov	r0, r1
 80016fa:	e7d2      	b.n	80016a2 <__udivmoddi4+0x24a>
 80016fc:	4660      	mov	r0, ip
 80016fe:	e78d      	b.n	800161c <__udivmoddi4+0x1c4>
 8001700:	4681      	mov	r9, r0
 8001702:	e7b9      	b.n	8001678 <__udivmoddi4+0x220>
 8001704:	4666      	mov	r6, ip
 8001706:	e775      	b.n	80015f4 <__udivmoddi4+0x19c>
 8001708:	4630      	mov	r0, r6
 800170a:	e74a      	b.n	80015a2 <__udivmoddi4+0x14a>
 800170c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001710:	4439      	add	r1, r7
 8001712:	e713      	b.n	800153c <__udivmoddi4+0xe4>
 8001714:	3802      	subs	r0, #2
 8001716:	443c      	add	r4, r7
 8001718:	e724      	b.n	8001564 <__udivmoddi4+0x10c>
 800171a:	bf00      	nop

0800171c <__aeabi_idiv0>:
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop

08001720 <__aeabi_d2uiz>:
 8001720:	004a      	lsls	r2, r1, #1
 8001722:	d211      	bcs.n	8001748 <__aeabi_d2uiz+0x28>
 8001724:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001728:	d211      	bcs.n	800174e <__aeabi_d2uiz+0x2e>
 800172a:	d50d      	bpl.n	8001748 <__aeabi_d2uiz+0x28>
 800172c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001730:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001734:	d40e      	bmi.n	8001754 <__aeabi_d2uiz+0x34>
 8001736:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800173a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800173e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001742:	fa23 f002 	lsr.w	r0, r3, r2
 8001746:	4770      	bx	lr
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	4770      	bx	lr
 800174e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001752:	d102      	bne.n	800175a <__aeabi_d2uiz+0x3a>
 8001754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001758:	4770      	bx	lr
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	4770      	bx	lr

08001760 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800176c:	f006 ff7e 	bl	800866c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001770:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <pvPortMallocMicroROS+0x180>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001778:	f000 f996 	bl	8001aa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <pvPortMallocMicroROS+0x184>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 8092 	bne.w	80018ae <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01f      	beq.n	80017d0 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001790:	2208      	movs	r2, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f023 0307 	bic.w	r3, r3, #7
 80017a8:	3308      	adds	r3, #8
 80017aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ba:	b672      	cpsid	i
 80017bc:	f383 8811 	msr	BASEPRI, r3
 80017c0:	f3bf 8f6f 	isb	sy
 80017c4:	f3bf 8f4f 	dsb	sy
 80017c8:	b662      	cpsie	i
 80017ca:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017cc:	bf00      	nop
 80017ce:	e7fe      	b.n	80017ce <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06b      	beq.n	80018ae <pvPortMallocMicroROS+0x14e>
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <pvPortMallocMicroROS+0x188>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d866      	bhi.n	80018ae <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80017e0:	4b42      	ldr	r3, [pc, #264]	; (80018ec <pvPortMallocMicroROS+0x18c>)
 80017e2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <pvPortMallocMicroROS+0x18c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017ea:	e004      	b.n	80017f6 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d903      	bls.n	8001808 <pvPortMallocMicroROS+0xa8>
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f1      	bne.n	80017ec <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <pvPortMallocMicroROS+0x180>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	429a      	cmp	r2, r3
 8001810:	d04d      	beq.n	80018ae <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2208      	movs	r2, #8
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	1ad2      	subs	r2, r2, r3
 800182c:	2308      	movs	r3, #8
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	429a      	cmp	r2, r3
 8001832:	d921      	bls.n	8001878 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	b672      	cpsid	i
 800184c:	f383 8811 	msr	BASEPRI, r3
 8001850:	f3bf 8f6f 	isb	sy
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	b662      	cpsie	i
 800185a:	613b      	str	r3, [r7, #16]
}
 800185c:	bf00      	nop
 800185e:	e7fe      	b.n	800185e <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001872:	69b8      	ldr	r0, [r7, #24]
 8001874:	f000 f97a 	bl	8001b6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <pvPortMallocMicroROS+0x188>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <pvPortMallocMicroROS+0x188>)
 8001884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <pvPortMallocMicroROS+0x188>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <pvPortMallocMicroROS+0x190>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d203      	bcs.n	800189a <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <pvPortMallocMicroROS+0x188>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <pvPortMallocMicroROS+0x190>)
 8001898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <pvPortMallocMicroROS+0x184>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80018ae:	f006 feeb 	bl	8008688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <pvPortMallocMicroROS+0x176>
	__asm volatile
 80018bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c0:	b672      	cpsid	i
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	b662      	cpsie	i
 80018d0:	60fb      	str	r3, [r7, #12]
}
 80018d2:	bf00      	nop
 80018d4:	e7fe      	b.n	80018d4 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 80018d6:	69fb      	ldr	r3, [r7, #28]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200047dc 	.word	0x200047dc
 80018e4:	200047e8 	.word	0x200047e8
 80018e8:	200047e0 	.word	0x200047e0
 80018ec:	200047d4 	.word	0x200047d4
 80018f0:	200047e4 	.word	0x200047e4

080018f4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04c      	beq.n	80019a0 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001906:	2308      	movs	r3, #8
 8001908:	425b      	negs	r3, r3
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4413      	add	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <vPortFreeMicroROS+0xb4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <vPortFreeMicroROS+0x48>
	__asm volatile
 8001922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001926:	b672      	cpsid	i
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	b662      	cpsie	i
 8001936:	60fb      	str	r3, [r7, #12]
}
 8001938:	bf00      	nop
 800193a:	e7fe      	b.n	800193a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00c      	beq.n	800195e <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001948:	b672      	cpsid	i
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	b662      	cpsie	i
 8001958:	60bb      	str	r3, [r7, #8]
}
 800195a:	bf00      	nop
 800195c:	e7fe      	b.n	800195c <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <vPortFreeMicroROS+0xb4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d019      	beq.n	80019a0 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d115      	bne.n	80019a0 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <vPortFreeMicroROS+0xb4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001984:	f006 fe72 	bl	800866c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <vPortFreeMicroROS+0xb8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <vPortFreeMicroROS+0xb8>)
 8001994:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001996:	6938      	ldr	r0, [r7, #16]
 8001998:	f000 f8e8 	bl	8001b6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800199c:	f006 fe74 	bl	8008688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200047e8 	.word	0x200047e8
 80019ac:	200047e0 	.word	0x200047e0

080019b0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80019bc:	2308      	movs	r3, #8
 80019be:	425b      	negs	r3, r3
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <getBlockSize+0x38>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

	return count;
 80019d8:	68fb      	ldr	r3, [r7, #12]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	200047e8 	.word	0x200047e8

080019ec <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80019f6:	f006 fe39 	bl	800866c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f7ff feb0 	bl	8001760 <pvPortMallocMicroROS>
 8001a00:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a06:	2308      	movs	r3, #8
 8001a08:	425b      	negs	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <pvPortReallocMicroROS+0x70>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4013      	ands	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001a2a:	e007      	b.n	8001a3c <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	1c53      	adds	r3, r2, #1
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1c59      	adds	r1, r3, #1
 8001a36:	61b9      	str	r1, [r7, #24]
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	617a      	str	r2, [r7, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f2      	bne.n	8001a2c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff54 	bl	80018f4 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001a4c:	f006 fe1c 	bl	8008688 <xTaskResumeAll>

	return newmem;
 8001a50:	693b      	ldr	r3, [r7, #16]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200047e8 	.word	0x200047e8

08001a60 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a6a:	f006 fdff 	bl	800866c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001a78:	6978      	ldr	r0, [r7, #20]
 8001a7a:	f7ff fe71 	bl	8001760 <pvPortMallocMicroROS>
 8001a7e:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001a84:	e004      	b.n	8001a90 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	613a      	str	r2, [r7, #16]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	617a      	str	r2, [r7, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f5      	bne.n	8001a86 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001a9a:	f006 fdf5 	bl	8008688 <xTaskResumeAll>
  	return mem;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001aae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ab2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <prvHeapInit+0xac>)
 8001ab6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00c      	beq.n	8001adc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3307      	adds	r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 0307 	bic.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <prvHeapInit+0xac>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <prvHeapInit+0xb0>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <prvHeapInit+0xb0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001af4:	2208      	movs	r2, #8
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <prvHeapInit+0xb4>)
 8001b08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <prvHeapInit+0xb4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <prvHeapInit+0xb4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <prvHeapInit+0xb4>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <prvHeapInit+0xb8>)
 8001b36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <prvHeapInit+0xbc>)
 8001b3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <prvHeapInit+0xc0>)
 8001b42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000bd4 	.word	0x20000bd4
 8001b58:	200047d4 	.word	0x200047d4
 8001b5c:	200047dc 	.word	0x200047dc
 8001b60:	200047e4 	.word	0x200047e4
 8001b64:	200047e0 	.word	0x200047e0
 8001b68:	200047e8 	.word	0x200047e8

08001b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <prvInsertBlockIntoFreeList+0xac>)
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e002      	b.n	8001b80 <prvInsertBlockIntoFreeList+0x14>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d8f7      	bhi.n	8001b7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d108      	bne.n	8001bae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	441a      	add	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	441a      	add	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d118      	bne.n	8001bf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <prvInsertBlockIntoFreeList+0xb0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d00d      	beq.n	8001bea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	441a      	add	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e008      	b.n	8001bfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <prvInsertBlockIntoFreeList+0xb0>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e003      	b.n	8001bfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d002      	beq.n	8001c0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	200047d4 	.word	0x200047d4
 8001c1c:	200047dc 	.word	0x200047dc

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f001 fc11 	bl	800344a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f81c 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f000 f934 	bl	8001e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c30:	f000 f90c 	bl	8001e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001c34:	f000 f8ac 	bl	8001d90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c38:	f000 f8da 	bl	8001df0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c3c:	f005 fb9c 	bl	8007378 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <main+0x38>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <main+0x3c>)
 8001c46:	f005 fc01 	bl	800744c <osThreadNew>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <main+0x40>)
 8001c4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c50:	f005 fbc6 	bl	80073e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <main+0x34>
 8001c56:	bf00      	nop
 8001c58:	0801f764 	.word	0x0801f764
 8001c5c:	08001f59 	.word	0x08001f59
 8001c60:	20009b5c 	.word	0x20009b5c

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0b4      	sub	sp, #208	; 0xd0
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c6e:	2230      	movs	r2, #48	; 0x30
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f013 fe10 	bl	8015898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	2284      	movs	r2, #132	; 0x84
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f013 fe01 	bl	8015898 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c96:	f002 fc15 	bl	80044c4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <SystemClock_Config+0x120>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <SystemClock_Config+0x120>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <SystemClock_Config+0x120>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <SystemClock_Config+0x124>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <SystemClock_Config+0x124>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <SystemClock_Config+0x124>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cf6:	2319      	movs	r3, #25
 8001cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001cfc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d04:	2304      	movs	r3, #4
 8001d06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001d0a:	2309      	movs	r3, #9
 8001d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d10:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fbe5 	bl	80044e4 <HAL_RCC_OscConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d20:	f000 fda8 	bl	8002874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d24:	230f      	movs	r3, #15
 8001d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 fe6e 	bl	8004a2c <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001d56:	f000 fd8d 	bl	8002874 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <SystemClock_Config+0x128>)
 8001d5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f865 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001d78:	f000 fd7c 	bl	8002874 <Error_Handler>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	37d0      	adds	r7, #208	; 0xd0
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	00200100 	.word	0x00200100

08001d90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <MX_USART3_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dd4:	f003 ff02 	bl	8005bdc <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f000 fd49 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20009bc0 	.word	0x20009bc0
 8001dec:	40004800 	.word	0x40004800

08001df0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2206      	movs	r2, #6
 8001e00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e34:	f002 f9fe 	bl	8004234 <HAL_PCD_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f000 fd19 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20009c44 	.word	0x20009c44

08001e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_DMA_Init+0x48>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <MX_DMA_Init+0x48>)
 8001e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <MX_DMA_Init+0x48>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	200c      	movs	r0, #12
 8001e70:	f001 fbf4 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e74:	200c      	movs	r0, #12
 8001e76:	f001 fc0d 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	200e      	movs	r0, #14
 8001e80:	f001 fbec 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e84:	200e      	movs	r0, #14
 8001e86:	f001 fc05 	bl	8003694 <HAL_NVIC_EnableIRQ>

}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_GPIO_Init+0x74>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]

}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <handle_encoders.15472>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  // micro-ROS configuration
	  void handle_encoders(int *enc_r, int *enc_l, double right_wheel_vel, double left_wheel_vel){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6178      	str	r0, [r7, #20]
 8001f18:	6139      	str	r1, [r7, #16]
 8001f1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f1e:	f8c7 c004 	str.w	ip, [r7, #4]
			  *enc_r = (int) right_wheel_vel * 360;
 8001f22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f26:	f7ff f8d7 	bl	80010d8 <__aeabi_d2iz>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001f30:	fb02 f203 	mul.w	r2, r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]
			  *enc_l = (int) left_wheel_vel * 360;
 8001f38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f3c:	f7ff f8cc 	bl	80010d8 <__aeabi_d2iz>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001f46:	fb02 f203 	mul.w	r2, r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	601a      	str	r2, [r3, #0]
	  }
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <StartDefaultTask>:
{
 8001f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f5c:	f2ad 6d64 	subw	sp, sp, #1636	; 0x664
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	6018      	str	r0, [r3, #0]
void StartDefaultTask(void *argument)
 8001f66:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	f503 746a 	add.w	r4, r3, #936	; 0x3a8
 8001f7a:	f107 0508 	add.w	r5, r7, #8
 8001f7e:	4bd6      	ldr	r3, [pc, #856]	; (80022d8 <StartDefaultTask+0x380>)
 8001f80:	4626      	mov	r6, r4
 8001f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f84:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001f88:	60a5      	str	r5, [r4, #8]
 8001f8a:	4bd4      	ldr	r3, [pc, #848]	; (80022dc <StartDefaultTask+0x384>)
 8001f8c:	60e3      	str	r3, [r4, #12]
 8001f8e:	f104 0310 	add.w	r3, r4, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff fa3d 	bl	8001414 <__clear_cache>
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8001fa2:	f107 0508 	add.w	r5, r7, #8
 8001fa6:	4bcc      	ldr	r3, [pc, #816]	; (80022d8 <StartDefaultTask+0x380>)
 8001fa8:	4626      	mov	r6, r4
 8001faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fac:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001fb0:	60a5      	str	r5, [r4, #8]
 8001fb2:	4bcb      	ldr	r3, [pc, #812]	; (80022e0 <StartDefaultTask+0x388>)
 8001fb4:	60e3      	str	r3, [r4, #12]
 8001fb6:	f104 0310 	add.w	r3, r4, #16
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fa29 	bl	8001414 <__clear_cache>

	  rmw_uros_set_custom_transport(
 8001fc2:	4bc8      	ldr	r3, [pc, #800]	; (80022e4 <StartDefaultTask+0x38c>)
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	4bc8      	ldr	r3, [pc, #800]	; (80022e8 <StartDefaultTask+0x390>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4bc8      	ldr	r3, [pc, #800]	; (80022ec <StartDefaultTask+0x394>)
 8001fcc:	4ac8      	ldr	r2, [pc, #800]	; (80022f0 <StartDefaultTask+0x398>)
 8001fce:	49c9      	ldr	r1, [pc, #804]	; (80022f4 <StartDefaultTask+0x39c>)
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f00d febf 	bl	800fd54 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001fd6:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00c faa4 	bl	800e528 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001fe0:	4bc5      	ldr	r3, [pc, #788]	; (80022f8 <StartDefaultTask+0x3a0>)
 8001fe2:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001fe6:	4bc5      	ldr	r3, [pc, #788]	; (80022fc <StartDefaultTask+0x3a4>)
 8001fe8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001fec:	4bc4      	ldr	r3, [pc, #784]	; (8002300 <StartDefaultTask+0x3a8>)
 8001fee:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001ff2:	4bc4      	ldr	r3, [pc, #784]	; (8002304 <StartDefaultTask+0x3ac>)
 8001ff4:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001ff8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00c faa1 	bl	800e544 <rcutils_set_default_allocator>
 8002002:	4603      	mov	r3, r0
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <StartDefaultTask+0xc0>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800200e:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002012:	48bd      	ldr	r0, [pc, #756]	; (8002308 <StartDefaultTask+0x3b0>)
 8002014:	f013 fc9c 	bl	8015950 <printf>

	  geometry_msgs__msg__Twist incoming_cmd_vel;
	  nav_msgs__msg__Odometry outcoming_odom;
	  geometry_msgs__msg__PointStamped outcoming_tf;

	  rcl_allocator_t allocator = rcl_get_default_allocator();
 8002018:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 800201c:	4618      	mov	r0, r3
 800201e:	f00c fab1 	bl	800e584 <rcutils_get_default_allocator>
	  rclc_support_t support;
	  rcl_node_t node;

	  int seq_no = 0;
 8002022:	2200      	movs	r2, #0
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
	  int seq_no_prev = 0;
 800202c:	2200      	movs	r2, #0
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

	  double pos_x = 0.0;
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f107 0108 	add.w	r1, r7, #8
 8002042:	e9c1 23d4 	strd	r2, r3, [r1, #848]	; 0x350
	  double pos_y = 0.0;
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	f107 0108 	add.w	r1, r7, #8
 8002052:	e9c1 23d2 	strd	r2, r3, [r1, #840]	; 0x348
	  double pos_z = 0.0;
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8002062:	e9c1 2300 	strd	r2, r3, [r1]

	  double transform_x = 0.0;
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	f107 0108 	add.w	r1, r7, #8
 8002072:	e9c1 23d8 	strd	r2, r3, [r1, #864]	; 0x360
	  double transform_y = 0.0;
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	f107 0108 	add.w	r1, r7, #8
 8002082:	e9c1 23d6 	strd	r2, r3, [r1, #856]	; 0x358
	  double transform_z = 0.0;
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8002092:	e9c1 2300 	strd	r2, r3, [r1]

	  double transform_phi = 0.0;
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f107 0108 	add.w	r1, r7, #8
 80020a2:	e9c1 23da 	strd	r2, r3, [r1, #872]	; 0x368

	  double or_x = 1.0;
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b98      	ldr	r3, [pc, #608]	; (800230c <StartDefaultTask+0x3b4>)
 80020ac:	f107 0108 	add.w	r1, r7, #8
 80020b0:	e9c1 23ce 	strd	r2, r3, [r1, #824]	; 0x338
	  double or_y = 0.0;
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f107 0108 	add.w	r1, r7, #8
 80020c0:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330
	  double or_z = 0.0;
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 80020d0:	e9c1 2300 	strd	r2, r3, [r1]
	  double or_w = 1.0;
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <StartDefaultTask+0x3b4>)
 80020da:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 80020de:	e9c1 2300 	strd	r2, r3, [r1]

	  double lin_vel_x = 0.0;
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f107 0108 	add.w	r1, r7, #8
 80020ee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	  double lin_vel_y = 0.0;
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f107 0108 	add.w	r1, r7, #8
 80020fe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	  double lin_vel_z = 0.0;
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f107 0108 	add.w	r1, r7, #8
 800210e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	  double ang_vel_x = 0.0;
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f107 0108 	add.w	r1, r7, #8
 800211e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  double ang_vel_y = 0.0;
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f107 0108 	add.w	r1, r7, #8
 800212e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  double ang_vel_z = 0.0;
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	f107 0108 	add.w	r1, r7, #8
 800213e:	e9c1 23d0 	strd	r2, r3, [r1, #832]	; 0x340

	  double left_wheel_vel = 0.0;
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	f107 0108 	add.w	r1, r7, #8
 800214e:	e9c1 2300 	strd	r2, r3, [r1]
	  double right_wheel_vel = 0.0;
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	f107 0108 	add.w	r1, r7, #8
 800215e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  double radius = 0.5;
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <StartDefaultTask+0x3b8>)
 8002168:	f107 0108 	add.w	r1, r7, #8
 800216c:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
	  double width = 1.0;
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	4b65      	ldr	r3, [pc, #404]	; (800230c <StartDefaultTask+0x3b4>)
 8002176:	f107 0108 	add.w	r1, r7, #8
 800217a:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370

	  int enc_l = 0;
 800217e:	2200      	movs	r2, #0
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	  int enc_r = 0;
 8002188:	2200      	movs	r2, #0
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	  	left_wheel_vel = (lin_vel_x - ang_vel_z * width / 2) / radius;

	  	handle_encoders(&enc_r, &enc_l, right_wheel_vel, left_wheel_vel);
	  }

	  rclc_support_init(&support, 0, NULL, &allocator);
 8002192:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8002196:	f507 60b1 	add.w	r0, r7, #1416	; 0x588
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	f009 faa5 	bl	800b6ec <rclc_support_init>
	  rclc_node_init_default(&node, "project_node", "", &support);
 80021a2:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 80021a6:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 80021aa:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <StartDefaultTask+0x3bc>)
 80021ac:	495a      	ldr	r1, [pc, #360]	; (8002318 <StartDefaultTask+0x3c0>)
 80021ae:	f009 fb23 	bl	800b7f8 <rclc_node_init_default>

	  rclc_publisher_init_default(&odom_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry), "/odom");
 80021b2:	f008 fdcf 	bl	800ad54 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	f503 7061 	add.w	r0, r3, #900	; 0x384
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <StartDefaultTask+0x3c4>)
 80021c6:	f009 fbe5 	bl	800b994 <rclc_publisher_init_default>
	  rclc_publisher_init_default(&tf_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, PointStamped), "/tf");
 80021ca:	f007 fec7 	bl	8009f5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__PointStamped>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	f503 7060 	add.w	r0, r3, #896	; 0x380
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <StartDefaultTask+0x3c8>)
 80021de:	f009 fbd9 	bl	800b994 <rclc_publisher_init_default>
	  rclc_subscription_init_default(&cmd_vel_subscriber, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "/cmd_vel");
 80021e2:	f007 febd 	bl	8009f60 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80021ee:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 80021f2:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <StartDefaultTask+0x3cc>)
 80021f4:	f009 fbfe 	bl	800b9f4 <rclc_subscription_init_default>

	  rcl_timer_t timer = rcl_get_zero_initialized_timer();
 80021f8:	f00b f890 	bl	800d31c <rcl_get_zero_initialized_timer>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
	  rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(1000), odom_tf_timer_callback);
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8002212:	f207 507c 	addw	r0, r7, #1404	; 0x57c
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	a32d      	add	r3, pc, #180	; (adr r3, 80022d0 <StartDefaultTask+0x378>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f009 fc19 	bl	800ba54 <rclc_timer_init_default>

	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002222:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8002226:	4618      	mov	r0, r3
 8002228:	f008 ffb2 	bl	800b190 <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 3, &allocator);
 800222c:	f207 52d4 	addw	r2, r7, #1492	; 0x5d4
 8002230:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8002234:	f103 0108 	add.w	r1, r3, #8
 8002238:	f507 609f 	add.w	r0, r7, #1272	; 0x4f8
 800223c:	4613      	mov	r3, r2
 800223e:	2203      	movs	r2, #3
 8002240:	f008 ffb2 	bl	800b1a8 <rclc_executor_init>

	  unsigned int rcl_wait_timeout = 1000;   // in ms
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	  rclc_executor_set_timeout(&executor, RCL_MS_TO_NS(rcl_wait_timeout));
 800224c:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 8002250:	461c      	mov	r4, r3
 8002252:	f04f 0500 	mov.w	r5, #0
 8002256:	4622      	mov	r2, r4
 8002258:	462b      	mov	r3, r5
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	0159      	lsls	r1, r3, #5
 8002264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002268:	0150      	lsls	r0, r2, #5
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	1b12      	subs	r2, r2, r4
 8002270:	eb63 0305 	sbc.w	r3, r3, r5
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	0259      	lsls	r1, r3, #9
 800227e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002282:	0250      	lsls	r0, r2, #9
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	1912      	adds	r2, r2, r4
 800228a:	eb45 0303 	adc.w	r3, r5, r3
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0199      	lsls	r1, r3, #6
 8002298:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800229c:	0190      	lsls	r0, r2, #6
 800229e:	1a80      	subs	r0, r0, r2
 80022a0:	eb61 0103 	sbc.w	r1, r1, r3
 80022a4:	eb10 0804 	adds.w	r8, r0, r4
 80022a8:	eb41 0905 	adc.w	r9, r1, r5
 80022ac:	4642      	mov	r2, r8
 80022ae:	464b      	mov	r3, r9
 80022b0:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80022b4:	4608      	mov	r0, r1
 80022b6:	f008 ffef 	bl	800b298 <rclc_executor_set_timeout>
	  rclc_executor_add_timer(&executor, &timer);
 80022ba:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 80022be:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f009 f83d 	bl	800b344 <rclc_executor_add_timer>
 80022ca:	e02d      	b.n	8002328 <StartDefaultTask+0x3d0>
 80022cc:	f3af 8000 	nop.w
 80022d0:	3b9aca00 	.word	0x3b9aca00
 80022d4:	00000000 	.word	0x00000000
 80022d8:	0801eaa4 	.word	0x0801eaa4
 80022dc:	08002391 	.word	0x08002391
 80022e0:	08002751 	.word	0x08002751
 80022e4:	08003351 	.word	0x08003351
 80022e8:	080032f1 	.word	0x080032f1
 80022ec:	080032d1 	.word	0x080032d1
 80022f0:	080032a5 	.word	0x080032a5
 80022f4:	20009bc0 	.word	0x20009bc0
 80022f8:	08002881 	.word	0x08002881
 80022fc:	080028c5 	.word	0x080028c5
 8002300:	080028fd 	.word	0x080028fd
 8002304:	08002969 	.word	0x08002969
 8002308:	0801eab4 	.word	0x0801eab4
 800230c:	3ff00000 	.word	0x3ff00000
 8002310:	3fe00000 	.word	0x3fe00000
 8002314:	0801eadc 	.word	0x0801eadc
 8002318:	0801eae0 	.word	0x0801eae0
 800231c:	0801eaf0 	.word	0x0801eaf0
 8002320:	0801eaf8 	.word	0x0801eaf8
 8002324:	0801eafc 	.word	0x0801eafc
	  rclc_executor_add_subscription(&executor, &cmd_vel_subscriber, &incoming_cmd_vel, &cmd_vel_subscription_callback, ON_NEW_DATA);
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	461c      	mov	r4, r3
 8002336:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800233a:	f207 611c 	addw	r1, r7, #1564	; 0x61c
 800233e:	f507 609f 	add.w	r0, r7, #1272	; 0x4f8
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4623      	mov	r3, r4
 8002348:	f008 ffb8 	bl	800b2bc <rclc_executor_add_subscription>

	  char outcoming_odom_header_buffer[STRING_BUFFER_LEN];
	  outcoming_odom.header.frame_id.data = outcoming_odom_header_buffer;
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002354:	671a      	str	r2, [r3, #112]	; 0x70
	  outcoming_odom.header.frame_id.capacity = STRING_BUFFER_LEN;
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	2264      	movs	r2, #100	; 0x64
 800235c:	679a      	str	r2, [r3, #120]	; 0x78

	  char outcoming_odom_child_buffer[STRING_BUFFER_LEN];
	  outcoming_odom.child_frame_id.data = outcoming_odom_child_buffer;
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8002366:	67da      	str	r2, [r3, #124]	; 0x7c
	  outcoming_odom.child_frame_id.capacity = STRING_BUFFER_LEN;
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	2264      	movs	r2, #100	; 0x64
 800236e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	  char outcoming_tf_buffer[STRING_BUFFER_LEN];
	  outcoming_tf.header.frame_id.data = outcoming_tf_buffer;
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 800237a:	619a      	str	r2, [r3, #24]
	  outcoming_tf.header.frame_id.capacity = STRING_BUFFER_LEN;
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	621a      	str	r2, [r3, #32]

	  for(;;)
	  {
		  rclc_executor_spin(&executor);
 8002384:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8002388:	4618      	mov	r0, r3
 800238a:	f009 f963 	bl	800b654 <rclc_executor_spin>
 800238e:	e7f9      	b.n	8002384 <StartDefaultTask+0x42c>

08002390 <odom_tf_timer_callback.15511>:
	  {
 8002390:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002394:	b08b      	sub	sp, #44	; 0x2c
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	e9c7 2300 	strd	r2, r3, [r7]
 800239e:	4664      	mov	r4, ip
 80023a0:	f8c7 c008 	str.w	ip, [r7, #8]
	  	if (timer != NULL) {
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 81ca 	beq.w	8002740 <odom_tf_timer_callback.15511+0x3b0>
	  		transform_phi = (enc_r / 360 - enc_l / 360) * radius / width;
 80023ac:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 80023b0:	4aae      	ldr	r2, [pc, #696]	; (800266c <odom_tf_timer_callback.15511+0x2dc>)
 80023b2:	fb82 1203 	smull	r1, r2, r2, r3
 80023b6:	441a      	add	r2, r3
 80023b8:	1212      	asrs	r2, r2, #8
 80023ba:	17db      	asrs	r3, r3, #31
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
 80023c2:	49aa      	ldr	r1, [pc, #680]	; (800266c <odom_tf_timer_callback.15511+0x2dc>)
 80023c4:	fb81 0103 	smull	r0, r1, r1, r3
 80023c8:	4419      	add	r1, r3
 80023ca:	1209      	asrs	r1, r1, #8
 80023cc:	17db      	asrs	r3, r3, #31
 80023ce:	1a5b      	subs	r3, r3, r1
 80023d0:	4413      	add	r3, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fb66 	bl	8000aa4 <__aeabi_i2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	e9d4 01de 	ldrd	r0, r1, [r4, #888]	; 0x378
 80023e0:	f7fe fbca 	bl	8000b78 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	e9d4 23dc 	ldrd	r2, r3, [r4, #880]	; 0x370
 80023f0:	f7fe fcec 	bl	8000dcc <__aeabi_ddiv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9c4 23da 	strd	r2, r3, [r4, #872]	; 0x368
	  		transform_x = (enc_r / 360 + enc_l / 360) / 2 * radius * cos(transform_phi);
 80023fc:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8002400:	4a9a      	ldr	r2, [pc, #616]	; (800266c <odom_tf_timer_callback.15511+0x2dc>)
 8002402:	fb82 1203 	smull	r1, r2, r2, r3
 8002406:	441a      	add	r2, r3
 8002408:	1212      	asrs	r2, r2, #8
 800240a:	17db      	asrs	r3, r3, #31
 800240c:	1ad2      	subs	r2, r2, r3
 800240e:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
 8002412:	4996      	ldr	r1, [pc, #600]	; (800266c <odom_tf_timer_callback.15511+0x2dc>)
 8002414:	fb81 0103 	smull	r0, r1, r1, r3
 8002418:	4419      	add	r1, r3
 800241a:	1209      	asrs	r1, r1, #8
 800241c:	17db      	asrs	r3, r3, #31
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	da00      	bge.n	8002428 <odom_tf_timer_callback.15511+0x98>
 8002426:	3301      	adds	r3, #1
 8002428:	105b      	asrs	r3, r3, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fb3a 	bl	8000aa4 <__aeabi_i2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	e9d4 01de 	ldrd	r0, r1, [r4, #888]	; 0x378
 8002438:	f7fe fb9e 	bl	8000b78 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4690      	mov	r8, r2
 8002442:	4699      	mov	r9, r3
 8002444:	e9d4 23da 	ldrd	r2, r3, [r4, #872]	; 0x368
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f01b f94c 	bl	801d6e8 <cos>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4640      	mov	r0, r8
 8002456:	4649      	mov	r1, r9
 8002458:	f7fe fb8e 	bl	8000b78 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	e9c4 23d8 	strd	r2, r3, [r4, #864]	; 0x360
	  		transform_y = (enc_r / 360 + enc_l / 360) / 2 * radius * sin(transform_phi);
 8002464:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8002468:	4a80      	ldr	r2, [pc, #512]	; (800266c <odom_tf_timer_callback.15511+0x2dc>)
 800246a:	fb82 1203 	smull	r1, r2, r2, r3
 800246e:	441a      	add	r2, r3
 8002470:	1212      	asrs	r2, r2, #8
 8002472:	17db      	asrs	r3, r3, #31
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
 800247a:	497c      	ldr	r1, [pc, #496]	; (800266c <odom_tf_timer_callback.15511+0x2dc>)
 800247c:	fb81 0103 	smull	r0, r1, r1, r3
 8002480:	4419      	add	r1, r3
 8002482:	1209      	asrs	r1, r1, #8
 8002484:	17db      	asrs	r3, r3, #31
 8002486:	1acb      	subs	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	da00      	bge.n	8002490 <odom_tf_timer_callback.15511+0x100>
 800248e:	3301      	adds	r3, #1
 8002490:	105b      	asrs	r3, r3, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fb06 	bl	8000aa4 <__aeabi_i2d>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9d4 01de 	ldrd	r0, r1, [r4, #888]	; 0x378
 80024a0:	f7fe fb6a 	bl	8000b78 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4690      	mov	r8, r2
 80024aa:	4699      	mov	r9, r3
 80024ac:	e9d4 23da 	ldrd	r2, r3, [r4, #872]	; 0x368
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f01b f95e 	bl	801d774 <sin>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4640      	mov	r0, r8
 80024be:	4649      	mov	r1, r9
 80024c0:	f7fe fb5a 	bl	8000b78 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	e9c4 23d6 	strd	r2, r3, [r4, #856]	; 0x358
	  		pos_x += transform_x;
 80024cc:	e9d4 01d4 	ldrd	r0, r1, [r4, #848]	; 0x350
 80024d0:	e9d4 23d8 	ldrd	r2, r3, [r4, #864]	; 0x360
 80024d4:	f7fe f99a 	bl	800080c <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	e9c4 23d4 	strd	r2, r3, [r4, #848]	; 0x350
	  		pos_y += transform_y;
 80024e0:	e9d4 01d2 	ldrd	r0, r1, [r4, #840]	; 0x348
 80024e4:	e9d4 23d6 	ldrd	r2, r3, [r4, #856]	; 0x358
 80024e8:	f7fe f990 	bl	800080c <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c4 23d2 	strd	r2, r3, [r4, #840]	; 0x348
	  		or_x = or_x * cos(ang_vel_z) - or_y * sin(ang_vel_z);
 80024f4:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f01b f8f4 	bl	801d6e8 <cos>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	e9d4 01ce 	ldrd	r0, r1, [r4, #824]	; 0x338
 8002508:	f7fe fb36 	bl	8000b78 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4690      	mov	r8, r2
 8002512:	4699      	mov	r9, r3
 8002514:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f01b f92a 	bl	801d774 <sin>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9d4 01cc 	ldrd	r0, r1, [r4, #816]	; 0x330
 8002528:	f7fe fb26 	bl	8000b78 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4640      	mov	r0, r8
 8002532:	4649      	mov	r1, r9
 8002534:	f7fe f968 	bl	8000808 <__aeabi_dsub>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	e9c4 23ce 	strd	r2, r3, [r4, #824]	; 0x338
	  		or_y = or_x * sin(ang_vel_z) + or_y * cos(ang_vel_z);
 8002540:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f01b f914 	bl	801d774 <sin>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	e9d4 01ce 	ldrd	r0, r1, [r4, #824]	; 0x338
 8002554:	f7fe fb10 	bl	8000b78 <__aeabi_dmul>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4690      	mov	r8, r2
 800255e:	4699      	mov	r9, r3
 8002560:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f01b f8be 	bl	801d6e8 <cos>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	e9d4 01cc 	ldrd	r0, r1, [r4, #816]	; 0x330
 8002574:	f7fe fb00 	bl	8000b78 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4640      	mov	r0, r8
 800257e:	4649      	mov	r1, r9
 8002580:	f7fe f944 	bl	800080c <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	e9c4 23cc 	strd	r2, r3, [r4, #816]	; 0x330
	  		seq_no_prev = seq_no;
 800258c:	f8d4 338c 	ldr.w	r3, [r4, #908]	; 0x38c
 8002590:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
	  		outcoming_odom.child_frame_id.data = sprintf(outcoming_odom.child_frame_id.data, "%d", seq_no_prev);
 8002594:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002596:	f8d4 2388 	ldr.w	r2, [r4, #904]	; 0x388
 800259a:	4935      	ldr	r1, [pc, #212]	; (8002670 <odom_tf_timer_callback.15511+0x2e0>)
 800259c:	4618      	mov	r0, r3
 800259e:	f013 fc5f 	bl	8015e60 <sprintf>
 80025a2:	4603      	mov	r3, r0
 80025a4:	67e3      	str	r3, [r4, #124]	; 0x7c
	  	    outcoming_odom.child_frame_id.size = strlen(outcoming_odom.child_frame_id.data);
 80025a6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe f869 	bl	8000680 <strlen>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	  		seq_no++;
 80025b4:	f8d4 338c 	ldr.w	r3, [r4, #908]	; 0x38c
 80025b8:	3301      	adds	r3, #1
 80025ba:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
	  		outcoming_odom.header.frame_id.data = sprintf(outcoming_odom.header.frame_id.data, "%d", seq_no);
 80025be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80025c0:	f8d4 238c 	ldr.w	r2, [r4, #908]	; 0x38c
 80025c4:	492a      	ldr	r1, [pc, #168]	; (8002670 <odom_tf_timer_callback.15511+0x2e0>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f013 fc4a 	bl	8015e60 <sprintf>
 80025cc:	4603      	mov	r3, r0
 80025ce:	6723      	str	r3, [r4, #112]	; 0x70
	  		outcoming_odom.header.frame_id.size = strlen(outcoming_odom.header.frame_id.data);
 80025d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe f854 	bl	8000680 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	6763      	str	r3, [r4, #116]	; 0x74
	  		clock_gettime(CLOCK_REALTIME, &ts);
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4619      	mov	r1, r3
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 fa38 	bl	8002a58 <clock_gettime>
	  		outcoming_odom.header.stamp.sec = ts.tv_sec;
 80025e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025ec:	4613      	mov	r3, r2
 80025ee:	66a3      	str	r3, [r4, #104]	; 0x68
	  		outcoming_odom.header.stamp.nanosec = ts.tv_nsec;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	66e3      	str	r3, [r4, #108]	; 0x6c
	  		outcoming_odom.twist.twist.linear.x = lin_vel_x;
 80025f4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 80025f8:	e9c4 2378 	strd	r2, r3, [r4, #480]	; 0x1e0
	  		outcoming_odom.twist.twist.linear.y = lin_vel_y;
 80025fc:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 8002600:	e9c4 237a 	strd	r2, r3, [r4, #488]	; 0x1e8
	  		outcoming_odom.twist.twist.linear.z = lin_vel_z;
 8002604:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002608:	e9c4 237c 	strd	r2, r3, [r4, #496]	; 0x1f0
	  		outcoming_odom.twist.twist.angular.x = ang_vel_x;
 800260c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8002610:	e9c4 237e 	strd	r2, r3, [r4, #504]	; 0x1f8
	  		outcoming_odom.twist.twist.angular.y = ang_vel_y;
 8002614:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8002618:	e9c4 2380 	strd	r2, r3, [r4, #512]	; 0x200
	  		outcoming_odom.twist.twist.angular.z = ang_vel_z;
 800261c:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 8002620:	e9c4 2382 	strd	r2, r3, [r4, #520]	; 0x208
	  		outcoming_odom.pose.pose.orientation.x = or_x;
 8002624:	e9d4 23ce 	ldrd	r2, r3, [r4, #824]	; 0x338
 8002628:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
	  		outcoming_odom.pose.pose.orientation.y = or_y;
 800262c:	e9d4 23cc 	ldrd	r2, r3, [r4, #816]	; 0x330
 8002630:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
		  	outcoming_odom.pose.pose.orientation.z = 0.0;
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
		  	outcoming_odom.pose.pose.orientation.w = 1.0;
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <odom_tf_timer_callback.15511+0x2e4>)
 8002646:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
	  		outcoming_odom.pose.pose.position.x = pos_x;
 800264a:	e9d4 23d4 	ldrd	r2, r3, [r4, #848]	; 0x350
 800264e:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
	  		outcoming_odom.pose.pose.position.y = pos_y;
 8002652:	e9d4 23d2 	ldrd	r2, r3, [r4, #840]	; 0x348
 8002656:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
	  	    outcoming_odom.pose.pose.position.z = 0.0;
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
	  		for (int i =0; i<36; ++i) {
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e01c      	b.n	80026a6 <odom_tf_timer_callback.15511+0x316>
 800266c:	b60b60b7 	.word	0xb60b60b7
 8002670:	0801eb08 	.word	0x0801eb08
 8002674:	3ff00000 	.word	0x3ff00000
	  			outcoming_odom.pose.covariance[i] = 0;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3318      	adds	r3, #24
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	18e1      	adds	r1, r4, r3
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9c1 2300 	strd	r2, r3, [r1]
	  			outcoming_odom.twist.covariance[i] = 0;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3342      	adds	r3, #66	; 0x42
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	18e1      	adds	r1, r4, r3
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9c1 2300 	strd	r2, r3, [r1]
	  		for (int i =0; i<36; ++i) {
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3301      	adds	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	2b23      	cmp	r3, #35	; 0x23
 80026aa:	dde5      	ble.n	8002678 <odom_tf_timer_callback.15511+0x2e8>
	  		outcoming_tf.header.frame_id.data = sprintf(outcoming_odom.header.frame_id.data, "%d", seq_no);
 80026ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80026ae:	f8d4 238c 	ldr.w	r2, [r4, #908]	; 0x38c
 80026b2:	4926      	ldr	r1, [pc, #152]	; (800274c <odom_tf_timer_callback.15511+0x3bc>)
 80026b4:	4618      	mov	r0, r3
 80026b6:	f013 fbd3 	bl	8015e60 <sprintf>
 80026ba:	4603      	mov	r3, r0
 80026bc:	61a3      	str	r3, [r4, #24]
	  	    outcoming_tf.header.frame_id.size = strlen(outcoming_odom.header.frame_id.data);
 80026be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ffdd 	bl	8000680 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	61e3      	str	r3, [r4, #28]
	  	    outcoming_tf.header.stamp.sec = ts.tv_sec;
 80026ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026ce:	4613      	mov	r3, r2
 80026d0:	6123      	str	r3, [r4, #16]
	  	  	outcoming_tf.header.stamp.nanosec = ts.tv_nsec;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	6163      	str	r3, [r4, #20]
	  	    outcoming_tf.point.x = transform_x;
 80026d6:	e9d4 23d8 	ldrd	r2, r3, [r4, #864]	; 0x360
 80026da:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	  	    outcoming_tf.point.y = transform_y;
 80026de:	e9d4 23d6 	ldrd	r2, r3, [r4, #856]	; 0x358
 80026e2:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	  	    outcoming_tf.point.z = 0.0;
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	  		enc_l = enc_r = lin_vel_x = ang_vel_z = 0.0;
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9c4 23d0 	strd	r2, r3, [r4, #832]	; 0x340
 80026fe:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 8002702:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
 8002706:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f7fe fce3 	bl	80010d8 <__aeabi_d2iz>
 8002712:	4603      	mov	r3, r0
 8002714:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
 8002718:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 800271c:	f8c4 3390 	str.w	r3, [r4, #912]	; 0x390
	  		rcl_publish(&odom_publisher, (const void*)&outcoming_odom, NULL);
 8002720:	f504 7361 	add.w	r3, r4, #900	; 0x384
 8002724:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8002728:	2200      	movs	r2, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f00a f8e2 	bl	800c8f4 <rcl_publish>
	  		rcl_publish(&tf_publisher, (const void*)&outcoming_tf, NULL);
 8002730:	f504 7360 	add.w	r3, r4, #896	; 0x380
 8002734:	f104 0110 	add.w	r1, r4, #16
 8002738:	2200      	movs	r2, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f00a f8da 	bl	800c8f4 <rcl_publish>
	  }
 8002740:	bf00      	nop
 8002742:	372c      	adds	r7, #44	; 0x2c
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800274a:	bf00      	nop
 800274c:	0801eb08 	.word	0x0801eb08

08002750 <cmd_vel_subscription_callback.15521>:
	  {
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b087      	sub	sp, #28
 8002754:	af02      	add	r7, sp, #8
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	4664      	mov	r4, ip
 800275a:	f8c7 c000 	str.w	ip, [r7]
	  	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]
	  	lin_vel_x = msg->linear.x;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
	  	lin_vel_y = msg->linear.y;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002772:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
	  	lin_vel_z = msg->linear.z;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800277c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	  	ang_vel_x = msg->angular.x;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002786:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
	  	ang_vel_y = msg->angular.y;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002790:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	  	ang_vel_z = msg->angular.z;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800279a:	e9c4 23d0 	strd	r2, r3, [r4, #832]	; 0x340
	  	right_wheel_vel = (lin_vel_x + ang_vel_z * width / 2) / radius;
 800279e:	e9d4 01d0 	ldrd	r0, r1, [r4, #832]	; 0x340
 80027a2:	e9d4 23dc 	ldrd	r2, r3, [r4, #880]	; 0x370
 80027a6:	f7fe f9e7 	bl	8000b78 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ba:	f7fe fb07 	bl	8000dcc <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 80027c6:	f7fe f821 	bl	800080c <__adddf3>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	e9d4 23de 	ldrd	r2, r3, [r4, #888]	; 0x378
 80027d6:	f7fe faf9 	bl	8000dcc <__aeabi_ddiv>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	e9c4 2302 	strd	r2, r3, [r4, #8]
	  	left_wheel_vel = (lin_vel_x - ang_vel_z * width / 2) / radius;
 80027e2:	e9d4 01d0 	ldrd	r0, r1, [r4, #832]	; 0x340
 80027e6:	e9d4 23dc 	ldrd	r2, r3, [r4, #880]	; 0x370
 80027ea:	f7fe f9c5 	bl	8000b78 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027fe:	f7fe fae5 	bl	8000dcc <__aeabi_ddiv>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 800280a:	f7fd fffd 	bl	8000808 <__aeabi_dsub>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	e9d4 23de 	ldrd	r2, r3, [r4, #888]	; 0x378
 800281a:	f7fe fad7 	bl	8000dcc <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	e9c4 2300 	strd	r2, r3, [r4]
	  	handle_encoders(&enc_r, &enc_l, right_wheel_vel, left_wheel_vel);
 8002826:	f504 7565 	add.w	r5, r4, #916	; 0x394
 800282a:	f504 7664 	add.w	r6, r4, #912	; 0x390
 800282e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002832:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002836:	e9cd 2300 	strd	r2, r3, [sp]
 800283a:	46a4      	mov	ip, r4
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4631      	mov	r1, r6
 8002842:	4628      	mov	r0, r5
 8002844:	f7ff fb64 	bl	8001f10 <handle_encoders.15472>
	  }
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002862:	f000 fdff 	bl	8003464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40010000 	.word	0x40010000

08002874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287c:	e7fe      	b.n	800287c <Error_Handler+0x8>
	...

08002880 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <microros_allocate+0x3c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <microros_allocate+0x3c>)
 8002898:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <microros_allocate+0x40>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <microros_allocate+0x40>)
 80028a8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe ff58 	bl	8001760 <pvPortMallocMicroROS>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200047ec 	.word	0x200047ec
 80028c0:	200047f0 	.word	0x200047f0

080028c4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff f86b 	bl	80019b0 <getBlockSize>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <microros_deallocate+0x34>)
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <microros_deallocate+0x34>)
 80028e6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff f803 	bl	80018f4 <vPortFreeMicroROS>
  }
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200047f0 	.word	0x200047f0

080028fc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <microros_reallocate+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4413      	add	r3, r2
 8002912:	461a      	mov	r2, r3
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <microros_reallocate+0x64>)
 8002916:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <microros_reallocate+0x68>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	461a      	mov	r2, r3
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <microros_reallocate+0x68>)
 8002926:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800292e:	68b8      	ldr	r0, [r7, #8]
 8002930:	f7fe ff16 	bl	8001760 <pvPortMallocMicroROS>
 8002934:	4603      	mov	r3, r0
 8002936:	e00e      	b.n	8002956 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff f839 	bl	80019b0 <getBlockSize>
 800293e:	4603      	mov	r3, r0
 8002940:	4a08      	ldr	r2, [pc, #32]	; (8002964 <microros_reallocate+0x68>)
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	461a      	mov	r2, r3
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <microros_reallocate+0x68>)
 800294a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff f84c 	bl	80019ec <pvPortReallocMicroROS>
 8002954:	4603      	mov	r3, r0
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200047ec 	.word	0x200047ec
 8002964:	200047f0 	.word	0x200047f0

08002968 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <microros_zero_allocate+0x48>)
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4413      	add	r3, r2
 8002982:	461a      	mov	r2, r3
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <microros_zero_allocate+0x48>)
 8002986:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <microros_zero_allocate+0x4c>)
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4413      	add	r3, r2
 8002996:	461a      	mov	r2, r3
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <microros_zero_allocate+0x4c>)
 800299a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff f85e 	bl	8001a60 <pvPortCallocMicroROS>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200047ec 	.word	0x200047ec
 80029b4:	200047f0 	.word	0x200047f0

080029b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80029c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029cc:	a320      	add	r3, pc, #128	; (adr r3, 8002a50 <UTILS_NanosecondsToTimespec+0x98>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fe fcb7 	bl	8001344 <__aeabi_ldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80029e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e4:	a31a      	add	r3, pc, #104	; (adr r3, 8002a50 <UTILS_NanosecondsToTimespec+0x98>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fe fcab 	bl	8001344 <__aeabi_ldivmod>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da1f      	bge.n	8002a3a <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <UTILS_NanosecondsToTimespec+0x90>)
 8002a00:	fb82 1203 	smull	r1, r2, r2, r3
 8002a04:	1712      	asrs	r2, r2, #28
 8002a06:	17db      	asrs	r3, r3, #31
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	461a      	mov	r2, r3
 8002a18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a1c:	1a84      	subs	r4, r0, r2
 8002a1e:	eb61 0503 	sbc.w	r5, r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	4907      	ldr	r1, [pc, #28]	; (8002a4c <UTILS_NanosecondsToTimespec+0x94>)
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	441a      	add	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]
    }
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bdb0      	pop	{r4, r5, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	44b82fa1 	.word	0x44b82fa1
 8002a4c:	3b9aca00 	.word	0x3b9aca00
 8002a50:	3b9aca00 	.word	0x3b9aca00
 8002a54:	00000000 	.word	0x00000000

08002a58 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 f888 	bl	8008b94 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	0003      	movs	r3, r0
 8002a96:	2200      	movs	r2, #0
 8002a98:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aa8:	1884      	adds	r4, r0, r2
 8002aaa:	eb41 0503 	adc.w	r5, r1, r3
 8002aae:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002ab2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	462b      	mov	r3, r5
 8002aba:	f04f 0000 	mov.w	r0, #0
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	0159      	lsls	r1, r3, #5
 8002ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac8:	0150      	lsls	r0, r2, #5
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	1b12      	subs	r2, r2, r4
 8002ad0:	eb63 0305 	sbc.w	r3, r3, r5
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	0259      	lsls	r1, r3, #9
 8002ade:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ae2:	0250      	lsls	r0, r2, #9
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	1912      	adds	r2, r2, r4
 8002aea:	eb45 0303 	adc.w	r3, r5, r3
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	0199      	lsls	r1, r3, #6
 8002af8:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002afc:	0190      	lsls	r0, r2, #6
 8002afe:	1a80      	subs	r0, r0, r2
 8002b00:	eb61 0103 	sbc.w	r1, r1, r3
 8002b04:	eb10 0804 	adds.w	r8, r0, r4
 8002b08:	eb41 0905 	adc.w	r9, r1, r5
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	4640      	mov	r0, r8
 8002b10:	4649      	mov	r1, r9
 8002b12:	f7ff ff51 	bl	80029b8 <UTILS_NanosecondsToTimespec>

    return 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002b24 <__libatomic_flag_for_address>:

/* Return a pointer to a boolean test_and_set flag for ADDR.  */

static bool *
__libatomic_flag_for_address (void *addr)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  static bool flag_table[__LIBATOMIC_N_LOCKS]
		      = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  uintptr_t p = (uintptr_t)addr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]

  p += (p >> 2) + (p << 4);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	089a      	lsrs	r2, r3, #2
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  p += (p >> 7) + (p << 5);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	09da      	lsrs	r2, r3, #7
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	4413      	add	r3, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  p += (p >> 17) + (p << 13);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0c5a      	lsrs	r2, r3, #17
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	035b      	lsls	r3, r3, #13
 8002b58:	4413      	add	r3, r2
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  if (sizeof(void *) > 4)
    p += (p >> 31);
  p &= (__LIBATOMIC_N_LOCKS - 1);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	60fb      	str	r3, [r7, #12]
  return flag_table + p;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__libatomic_flag_for_address+0x58>)
 8002b6c:	4413      	add	r3, r2
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200047f4 	.word	0x200047f4

08002b80 <maybe_release_fence>:
/* If the specified memory MODEL can act as a release fence, issue the
   appropriate barrier.  Specify it such that it is a compile time constant.  */

static inline void
maybe_release_fence (int model)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  switch (model)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d00f      	beq.n	8002bae <maybe_release_fence+0x2e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	dc0f      	bgt.n	8002bb4 <maybe_release_fence+0x34>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d003      	beq.n	8002ba2 <maybe_release_fence+0x22>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d003      	beq.n	8002ba8 <maybe_release_fence+0x28>
      break;
    case __ATOMIC_SEQ_CST:
      __atomic_thread_fence (__ATOMIC_SEQ_CST);
      break;
    default:
      break;
 8002ba0:	e008      	b.n	8002bb4 <maybe_release_fence+0x34>
      __atomic_thread_fence (__ATOMIC_RELEASE);
 8002ba2:	f3bf 8f5b 	dmb	ish
      break;
 8002ba6:	e006      	b.n	8002bb6 <maybe_release_fence+0x36>
      __atomic_thread_fence (__ATOMIC_ACQ_REL);
 8002ba8:	f3bf 8f5b 	dmb	ish
      break;
 8002bac:	e003      	b.n	8002bb6 <maybe_release_fence+0x36>
      __atomic_thread_fence (__ATOMIC_SEQ_CST);
 8002bae:	f3bf 8f5b 	dmb	ish
      break;
 8002bb2:	e000      	b.n	8002bb6 <maybe_release_fence+0x36>
      break;
 8002bb4:	bf00      	nop
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <maybe_acquire_fence>:
/* If the specified memory MODEL can act as an acquire fence, issue the
   appropriate barrier.  Specify it such that it is a compile time constant.  */

static inline void
maybe_acquire_fence (int model)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  switch (model)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d00f      	beq.n	8002bf0 <maybe_acquire_fence+0x2e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	dc0f      	bgt.n	8002bf6 <maybe_acquire_fence+0x34>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d003      	beq.n	8002be4 <maybe_acquire_fence+0x22>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <maybe_acquire_fence+0x28>
      break;
    case __ATOMIC_SEQ_CST:
      __atomic_thread_fence (__ATOMIC_SEQ_CST);
      break;
    default:
      break;
 8002be2:	e008      	b.n	8002bf6 <maybe_acquire_fence+0x34>
      __atomic_thread_fence (__ATOMIC_ACQUIRE);
 8002be4:	f3bf 8f5b 	dmb	ish
      break;
 8002be8:	e006      	b.n	8002bf8 <maybe_acquire_fence+0x36>
      __atomic_thread_fence (__ATOMIC_ACQ_REL);
 8002bea:	f3bf 8f5b 	dmb	ish
      break;
 8002bee:	e003      	b.n	8002bf8 <maybe_acquire_fence+0x36>
      __atomic_thread_fence (__ATOMIC_SEQ_CST);
 8002bf0:	f3bf 8f5b 	dmb	ish
      break;
 8002bf4:	e000      	b.n	8002bf8 <maybe_acquire_fence+0x36>
      break;
 8002bf6:	bf00      	nop
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <get_lock>:
/* Acquire the spin lock for ADDR, and issue any barrier which might be
   required.  */

static inline void
get_lock (void *addr, int model)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  bool *lock_ptr = __libatomic_flag_for_address (addr);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff88 	bl	8002b24 <__libatomic_flag_for_address>
 8002c14:	60f8      	str	r0, [r7, #12]

  maybe_release_fence (model);
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	f7ff ffb2 	bl	8002b80 <maybe_release_fence>
  while (__atomic_test_and_set (lock_ptr, __ATOMIC_ACQUIRE) == 1)
 8002c1c:	bf00      	nop
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4611      	mov	r1, r2
 8002c24:	e8d3 2f4f 	ldrexb	r2, [r3]
 8002c28:	e8c3 1f40 	strexb	r0, r1, [r3]
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d1f9      	bne.n	8002c24 <get_lock+0x20>
 8002c30:	f3bf 8f5b 	dmb	ish
 8002c34:	b2d3      	uxtb	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f1      	bne.n	8002c1e <get_lock+0x1a>
    ;
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <free_lock>:
/* Release the spin lock for ADDR, and issue any barrier which might be
   required.  */

static inline void
free_lock (void *addr, int model)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  bool *lock_ptr = __libatomic_flag_for_address (addr);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ff68 	bl	8002b24 <__libatomic_flag_for_address>
 8002c54:	60f8      	str	r0, [r7, #12]

  __atomic_clear (lock_ptr, __ATOMIC_RELEASE);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f3bf 8f5b 	dmb	ish
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
  maybe_acquire_fence (model);
 8002c60:	6838      	ldr	r0, [r7, #0]
 8002c62:	f7ff ffae 	bl	8002bc2 <maybe_acquire_fence>
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <__atomic_load_8>:
ATOMIC_FETCH_NAND (4)
#endif


#if __LIBATOMIC_SUPPORTS_I8
ATOMIC_LOAD (8)
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffc2 	bl	8002c04 <get_lock>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ffd9 	bl	8002c44 <free_lock>
 8002c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <__atomic_store_8>:
ATOMIC_STORE (8)
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	e9c7 2300 	strd	r2, r3, [r7]
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ffa8 	bl	8002c04 <get_lock>
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cba:	e9c1 2300 	strd	r2, r3, [r1]
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff ffbf 	bl	8002c44 <free_lock>
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <__atomic_exchange_8>:
ATOMIC_EXCHANGE (8)
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	e9c7 2300 	strd	r2, r3, [r7]
 8002cda:	6a39      	ldr	r1, [r7, #32]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff ff91 	bl	8002c04 <get_lock>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf2:	e9c1 2300 	strd	r2, r3, [r1]
 8002cf6:	6a39      	ldr	r1, [r7, #32]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff ffa3 	bl	8002c44 <free_lock>
 8002cfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <__atomic_fetch_add_8>:
ATOMIC_COMPARE_EXCHANGE (8)
ATOMIC_FETCH (8, add_, +)
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	e9c7 2300 	strd	r2, r3, [r7]
 8002d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ff72 	bl	8002c04 <get_lock>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d34:	1884      	adds	r4, r0, r2
 8002d36:	eb41 0503 	adc.w	r5, r1, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	e9c3 4500 	strd	r4, r5, [r3]
 8002d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff7e 	bl	8002c44 <free_lock>
 8002d48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_MspInit+0x4c>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_MspInit+0x4c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_MspInit+0x4c>)
 8002d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_MspInit+0x4c>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	210f      	movs	r1, #15
 8002d92:	f06f 0001 	mvn.w	r0, #1
 8002d96:	f000 fc61 	bl	800365c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	; (8002ef4 <HAL_UART_MspInit+0x14c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	f040 8090 	bne.w	8002eec <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_UART_MspInit+0x150>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_UART_MspInit+0x150>)
 8002dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_UART_MspInit+0x150>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de4:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <HAL_UART_MspInit+0x150>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <HAL_UART_MspInit+0x150>)
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_UART_MspInit+0x150>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e0e:	2307      	movs	r3, #7
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	4619      	mov	r1, r3
 8002e18:	4838      	ldr	r0, [pc, #224]	; (8002efc <HAL_UART_MspInit+0x154>)
 8002e1a:	f001 f85f 	bl	8003edc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e20:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_UART_MspInit+0x15c>)
 8002e22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e46:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e52:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e5a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e62:	4827      	ldr	r0, [pc, #156]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e64:	f000 fc24 	bl	80036b0 <HAL_DMA_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002e6e:	f7ff fd01 	bl	8002874 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e76:	671a      	str	r2, [r3, #112]	; 0x70
 8002e78:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <HAL_UART_MspInit+0x158>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002e80:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_UART_MspInit+0x164>)
 8002e82:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e9e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002eb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002eb8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ec0:	4811      	ldr	r0, [pc, #68]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002ec2:	f000 fbf5 	bl	80036b0 <HAL_DMA_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002ecc:	f7ff fcd2 	bl	8002874 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002ed4:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_UART_MspInit+0x160>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2105      	movs	r1, #5
 8002ee0:	2027      	movs	r0, #39	; 0x27
 8002ee2:	f000 fbbb 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ee6:	2027      	movs	r0, #39	; 0x27
 8002ee8:	f000 fbd4 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	; 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40004800 	.word	0x40004800
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	20009b60 	.word	0x20009b60
 8002f04:	40026028 	.word	0x40026028
 8002f08:	2000a048 	.word	0x2000a048
 8002f0c:	40026058 	.word	0x40026058

08002f10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f30:	d141      	bne.n	8002fb6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002f4a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	4817      	ldr	r0, [pc, #92]	; (8002fc4 <HAL_PCD_MspInit+0xb4>)
 8002f68:	f000 ffb8 	bl	8003edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4810      	ldr	r0, [pc, #64]	; (8002fc4 <HAL_PCD_MspInit+0xb4>)
 8002f82:	f000 ffab 	bl	8003edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f90:	6353      	str	r3, [r2, #52]	; 0x34
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_PCD_MspInit+0xb0>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002fb6:	bf00      	nop
 8002fb8:	3728      	adds	r7, #40	; 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	2019      	movs	r0, #25
 8002fde:	f000 fb3d 	bl	800365c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fe2:	2019      	movs	r0, #25
 8002fe4:	f000 fb56 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_InitTick+0xa0>)
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_InitTick+0xa0>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_InitTick+0xa0>)
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003000:	f107 0210 	add.w	r2, r7, #16
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fee4 	bl	8004dd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003010:	f001 fece 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8003014:	4603      	mov	r3, r0
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <HAL_InitTick+0xa4>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0c9b      	lsrs	r3, r3, #18
 8003024:	3b01      	subs	r3, #1
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_InitTick+0xa8>)
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <HAL_InitTick+0xac>)
 800302c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_InitTick+0xa8>)
 8003030:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003034:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003036:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <HAL_InitTick+0xa8>)
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_InitTick+0xa8>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_InitTick+0xa8>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003048:	4809      	ldr	r0, [pc, #36]	; (8003070 <HAL_InitTick+0xa8>)
 800304a:	f002 fae7 	bl	800561c <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003054:	4806      	ldr	r0, [pc, #24]	; (8003070 <HAL_InitTick+0xa8>)
 8003056:	f002 fb43 	bl	80056e0 <HAL_TIM_Base_Start_IT>
 800305a:	4603      	mov	r3, r0
 800305c:	e000      	b.n	8003060 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
}
 8003060:	4618      	mov	r0, r3
 8003062:	3730      	adds	r7, #48	; 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	431bde83 	.word	0x431bde83
 8003070:	2000a0a8 	.word	0x2000a0a8
 8003074:	40010000 	.word	0x40010000

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800307c:	e7fe      	b.n	800307c <NMI_Handler+0x4>

0800307e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003082:	e7fe      	b.n	8003082 <HardFault_Handler+0x4>

08003084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <MemManage_Handler+0x4>

0800308a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <BusFault_Handler+0x4>

08003090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <UsageFault_Handler+0x4>

08003096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA1_Stream1_IRQHandler+0x10>)
 80030aa:	f000 fca1 	bl	80039f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20009b60 	.word	0x20009b60

080030b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <DMA1_Stream3_IRQHandler+0x10>)
 80030be:	f000 fc97 	bl	80039f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000a048 	.word	0x2000a048

080030cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030d2:	f002 fb7d 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000a0a8 	.word	0x2000a0a8

080030e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <USART3_IRQHandler+0x10>)
 80030e6:	f002 feef 	bl	8005ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20009bc0 	.word	0x20009bc0

080030f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_kill>:

int _kill(int pid, int sig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800310e:	f011 ff79 	bl	8015004 <__errno>
 8003112:	4603      	mov	r3, r0
 8003114:	2216      	movs	r2, #22
 8003116:	601a      	str	r2, [r3, #0]
	return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_exit>:

void _exit (int status)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800312c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffe7 	bl	8003104 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003136:	e7fe      	b.n	8003136 <_exit+0x12>

08003138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e00a      	b.n	8003160 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800314a:	f3af 8000 	nop.w
 800314e:	4601      	mov	r1, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60ba      	str	r2, [r7, #8]
 8003156:	b2ca      	uxtb	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	dbf0      	blt.n	800314a <_read+0x12>
	}

return len;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e009      	b.n	8003198 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	60ba      	str	r2, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	dbf1      	blt.n	8003184 <_write+0x12>
	}
	return len;
 80031a0:	687b      	ldr	r3, [r7, #4]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_close>:

int _close(int file)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
	return -1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031d2:	605a      	str	r2, [r3, #4]
	return 0;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_isatty>:

int _isatty(int file)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
	return 1;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	return 0;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800321c:	4a14      	ldr	r2, [pc, #80]	; (8003270 <_sbrk+0x5c>)
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <_sbrk+0x60>)
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <_sbrk+0x64>)
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <_sbrk+0x68>)
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <_sbrk+0x64>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d207      	bcs.n	8003254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003244:	f011 fede 	bl	8015004 <__errno>
 8003248:	4603      	mov	r3, r0
 800324a:	220c      	movs	r2, #12
 800324c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003252:	e009      	b.n	8003268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <_sbrk+0x64>)
 8003264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20050000 	.word	0x20050000
 8003274:	00000400 	.word	0x00000400
 8003278:	20004808 	.word	0x20004808
 800327c:	2000eff0 	.word	0x2000eff0

08003280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <SystemInit+0x20>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <SystemInit+0x20>)
 800328c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80032b2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80032b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <cubemx_transport_open+0x28>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f002 fd5a 	bl	8005d74 <HAL_UART_Receive_DMA>
    return true;
 80032c0:	2301      	movs	r3, #1
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000480c 	.word	0x2000480c

080032d0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80032de:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f002 fd84 	bl	8005dee <HAL_UART_DMAStop>
    return true;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003304:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330a:	2b20      	cmp	r3, #32
 800330c:	d11a      	bne.n	8003344 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f002 fcae 	bl	8005c78 <HAL_UART_Transmit_DMA>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003320:	e002      	b.n	8003328 <cubemx_transport_write+0x38>
            osDelay(1);
 8003322:	2001      	movs	r0, #1
 8003324:	f004 f938 	bl	8007598 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <cubemx_transport_write+0x46>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	2b20      	cmp	r3, #32
 8003334:	d1f5      	bne.n	8003322 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <cubemx_transport_write+0x50>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	e002      	b.n	8003346 <cubemx_transport_write+0x56>
 8003340:	2300      	movs	r3, #0
 8003342:	e000      	b.n	8003346 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8003344:	2300      	movs	r3, #0
    }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003364:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800336a:	b672      	cpsid	i
}
 800336c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800337a:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <cubemx_transport_read+0x9c>)
 800337c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800337e:	b662      	cpsie	i
}
 8003380:	bf00      	nop
        __enable_irq();
        ms_used++;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3301      	adds	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8003388:	2001      	movs	r0, #1
 800338a:	f004 f905 	bl	8007598 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <cubemx_transport_read+0xa0>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <cubemx_transport_read+0x9c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d103      	bne.n	80033a2 <cubemx_transport_read+0x52>
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	dbe3      	blt.n	800336a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80033a6:	e011      	b.n	80033cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <cubemx_transport_read+0xa0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	440b      	add	r3, r1
 80033b2:	4910      	ldr	r1, [pc, #64]	; (80033f4 <cubemx_transport_read+0xa4>)
 80033b4:	5c8a      	ldrb	r2, [r1, r2]
 80033b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <cubemx_transport_read+0xa0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <cubemx_transport_read+0xa0>)
 80033c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <cubemx_transport_read+0xa0>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <cubemx_transport_read+0x9c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d003      	beq.n	80033e0 <cubemx_transport_read+0x90>
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3e3      	bcc.n	80033a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80033e0:	69bb      	ldr	r3, [r7, #24]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20005010 	.word	0x20005010
 80033f0:	2000500c 	.word	0x2000500c
 80033f4:	2000480c 	.word	0x2000480c

080033f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033fc:	480d      	ldr	r0, [pc, #52]	; (8003434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033fe:	490e      	ldr	r1, [pc, #56]	; (8003438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003414:	4c0b      	ldr	r4, [pc, #44]	; (8003444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003422:	f7ff ff2d 	bl	8003280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003426:	f011 fea5 	bl	8015174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800342a:	f7fe fbf9 	bl	8001c20 <main>
  bx  lr    
 800342e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003430:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003438:	20000bb8 	.word	0x20000bb8
  ldr r2, =_sidata
 800343c:	08020a1c 	.word	0x08020a1c
  ldr r2, =_sbss
 8003440:	20000bb8 	.word	0x20000bb8
  ldr r4, =_ebss
 8003444:	2000eff0 	.word	0x2000eff0

08003448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <ADC_IRQHandler>

0800344a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344e:	2003      	movs	r0, #3
 8003450:	f000 f8f9 	bl	8003646 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003454:	2000      	movs	r0, #0
 8003456:	f7ff fdb7 	bl	8002fc8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800345a:	f7ff fc7d 	bl	8002d58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_IncTick+0x20>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_IncTick+0x24>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_IncTick+0x24>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
 8003488:	2000a0f4 	.word	0x2000a0f4

0800348c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_GetTick+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000a0f4 	.word	0x2000a0f4

080034a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff ffee 	bl	800348c <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034bc:	d005      	beq.n	80034ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_Delay+0x44>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ca:	bf00      	nop
 80034cc:	f7ff ffde 	bl	800348c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d8f7      	bhi.n	80034cc <HAL_Delay+0x28>
  {
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	2000000c 	.word	0x2000000c

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <__NVIC_SetPriorityGrouping+0x40>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	4313      	orrs	r3, r2
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <__NVIC_SetPriorityGrouping+0x40>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	05fa0000 	.word	0x05fa0000

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4907      	ldr	r1, [pc, #28]	; (8003588 <__NVIC_EnableIRQ+0x38>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff4c 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366e:	f7ff ff61 	bl	8003534 <__NVIC_GetPriorityGrouping>
 8003672:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7ff ffb1 	bl	80035e0 <NVIC_EncodePriority>
 800367e:	4602      	mov	r2, r0
 8003680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff80 	bl	800358c <__NVIC_SetPriority>
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff54 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036bc:	f7ff fee6 	bl	800348c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e099      	b.n	8003800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ec:	e00f      	b.n	800370e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ee:	f7ff fecd 	bl	800348c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d908      	bls.n	800370e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2203      	movs	r2, #3
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e078      	b.n	8003800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e8      	bne.n	80036ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4b38      	ldr	r3, [pc, #224]	; (8003808 <HAL_DMA_Init+0x158>)
 8003728:	4013      	ands	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2b04      	cmp	r3, #4
 8003766:	d107      	bne.n	8003778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	4313      	orrs	r3, r2
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d117      	bne.n	80037d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fb15 	bl	8003de4 <DMA_CheckFifoParam>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ce:	2301      	movs	r3, #1
 80037d0:	e016      	b.n	8003800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 facc 	bl	8003d78 <DMA_CalcBaseAndBitshift>
 80037e0:	4603      	mov	r3, r0
 80037e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	223f      	movs	r2, #63	; 0x3f
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	f010803f 	.word	0xf010803f

0800380c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Start_IT+0x26>
 800382e:	2302      	movs	r3, #2
 8003830:	e048      	b.n	80038c4 <HAL_DMA_Start_IT+0xb8>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d137      	bne.n	80038b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fa5e 	bl	8003d1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0216 	orr.w	r2, r2, #22
 800387a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800388a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e005      	b.n	80038c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038da:	f7ff fdd7 	bl	800348c <HAL_GetTick>
 80038de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d008      	beq.n	80038fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e052      	b.n	80039a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0216 	bic.w	r2, r2, #22
 800390c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_DMA_Abort+0x62>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0208 	bic.w	r2, r2, #8
 800393c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394e:	e013      	b.n	8003978 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003950:	f7ff fd9c 	bl	800348c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b05      	cmp	r3, #5
 800395c:	d90c      	bls.n	8003978 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2203      	movs	r2, #3
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e015      	b.n	80039a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e4      	bne.n	8003950 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	223f      	movs	r2, #63	; 0x3f
 800398c:	409a      	lsls	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d004      	beq.n	80039ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00c      	b.n	80039e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2205      	movs	r2, #5
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80039fc:	4b92      	ldr	r3, [pc, #584]	; (8003c48 <HAL_DMA_IRQHandler+0x258>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a92      	ldr	r2, [pc, #584]	; (8003c4c <HAL_DMA_IRQHandler+0x25c>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0a9b      	lsrs	r3, r3, #10
 8003a08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01a      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2208      	movs	r2, #8
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	2201      	movs	r2, #1
 8003a62:	409a      	lsls	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	2201      	movs	r2, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	2204      	movs	r2, #4
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2210      	movs	r2, #16
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d043      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d03c      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2210      	movs	r2, #16
 8003aec:	409a      	lsls	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d024      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
 8003b1e:	e01f      	b.n	8003b60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01b      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
 8003b30:	e016      	b.n	8003b60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d107      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0208 	bic.w	r2, r2, #8
 8003b4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	2220      	movs	r2, #32
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808e 	beq.w	8003c8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8086 	beq.w	8003c8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	2220      	movs	r2, #32
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d136      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0216 	bic.w	r2, r2, #22
 8003ba8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_DMA_IRQHandler+0x1da>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0208 	bic.w	r2, r2, #8
 8003bd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	223f      	movs	r2, #63	; 0x3f
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d07d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
        }
        return;
 8003c06:	e078      	b.n	8003cfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01c      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d108      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d030      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
 8003c34:	e02b      	b.n	8003c8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
 8003c46:	e022      	b.n	8003c8e <HAL_DMA_IRQHandler+0x29e>
 8003c48:	20000004 	.word	0x20000004
 8003c4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0210 	bic.w	r2, r2, #16
 8003c6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d032      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d022      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2205      	movs	r2, #5
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d307      	bcc.n	8003cd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f2      	bne.n	8003cba <HAL_DMA_IRQHandler+0x2ca>
 8003cd4:	e000      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cd6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
 8003cf8:	e000      	b.n	8003cfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cfa:	bf00      	nop
    }
  }
}
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop

08003d04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d108      	bne.n	8003d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d5a:	e007      	b.n	8003d6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	3b10      	subs	r3, #16
 8003d88:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x60>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <DMA_CalcBaseAndBitshift+0x64>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d908      	bls.n	8003db8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <DMA_CalcBaseAndBitshift+0x68>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58
 8003db6:	e006      	b.n	8003dc6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <DMA_CalcBaseAndBitshift+0x68>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab
 8003ddc:	0801f7a0 	.word	0x0801f7a0
 8003de0:	fffffc00 	.word	0xfffffc00

08003de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d11f      	bne.n	8003e3e <DMA_CheckFifoParam+0x5a>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d856      	bhi.n	8003eb2 <DMA_CheckFifoParam+0xce>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <DMA_CheckFifoParam+0x28>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e2f 	.word	0x08003e2f
 8003e14:	08003e1d 	.word	0x08003e1d
 8003e18:	08003eb3 	.word	0x08003eb3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d046      	beq.n	8003eb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2c:	e043      	b.n	8003eb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e36:	d140      	bne.n	8003eba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3c:	e03d      	b.n	8003eba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e46:	d121      	bne.n	8003e8c <DMA_CheckFifoParam+0xa8>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d837      	bhi.n	8003ebe <DMA_CheckFifoParam+0xda>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <DMA_CheckFifoParam+0x70>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e6b 	.word	0x08003e6b
 8003e5c:	08003e65 	.word	0x08003e65
 8003e60:	08003e7d 	.word	0x08003e7d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      break;
 8003e68:	e030      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d025      	beq.n	8003ec2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7a:	e022      	b.n	8003ec2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e84:	d11f      	bne.n	8003ec6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e8a:	e01c      	b.n	8003ec6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d903      	bls.n	8003e9a <DMA_CheckFifoParam+0xb6>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d003      	beq.n	8003ea0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e98:	e018      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9e:	e015      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00e      	beq.n	8003eca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e00b      	b.n	8003eca <DMA_CheckFifoParam+0xe6>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e00a      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e008      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e006      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e004      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
      break;
 8003eca:	bf00      	nop
    }
  } 
  
  return status; 
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop

08003edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	e175      	b.n	80041e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	f040 8164 	bne.w	80041e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d00b      	beq.n	8003f3a <HAL_GPIO_Init+0x5e>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d007      	beq.n	8003f3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f2e:	2b11      	cmp	r3, #17
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b12      	cmp	r3, #18
 8003f38:	d130      	bne.n	8003f9c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f70:	2201      	movs	r2, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 0201 	and.w	r2, r3, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x100>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b12      	cmp	r3, #18
 8003fda:	d123      	bne.n	8004024 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	08da      	lsrs	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3208      	adds	r2, #8
 8003fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	220f      	movs	r2, #15
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	08da      	lsrs	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3208      	adds	r2, #8
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0203 	and.w	r2, r3, #3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80be 	beq.w	80041e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004066:	4b66      	ldr	r3, [pc, #408]	; (8004200 <HAL_GPIO_Init+0x324>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_GPIO_Init+0x324>)
 800406c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	4b63      	ldr	r3, [pc, #396]	; (8004200 <HAL_GPIO_Init+0x324>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800407e:	4a61      	ldr	r2, [pc, #388]	; (8004204 <HAL_GPIO_Init+0x328>)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	3302      	adds	r3, #2
 8004086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	220f      	movs	r2, #15
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_GPIO_Init+0x32c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d037      	beq.n	800411a <HAL_GPIO_Init+0x23e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_GPIO_Init+0x330>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d031      	beq.n	8004116 <HAL_GPIO_Init+0x23a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a56      	ldr	r2, [pc, #344]	; (8004210 <HAL_GPIO_Init+0x334>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d02b      	beq.n	8004112 <HAL_GPIO_Init+0x236>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a55      	ldr	r2, [pc, #340]	; (8004214 <HAL_GPIO_Init+0x338>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d025      	beq.n	800410e <HAL_GPIO_Init+0x232>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a54      	ldr	r2, [pc, #336]	; (8004218 <HAL_GPIO_Init+0x33c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01f      	beq.n	800410a <HAL_GPIO_Init+0x22e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a53      	ldr	r2, [pc, #332]	; (800421c <HAL_GPIO_Init+0x340>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d019      	beq.n	8004106 <HAL_GPIO_Init+0x22a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_GPIO_Init+0x344>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_GPIO_Init+0x226>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a51      	ldr	r2, [pc, #324]	; (8004224 <HAL_GPIO_Init+0x348>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00d      	beq.n	80040fe <HAL_GPIO_Init+0x222>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a50      	ldr	r2, [pc, #320]	; (8004228 <HAL_GPIO_Init+0x34c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <HAL_GPIO_Init+0x21e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a4f      	ldr	r2, [pc, #316]	; (800422c <HAL_GPIO_Init+0x350>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_GPIO_Init+0x21a>
 80040f2:	2309      	movs	r3, #9
 80040f4:	e012      	b.n	800411c <HAL_GPIO_Init+0x240>
 80040f6:	230a      	movs	r3, #10
 80040f8:	e010      	b.n	800411c <HAL_GPIO_Init+0x240>
 80040fa:	2308      	movs	r3, #8
 80040fc:	e00e      	b.n	800411c <HAL_GPIO_Init+0x240>
 80040fe:	2307      	movs	r3, #7
 8004100:	e00c      	b.n	800411c <HAL_GPIO_Init+0x240>
 8004102:	2306      	movs	r3, #6
 8004104:	e00a      	b.n	800411c <HAL_GPIO_Init+0x240>
 8004106:	2305      	movs	r3, #5
 8004108:	e008      	b.n	800411c <HAL_GPIO_Init+0x240>
 800410a:	2304      	movs	r3, #4
 800410c:	e006      	b.n	800411c <HAL_GPIO_Init+0x240>
 800410e:	2303      	movs	r3, #3
 8004110:	e004      	b.n	800411c <HAL_GPIO_Init+0x240>
 8004112:	2302      	movs	r3, #2
 8004114:	e002      	b.n	800411c <HAL_GPIO_Init+0x240>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_GPIO_Init+0x240>
 800411a:	2300      	movs	r3, #0
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	f002 0203 	and.w	r2, r2, #3
 8004122:	0092      	lsls	r2, r2, #2
 8004124:	4093      	lsls	r3, r2
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800412c:	4935      	ldr	r1, [pc, #212]	; (8004204 <HAL_GPIO_Init+0x328>)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800413a:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <HAL_GPIO_Init+0x354>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800415e:	4a34      	ldr	r2, [pc, #208]	; (8004230 <HAL_GPIO_Init+0x354>)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_GPIO_Init+0x354>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <HAL_GPIO_Init+0x354>)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800418e:	4b28      	ldr	r3, [pc, #160]	; (8004230 <HAL_GPIO_Init+0x354>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041b2:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <HAL_GPIO_Init+0x354>)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_GPIO_Init+0x354>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <HAL_GPIO_Init+0x354>)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3301      	adds	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	f67f ae86 	bls.w	8003efc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40013800 	.word	0x40013800
 8004208:	40020000 	.word	0x40020000
 800420c:	40020400 	.word	0x40020400
 8004210:	40020800 	.word	0x40020800
 8004214:	40020c00 	.word	0x40020c00
 8004218:	40021000 	.word	0x40021000
 800421c:	40021400 	.word	0x40021400
 8004220:	40021800 	.word	0x40021800
 8004224:	40021c00 	.word	0x40021c00
 8004228:	40022000 	.word	0x40022000
 800422c:	40022400 	.word	0x40022400
 8004230:	40013c00 	.word	0x40013c00

08004234 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b08f      	sub	sp, #60	; 0x3c
 8004238:	af0a      	add	r7, sp, #40	; 0x28
 800423a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e116      	b.n	8004474 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fe fe55 	bl	8002f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2203      	movs	r2, #3
 800426a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f002 fe0f 	bl	8006ea8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	687e      	ldr	r6, [r7, #4]
 8004292:	466d      	mov	r5, sp
 8004294:	f106 0410 	add.w	r4, r6, #16
 8004298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800429a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800429c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800429e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80042a8:	1d33      	adds	r3, r6, #4
 80042aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ac:	6838      	ldr	r0, [r7, #0]
 80042ae:	f002 fda3 	bl	8006df8 <USB_CoreInit>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d7      	b.n	8004474 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fdfd 	bl	8006eca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e04a      	b.n	800436c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	333d      	adds	r3, #61	; 0x3d
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	333c      	adds	r3, #60	; 0x3c
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	b298      	uxth	r0, r3
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3342      	adds	r3, #66	; 0x42
 8004312:	4602      	mov	r2, r0
 8004314:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	333f      	adds	r3, #63	; 0x3f
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3344      	adds	r3, #68	; 0x44
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3348      	adds	r3, #72	; 0x48
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3350      	adds	r3, #80	; 0x50
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	3301      	adds	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d3af      	bcc.n	80042d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
 800437a:	e044      	b.n	8004406 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043d4:	7bfa      	ldrb	r2, [r7, #15]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	3301      	adds	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	7bfa      	ldrb	r2, [r7, #15]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d3b5      	bcc.n	800437c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	687e      	ldr	r6, [r7, #4]
 8004418:	466d      	mov	r5, sp
 800441a:	f106 0410 	add.w	r4, r6, #16
 800441e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800442a:	e885 0003 	stmia.w	r5, {r0, r1}
 800442e:	1d33      	adds	r3, r6, #4
 8004430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	f002 fd74 	bl	8006f20 <USB_DevInit>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e014      	b.n	8004474 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f80a 	bl	800447c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f002 ff26 	bl	80072be <USB_DevDisconnect>

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800447c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	10000003 	.word	0x10000003

080044c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40007000 	.word	0x40007000

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044ec:	2300      	movs	r3, #0
 80044ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e291      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8087 	beq.w	8004616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004508:	4b96      	ldr	r3, [pc, #600]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b04      	cmp	r3, #4
 8004512:	d00c      	beq.n	800452e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004514:	4b93      	ldr	r3, [pc, #588]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b08      	cmp	r3, #8
 800451e:	d112      	bne.n	8004546 <HAL_RCC_OscConfig+0x62>
 8004520:	4b90      	ldr	r3, [pc, #576]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452c:	d10b      	bne.n	8004546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452e:	4b8d      	ldr	r3, [pc, #564]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d06c      	beq.n	8004614 <HAL_RCC_OscConfig+0x130>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d168      	bne.n	8004614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e26b      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x7a>
 8004550:	4b84      	ldr	r3, [pc, #528]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a83      	ldr	r2, [pc, #524]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e02e      	b.n	80045bc <HAL_RCC_OscConfig+0xd8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x9c>
 8004566:	4b7f      	ldr	r3, [pc, #508]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7e      	ldr	r2, [pc, #504]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b7c      	ldr	r3, [pc, #496]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7b      	ldr	r2, [pc, #492]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xd8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0xc0>
 800458a:	4b76      	ldr	r3, [pc, #472]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a75      	ldr	r2, [pc, #468]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b73      	ldr	r3, [pc, #460]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a72      	ldr	r2, [pc, #456]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xd8>
 80045a4:	4b6f      	ldr	r3, [pc, #444]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6e      	ldr	r2, [pc, #440]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b6c      	ldr	r3, [pc, #432]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6b      	ldr	r2, [pc, #428]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe ff62 	bl	800348c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fe ff5e 	bl	800348c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e21f      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b61      	ldr	r3, [pc, #388]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fe ff4e 	bl	800348c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fe ff4a 	bl	800348c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e20b      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	4b57      	ldr	r3, [pc, #348]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x110>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d069      	beq.n	80046f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004622:	4b50      	ldr	r3, [pc, #320]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b4d      	ldr	r3, [pc, #308]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11c      	bne.n	8004674 <HAL_RCC_OscConfig+0x190>
 800463a:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	4b47      	ldr	r3, [pc, #284]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x17a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1df      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b41      	ldr	r3, [pc, #260]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	493d      	ldr	r1, [pc, #244]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	e040      	b.n	80046f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d023      	beq.n	80046c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a38      	ldr	r2, [pc, #224]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe ff00 	bl	800348c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004690:	f7fe fefc 	bl	800348c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1bd      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4929      	ldr	r1, [pc, #164]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
 80046c2:	e018      	b.n	80046f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a26      	ldr	r2, [pc, #152]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fe fedc 	bl	800348c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fe fed8 	bl	800348c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e199      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d038      	beq.n	8004774 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d019      	beq.n	800473e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004716:	f7fe feb9 	bl	800348c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471e:	f7fe feb5 	bl	800348c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e176      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x23a>
 800473c:	e01a      	b.n	8004774 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <HAL_RCC_OscConfig+0x280>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fe fe9f 	bl	800348c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	e00a      	b.n	8004768 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004752:	f7fe fe9b 	bl	800348c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d903      	bls.n	8004768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e15c      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
 8004764:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004768:	4b91      	ldr	r3, [pc, #580]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800476a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ee      	bne.n	8004752 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a4 	beq.w	80048ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10d      	bne.n	80047aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a87      	ldr	r2, [pc, #540]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047aa:	4b82      	ldr	r3, [pc, #520]	; (80049b4 <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80047b6:	4b7f      	ldr	r3, [pc, #508]	; (80049b4 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7e      	ldr	r2, [pc, #504]	; (80049b4 <HAL_RCC_OscConfig+0x4d0>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fe fe63 	bl	800348c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fe fe5f 	bl	800348c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b64      	cmp	r3, #100	; 0x64
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e120      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047dc:	4b75      	ldr	r3, [pc, #468]	; (80049b4 <HAL_RCC_OscConfig+0x4d0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x31a>
 80047f0:	4b6f      	ldr	r3, [pc, #444]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e02d      	b.n	800485a <HAL_RCC_OscConfig+0x376>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x33c>
 8004806:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a69      	ldr	r2, [pc, #420]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b67      	ldr	r3, [pc, #412]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a66      	ldr	r2, [pc, #408]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e01c      	b.n	800485a <HAL_RCC_OscConfig+0x376>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d10c      	bne.n	8004842 <HAL_RCC_OscConfig+0x35e>
 8004828:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a60      	ldr	r2, [pc, #384]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6713      	str	r3, [r2, #112]	; 0x70
 8004834:	4b5e      	ldr	r3, [pc, #376]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a5d      	ldr	r2, [pc, #372]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	e00b      	b.n	800485a <HAL_RCC_OscConfig+0x376>
 8004842:	4b5b      	ldr	r3, [pc, #364]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a5a      	ldr	r2, [pc, #360]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
 800484e:	4b58      	ldr	r3, [pc, #352]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d015      	beq.n	800488e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004862:	f7fe fe13 	bl	800348c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fe fe0f 	bl	800348c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0ce      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ee      	beq.n	800486a <HAL_RCC_OscConfig+0x386>
 800488c:	e014      	b.n	80048b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fe fdfd 	bl	800348c <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fe fdf9 	bl	800348c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0b8      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ac:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ee      	bne.n	8004896 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048be:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80a4 	beq.w	8004a1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d4:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d06b      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d149      	bne.n	800497c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80048ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fe fdca 	bl	800348c <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fc:	f7fe fdc6 	bl	800348c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e087      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	019b      	lsls	r3, r3, #6
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	4313      	orrs	r3, r2
 8004940:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004946:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fe fd9a 	bl	800348c <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fe fd96 	bl	800348c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e057      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x478>
 800497a:	e04f      	b.n	8004a1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 8004982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fe fd80 	bl	800348c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fe fd7c 	bl	800348c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e03d      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <HAL_RCC_OscConfig+0x4cc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x4ac>
 80049ae:	e035      	b.n	8004a1c <HAL_RCC_OscConfig+0x538>
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_RCC_OscConfig+0x544>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d028      	beq.n	8004a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d121      	bne.n	8004a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d11a      	bne.n	8004a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d111      	bne.n	8004a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	3b01      	subs	r3, #1
 8004a02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800

08004a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0d0      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a44:	4b6a      	ldr	r3, [pc, #424]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d910      	bls.n	8004a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 020f 	bic.w	r2, r3, #15
 8004a5a:	4965      	ldr	r1, [pc, #404]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b63      	ldr	r3, [pc, #396]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0b8      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a8c:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a58      	ldr	r2, [pc, #352]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa4:	4b53      	ldr	r3, [pc, #332]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a52      	ldr	r2, [pc, #328]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab0:	4b50      	ldr	r3, [pc, #320]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	494d      	ldr	r1, [pc, #308]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d040      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d115      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e07f      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e073      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afe:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e06b      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4936      	ldr	r1, [pc, #216]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fe fcb4 	bl	800348c <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fe fcb0 	bl	800348c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e053      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d210      	bcs.n	8004b80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 020f 	bic.w	r2, r3, #15
 8004b66:	4922      	ldr	r1, [pc, #136]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e032      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4916      	ldr	r1, [pc, #88]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	490e      	ldr	r1, [pc, #56]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bbe:	f000 f821 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	490a      	ldr	r1, [pc, #40]	; (8004bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8004bd0:	5ccb      	ldrb	r3, [r1, r3]
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1d0>)
 8004bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1d4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe f9f2 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023c00 	.word	0x40023c00
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	0801f788 	.word	0x0801f788
 8004bfc:	20000004 	.word	0x20000004
 8004c00:	20000008 	.word	0x20000008

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	b5b0      	push	{r4, r5, r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	6079      	str	r1, [r7, #4]
 8004c0e:	2100      	movs	r1, #0
 8004c10:	60f9      	str	r1, [r7, #12]
 8004c12:	2100      	movs	r1, #0
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004c16:	2100      	movs	r1, #0
 8004c18:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1a:	4952      	ldr	r1, [pc, #328]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c1c:	6889      	ldr	r1, [r1, #8]
 8004c1e:	f001 010c 	and.w	r1, r1, #12
 8004c22:	2908      	cmp	r1, #8
 8004c24:	d00d      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x3e>
 8004c26:	2908      	cmp	r1, #8
 8004c28:	f200 8094 	bhi.w	8004d54 <HAL_RCC_GetSysClockFreq+0x150>
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_RCC_GetSysClockFreq+0x32>
 8004c30:	2904      	cmp	r1, #4
 8004c32:	d003      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x38>
 8004c34:	e08e      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c36:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c38:	60bb      	str	r3, [r7, #8]
      break;
 8004c3a:	e08e      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3c:	4b4b      	ldr	r3, [pc, #300]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8004c3e:	60bb      	str	r3, [r7, #8]
      break;
 8004c40:	e08b      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c42:	4948      	ldr	r1, [pc, #288]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c44:	6849      	ldr	r1, [r1, #4]
 8004c46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004c4a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c4c:	4945      	ldr	r1, [pc, #276]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c4e:	6849      	ldr	r1, [r1, #4]
 8004c50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004c54:	2900      	cmp	r1, #0
 8004c56:	d024      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c58:	4942      	ldr	r1, [pc, #264]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c5a:	6849      	ldr	r1, [r1, #4]
 8004c5c:	0989      	lsrs	r1, r1, #6
 8004c5e:	4608      	mov	r0, r1
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c68:	f04f 0500 	mov.w	r5, #0
 8004c6c:	ea00 0204 	and.w	r2, r0, r4
 8004c70:	ea01 0305 	and.w	r3, r1, r5
 8004c74:	493d      	ldr	r1, [pc, #244]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8004c76:	fb01 f003 	mul.w	r0, r1, r3
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	fb01 f102 	mul.w	r1, r1, r2
 8004c80:	1844      	adds	r4, r0, r1
 8004c82:	493a      	ldr	r1, [pc, #232]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8004c84:	fba2 0101 	umull	r0, r1, r2, r1
 8004c88:	1863      	adds	r3, r4, r1
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	f7fc fba6 	bl	80013e4 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e04a      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b30      	ldr	r3, [pc, #192]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	ea02 0400 	and.w	r4, r2, r0
 8004cba:	ea03 0501 	and.w	r5, r3, r1
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	014b      	lsls	r3, r1, #5
 8004ccc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cd0:	0142      	lsls	r2, r0, #5
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	1b00      	subs	r0, r0, r4
 8004cd8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	018b      	lsls	r3, r1, #6
 8004ce6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cea:	0182      	lsls	r2, r0, #6
 8004cec:	1a12      	subs	r2, r2, r0
 8004cee:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	00d9      	lsls	r1, r3, #3
 8004cfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d00:	00d0      	lsls	r0, r2, #3
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	1912      	adds	r2, r2, r4
 8004d08:	eb45 0303 	adc.w	r3, r5, r3
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0299      	lsls	r1, r3, #10
 8004d16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d1a:	0290      	lsls	r0, r2, #10
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	f7fc fb5a 	bl	80013e4 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	3301      	adds	r3, #1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	60bb      	str	r3, [r7, #8]
      break;
 8004d52:	e002      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8004d56:	60bb      	str	r3, [r7, #8]
      break;
 8004d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bdb0      	pop	{r4, r5, r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	017d7840 	.word	0x017d7840

08004d70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d8c:	f7ff fff0 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a9b      	lsrs	r3, r3, #10
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	0801f798 	.word	0x0801f798

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004db4:	f7ff ffdc 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0b5b      	lsrs	r3, r3, #13
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4903      	ldr	r1, [pc, #12]	; (8004dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	0801f798 	.word	0x0801f798

08004dd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	220f      	movs	r2, #15
 8004de6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_RCC_GetClockConfig+0x5c>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0203 	and.w	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <HAL_RCC_GetClockConfig+0x5c>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <HAL_RCC_GetClockConfig+0x5c>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	08db      	lsrs	r3, r3, #3
 8004e12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <HAL_RCC_GetClockConfig+0x60>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	601a      	str	r2, [r3, #0]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40023c00 	.word	0x40023c00

08004e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d012      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e64:	4b69      	ldr	r3, [pc, #420]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a68      	ldr	r2, [pc, #416]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e6e:	6093      	str	r3, [r2, #8]
 8004e70:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	4964      	ldr	r1, [pc, #400]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d017      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e96:	4b5d      	ldr	r3, [pc, #372]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	4959      	ldr	r1, [pc, #356]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb4:	d101      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d017      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ed2:	4b4e      	ldr	r3, [pc, #312]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	494a      	ldr	r1, [pc, #296]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 808b 	beq.w	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	4b3a      	ldr	r3, [pc, #232]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	4a39      	ldr	r2, [pc, #228]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2c:	4b37      	ldr	r3, [pc, #220]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f38:	4b35      	ldr	r3, [pc, #212]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a34      	ldr	r2, [pc, #208]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fe faa2 	bl	800348c <HAL_GetTick>
 8004f48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4c:	f7fe fa9e 	bl	800348c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e357      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f5e:	4b2c      	ldr	r3, [pc, #176]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f6a:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d035      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d02e      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f88:	4b20      	ldr	r3, [pc, #128]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	4a1d      	ldr	r2, [pc, #116]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004faa:	4a18      	ldr	r2, [pc, #96]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fb0:	4b16      	ldr	r3, [pc, #88]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d114      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fa66 	bl	800348c <HAL_GetTick>
 8004fc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fe fa62 	bl	800348c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e319      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fda:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0ee      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff2:	d111      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005002:	400b      	ands	r3, r1
 8005004:	4901      	ldr	r1, [pc, #4]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
 800500a:	e00b      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800500c:	40023800 	.word	0x40023800
 8005010:	40007000 	.word	0x40007000
 8005014:	0ffffcff 	.word	0x0ffffcff
 8005018:	4bb1      	ldr	r3, [pc, #708]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4ab0      	ldr	r2, [pc, #704]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800501e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005022:	6093      	str	r3, [r2, #8]
 8005024:	4bae      	ldr	r3, [pc, #696]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005030:	49ab      	ldr	r1, [pc, #684]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d010      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005042:	4ba7      	ldr	r3, [pc, #668]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005048:	4aa5      	ldr	r2, [pc, #660]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800504a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005052:	4ba3      	ldr	r3, [pc, #652]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005054:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	49a0      	ldr	r1, [pc, #640]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005070:	4b9b      	ldr	r3, [pc, #620]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507e:	4998      	ldr	r1, [pc, #608]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005092:	4b93      	ldr	r3, [pc, #588]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a0:	498f      	ldr	r1, [pc, #572]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b4:	4b8a      	ldr	r3, [pc, #552]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c2:	4987      	ldr	r1, [pc, #540]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050d6:	4b82      	ldr	r3, [pc, #520]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	497e      	ldr	r1, [pc, #504]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f8:	4b79      	ldr	r3, [pc, #484]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f023 0203 	bic.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	4976      	ldr	r1, [pc, #472]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800511a:	4b71      	ldr	r3, [pc, #452]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f023 020c 	bic.w	r2, r3, #12
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005128:	496d      	ldr	r1, [pc, #436]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800513c:	4b68      	ldr	r3, [pc, #416]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	4965      	ldr	r1, [pc, #404]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800515e:	4b60      	ldr	r3, [pc, #384]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	495c      	ldr	r1, [pc, #368]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005180:	4b57      	ldr	r3, [pc, #348]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	4954      	ldr	r1, [pc, #336]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051a2:	4b4f      	ldr	r3, [pc, #316]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	494b      	ldr	r1, [pc, #300]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051c4:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d2:	4943      	ldr	r1, [pc, #268]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051e6:	4b3e      	ldr	r3, [pc, #248]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	493a      	ldr	r1, [pc, #232]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005208:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005216:	4932      	ldr	r1, [pc, #200]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800522a:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005230:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005238:	4929      	ldr	r1, [pc, #164]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005248:	d101      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800525a:	2301      	movs	r3, #1
 800525c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526a:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005278:	4919      	ldr	r1, [pc, #100]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800528c:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529c:	4910      	ldr	r1, [pc, #64]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d006      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80d9 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c4:	f7fe f8e2 	bl	800348c <HAL_GetTick>
 80052c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ca:	e00b      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052cc:	f7fe f8de 	bl	800348c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d904      	bls.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e197      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e4:	4b6c      	ldr	r3, [pc, #432]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ed      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d021      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11d      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005304:	4b64      	ldr	r3, [pc, #400]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005312:	4b61      	ldr	r3, [pc, #388]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005318:	0e1b      	lsrs	r3, r3, #24
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	019a      	lsls	r2, r3, #6
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	431a      	orrs	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	071b      	lsls	r3, r3, #28
 8005338:	4957      	ldr	r1, [pc, #348]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02e      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536a:	d129      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800536c:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800537a:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800537c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005380:	0f1b      	lsrs	r3, r3, #28
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	019a      	lsls	r2, r3, #6
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	431a      	orrs	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	071b      	lsls	r3, r3, #28
 80053a0:	493d      	ldr	r1, [pc, #244]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053a8:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ae:	f023 021f 	bic.w	r2, r3, #31
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	3b01      	subs	r3, #1
 80053b8:	4937      	ldr	r1, [pc, #220]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01d      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053cc:	4b32      	ldr	r3, [pc, #200]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d2:	0e1b      	lsrs	r3, r3, #24
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053da:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e0:	0f1b      	lsrs	r3, r3, #28
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	019a      	lsls	r2, r3, #6
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	431a      	orrs	r2, r3
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	061b      	lsls	r3, r3, #24
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	071b      	lsls	r3, r3, #28
 8005400:	4925      	ldr	r1, [pc, #148]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	019a      	lsls	r2, r3, #6
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	061b      	lsls	r3, r3, #24
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	071b      	lsls	r3, r3, #28
 8005430:	4919      	ldr	r1, [pc, #100]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005438:	4b17      	ldr	r3, [pc, #92]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fe f822 	bl	800348c <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800544c:	f7fe f81e 	bl	800348c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0d7      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 80cd 	bne.w	800560c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fe f805 	bl	800348c <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005484:	e00a      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005486:	f7fe f801 	bl	800348c <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b64      	cmp	r3, #100	; 0x64
 8005492:	d903      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e0ba      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005498:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800549c:	4b5e      	ldr	r3, [pc, #376]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a8:	d0ed      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02e      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d12a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054d2:	4b51      	ldr	r3, [pc, #324]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054e0:	4b4d      	ldr	r3, [pc, #308]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	0f1b      	lsrs	r3, r3, #28
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	4944      	ldr	r1, [pc, #272]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	493d      	ldr	r1, [pc, #244]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d022      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800553c:	d11d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	0e1b      	lsrs	r3, r3, #24
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800554c:	4b32      	ldr	r3, [pc, #200]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	0f1b      	lsrs	r3, r3, #28
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	019a      	lsls	r2, r3, #6
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	431a      	orrs	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	4929      	ldr	r1, [pc, #164]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d028      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	0e1b      	lsrs	r3, r3, #24
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005594:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	019a      	lsls	r2, r3, #6
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	431a      	orrs	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	061b      	lsls	r3, r3, #24
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	4917      	ldr	r1, [pc, #92]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4911      	ldr	r1, [pc, #68]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fd ff52 	bl	800348c <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055ec:	f7fd ff4e 	bl	800348c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e007      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560a:	d1ef      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e049      	b.n	80056c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f841 	bl	80056ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f000 fa00 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e054      	b.n	80057a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d01d      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <HAL_TIM_Base_Start_IT+0xdc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d115      	bne.n	800578c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_TIM_Base_Start_IT+0xec>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b06      	cmp	r3, #6
 8005770:	d015      	beq.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d011      	beq.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578a:	e008      	b.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e000      	b.n	80057a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40010400 	.word	0x40010400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40001800 	.word	0x40001800
 80057cc:	00010007 	.word	0x00010007

080057d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0202 	mvn.w	r2, #2
 80057fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f905 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8f7 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f908 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d122      	bne.n	8005880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0204 	mvn.w	r2, #4
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8db 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8cd 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8de 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d122      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0208 	mvn.w	r2, #8
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f8b1 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8a3 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f8b4 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0210 	mvn.w	r2, #16
 80058f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2208      	movs	r2, #8
 80058fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f887 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f879 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f88a 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0201 	mvn.w	r2, #1
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fc ff7e 	bl	8002850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f91a 	bl	8005bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d10e      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d107      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f90d 	bl	8005bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d10e      	bne.n	80059da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d107      	bne.n	80059da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f838 	bl	8005a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d10e      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0220 	mvn.w	r2, #32
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8cd 	bl	8005ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a3d      	ldr	r2, [pc, #244]	; (8005b78 <TIM_Base_SetConfig+0x118>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3c      	ldr	r2, [pc, #240]	; (8005b7c <TIM_Base_SetConfig+0x11c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3b      	ldr	r2, [pc, #236]	; (8005b80 <TIM_Base_SetConfig+0x120>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3a      	ldr	r2, [pc, #232]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d02b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d027      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <TIM_Base_SetConfig+0x118>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d023      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <TIM_Base_SetConfig+0x11c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01f      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <TIM_Base_SetConfig+0x120>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d017      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <TIM_Base_SetConfig+0x128>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00f      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a26      	ldr	r2, [pc, #152]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0xf8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d103      	bne.n	8005b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	615a      	str	r2, [r3, #20]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800
 8005b80:	40000c00 	.word	0x40000c00
 8005b84:	40010400 	.word	0x40010400
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800
 8005b94:	40001800 	.word	0x40001800
 8005b98:	40001c00 	.word	0x40001c00
 8005b9c:	40002000 	.word	0x40002000

08005ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e040      	b.n	8005c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fd f8d2 	bl	8002da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2224      	movs	r2, #36	; 0x24
 8005c08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fb7e 	bl	800631c <UART_SetConfig>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e022      	b.n	8005c70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fdd4 	bl	80067e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fe5b 	bl	8006924 <UART_CheckIdleState>
 8005c6e:	4603      	mov	r3, r0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d166      	bne.n	8005d5c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_UART_Transmit_DMA+0x22>
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e05f      	b.n	8005d5e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_UART_Transmit_DMA+0x34>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e058      	b.n	8005d5e <HAL_UART_Transmit_DMA+0xe6>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2221      	movs	r2, #33	; 0x21
 8005cd6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02b      	beq.n	8005d38 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <HAL_UART_Transmit_DMA+0xf0>)
 8005ce6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cec:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <HAL_UART_Transmit_DMA+0xf4>)
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf4:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <HAL_UART_Transmit_DMA+0xf8>)
 8005cf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d08:	4619      	mov	r1, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3328      	adds	r3, #40	; 0x28
 8005d10:	461a      	mov	r2, r3
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	f7fd fd7a 	bl	800380c <HAL_DMA_Start_IT>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00c      	beq.n	8005d38 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2210      	movs	r2, #16
 8005d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e012      	b.n	8005d5e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2240      	movs	r2, #64	; 0x40
 8005d3e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d56:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08006be5 	.word	0x08006be5
 8005d6c:	08006c35 	.word	0x08006c35
 8005d70:	08006d1d 	.word	0x08006d1d

08005d74 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d12c      	bne.n	8005de4 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_UART_Receive_DMA+0x22>
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e025      	b.n	8005de6 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UART_Receive_DMA+0x34>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e01e      	b.n	8005de6 <HAL_UART_Receive_DMA+0x72>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005dd2:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fe52 	bl	8006a84 <UART_Start_Receive_DMA>
 8005de0:	4603      	mov	r3, r0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dfa:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0c:	2b80      	cmp	r3, #128	; 0x80
 8005e0e:	d127      	bne.n	8005e60 <HAL_UART_DMAStop+0x72>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b21      	cmp	r3, #33	; 0x21
 8005e14:	d124      	bne.n	8005e60 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e24:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fd fd4a 	bl	80038cc <HAL_DMA_Abort>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00d      	beq.n	8005e5a <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd ff5e 	bl	8003d04 <HAL_DMA_GetError>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d105      	bne.n	8005e5a <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2210      	movs	r2, #16
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e032      	b.n	8005ec0 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fe7e 	bl	8006b5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d127      	bne.n	8005ebe <HAL_UART_DMAStop+0xd0>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b22      	cmp	r3, #34	; 0x22
 8005e72:	d124      	bne.n	8005ebe <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e82:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fd fd1b 	bl	80038cc <HAL_DMA_Abort>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fd ff2f 	bl	8003d04 <HAL_DMA_GetError>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d105      	bne.n	8005eb8 <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2210      	movs	r2, #16
 8005eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e003      	b.n	8005ec0 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fe64 	bl	8006b86 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eee:	4013      	ands	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d113      	bne.n	8005f20 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 81b9 	beq.w	8006288 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
      }
      return;
 8005f1e:	e1b3      	b.n	8006288 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80e3 	beq.w	80060ee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4ba5      	ldr	r3, [pc, #660]	; (80061cc <HAL_UART_IRQHandler+0x304>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80d8 	beq.w	80060ee <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d010      	beq.n	8005f6a <HAL_UART_IRQHandler+0xa2>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2201      	movs	r2, #1
 8005f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f60:	f043 0201 	orr.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d010      	beq.n	8005f96 <HAL_UART_IRQHandler+0xce>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2202      	movs	r2, #2
 8005f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f8c:	f043 0204 	orr.w	r2, r3, #4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d010      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xfa>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb8:	f043 0202 	orr.w	r2, r3, #2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d015      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d011      	beq.n	8006026 <HAL_UART_IRQHandler+0x15e>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00c      	beq.n	8006026 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 812d 	beq.w	800628c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00c      	beq.n	8006056 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d004      	beq.n	8006076 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006072:	2b00      	cmp	r3, #0
 8006074:	d031      	beq.n	80060da <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fd85 	bl	8006b86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d123      	bne.n	80060d2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006098:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d013      	beq.n	80060ca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	4a4a      	ldr	r2, [pc, #296]	; (80061d0 <HAL_UART_IRQHandler+0x308>)
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fd fc7c 	bl	80039ac <HAL_DMA_Abort_IT>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d017      	beq.n	80060ea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060c4:	4610      	mov	r0, r2
 80060c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	e00f      	b.n	80060ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f910 	bl	80062f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	e00b      	b.n	80060ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f90c 	bl	80062f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e007      	b.n	80060ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f908 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060e8:	e0d0      	b.n	800628c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ea:	bf00      	nop
    return;
 80060ec:	e0ce      	b.n	800628c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f040 80a7 	bne.w	8006246 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a1 	beq.w	8006246 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 809b 	beq.w	8006246 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2210      	movs	r2, #16
 8006116:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d156      	bne.n	80061d4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80ac 	beq.w	8006290 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800613e:	893a      	ldrh	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	f080 80a5 	bcs.w	8006290 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	893a      	ldrh	r2, [r7, #8]
 800614a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006158:	d02a      	beq.n	80061b0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006168:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006188:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0210 	bic.w	r2, r2, #16
 80061a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fd fb8e 	bl	80038cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f89d 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ca:	e061      	b.n	8006290 <HAL_UART_IRQHandler+0x3c8>
 80061cc:	04000120 	.word	0x04000120
 80061d0:	08006d99 	.word	0x08006d99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d050      	beq.n	8006294 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80061f2:	897b      	ldrh	r3, [r7, #10]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04d      	beq.n	8006294 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006206:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0201 	bic.w	r2, r2, #1
 8006216:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0210 	bic.w	r2, r2, #16
 8006238:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800623a:	897b      	ldrh	r3, [r7, #10]
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f860 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006244:	e026      	b.n	8006294 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01a      	beq.n	8006298 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
    }
    return;
 800626a:	e015      	b.n	8006298 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <HAL_UART_IRQHandler+0x3d2>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fd9f 	bl	8006dc4 <UART_EndTransmit_IT>
    return;
 8006286:	e008      	b.n	800629a <HAL_UART_IRQHandler+0x3d2>
      return;
 8006288:	bf00      	nop
 800628a:	e006      	b.n	800629a <HAL_UART_IRQHandler+0x3d2>
    return;
 800628c:	bf00      	nop
 800628e:	e004      	b.n	800629a <HAL_UART_IRQHandler+0x3d2>
      return;
 8006290:	bf00      	nop
 8006292:	e002      	b.n	800629a <HAL_UART_IRQHandler+0x3d2>
      return;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <HAL_UART_IRQHandler+0x3d2>
    return;
 8006298:	bf00      	nop
  }

}
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4ba7      	ldr	r3, [pc, #668]	; (80065e4 <UART_SetConfig+0x2c8>)
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	430b      	orrs	r3, r1
 8006352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a95      	ldr	r2, [pc, #596]	; (80065e8 <UART_SetConfig+0x2cc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d120      	bne.n	80063da <UART_SetConfig+0xbe>
 8006398:	4b94      	ldr	r3, [pc, #592]	; (80065ec <UART_SetConfig+0x2d0>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d816      	bhi.n	80063d4 <UART_SetConfig+0xb8>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0x90>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063c3 	.word	0x080063c3
 80063b8:	080063cf 	.word	0x080063cf
 80063bc:	2301      	movs	r3, #1
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e14f      	b.n	8006662 <UART_SetConfig+0x346>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e14c      	b.n	8006662 <UART_SetConfig+0x346>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e149      	b.n	8006662 <UART_SetConfig+0x346>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e146      	b.n	8006662 <UART_SetConfig+0x346>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e143      	b.n	8006662 <UART_SetConfig+0x346>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a84      	ldr	r2, [pc, #528]	; (80065f0 <UART_SetConfig+0x2d4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d132      	bne.n	800644a <UART_SetConfig+0x12e>
 80063e4:	4b81      	ldr	r3, [pc, #516]	; (80065ec <UART_SetConfig+0x2d0>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f003 030c 	and.w	r3, r3, #12
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d828      	bhi.n	8006444 <UART_SetConfig+0x128>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0xdc>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	08006445 	.word	0x08006445
 8006400:	08006445 	.word	0x08006445
 8006404:	08006445 	.word	0x08006445
 8006408:	08006439 	.word	0x08006439
 800640c:	08006445 	.word	0x08006445
 8006410:	08006445 	.word	0x08006445
 8006414:	08006445 	.word	0x08006445
 8006418:	08006433 	.word	0x08006433
 800641c:	08006445 	.word	0x08006445
 8006420:	08006445 	.word	0x08006445
 8006424:	08006445 	.word	0x08006445
 8006428:	0800643f 	.word	0x0800643f
 800642c:	2300      	movs	r3, #0
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e117      	b.n	8006662 <UART_SetConfig+0x346>
 8006432:	2302      	movs	r3, #2
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e114      	b.n	8006662 <UART_SetConfig+0x346>
 8006438:	2304      	movs	r3, #4
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e111      	b.n	8006662 <UART_SetConfig+0x346>
 800643e:	2308      	movs	r3, #8
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e10e      	b.n	8006662 <UART_SetConfig+0x346>
 8006444:	2310      	movs	r3, #16
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e10b      	b.n	8006662 <UART_SetConfig+0x346>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a69      	ldr	r2, [pc, #420]	; (80065f4 <UART_SetConfig+0x2d8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d120      	bne.n	8006496 <UART_SetConfig+0x17a>
 8006454:	4b65      	ldr	r3, [pc, #404]	; (80065ec <UART_SetConfig+0x2d0>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	d013      	beq.n	800648a <UART_SetConfig+0x16e>
 8006462:	2b30      	cmp	r3, #48	; 0x30
 8006464:	d814      	bhi.n	8006490 <UART_SetConfig+0x174>
 8006466:	2b20      	cmp	r3, #32
 8006468:	d009      	beq.n	800647e <UART_SetConfig+0x162>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d810      	bhi.n	8006490 <UART_SetConfig+0x174>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <UART_SetConfig+0x15c>
 8006472:	2b10      	cmp	r3, #16
 8006474:	d006      	beq.n	8006484 <UART_SetConfig+0x168>
 8006476:	e00b      	b.n	8006490 <UART_SetConfig+0x174>
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e0f1      	b.n	8006662 <UART_SetConfig+0x346>
 800647e:	2302      	movs	r3, #2
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e0ee      	b.n	8006662 <UART_SetConfig+0x346>
 8006484:	2304      	movs	r3, #4
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e0eb      	b.n	8006662 <UART_SetConfig+0x346>
 800648a:	2308      	movs	r3, #8
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e0e8      	b.n	8006662 <UART_SetConfig+0x346>
 8006490:	2310      	movs	r3, #16
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e0e5      	b.n	8006662 <UART_SetConfig+0x346>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a57      	ldr	r2, [pc, #348]	; (80065f8 <UART_SetConfig+0x2dc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d120      	bne.n	80064e2 <UART_SetConfig+0x1c6>
 80064a0:	4b52      	ldr	r3, [pc, #328]	; (80065ec <UART_SetConfig+0x2d0>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064aa:	2bc0      	cmp	r3, #192	; 0xc0
 80064ac:	d013      	beq.n	80064d6 <UART_SetConfig+0x1ba>
 80064ae:	2bc0      	cmp	r3, #192	; 0xc0
 80064b0:	d814      	bhi.n	80064dc <UART_SetConfig+0x1c0>
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d009      	beq.n	80064ca <UART_SetConfig+0x1ae>
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d810      	bhi.n	80064dc <UART_SetConfig+0x1c0>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <UART_SetConfig+0x1a8>
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d006      	beq.n	80064d0 <UART_SetConfig+0x1b4>
 80064c2:	e00b      	b.n	80064dc <UART_SetConfig+0x1c0>
 80064c4:	2300      	movs	r3, #0
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e0cb      	b.n	8006662 <UART_SetConfig+0x346>
 80064ca:	2302      	movs	r3, #2
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e0c8      	b.n	8006662 <UART_SetConfig+0x346>
 80064d0:	2304      	movs	r3, #4
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e0c5      	b.n	8006662 <UART_SetConfig+0x346>
 80064d6:	2308      	movs	r3, #8
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e0c2      	b.n	8006662 <UART_SetConfig+0x346>
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0bf      	b.n	8006662 <UART_SetConfig+0x346>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a45      	ldr	r2, [pc, #276]	; (80065fc <UART_SetConfig+0x2e0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d125      	bne.n	8006538 <UART_SetConfig+0x21c>
 80064ec:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <UART_SetConfig+0x2d0>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fa:	d017      	beq.n	800652c <UART_SetConfig+0x210>
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006500:	d817      	bhi.n	8006532 <UART_SetConfig+0x216>
 8006502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006506:	d00b      	beq.n	8006520 <UART_SetConfig+0x204>
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d811      	bhi.n	8006532 <UART_SetConfig+0x216>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <UART_SetConfig+0x1fe>
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d006      	beq.n	8006526 <UART_SetConfig+0x20a>
 8006518:	e00b      	b.n	8006532 <UART_SetConfig+0x216>
 800651a:	2300      	movs	r3, #0
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e0a0      	b.n	8006662 <UART_SetConfig+0x346>
 8006520:	2302      	movs	r3, #2
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e09d      	b.n	8006662 <UART_SetConfig+0x346>
 8006526:	2304      	movs	r3, #4
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e09a      	b.n	8006662 <UART_SetConfig+0x346>
 800652c:	2308      	movs	r3, #8
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e097      	b.n	8006662 <UART_SetConfig+0x346>
 8006532:	2310      	movs	r3, #16
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e094      	b.n	8006662 <UART_SetConfig+0x346>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a30      	ldr	r2, [pc, #192]	; (8006600 <UART_SetConfig+0x2e4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d125      	bne.n	800658e <UART_SetConfig+0x272>
 8006542:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <UART_SetConfig+0x2d0>)
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800654c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006550:	d017      	beq.n	8006582 <UART_SetConfig+0x266>
 8006552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006556:	d817      	bhi.n	8006588 <UART_SetConfig+0x26c>
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655c:	d00b      	beq.n	8006576 <UART_SetConfig+0x25a>
 800655e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006562:	d811      	bhi.n	8006588 <UART_SetConfig+0x26c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <UART_SetConfig+0x254>
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	d006      	beq.n	800657c <UART_SetConfig+0x260>
 800656e:	e00b      	b.n	8006588 <UART_SetConfig+0x26c>
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e075      	b.n	8006662 <UART_SetConfig+0x346>
 8006576:	2302      	movs	r3, #2
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e072      	b.n	8006662 <UART_SetConfig+0x346>
 800657c:	2304      	movs	r3, #4
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e06f      	b.n	8006662 <UART_SetConfig+0x346>
 8006582:	2308      	movs	r3, #8
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e06c      	b.n	8006662 <UART_SetConfig+0x346>
 8006588:	2310      	movs	r3, #16
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e069      	b.n	8006662 <UART_SetConfig+0x346>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <UART_SetConfig+0x2e8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d137      	bne.n	8006608 <UART_SetConfig+0x2ec>
 8006598:	4b14      	ldr	r3, [pc, #80]	; (80065ec <UART_SetConfig+0x2d0>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a6:	d017      	beq.n	80065d8 <UART_SetConfig+0x2bc>
 80065a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ac:	d817      	bhi.n	80065de <UART_SetConfig+0x2c2>
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	d00b      	beq.n	80065cc <UART_SetConfig+0x2b0>
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d811      	bhi.n	80065de <UART_SetConfig+0x2c2>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <UART_SetConfig+0x2aa>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d006      	beq.n	80065d2 <UART_SetConfig+0x2b6>
 80065c4:	e00b      	b.n	80065de <UART_SetConfig+0x2c2>
 80065c6:	2300      	movs	r3, #0
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e04a      	b.n	8006662 <UART_SetConfig+0x346>
 80065cc:	2302      	movs	r3, #2
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e047      	b.n	8006662 <UART_SetConfig+0x346>
 80065d2:	2304      	movs	r3, #4
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e044      	b.n	8006662 <UART_SetConfig+0x346>
 80065d8:	2308      	movs	r3, #8
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e041      	b.n	8006662 <UART_SetConfig+0x346>
 80065de:	2310      	movs	r3, #16
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e03e      	b.n	8006662 <UART_SetConfig+0x346>
 80065e4:	efff69f3 	.word	0xefff69f3
 80065e8:	40011000 	.word	0x40011000
 80065ec:	40023800 	.word	0x40023800
 80065f0:	40004400 	.word	0x40004400
 80065f4:	40004800 	.word	0x40004800
 80065f8:	40004c00 	.word	0x40004c00
 80065fc:	40005000 	.word	0x40005000
 8006600:	40011400 	.word	0x40011400
 8006604:	40007800 	.word	0x40007800
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a71      	ldr	r2, [pc, #452]	; (80067d4 <UART_SetConfig+0x4b8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d125      	bne.n	800665e <UART_SetConfig+0x342>
 8006612:	4b71      	ldr	r3, [pc, #452]	; (80067d8 <UART_SetConfig+0x4bc>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800661c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006620:	d017      	beq.n	8006652 <UART_SetConfig+0x336>
 8006622:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006626:	d817      	bhi.n	8006658 <UART_SetConfig+0x33c>
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662c:	d00b      	beq.n	8006646 <UART_SetConfig+0x32a>
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d811      	bhi.n	8006658 <UART_SetConfig+0x33c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <UART_SetConfig+0x324>
 8006638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800663c:	d006      	beq.n	800664c <UART_SetConfig+0x330>
 800663e:	e00b      	b.n	8006658 <UART_SetConfig+0x33c>
 8006640:	2300      	movs	r3, #0
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e00d      	b.n	8006662 <UART_SetConfig+0x346>
 8006646:	2302      	movs	r3, #2
 8006648:	77fb      	strb	r3, [r7, #31]
 800664a:	e00a      	b.n	8006662 <UART_SetConfig+0x346>
 800664c:	2304      	movs	r3, #4
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e007      	b.n	8006662 <UART_SetConfig+0x346>
 8006652:	2308      	movs	r3, #8
 8006654:	77fb      	strb	r3, [r7, #31]
 8006656:	e004      	b.n	8006662 <UART_SetConfig+0x346>
 8006658:	2310      	movs	r3, #16
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e001      	b.n	8006662 <UART_SetConfig+0x346>
 800665e:	2310      	movs	r3, #16
 8006660:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666a:	d15b      	bne.n	8006724 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800666c:	7ffb      	ldrb	r3, [r7, #31]
 800666e:	2b08      	cmp	r3, #8
 8006670:	d827      	bhi.n	80066c2 <UART_SetConfig+0x3a6>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x35c>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066c3 	.word	0x080066c3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066c3 	.word	0x080066c3
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066bb 	.word	0x080066bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fe fb74 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80066a0:	61b8      	str	r0, [r7, #24]
        break;
 80066a2:	e013      	b.n	80066cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fe fb84 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 80066a8:	61b8      	str	r0, [r7, #24]
        break;
 80066aa:	e00f      	b.n	80066cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ac:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <UART_SetConfig+0x4c0>)
 80066ae:	61bb      	str	r3, [r7, #24]
        break;
 80066b0:	e00c      	b.n	80066cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fe faa7 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 80066b6:	61b8      	str	r0, [r7, #24]
        break;
 80066b8:	e008      	b.n	80066cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066be:	61bb      	str	r3, [r7, #24]
        break;
 80066c0:	e004      	b.n	80066cc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	77bb      	strb	r3, [r7, #30]
        break;
 80066ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d074      	beq.n	80067bc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	005a      	lsls	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	441a      	add	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b0f      	cmp	r3, #15
 80066ee:	d916      	bls.n	800671e <UART_SetConfig+0x402>
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f6:	d212      	bcs.n	800671e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f023 030f 	bic.w	r3, r3, #15
 8006700:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	b29b      	uxth	r3, r3
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	b29a      	uxth	r2, r3
 800670e:	89fb      	ldrh	r3, [r7, #14]
 8006710:	4313      	orrs	r3, r2
 8006712:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	89fa      	ldrh	r2, [r7, #14]
 800671a:	60da      	str	r2, [r3, #12]
 800671c:	e04e      	b.n	80067bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	77bb      	strb	r3, [r7, #30]
 8006722:	e04b      	b.n	80067bc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006724:	7ffb      	ldrb	r3, [r7, #31]
 8006726:	2b08      	cmp	r3, #8
 8006728:	d827      	bhi.n	800677a <UART_SetConfig+0x45e>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x414>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006755 	.word	0x08006755
 8006734:	0800675d 	.word	0x0800675d
 8006738:	08006765 	.word	0x08006765
 800673c:	0800677b 	.word	0x0800677b
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800677b 	.word	0x0800677b
 8006748:	0800677b 	.word	0x0800677b
 800674c:	0800677b 	.word	0x0800677b
 8006750:	08006773 	.word	0x08006773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe fb18 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8006758:	61b8      	str	r0, [r7, #24]
        break;
 800675a:	e013      	b.n	8006784 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675c:	f7fe fb28 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8006760:	61b8      	str	r0, [r7, #24]
        break;
 8006762:	e00f      	b.n	8006784 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006764:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <UART_SetConfig+0x4c0>)
 8006766:	61bb      	str	r3, [r7, #24]
        break;
 8006768:	e00c      	b.n	8006784 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676a:	f7fe fa4b 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 800676e:	61b8      	str	r0, [r7, #24]
        break;
 8006770:	e008      	b.n	8006784 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006776:	61bb      	str	r3, [r7, #24]
        break;
 8006778:	e004      	b.n	8006784 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	77bb      	strb	r3, [r7, #30]
        break;
 8006782:	bf00      	nop
    }

    if (pclk != 0U)
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085a      	lsrs	r2, r3, #1
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	441a      	add	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	b29b      	uxth	r3, r3
 800679e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d908      	bls.n	80067b8 <UART_SetConfig+0x49c>
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d204      	bcs.n	80067b8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e001      	b.n	80067bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40007c00 	.word	0x40007c00
 80067d8:	40023800 	.word	0x40023800
 80067dc:	00f42400 	.word	0x00f42400

080067e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01a      	beq.n	80068f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068de:	d10a      	bne.n	80068f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  }
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af02      	add	r7, sp, #8
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006934:	f7fc fdaa 	bl	800348c <HAL_GetTick>
 8006938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b08      	cmp	r3, #8
 8006946:	d10e      	bne.n	8006966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f817 	bl	800698a <UART_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e00d      	b.n	8006982 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699a:	e05e      	b.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069a2:	d05a      	beq.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a4:	f7fc fd72 	bl	800348c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d302      	bcc.n	80069ba <UART_WaitOnFlagUntilTimeout+0x30>
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11b      	bne.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e043      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02c      	beq.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0e:	d124      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e00f      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d091      	beq.n	800699c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2222      	movs	r2, #34	; 0x22
 8006aac:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02b      	beq.n	8006b0e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <UART_Start_Receive_DMA+0xcc>)
 8006abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <UART_Start_Receive_DMA+0xd0>)
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <UART_Start_Receive_DMA+0xd4>)
 8006acc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3324      	adds	r3, #36	; 0x24
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	f7fc fe8f 	bl	800380c <HAL_DMA_Start_IT>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00c      	beq.n	8006b0e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2210      	movs	r2, #16
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e01c      	b.n	8006b48 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b24:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b44:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	08006c51 	.word	0x08006c51
 8006b54:	08006ce5 	.word	0x08006ce5
 8006b58:	08006d1d 	.word	0x08006d1d

08006b5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b72:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b9c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d107      	bne.n	8006bc6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0210 	bic.w	r2, r2, #16
 8006bc4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfa:	d014      	beq.n	8006c26 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c12:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c22:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c24:	e002      	b.n	8006c2c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fb3a 	bl	80062a0 <HAL_UART_TxCpltCallback>
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff fb36 	bl	80062b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c66:	d02a      	beq.n	8006cbe <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c7e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c9e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0210 	bic.w	r2, r2, #16
 8006cbc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d107      	bne.n	8006cd6 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fb18 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cd4:	e002      	b.n	8006cdc <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f7ff faf6 	bl	80062c8 <HAL_UART_RxCpltCallback>
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d109      	bne.n	8006d0e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4619      	mov	r1, r3
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fafc 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d0c:	e002      	b.n	8006d14 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff fae4 	bl	80062dc <HAL_UART_RxHalfCpltCallback>
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d109      	bne.n	8006d58 <UART_DMAError+0x3c>
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b21      	cmp	r3, #33	; 0x21
 8006d48:	d106      	bne.n	8006d58 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006d52:	6978      	ldr	r0, [r7, #20]
 8006d54:	f7ff ff02 	bl	8006b5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d109      	bne.n	8006d7a <UART_DMAError+0x5e>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b22      	cmp	r3, #34	; 0x22
 8006d6a:	d106      	bne.n	8006d7a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006d74:	6978      	ldr	r0, [r7, #20]
 8006d76:	f7ff ff06 	bl	8006b86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d80:	f043 0210 	orr.w	r2, r3, #16
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	f7ff fab0 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d90:	bf00      	nop
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff fa9a 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dda:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fa59 	bl	80062a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df8:	b084      	sub	sp, #16
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	f107 001c 	add.w	r0, r7, #28
 8006e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d120      	bne.n	8006e52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	4b20      	ldr	r3, [pc, #128]	; (8006ea4 <USB_CoreInit+0xac>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa5a 	bl	8007300 <USB_CoreReset>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e010      	b.n	8006e74 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa4e 	bl	8007300 <USB_CoreReset>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d10b      	bne.n	8006e92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f043 0206 	orr.w	r2, r3, #6
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f043 0220 	orr.w	r2, r3, #32
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e9e:	b004      	add	sp, #16
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	ffbdffbf 	.word	0xffbdffbf

08006ea8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f023 0201 	bic.w	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d106      	bne.n	8006ef6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]
 8006ef4:	e00b      	b.n	8006f0e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e001      	b.n	8006f0e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e003      	b.n	8006f16 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f0e:	2032      	movs	r0, #50	; 0x32
 8006f10:	f7fc fac8 	bl	80034a4 <HAL_Delay>

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f20:	b084      	sub	sp, #16
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b086      	sub	sp, #24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	e009      	b.n	8006f54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3340      	adds	r3, #64	; 0x40
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b0e      	cmp	r3, #14
 8006f58:	d9f2      	bls.n	8006f40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11c      	bne.n	8006f9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6e:	f043 0302 	orr.w	r3, r3, #2
 8006f72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e005      	b.n	8006fa6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	680b      	ldr	r3, [r1, #0]
 8006fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d10c      	bne.n	8006fe6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f959 	bl	800728c <USB_SetDevSpeed>
 8006fda:	e018      	b.n	800700e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fdc:	2101      	movs	r1, #1
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f954 	bl	800728c <USB_SetDevSpeed>
 8006fe4:	e013      	b.n	800700e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d10c      	bne.n	8007006 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f949 	bl	800728c <USB_SetDevSpeed>
 8006ffa:	e008      	b.n	800700e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f944 	bl	800728c <USB_SetDevSpeed>
 8007004:	e003      	b.n	800700e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007006:	2103      	movs	r1, #3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f93f 	bl	800728c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800700e:	2110      	movs	r1, #16
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8f3 	bl	80071fc <USB_FlushTxFifo>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f911 	bl	8007248 <USB_FlushRxFifo>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	461a      	mov	r2, r3
 8007038:	2300      	movs	r3, #0
 800703a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	461a      	mov	r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	461a      	mov	r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	e043      	b.n	80070e2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007070:	d118      	bne.n	80070a4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e013      	b.n	80070b6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	461a      	mov	r2, r3
 800709c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e008      	b.n	80070b6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	461a      	mov	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	461a      	mov	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	461a      	mov	r2, r3
 80070d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	3301      	adds	r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d3b7      	bcc.n	800705a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	e043      	b.n	8007178 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007106:	d118      	bne.n	800713a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	461a      	mov	r2, r3
 800711c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e013      	b.n	800714c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	e008      	b.n	800714c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	461a      	mov	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	461a      	mov	r2, r3
 800715a:	2300      	movs	r3, #0
 800715c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	461a      	mov	r2, r3
 800716c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3301      	adds	r3, #1
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d3b7      	bcc.n	80070f0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800718e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007192:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f043 0210 	orr.w	r2, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <USB_DevInit+0x2d4>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f043 0208 	orr.w	r2, r3, #8
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d105      	bne.n	80071e4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <USB_DevInit+0x2d8>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071f0:	b004      	add	sp, #16
 80071f2:	4770      	bx	lr
 80071f4:	803c3800 	.word	0x803c3800
 80071f8:	40000004 	.word	0x40000004

080071fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	019b      	lsls	r3, r3, #6
 800720e:	f043 0220 	orr.w	r2, r3, #32
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a09      	ldr	r2, [pc, #36]	; (8007244 <USB_FlushTxFifo+0x48>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d901      	bls.n	8007228 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e006      	b.n	8007236 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b20      	cmp	r3, #32
 8007232:	d0f0      	beq.n	8007216 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	00030d40 	.word	0x00030d40

08007248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2210      	movs	r2, #16
 8007258:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <USB_FlushRxFifo+0x40>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d901      	bls.n	800726c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e006      	b.n	800727a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b10      	cmp	r3, #16
 8007276:	d0f0      	beq.n	800725a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	00030d40 	.word	0x00030d40

0800728c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072d8:	f023 0303 	bic.w	r3, r3, #3
 80072dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <USB_CoreReset+0x64>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e01b      	b.n	8007356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	daf2      	bge.n	800730c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <USB_CoreReset+0x64>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d901      	bls.n	8007348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e006      	b.n	8007356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	d0f0      	beq.n	8007336 <USB_CoreReset+0x36>

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	00030d40 	.word	0x00030d40

08007368 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800736c:	bf00      	nop
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737e:	f3ef 8305 	mrs	r3, IPSR
 8007382:	60bb      	str	r3, [r7, #8]
  return(result);
 8007384:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738a:	f3ef 8310 	mrs	r3, PRIMASK
 800738e:	607b      	str	r3, [r7, #4]
  return(result);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007396:	f3ef 8311 	mrs	r3, BASEPRI
 800739a:	603b      	str	r3, [r7, #0]
  return(result);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <osKernelInitialize+0x3a>
 80073a2:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <osKernelInitialize+0x64>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d103      	bne.n	80073b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80073aa:	f06f 0305 	mvn.w	r3, #5
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e00c      	b.n	80073cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <osKernelInitialize+0x64>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d105      	bne.n	80073c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073ba:	4b08      	ldr	r3, [pc, #32]	; (80073dc <osKernelInitialize+0x64>)
 80073bc:	2201      	movs	r2, #1
 80073be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e002      	b.n	80073cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80073cc:	68fb      	ldr	r3, [r7, #12]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20005014 	.word	0x20005014

080073e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e6:	f3ef 8305 	mrs	r3, IPSR
 80073ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10f      	bne.n	8007412 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f2:	f3ef 8310 	mrs	r3, PRIMASK
 80073f6:	607b      	str	r3, [r7, #4]
  return(result);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007402:	603b      	str	r3, [r7, #0]
  return(result);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <osKernelStart+0x3a>
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <osKernelStart+0x68>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d103      	bne.n	800741a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007412:	f06f 0305 	mvn.w	r3, #5
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	e010      	b.n	800743c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <osKernelStart+0x68>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d109      	bne.n	8007436 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007422:	f7ff ffa1 	bl	8007368 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <osKernelStart+0x68>)
 8007428:	2202      	movs	r2, #2
 800742a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800742c:	f001 f8b4 	bl	8008598 <vTaskStartScheduler>
      stat = osOK;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e002      	b.n	800743c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800743a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800743c:	68fb      	ldr	r3, [r7, #12]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20005014 	.word	0x20005014

0800744c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b090      	sub	sp, #64	; 0x40
 8007450:	af04      	add	r7, sp, #16
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745c:	f3ef 8305 	mrs	r3, IPSR
 8007460:	61fb      	str	r3, [r7, #28]
  return(result);
 8007462:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 808f 	bne.w	8007588 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746a:	f3ef 8310 	mrs	r3, PRIMASK
 800746e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007476:	f3ef 8311 	mrs	r3, BASEPRI
 800747a:	617b      	str	r3, [r7, #20]
  return(result);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <osThreadNew+0x3e>
 8007482:	4b44      	ldr	r3, [pc, #272]	; (8007594 <osThreadNew+0x148>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d07e      	beq.n	8007588 <osThreadNew+0x13c>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d07b      	beq.n	8007588 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007494:	2318      	movs	r3, #24
 8007496:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007498:	2300      	movs	r3, #0
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800749c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d045      	beq.n	8007534 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <osThreadNew+0x6a>
        name = attr->name;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d008      	beq.n	80074dc <osThreadNew+0x90>
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	2b38      	cmp	r3, #56	; 0x38
 80074ce:	d805      	bhi.n	80074dc <osThreadNew+0x90>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <osThreadNew+0x94>
        return (NULL);
 80074dc:	2300      	movs	r3, #0
 80074de:	e054      	b.n	800758a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	089b      	lsrs	r3, r3, #2
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <osThreadNew+0xca>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b5b      	cmp	r3, #91	; 0x5b
 80074fe:	d90a      	bls.n	8007516 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007504:	2b00      	cmp	r3, #0
 8007506:	d006      	beq.n	8007516 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <osThreadNew+0xca>
        mem = 1;
 8007510:	2301      	movs	r3, #1
 8007512:	623b      	str	r3, [r7, #32]
 8007514:	e010      	b.n	8007538 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10c      	bne.n	8007538 <osThreadNew+0xec>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d108      	bne.n	8007538 <osThreadNew+0xec>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <osThreadNew+0xec>
          mem = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	e001      	b.n	8007538 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d110      	bne.n	8007560 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007546:	9202      	str	r2, [sp, #8]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fe3f 	bl	80081d8 <xTaskCreateStatic>
 800755a:	4603      	mov	r3, r0
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	e013      	b.n	8007588 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d110      	bne.n	8007588 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	b29a      	uxth	r2, r3
 800756a:	f107 0310 	add.w	r3, r7, #16
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fe90 	bl	800829e <xTaskCreate>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d001      	beq.n	8007588 <osThreadNew+0x13c>
          hTask = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007588:	693b      	ldr	r3, [r7, #16]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3730      	adds	r7, #48	; 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20005014 	.word	0x20005014

08007598 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075a0:	f3ef 8305 	mrs	r3, IPSR
 80075a4:	613b      	str	r3, [r7, #16]
  return(result);
 80075a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10f      	bne.n	80075cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ac:	f3ef 8310 	mrs	r3, PRIMASK
 80075b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075b8:	f3ef 8311 	mrs	r3, BASEPRI
 80075bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <osDelay+0x3c>
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <osDelay+0x58>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d103      	bne.n	80075d4 <osDelay+0x3c>
    stat = osErrorISR;
 80075cc:	f06f 0305 	mvn.w	r3, #5
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e007      	b.n	80075e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 ffa4 	bl	800852c <vTaskDelay>
    }
  }

  return (stat);
 80075e4:	697b      	ldr	r3, [r7, #20]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20005014 	.word	0x20005014

080075f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a07      	ldr	r2, [pc, #28]	; (8007620 <vApplicationGetIdleTaskMemory+0x2c>)
 8007604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a06      	ldr	r2, [pc, #24]	; (8007624 <vApplicationGetIdleTaskMemory+0x30>)
 800760a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	20005018 	.word	0x20005018
 8007624:	20005074 	.word	0x20005074

08007628 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4a07      	ldr	r2, [pc, #28]	; (8007654 <vApplicationGetTimerTaskMemory+0x2c>)
 8007638:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a06      	ldr	r2, [pc, #24]	; (8007658 <vApplicationGetTimerTaskMemory+0x30>)
 800763e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007646:	601a      	str	r2, [r3, #0]
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20005274 	.word	0x20005274
 8007658:	200052d0 	.word	0x200052d0

0800765c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f103 0208 	add.w	r2, r3, #8
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f103 0208 	add.w	r2, r3, #8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f103 0208 	add.w	r2, r3, #8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	601a      	str	r2, [r3, #0]
}
 80076f2:	bf00      	nop
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007714:	d103      	bne.n	800771e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e00c      	b.n	8007738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3308      	adds	r3, #8
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e002      	b.n	800772c <vListInsert+0x2e>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	d2f6      	bcs.n	8007726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6892      	ldr	r2, [r2, #8]
 8007786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6852      	ldr	r2, [r2, #4]
 8007790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d103      	bne.n	80077a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	1e5a      	subs	r2, r3, #1
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10c      	bne.n	80077f2 <xQueueGenericReset+0x2e>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	b672      	cpsid	i
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	b662      	cpsie	i
 80077ec:	60bb      	str	r3, [r7, #8]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80077f2:	f002 f8a3 	bl	800993c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	441a      	add	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	3b01      	subs	r3, #1
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007828:	fb01 f303 	mul.w	r3, r1, r3
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	22ff      	movs	r2, #255	; 0xff
 800783e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d114      	bne.n	8007872 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3310      	adds	r3, #16
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f937 	bl	8008ac8 <xTaskRemoveFromEventList>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d012      	beq.n	8007886 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007860:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <xQueueGenericReset+0xd0>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	e009      	b.n	8007886 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3310      	adds	r3, #16
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fef0 	bl	800765c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff feeb 	bl	800765c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007886:	f002 f88d 	bl	80099a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800788a:	2301      	movs	r3, #1
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08e      	sub	sp, #56	; 0x38
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10c      	bne.n	80078c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	b672      	cpsid	i
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	b662      	cpsie	i
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	b672      	cpsid	i
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	b662      	cpsie	i
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <xQueueGenericCreateStatic+0x5a>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <xQueueGenericCreateStatic+0x5e>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <xQueueGenericCreateStatic+0x60>
 80078f6:	2300      	movs	r3, #0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10c      	bne.n	8007916 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	b672      	cpsid	i
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	b662      	cpsie	i
 8007910:	623b      	str	r3, [r7, #32]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d102      	bne.n	8007922 <xQueueGenericCreateStatic+0x8a>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <xQueueGenericCreateStatic+0x8e>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <xQueueGenericCreateStatic+0x90>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	61fb      	str	r3, [r7, #28]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007946:	2350      	movs	r3, #80	; 0x50
 8007948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b50      	cmp	r3, #80	; 0x50
 800794e:	d00c      	beq.n	800796a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	b672      	cpsid	i
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	b662      	cpsie	i
 8007964:	61bb      	str	r3, [r7, #24]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800796a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800797e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f805 	bl	800799c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007994:	4618      	mov	r0, r3
 8007996:	3730      	adds	r7, #48	; 0x30
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e002      	b.n	80079be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079ca:	2101      	movs	r1, #1
 80079cc:	69b8      	ldr	r0, [r7, #24]
 80079ce:	f7ff fef9 	bl	80077c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08e      	sub	sp, #56	; 0x38
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079f2:	2300      	movs	r3, #0
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10c      	bne.n	8007a1a <xQueueGenericSend+0x36>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	b672      	cpsid	i
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	b662      	cpsie	i
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <xQueueGenericSend+0x44>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <xQueueGenericSend+0x48>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <xQueueGenericSend+0x4a>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <xQueueGenericSend+0x68>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d103      	bne.n	8007a5a <xQueueGenericSend+0x76>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <xQueueGenericSend+0x7a>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <xQueueGenericSend+0x7c>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10c      	bne.n	8007a7e <xQueueGenericSend+0x9a>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	b672      	cpsid	i
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	b662      	cpsie	i
 8007a78:	623b      	str	r3, [r7, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a7e:	f001 fa11 	bl	8008ea4 <xTaskGetSchedulerState>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d102      	bne.n	8007a8e <xQueueGenericSend+0xaa>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <xQueueGenericSend+0xae>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e000      	b.n	8007a94 <xQueueGenericSend+0xb0>
 8007a92:	2300      	movs	r3, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10c      	bne.n	8007ab2 <xQueueGenericSend+0xce>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	b672      	cpsid	i
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	b662      	cpsie	i
 8007aac:	61fb      	str	r3, [r7, #28]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ab2:	f001 ff43 	bl	800993c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <xQueueGenericSend+0xe4>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d129      	bne.n	8007b1c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ace:	f000 fa15 	bl	8007efc <prvCopyDataToQueue>
 8007ad2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d010      	beq.n	8007afe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	3324      	adds	r3, #36	; 0x24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fff1 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d013      	beq.n	8007b14 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007aec:	4b3f      	ldr	r3, [pc, #252]	; (8007bec <xQueueGenericSend+0x208>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	e00a      	b.n	8007b14 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d007      	beq.n	8007b14 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b04:	4b39      	ldr	r3, [pc, #228]	; (8007bec <xQueueGenericSend+0x208>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b14:	f001 ff46 	bl	80099a4 <vPortExitCritical>
				return pdPASS;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e063      	b.n	8007be4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d103      	bne.n	8007b2a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b22:	f001 ff3f 	bl	80099a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e05c      	b.n	8007be4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 f855 	bl	8008be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b3e:	f001 ff31 	bl	80099a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b42:	f000 fd93 	bl	800866c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b46:	f001 fef9 	bl	800993c <vPortEnterCritical>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b56:	d103      	bne.n	8007b60 <xQueueGenericSend+0x17c>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b66:	b25b      	sxtb	r3, r3
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b6c:	d103      	bne.n	8007b76 <xQueueGenericSend+0x192>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b76:	f001 ff15 	bl	80099a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b7a:	1d3a      	adds	r2, r7, #4
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 f844 	bl	8008c10 <xTaskCheckForTimeOut>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d124      	bne.n	8007bd8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b90:	f000 faac 	bl	80080ec <prvIsQueueFull>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d018      	beq.n	8007bcc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	3310      	adds	r3, #16
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 ff3c 	bl	8008a20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007baa:	f000 fa37 	bl	800801c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bae:	f000 fd6b 	bl	8008688 <xTaskResumeAll>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f af7c 	bne.w	8007ab2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <xQueueGenericSend+0x208>)
 8007bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	e772      	b.n	8007ab2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bce:	f000 fa25 	bl	800801c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bd2:	f000 fd59 	bl	8008688 <xTaskResumeAll>
 8007bd6:	e76c      	b.n	8007ab2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bda:	f000 fa1f 	bl	800801c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bde:	f000 fd53 	bl	8008688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007be2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3738      	adds	r7, #56	; 0x38
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	; 0x38
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	b672      	cpsid	i
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	b662      	cpsie	i
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <xQueueGenericSendFromISR+0x40>
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <xQueueGenericSendFromISR+0x44>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <xQueueGenericSendFromISR+0x46>
 8007c34:	2300      	movs	r3, #0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10c      	bne.n	8007c54 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	b672      	cpsid	i
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	b662      	cpsie	i
 8007c4e:	623b      	str	r3, [r7, #32]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d103      	bne.n	8007c62 <xQueueGenericSendFromISR+0x72>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <xQueueGenericSendFromISR+0x76>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e000      	b.n	8007c68 <xQueueGenericSendFromISR+0x78>
 8007c66:	2300      	movs	r3, #0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10c      	bne.n	8007c86 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	b672      	cpsid	i
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	b662      	cpsie	i
 8007c80:	61fb      	str	r3, [r7, #28]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c86:	f001 ff41 	bl	8009b0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	b672      	cpsid	i
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	b662      	cpsie	i
 8007ca2:	61ba      	str	r2, [r7, #24]
 8007ca4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d302      	bcc.n	8007cbc <xQueueGenericSendFromISR+0xcc>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d12c      	bne.n	8007d16 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ccc:	f000 f916 	bl	8007efc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cd0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd8:	d112      	bne.n	8007d00 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d016      	beq.n	8007d10 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	3324      	adds	r3, #36	; 0x24
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 feee 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00e      	beq.n	8007d10 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e007      	b.n	8007d10 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d04:	3301      	adds	r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	b25a      	sxtb	r2, r3
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d10:	2301      	movs	r3, #1
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007d14:	e001      	b.n	8007d1a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3738      	adds	r7, #56	; 0x38
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08c      	sub	sp, #48	; 0x30
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <xQueueReceive+0x34>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	b672      	cpsid	i
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	b662      	cpsie	i
 8007d5e:	623b      	str	r3, [r7, #32]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <xQueueReceive+0x42>
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <xQueueReceive+0x46>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <xQueueReceive+0x48>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10c      	bne.n	8007d96 <xQueueReceive+0x66>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	b672      	cpsid	i
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	b662      	cpsie	i
 8007d90:	61fb      	str	r3, [r7, #28]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d96:	f001 f885 	bl	8008ea4 <xTaskGetSchedulerState>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <xQueueReceive+0x76>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <xQueueReceive+0x7a>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <xQueueReceive+0x7c>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <xQueueReceive+0x9a>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	b672      	cpsid	i
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	b662      	cpsie	i
 8007dc4:	61bb      	str	r3, [r7, #24]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dca:	f001 fdb7 	bl	800993c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01f      	beq.n	8007e1a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dde:	f000 f8f7 	bl	8007fd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00f      	beq.n	8007e12 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	3310      	adds	r3, #16
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fe66 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e02:	4b3d      	ldr	r3, [pc, #244]	; (8007ef8 <xQueueReceive+0x1c8>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e12:	f001 fdc7 	bl	80099a4 <vPortExitCritical>
				return pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e069      	b.n	8007eee <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d103      	bne.n	8007e28 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e20:	f001 fdc0 	bl	80099a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e062      	b.n	8007eee <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e2e:	f107 0310 	add.w	r3, r7, #16
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fed6 	bl	8008be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e3c:	f001 fdb2 	bl	80099a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e40:	f000 fc14 	bl	800866c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e44:	f001 fd7a 	bl	800993c <vPortEnterCritical>
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e54:	d103      	bne.n	8007e5e <xQueueReceive+0x12e>
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e6a:	d103      	bne.n	8007e74 <xQueueReceive+0x144>
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e74:	f001 fd96 	bl	80099a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e78:	1d3a      	adds	r2, r7, #4
 8007e7a:	f107 0310 	add.w	r3, r7, #16
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fec5 	bl	8008c10 <xTaskCheckForTimeOut>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d123      	bne.n	8007ed4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8e:	f000 f917 	bl	80080c0 <prvIsQueueEmpty>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d017      	beq.n	8007ec8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	3324      	adds	r3, #36	; 0x24
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fdbd 	bl	8008a20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea8:	f000 f8b8 	bl	800801c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eac:	f000 fbec 	bl	8008688 <xTaskResumeAll>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d189      	bne.n	8007dca <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <xQueueReceive+0x1c8>)
 8007eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	e780      	b.n	8007dca <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eca:	f000 f8a7 	bl	800801c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ece:	f000 fbdb 	bl	8008688 <xTaskResumeAll>
 8007ed2:	e77a      	b.n	8007dca <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed6:	f000 f8a1 	bl	800801c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eda:	f000 fbd5 	bl	8008688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee0:	f000 f8ee 	bl	80080c0 <prvIsQueueEmpty>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f43f af6f 	beq.w	8007dca <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3730      	adds	r7, #48	; 0x30
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d14d      	bne.n	8007fbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 ffda 	bl	8008ee0 <xTaskPriorityDisinherit>
 8007f2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	609a      	str	r2, [r3, #8]
 8007f34:	e043      	b.n	8007fbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d119      	bne.n	8007f70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6858      	ldr	r0, [r3, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	461a      	mov	r2, r3
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	f7f8 f97a 	bl	8000240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	441a      	add	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d32b      	bcc.n	8007fbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	e026      	b.n	8007fbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68d8      	ldr	r0, [r3, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	f7f8 f960 	bl	8000240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	425b      	negs	r3, r3
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d207      	bcs.n	8007fac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	425b      	negs	r3, r3
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d105      	bne.n	8007fbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fc6:	697b      	ldr	r3, [r7, #20]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	441a      	add	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d303      	bcc.n	8008004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68d9      	ldr	r1, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	461a      	mov	r2, r3
 800800e:	6838      	ldr	r0, [r7, #0]
 8008010:	f7f8 f916 	bl	8000240 <memcpy>
	}
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008024:	f001 fc8a 	bl	800993c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008030:	e011      	b.n	8008056 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	d012      	beq.n	8008060 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3324      	adds	r3, #36	; 0x24
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fd42 	bl	8008ac8 <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800804a:	f000 fe47 	bl	8008cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	3b01      	subs	r3, #1
 8008052:	b2db      	uxtb	r3, r3
 8008054:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800805a:	2b00      	cmp	r3, #0
 800805c:	dce9      	bgt.n	8008032 <prvUnlockQueue+0x16>
 800805e:	e000      	b.n	8008062 <prvUnlockQueue+0x46>
					break;
 8008060:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	22ff      	movs	r2, #255	; 0xff
 8008066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800806a:	f001 fc9b 	bl	80099a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800806e:	f001 fc65 	bl	800993c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008078:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800807a:	e011      	b.n	80080a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d012      	beq.n	80080aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3310      	adds	r3, #16
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fd1d 	bl	8008ac8 <xTaskRemoveFromEventList>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008094:	f000 fe22 	bl	8008cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	3b01      	subs	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dce9      	bgt.n	800807c <prvUnlockQueue+0x60>
 80080a8:	e000      	b.n	80080ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	22ff      	movs	r2, #255	; 0xff
 80080b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080b4:	f001 fc76 	bl	80099a4 <vPortExitCritical>
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080c8:	f001 fc38 	bl	800993c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	e001      	b.n	80080de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080de:	f001 fc61 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 80080e2:	68fb      	ldr	r3, [r7, #12]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080f4:	f001 fc22 	bl	800993c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008100:	429a      	cmp	r2, r3
 8008102:	d102      	bne.n	800810a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	e001      	b.n	800810e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800810e:	f001 fc49 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e014      	b.n	8008156 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800812c:	4a0f      	ldr	r2, [pc, #60]	; (800816c <vQueueAddToRegistry+0x50>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008138:	490c      	ldr	r1, [pc, #48]	; (800816c <vQueueAddToRegistry+0x50>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008142:	4a0a      	ldr	r2, [pc, #40]	; (800816c <vQueueAddToRegistry+0x50>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4413      	add	r3, r2
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800814e:	e006      	b.n	800815e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b07      	cmp	r3, #7
 800815a:	d9e7      	bls.n	800812c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	2000a0f8 	.word	0x2000a0f8

08008170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008180:	f001 fbdc 	bl	800993c <vPortEnterCritical>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800818a:	b25b      	sxtb	r3, r3
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008190:	d103      	bne.n	800819a <vQueueWaitForMessageRestricted+0x2a>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a6:	d103      	bne.n	80081b0 <vQueueWaitForMessageRestricted+0x40>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081b0:	f001 fbf8 	bl	80099a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	3324      	adds	r3, #36	; 0x24
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fc51 	bl	8008a6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081ca:	6978      	ldr	r0, [r7, #20]
 80081cc:	f7ff ff26 	bl	800801c <prvUnlockQueue>
	}
 80081d0:	bf00      	nop
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	; 0x38
 80081dc:	af04      	add	r7, sp, #16
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10c      	bne.n	8008206 <xTaskCreateStatic+0x2e>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	b672      	cpsid	i
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	b662      	cpsie	i
 8008200:	623b      	str	r3, [r7, #32]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10c      	bne.n	8008226 <xTaskCreateStatic+0x4e>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	b672      	cpsid	i
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	b662      	cpsie	i
 8008220:	61fb      	str	r3, [r7, #28]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008226:	235c      	movs	r3, #92	; 0x5c
 8008228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b5c      	cmp	r3, #92	; 0x5c
 800822e:	d00c      	beq.n	800824a <xTaskCreateStatic+0x72>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	b672      	cpsid	i
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	b662      	cpsie	i
 8008244:	61bb      	str	r3, [r7, #24]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800824a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01e      	beq.n	8008290 <xTaskCreateStatic+0xb8>
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008260:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	2202      	movs	r2, #2
 8008266:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800826a:	2300      	movs	r3, #0
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	f107 0314 	add.w	r3, r7, #20
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f850 	bl	8008328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800828a:	f000 f8df 	bl	800844c <prvAddNewTaskToReadyList>
 800828e:	e001      	b.n	8008294 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008294:	697b      	ldr	r3, [r7, #20]
	}
 8008296:	4618      	mov	r0, r3
 8008298:	3728      	adds	r7, #40	; 0x28
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b08c      	sub	sp, #48	; 0x30
 80082a2:	af04      	add	r7, sp, #16
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	603b      	str	r3, [r7, #0]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 fc6e 	bl	8009b94 <pvPortMalloc>
 80082b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00e      	beq.n	80082de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082c0:	205c      	movs	r0, #92	; 0x5c
 80082c2:	f001 fc67 	bl	8009b94 <pvPortMalloc>
 80082c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
 80082d4:	e005      	b.n	80082e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082d6:	6978      	ldr	r0, [r7, #20]
 80082d8:	f001 fd26 	bl	8009d28 <vPortFree>
 80082dc:	e001      	b.n	80082e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d017      	beq.n	8008318 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082f0:	88fa      	ldrh	r2, [r7, #6]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9303      	str	r3, [sp, #12]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68b9      	ldr	r1, [r7, #8]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f80e 	bl	8008328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800830c:	69f8      	ldr	r0, [r7, #28]
 800830e:	f000 f89d 	bl	800844c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008312:	2301      	movs	r3, #1
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	e002      	b.n	800831e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800831c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800831e:	69bb      	ldr	r3, [r7, #24]
	}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	461a      	mov	r2, r3
 8008340:	21a5      	movs	r1, #165	; 0xa5
 8008342:	f00d faa9 	bl	8015898 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008350:	440b      	add	r3, r1
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	b672      	cpsid	i
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	b662      	cpsie	i
 800837e:	617b      	str	r3, [r7, #20]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d01f      	beq.n	80083ca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800838a:	2300      	movs	r3, #0
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	e012      	b.n	80083b6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	7819      	ldrb	r1, [r3, #0]
 8008398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	3334      	adds	r3, #52	; 0x34
 80083a0:	460a      	mov	r2, r1
 80083a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	3301      	adds	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	2b0f      	cmp	r3, #15
 80083ba:	d9e9      	bls.n	8008390 <prvInitialiseNewTask+0x68>
 80083bc:	e000      	b.n	80083c0 <prvInitialiseNewTask+0x98>
			{
				break;
 80083be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083c8:	e003      	b.n	80083d2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	2b37      	cmp	r3, #55	; 0x37
 80083d6:	d901      	bls.n	80083dc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083d8:	2337      	movs	r3, #55	; 0x37
 80083da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	2200      	movs	r2, #0
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f952 	bl	800769c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	3318      	adds	r3, #24
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff f94d 	bl	800769c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008416:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2200      	movs	r2, #0
 800841c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	68f9      	ldr	r1, [r7, #12]
 800842a:	69b8      	ldr	r0, [r7, #24]
 800842c:	f001 f97a 	bl	8009724 <pxPortInitialiseStack>
 8008430:	4602      	mov	r2, r0
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008442:	bf00      	nop
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008454:	f001 fa72 	bl	800993c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008458:	4b2d      	ldr	r3, [pc, #180]	; (8008510 <prvAddNewTaskToReadyList+0xc4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	4a2c      	ldr	r2, [pc, #176]	; (8008510 <prvAddNewTaskToReadyList+0xc4>)
 8008460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008462:	4b2c      	ldr	r3, [pc, #176]	; (8008514 <prvAddNewTaskToReadyList+0xc8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d109      	bne.n	800847e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800846a:	4a2a      	ldr	r2, [pc, #168]	; (8008514 <prvAddNewTaskToReadyList+0xc8>)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008470:	4b27      	ldr	r3, [pc, #156]	; (8008510 <prvAddNewTaskToReadyList+0xc4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d110      	bne.n	800849a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008478:	f000 fc54 	bl	8008d24 <prvInitialiseTaskLists>
 800847c:	e00d      	b.n	800849a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800847e:	4b26      	ldr	r3, [pc, #152]	; (8008518 <prvAddNewTaskToReadyList+0xcc>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008486:	4b23      	ldr	r3, [pc, #140]	; (8008514 <prvAddNewTaskToReadyList+0xc8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	429a      	cmp	r2, r3
 8008492:	d802      	bhi.n	800849a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008494:	4a1f      	ldr	r2, [pc, #124]	; (8008514 <prvAddNewTaskToReadyList+0xc8>)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800849a:	4b20      	ldr	r3, [pc, #128]	; (800851c <prvAddNewTaskToReadyList+0xd0>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3301      	adds	r3, #1
 80084a0:	4a1e      	ldr	r2, [pc, #120]	; (800851c <prvAddNewTaskToReadyList+0xd0>)
 80084a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084a4:	4b1d      	ldr	r3, [pc, #116]	; (800851c <prvAddNewTaskToReadyList+0xd0>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <prvAddNewTaskToReadyList+0xd4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d903      	bls.n	80084c0 <prvAddNewTaskToReadyList+0x74>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	4a18      	ldr	r2, [pc, #96]	; (8008520 <prvAddNewTaskToReadyList+0xd4>)
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4a15      	ldr	r2, [pc, #84]	; (8008524 <prvAddNewTaskToReadyList+0xd8>)
 80084ce:	441a      	add	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7ff f8ed 	bl	80076b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084dc:	f001 fa62 	bl	80099a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084e0:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <prvAddNewTaskToReadyList+0xcc>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <prvAddNewTaskToReadyList+0xc8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d207      	bcs.n	8008506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <prvAddNewTaskToReadyList+0xdc>)
 80084f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20005ba4 	.word	0x20005ba4
 8008514:	200056d0 	.word	0x200056d0
 8008518:	20005bb0 	.word	0x20005bb0
 800851c:	20005bc0 	.word	0x20005bc0
 8008520:	20005bac 	.word	0x20005bac
 8008524:	200056d4 	.word	0x200056d4
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d019      	beq.n	8008572 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800853e:	4b14      	ldr	r3, [pc, #80]	; (8008590 <vTaskDelay+0x64>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <vTaskDelay+0x34>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	b672      	cpsid	i
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	b662      	cpsie	i
 800855a:	60bb      	str	r3, [r7, #8]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008560:	f000 f884 	bl	800866c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008564:	2100      	movs	r1, #0
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fd2c 	bl	8008fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800856c:	f000 f88c 	bl	8008688 <xTaskResumeAll>
 8008570:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d107      	bne.n	8008588 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008578:	4b06      	ldr	r3, [pc, #24]	; (8008594 <vTaskDelay+0x68>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20005bcc 	.word	0x20005bcc
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085a6:	463a      	mov	r2, r7
 80085a8:	1d39      	adds	r1, r7, #4
 80085aa:	f107 0308 	add.w	r3, r7, #8
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff f820 	bl	80075f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	9202      	str	r2, [sp, #8]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	2300      	movs	r3, #0
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	2300      	movs	r3, #0
 80085c4:	460a      	mov	r2, r1
 80085c6:	4923      	ldr	r1, [pc, #140]	; (8008654 <vTaskStartScheduler+0xbc>)
 80085c8:	4823      	ldr	r0, [pc, #140]	; (8008658 <vTaskStartScheduler+0xc0>)
 80085ca:	f7ff fe05 	bl	80081d8 <xTaskCreateStatic>
 80085ce:	4603      	mov	r3, r0
 80085d0:	4a22      	ldr	r2, [pc, #136]	; (800865c <vTaskStartScheduler+0xc4>)
 80085d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085d4:	4b21      	ldr	r3, [pc, #132]	; (800865c <vTaskStartScheduler+0xc4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e001      	b.n	80085e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d102      	bne.n	80085f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085ec:	f000 fd3e 	bl	800906c <xTimerCreateTimerTask>
 80085f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d118      	bne.n	800862a <vTaskStartScheduler+0x92>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	b672      	cpsid	i
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	b662      	cpsie	i
 800860c:	613b      	str	r3, [r7, #16]
}
 800860e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008610:	4b13      	ldr	r3, [pc, #76]	; (8008660 <vTaskStartScheduler+0xc8>)
 8008612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008616:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008618:	4b12      	ldr	r3, [pc, #72]	; (8008664 <vTaskStartScheduler+0xcc>)
 800861a:	2201      	movs	r2, #1
 800861c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800861e:	4b12      	ldr	r3, [pc, #72]	; (8008668 <vTaskStartScheduler+0xd0>)
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008624:	f001 f90c 	bl	8009840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008628:	e010      	b.n	800864c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008630:	d10c      	bne.n	800864c <vTaskStartScheduler+0xb4>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	b672      	cpsid	i
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	b662      	cpsie	i
 8008646:	60fb      	str	r3, [r7, #12]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <vTaskStartScheduler+0xb2>
}
 800864c:	bf00      	nop
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	0801eb0c 	.word	0x0801eb0c
 8008658:	08008cf5 	.word	0x08008cf5
 800865c:	20005bc8 	.word	0x20005bc8
 8008660:	20005bc4 	.word	0x20005bc4
 8008664:	20005bb0 	.word	0x20005bb0
 8008668:	20005ba8 	.word	0x20005ba8

0800866c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008670:	4b04      	ldr	r3, [pc, #16]	; (8008684 <vTaskSuspendAll+0x18>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	4a03      	ldr	r2, [pc, #12]	; (8008684 <vTaskSuspendAll+0x18>)
 8008678:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800867a:	bf00      	nop
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20005bcc 	.word	0x20005bcc

08008688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008696:	4b43      	ldr	r3, [pc, #268]	; (80087a4 <xTaskResumeAll+0x11c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <xTaskResumeAll+0x30>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	603b      	str	r3, [r7, #0]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086b8:	f001 f940 	bl	800993c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086bc:	4b39      	ldr	r3, [pc, #228]	; (80087a4 <xTaskResumeAll+0x11c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	4a38      	ldr	r2, [pc, #224]	; (80087a4 <xTaskResumeAll+0x11c>)
 80086c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c6:	4b37      	ldr	r3, [pc, #220]	; (80087a4 <xTaskResumeAll+0x11c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d162      	bne.n	8008794 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086ce:	4b36      	ldr	r3, [pc, #216]	; (80087a8 <xTaskResumeAll+0x120>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d05e      	beq.n	8008794 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086d6:	e02f      	b.n	8008738 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d8:	4b34      	ldr	r3, [pc, #208]	; (80087ac <xTaskResumeAll+0x124>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3318      	adds	r3, #24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff f843 	bl	8007770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff f83e 	bl	8007770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f8:	4b2d      	ldr	r3, [pc, #180]	; (80087b0 <xTaskResumeAll+0x128>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d903      	bls.n	8008708 <xTaskResumeAll+0x80>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <xTaskResumeAll+0x128>)
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4a27      	ldr	r2, [pc, #156]	; (80087b4 <xTaskResumeAll+0x12c>)
 8008716:	441a      	add	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f7fe ffc9 	bl	80076b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <xTaskResumeAll+0x130>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	429a      	cmp	r2, r3
 8008730:	d302      	bcc.n	8008738 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008732:	4b22      	ldr	r3, [pc, #136]	; (80087bc <xTaskResumeAll+0x134>)
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008738:	4b1c      	ldr	r3, [pc, #112]	; (80087ac <xTaskResumeAll+0x124>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1cb      	bne.n	80086d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008746:	f000 fb8d 	bl	8008e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800874a:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <xTaskResumeAll+0x138>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d010      	beq.n	8008778 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008756:	f000 f847 	bl	80087e8 <xTaskIncrementTick>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008760:	4b16      	ldr	r3, [pc, #88]	; (80087bc <xTaskResumeAll+0x134>)
 8008762:	2201      	movs	r2, #1
 8008764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3b01      	subs	r3, #1
 800876a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f1      	bne.n	8008756 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <xTaskResumeAll+0x138>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008778:	4b10      	ldr	r3, [pc, #64]	; (80087bc <xTaskResumeAll+0x134>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <xTaskResumeAll+0x13c>)
 8008786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008794:	f001 f906 	bl	80099a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008798:	68bb      	ldr	r3, [r7, #8]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20005bcc 	.word	0x20005bcc
 80087a8:	20005ba4 	.word	0x20005ba4
 80087ac:	20005b64 	.word	0x20005b64
 80087b0:	20005bac 	.word	0x20005bac
 80087b4:	200056d4 	.word	0x200056d4
 80087b8:	200056d0 	.word	0x200056d0
 80087bc:	20005bb8 	.word	0x20005bb8
 80087c0:	20005bb4 	.word	0x20005bb4
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ce:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <xTaskGetTickCount+0x1c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087d4:	687b      	ldr	r3, [r7, #4]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20005ba8 	.word	0x20005ba8

080087e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f2:	4b50      	ldr	r3, [pc, #320]	; (8008934 <xTaskIncrementTick+0x14c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 808b 	bne.w	8008912 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087fc:	4b4e      	ldr	r3, [pc, #312]	; (8008938 <xTaskIncrementTick+0x150>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008804:	4a4c      	ldr	r2, [pc, #304]	; (8008938 <xTaskIncrementTick+0x150>)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d122      	bne.n	8008856 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008810:	4b4a      	ldr	r3, [pc, #296]	; (800893c <xTaskIncrementTick+0x154>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00c      	beq.n	8008834 <xTaskIncrementTick+0x4c>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	b672      	cpsid	i
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	b662      	cpsie	i
 800882e:	603b      	str	r3, [r7, #0]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <xTaskIncrementTick+0x4a>
 8008834:	4b41      	ldr	r3, [pc, #260]	; (800893c <xTaskIncrementTick+0x154>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	4b41      	ldr	r3, [pc, #260]	; (8008940 <xTaskIncrementTick+0x158>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a3f      	ldr	r2, [pc, #252]	; (800893c <xTaskIncrementTick+0x154>)
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	4a3f      	ldr	r2, [pc, #252]	; (8008940 <xTaskIncrementTick+0x158>)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	4b3e      	ldr	r3, [pc, #248]	; (8008944 <xTaskIncrementTick+0x15c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	4a3d      	ldr	r2, [pc, #244]	; (8008944 <xTaskIncrementTick+0x15c>)
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	f000 fb07 	bl	8008e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008856:	4b3c      	ldr	r3, [pc, #240]	; (8008948 <xTaskIncrementTick+0x160>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	429a      	cmp	r2, r3
 800885e:	d349      	bcc.n	80088f4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008860:	4b36      	ldr	r3, [pc, #216]	; (800893c <xTaskIncrementTick+0x154>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d104      	bne.n	8008874 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886a:	4b37      	ldr	r3, [pc, #220]	; (8008948 <xTaskIncrementTick+0x160>)
 800886c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008870:	601a      	str	r2, [r3, #0]
					break;
 8008872:	e03f      	b.n	80088f4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008874:	4b31      	ldr	r3, [pc, #196]	; (800893c <xTaskIncrementTick+0x154>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d203      	bcs.n	8008894 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800888c:	4a2e      	ldr	r2, [pc, #184]	; (8008948 <xTaskIncrementTick+0x160>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008892:	e02f      	b.n	80088f4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe ff69 	bl	8007770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d004      	beq.n	80088b0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3318      	adds	r3, #24
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe ff60 	bl	8007770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	4b25      	ldr	r3, [pc, #148]	; (800894c <xTaskIncrementTick+0x164>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d903      	bls.n	80088c4 <xTaskIncrementTick+0xdc>
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	4a22      	ldr	r2, [pc, #136]	; (800894c <xTaskIncrementTick+0x164>)
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4a1f      	ldr	r2, [pc, #124]	; (8008950 <xTaskIncrementTick+0x168>)
 80088d2:	441a      	add	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f7fe feeb 	bl	80076b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4b1b      	ldr	r3, [pc, #108]	; (8008954 <xTaskIncrementTick+0x16c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d3b8      	bcc.n	8008860 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f2:	e7b5      	b.n	8008860 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088f4:	4b17      	ldr	r3, [pc, #92]	; (8008954 <xTaskIncrementTick+0x16c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fa:	4915      	ldr	r1, [pc, #84]	; (8008950 <xTaskIncrementTick+0x168>)
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d907      	bls.n	800891c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800890c:	2301      	movs	r3, #1
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e004      	b.n	800891c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008912:	4b11      	ldr	r3, [pc, #68]	; (8008958 <xTaskIncrementTick+0x170>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	4a0f      	ldr	r2, [pc, #60]	; (8008958 <xTaskIncrementTick+0x170>)
 800891a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800891c:	4b0f      	ldr	r3, [pc, #60]	; (800895c <xTaskIncrementTick+0x174>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008924:	2301      	movs	r3, #1
 8008926:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008928:	697b      	ldr	r3, [r7, #20]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20005bcc 	.word	0x20005bcc
 8008938:	20005ba8 	.word	0x20005ba8
 800893c:	20005b5c 	.word	0x20005b5c
 8008940:	20005b60 	.word	0x20005b60
 8008944:	20005bbc 	.word	0x20005bbc
 8008948:	20005bc4 	.word	0x20005bc4
 800894c:	20005bac 	.word	0x20005bac
 8008950:	200056d4 	.word	0x200056d4
 8008954:	200056d0 	.word	0x200056d0
 8008958:	20005bb4 	.word	0x20005bb4
 800895c:	20005bb8 	.word	0x20005bb8

08008960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <vTaskSwitchContext+0xac>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800896e:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <vTaskSwitchContext+0xb0>)
 8008970:	2201      	movs	r2, #1
 8008972:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008974:	e043      	b.n	80089fe <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008976:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <vTaskSwitchContext+0xb0>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800897c:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <vTaskSwitchContext+0xb4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e012      	b.n	80089aa <vTaskSwitchContext+0x4a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10c      	bne.n	80089a4 <vTaskSwitchContext+0x44>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	b672      	cpsid	i
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	b662      	cpsie	i
 800899e:	607b      	str	r3, [r7, #4]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <vTaskSwitchContext+0x42>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	491b      	ldr	r1, [pc, #108]	; (8008a18 <vTaskSwitchContext+0xb8>)
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0e2      	beq.n	8008984 <vTaskSwitchContext+0x24>
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4a13      	ldr	r2, [pc, #76]	; (8008a18 <vTaskSwitchContext+0xb8>)
 80089ca:	4413      	add	r3, r2
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	605a      	str	r2, [r3, #4]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3308      	adds	r3, #8
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d104      	bne.n	80089ee <vTaskSwitchContext+0x8e>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	605a      	str	r2, [r3, #4]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <vTaskSwitchContext+0xbc>)
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	4a06      	ldr	r2, [pc, #24]	; (8008a14 <vTaskSwitchContext+0xb4>)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6013      	str	r3, [r2, #0]
}
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20005bcc 	.word	0x20005bcc
 8008a10:	20005bb8 	.word	0x20005bb8
 8008a14:	20005bac 	.word	0x20005bac
 8008a18:	200056d4 	.word	0x200056d4
 8008a1c:	200056d0 	.word	0x200056d0

08008a20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10c      	bne.n	8008a4a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	b672      	cpsid	i
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	b662      	cpsie	i
 8008a44:	60fb      	str	r3, [r7, #12]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <vTaskPlaceOnEventList+0x48>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3318      	adds	r3, #24
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe fe53 	bl	80076fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a58:	2101      	movs	r1, #1
 8008a5a:	6838      	ldr	r0, [r7, #0]
 8008a5c:	f000 fab2 	bl	8008fc4 <prvAddCurrentTaskToDelayedList>
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	200056d0 	.word	0x200056d0

08008a6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	b672      	cpsid	i
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	b662      	cpsie	i
 8008a92:	617b      	str	r3, [r7, #20]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a98:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <vTaskPlaceOnEventListRestricted+0x58>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3318      	adds	r3, #24
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7fe fe08 	bl	80076b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ab0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	68b8      	ldr	r0, [r7, #8]
 8008ab6:	f000 fa85 	bl	8008fc4 <prvAddCurrentTaskToDelayedList>
	}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200056d0 	.word	0x200056d0

08008ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	b672      	cpsid	i
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	b662      	cpsie	i
 8008af2:	60fb      	str	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3318      	adds	r3, #24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe fe37 	bl	8007770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <xTaskRemoveFromEventList+0xb4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d11d      	bne.n	8008b46 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fe2e 	bl	8007770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b18:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <xTaskRemoveFromEventList+0xb8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d903      	bls.n	8008b28 <xTaskRemoveFromEventList+0x60>
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <xTaskRemoveFromEventList+0xb8>)
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <xTaskRemoveFromEventList+0xbc>)
 8008b36:	441a      	add	r2, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f7fe fdb9 	bl	80076b6 <vListInsertEnd>
 8008b44:	e005      	b.n	8008b52 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3318      	adds	r3, #24
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	480e      	ldr	r0, [pc, #56]	; (8008b88 <xTaskRemoveFromEventList+0xc0>)
 8008b4e:	f7fe fdb2 	bl	80076b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <xTaskRemoveFromEventList+0xc4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d905      	bls.n	8008b6c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <xTaskRemoveFromEventList+0xc8>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e001      	b.n	8008b70 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20005bcc 	.word	0x20005bcc
 8008b80:	20005bac 	.word	0x20005bac
 8008b84:	200056d4 	.word	0x200056d4
 8008b88:	20005b64 	.word	0x20005b64
 8008b8c:	200056d0 	.word	0x200056d0
 8008b90:	20005bb8 	.word	0x20005bb8

08008b94 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10c      	bne.n	8008bbc <vTaskSetTimeOutState+0x28>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	b672      	cpsid	i
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	b662      	cpsie	i
 8008bb6:	60fb      	str	r3, [r7, #12]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8008bbc:	f000 febe 	bl	800993c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <vTaskSetTimeOutState+0x48>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <vTaskSetTimeOutState+0x4c>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008bd0:	f000 fee8 	bl	80099a4 <vPortExitCritical>
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20005bbc 	.word	0x20005bbc
 8008be0:	20005ba8 	.word	0x20005ba8

08008be4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <vTaskInternalSetTimeOutState+0x24>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <vTaskInternalSetTimeOutState+0x28>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	605a      	str	r2, [r3, #4]
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20005bbc 	.word	0x20005bbc
 8008c0c:	20005ba8 	.word	0x20005ba8

08008c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10c      	bne.n	8008c3a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	613b      	str	r3, [r7, #16]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10c      	bne.n	8008c5a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	b672      	cpsid	i
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	b662      	cpsie	i
 8008c54:	60fb      	str	r3, [r7, #12]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008c5a:	f000 fe6f 	bl	800993c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c5e:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <xTaskCheckForTimeOut+0xc4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c76:	d102      	bne.n	8008c7e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	e023      	b.n	8008cc6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <xTaskCheckForTimeOut+0xc8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d007      	beq.n	8008c9a <xTaskCheckForTimeOut+0x8a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d302      	bcc.n	8008c9a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c94:	2301      	movs	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e015      	b.n	8008cc6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d20b      	bcs.n	8008cbc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	1ad2      	subs	r2, r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff ff97 	bl	8008be4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e004      	b.n	8008cc6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cc6:	f000 fe6d 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 8008cca:	69fb      	ldr	r3, [r7, #28]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20005ba8 	.word	0x20005ba8
 8008cd8:	20005bbc 	.word	0x20005bbc

08008cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <vTaskMissedYield+0x14>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20005bb8 	.word	0x20005bb8

08008cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cfc:	f000 f852 	bl	8008da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <prvIdleTask+0x28>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d9f9      	bls.n	8008cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <prvIdleTask+0x2c>)
 8008d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d18:	e7f0      	b.n	8008cfc <prvIdleTask+0x8>
 8008d1a:	bf00      	nop
 8008d1c:	200056d4 	.word	0x200056d4
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	e00c      	b.n	8008d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <prvInitialiseTaskLists+0x60>)
 8008d3c:	4413      	add	r3, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fc8c 	bl	800765c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	607b      	str	r3, [r7, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b37      	cmp	r3, #55	; 0x37
 8008d4e:	d9ef      	bls.n	8008d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d50:	480d      	ldr	r0, [pc, #52]	; (8008d88 <prvInitialiseTaskLists+0x64>)
 8008d52:	f7fe fc83 	bl	800765c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d56:	480d      	ldr	r0, [pc, #52]	; (8008d8c <prvInitialiseTaskLists+0x68>)
 8008d58:	f7fe fc80 	bl	800765c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d5c:	480c      	ldr	r0, [pc, #48]	; (8008d90 <prvInitialiseTaskLists+0x6c>)
 8008d5e:	f7fe fc7d 	bl	800765c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d62:	480c      	ldr	r0, [pc, #48]	; (8008d94 <prvInitialiseTaskLists+0x70>)
 8008d64:	f7fe fc7a 	bl	800765c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d68:	480b      	ldr	r0, [pc, #44]	; (8008d98 <prvInitialiseTaskLists+0x74>)
 8008d6a:	f7fe fc77 	bl	800765c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <prvInitialiseTaskLists+0x78>)
 8008d70:	4a05      	ldr	r2, [pc, #20]	; (8008d88 <prvInitialiseTaskLists+0x64>)
 8008d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <prvInitialiseTaskLists+0x7c>)
 8008d76:	4a05      	ldr	r2, [pc, #20]	; (8008d8c <prvInitialiseTaskLists+0x68>)
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	200056d4 	.word	0x200056d4
 8008d88:	20005b34 	.word	0x20005b34
 8008d8c:	20005b48 	.word	0x20005b48
 8008d90:	20005b64 	.word	0x20005b64
 8008d94:	20005b78 	.word	0x20005b78
 8008d98:	20005b90 	.word	0x20005b90
 8008d9c:	20005b5c 	.word	0x20005b5c
 8008da0:	20005b60 	.word	0x20005b60

08008da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008daa:	e019      	b.n	8008de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dac:	f000 fdc6 	bl	800993c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <prvCheckTasksWaitingTermination+0x50>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fcd7 	bl	8007770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	4a0b      	ldr	r2, [pc, #44]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <prvCheckTasksWaitingTermination+0x58>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <prvCheckTasksWaitingTermination+0x58>)
 8008dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dd6:	f000 fde5 	bl	80099a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f810 	bl	8008e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <prvCheckTasksWaitingTermination+0x58>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e1      	bne.n	8008dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20005b78 	.word	0x20005b78
 8008df8:	20005ba4 	.word	0x20005ba4
 8008dfc:	20005b8c 	.word	0x20005b8c

08008e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d108      	bne.n	8008e24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 ff86 	bl	8009d28 <vPortFree>
				vPortFree( pxTCB );
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 ff83 	bl	8009d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e22:	e01a      	b.n	8008e5a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d103      	bne.n	8008e36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 ff7a 	bl	8009d28 <vPortFree>
	}
 8008e34:	e011      	b.n	8008e5a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d00c      	beq.n	8008e5a <prvDeleteTCB+0x5a>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	60fb      	str	r3, [r7, #12]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <prvDeleteTCB+0x58>
	}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <prvResetNextTaskUnblockTime+0x38>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e7c:	e008      	b.n	8008e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <prvResetNextTaskUnblockTime+0x38>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	4a04      	ldr	r2, [pc, #16]	; (8008ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8008e8e:	6013      	str	r3, [r2, #0]
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20005b5c 	.word	0x20005b5c
 8008ea0:	20005bc4 	.word	0x20005bc4

08008ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <xTaskGetSchedulerState+0x34>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	e008      	b.n	8008eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb8:	4b08      	ldr	r3, [pc, #32]	; (8008edc <xTaskGetSchedulerState+0x38>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	e001      	b.n	8008eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008eca:	687b      	ldr	r3, [r7, #4]
	}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	20005bb0 	.word	0x20005bb0
 8008edc:	20005bcc 	.word	0x20005bcc

08008ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d05a      	beq.n	8008fac <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ef6:	4b30      	ldr	r3, [pc, #192]	; (8008fb8 <xTaskPriorityDisinherit+0xd8>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d00c      	beq.n	8008f1a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	b672      	cpsid	i
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	b662      	cpsie	i
 8008f14:	60fb      	str	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10c      	bne.n	8008f3c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	60bb      	str	r3, [r7, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f40:	1e5a      	subs	r2, r3, #1
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d02c      	beq.n	8008fac <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d128      	bne.n	8008fac <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fc06 	bl	8007770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <xTaskPriorityDisinherit+0xdc>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d903      	bls.n	8008f8c <xTaskPriorityDisinherit+0xac>
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <xTaskPriorityDisinherit+0xdc>)
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <xTaskPriorityDisinherit+0xe0>)
 8008f9a:	441a      	add	r2, r3
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	f7fe fb87 	bl	80076b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fac:	697b      	ldr	r3, [r7, #20]
	}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200056d0 	.word	0x200056d0
 8008fbc:	20005bac 	.word	0x20005bac
 8008fc0:	200056d4 	.word	0x200056d4

08008fc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd4:	4b20      	ldr	r3, [pc, #128]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe fbc8 	bl	8007770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe6:	d10a      	bne.n	8008ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fee:	4b1a      	ldr	r3, [pc, #104]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4819      	ldr	r0, [pc, #100]	; (800905c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ff8:	f7fe fb5d 	bl	80076b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ffc:	e026      	b.n	800904c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4413      	add	r3, r2
 8009004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d209      	bcs.n	800902a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f7fe fb6b 	bl	80076fe <vListInsert>
}
 8009028:	e010      	b.n	800904c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3304      	adds	r3, #4
 8009034:	4619      	mov	r1, r3
 8009036:	4610      	mov	r0, r2
 8009038:	f7fe fb61 	bl	80076fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	d202      	bcs.n	800904c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009046:	4a08      	ldr	r2, [pc, #32]	; (8009068 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6013      	str	r3, [r2, #0]
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	20005ba8 	.word	0x20005ba8
 8009058:	200056d0 	.word	0x200056d0
 800905c:	20005b90 	.word	0x20005b90
 8009060:	20005b60 	.word	0x20005b60
 8009064:	20005b5c 	.word	0x20005b5c
 8009068:	20005bc4 	.word	0x20005bc4

0800906c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	; 0x28
 8009070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009076:	f000 fb15 	bl	80096a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800907a:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <xTimerCreateTimerTask+0x84>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d021      	beq.n	80090c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800908a:	1d3a      	adds	r2, r7, #4
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fac7 	bl	8007628 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	2302      	movs	r3, #2
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	460a      	mov	r2, r1
 80090ac:	4911      	ldr	r1, [pc, #68]	; (80090f4 <xTimerCreateTimerTask+0x88>)
 80090ae:	4812      	ldr	r0, [pc, #72]	; (80090f8 <xTimerCreateTimerTask+0x8c>)
 80090b0:	f7ff f892 	bl	80081d8 <xTaskCreateStatic>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4a11      	ldr	r2, [pc, #68]	; (80090fc <xTimerCreateTimerTask+0x90>)
 80090b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <xTimerCreateTimerTask+0x90>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090c2:	2301      	movs	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10c      	bne.n	80090e6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	b672      	cpsid	i
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	b662      	cpsie	i
 80090e0:	613b      	str	r3, [r7, #16]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80090e6:	697b      	ldr	r3, [r7, #20]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20005c00 	.word	0x20005c00
 80090f4:	0801eb14 	.word	0x0801eb14
 80090f8:	0800923d 	.word	0x0800923d
 80090fc:	20005c04 	.word	0x20005c04

08009100 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800910e:	2300      	movs	r3, #0
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10c      	bne.n	8009132 <xTimerGenericCommand+0x32>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	b672      	cpsid	i
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	b662      	cpsie	i
 800912c:	623b      	str	r3, [r7, #32]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009132:	4b1a      	ldr	r3, [pc, #104]	; (800919c <xTimerGenericCommand+0x9c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d02a      	beq.n	8009190 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b05      	cmp	r3, #5
 800914a:	dc18      	bgt.n	800917e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800914c:	f7ff feaa 	bl	8008ea4 <xTaskGetSchedulerState>
 8009150:	4603      	mov	r3, r0
 8009152:	2b02      	cmp	r3, #2
 8009154:	d109      	bne.n	800916a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <xTimerGenericCommand+0x9c>)
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f107 0110 	add.w	r1, r7, #16
 800915e:	2300      	movs	r3, #0
 8009160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009162:	f7fe fc3f 	bl	80079e4 <xQueueGenericSend>
 8009166:	6278      	str	r0, [r7, #36]	; 0x24
 8009168:	e012      	b.n	8009190 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800916a:	4b0c      	ldr	r3, [pc, #48]	; (800919c <xTimerGenericCommand+0x9c>)
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f107 0110 	add.w	r1, r7, #16
 8009172:	2300      	movs	r3, #0
 8009174:	2200      	movs	r2, #0
 8009176:	f7fe fc35 	bl	80079e4 <xQueueGenericSend>
 800917a:	6278      	str	r0, [r7, #36]	; 0x24
 800917c:	e008      	b.n	8009190 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800917e:	4b07      	ldr	r3, [pc, #28]	; (800919c <xTimerGenericCommand+0x9c>)
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f107 0110 	add.w	r1, r7, #16
 8009186:	2300      	movs	r3, #0
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	f7fe fd31 	bl	8007bf0 <xQueueGenericSendFromISR>
 800918e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009192:	4618      	mov	r0, r3
 8009194:	3728      	adds	r7, #40	; 0x28
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20005c00 	.word	0x20005c00

080091a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091aa:	4b23      	ldr	r3, [pc, #140]	; (8009238 <prvProcessExpiredTimer+0x98>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	3304      	adds	r3, #4
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe fad9 	bl	8007770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d024      	beq.n	8009216 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	699a      	ldr	r2, [r3, #24]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	18d1      	adds	r1, r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	6978      	ldr	r0, [r7, #20]
 80091da:	f000 f8d3 	bl	8009384 <prvInsertTimerInActiveList>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d021      	beq.n	8009228 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e4:	2300      	movs	r3, #0
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	2100      	movs	r1, #0
 80091ee:	6978      	ldr	r0, [r7, #20]
 80091f0:	f7ff ff86 	bl	8009100 <xTimerGenericCommand>
 80091f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d115      	bne.n	8009228 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	b2da      	uxtb	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	4798      	blx	r3
}
 8009230:	bf00      	nop
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20005bf8 	.word	0x20005bf8

0800923c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009244:	f107 0308 	add.w	r3, r7, #8
 8009248:	4618      	mov	r0, r3
 800924a:	f000 f857 	bl	80092fc <prvGetNextExpireTime>
 800924e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4619      	mov	r1, r3
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f803 	bl	8009260 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800925a:	f000 f8d5 	bl	8009408 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800925e:	e7f1      	b.n	8009244 <prvTimerTask+0x8>

08009260 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800926a:	f7ff f9ff 	bl	800866c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f866 	bl	8009344 <prvSampleTimeNow>
 8009278:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d130      	bne.n	80092e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <prvProcessTimerOrBlockTask+0x3c>
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	429a      	cmp	r2, r3
 800928c:	d806      	bhi.n	800929c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800928e:	f7ff f9fb 	bl	8008688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ff83 	bl	80091a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800929a:	e024      	b.n	80092e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d008      	beq.n	80092b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092a2:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <prvProcessTimerOrBlockTask+0x90>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <prvProcessTimerOrBlockTask+0x50>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e000      	b.n	80092b2 <prvProcessTimerOrBlockTask+0x52>
 80092b0:	2300      	movs	r3, #0
 80092b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092b4:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <prvProcessTimerOrBlockTask+0x94>)
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f7fe ff55 	bl	8008170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092c6:	f7ff f9df 	bl	8008688 <xTaskResumeAll>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092d0:	4b09      	ldr	r3, [pc, #36]	; (80092f8 <prvProcessTimerOrBlockTask+0x98>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
}
 80092e0:	e001      	b.n	80092e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092e2:	f7ff f9d1 	bl	8008688 <xTaskResumeAll>
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20005bfc 	.word	0x20005bfc
 80092f4:	20005c00 	.word	0x20005c00
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <prvGetNextExpireTime+0x44>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <prvGetNextExpireTime+0x16>
 800930e:	2201      	movs	r2, #1
 8009310:	e000      	b.n	8009314 <prvGetNextExpireTime+0x18>
 8009312:	2200      	movs	r2, #0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d105      	bne.n	800932c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <prvGetNextExpireTime+0x44>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	e001      	b.n	8009330 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009330:	68fb      	ldr	r3, [r7, #12]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20005bf8 	.word	0x20005bf8

08009344 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800934c:	f7ff fa3c 	bl	80087c8 <xTaskGetTickCount>
 8009350:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <prvSampleTimeNow+0x3c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	429a      	cmp	r2, r3
 800935a:	d205      	bcs.n	8009368 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800935c:	f000 f93c 	bl	80095d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	e002      	b.n	800936e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800936e:	4a04      	ldr	r2, [pc, #16]	; (8009380 <prvSampleTimeNow+0x3c>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009374:	68fb      	ldr	r3, [r7, #12]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20005c08 	.word	0x20005c08

08009384 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d812      	bhi.n	80093d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d302      	bcc.n	80093be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e01b      	b.n	80093f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093be:	4b10      	ldr	r3, [pc, #64]	; (8009400 <prvInsertTimerInActiveList+0x7c>)
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4619      	mov	r1, r3
 80093c8:	4610      	mov	r0, r2
 80093ca:	f7fe f998 	bl	80076fe <vListInsert>
 80093ce:	e012      	b.n	80093f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d206      	bcs.n	80093e6 <prvInsertTimerInActiveList+0x62>
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d302      	bcc.n	80093e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	e007      	b.n	80093f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093e6:	4b07      	ldr	r3, [pc, #28]	; (8009404 <prvInsertTimerInActiveList+0x80>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f7fe f984 	bl	80076fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093f6:	697b      	ldr	r3, [r7, #20]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20005bfc 	.word	0x20005bfc
 8009404:	20005bf8 	.word	0x20005bf8

08009408 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08e      	sub	sp, #56	; 0x38
 800940c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800940e:	e0d0      	b.n	80095b2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	da1a      	bge.n	800944c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	3304      	adds	r3, #4
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10c      	bne.n	800943c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	b672      	cpsid	i
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	b662      	cpsie	i
 8009436:	61fb      	str	r3, [r7, #28]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009442:	6850      	ldr	r0, [r2, #4]
 8009444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009446:	6892      	ldr	r2, [r2, #8]
 8009448:	4611      	mov	r1, r2
 800944a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	f2c0 80ae 	blt.w	80095b0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	3304      	adds	r3, #4
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe f983 	bl	8007770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800946a:	463b      	mov	r3, r7
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff ff69 	bl	8009344 <prvSampleTimeNow>
 8009472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b09      	cmp	r3, #9
 8009478:	f200 809b 	bhi.w	80095b2 <prvProcessReceivedCommands+0x1aa>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <prvProcessReceivedCommands+0x7c>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	080094ad 	.word	0x080094ad
 8009488:	080094ad 	.word	0x080094ad
 800948c:	080094ad 	.word	0x080094ad
 8009490:	08009525 	.word	0x08009525
 8009494:	08009539 	.word	0x08009539
 8009498:	08009587 	.word	0x08009587
 800949c:	080094ad 	.word	0x080094ad
 80094a0:	080094ad 	.word	0x080094ad
 80094a4:	08009525 	.word	0x08009525
 80094a8:	08009539 	.word	0x08009539
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	18d1      	adds	r1, r2, r3
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094cc:	f7ff ff5a 	bl	8009384 <prvInsertTimerInActiveList>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d06d      	beq.n	80095b2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d062      	beq.n	80095b2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	441a      	add	r2, r3
 80094f4:	2300      	movs	r3, #0
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2300      	movs	r3, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094fe:	f7ff fdff 	bl	8009100 <xTimerGenericCommand>
 8009502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d153      	bne.n	80095b2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	b672      	cpsid	i
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	b662      	cpsie	i
 800951e:	61bb      	str	r3, [r7, #24]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800952a:	f023 0301 	bic.w	r3, r3, #1
 800952e:	b2da      	uxtb	r2, r3
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009536:	e03c      	b.n	80095b2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800953e:	f043 0301 	orr.w	r3, r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	b672      	cpsid	i
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	b662      	cpsie	i
 800956c:	617b      	str	r3, [r7, #20]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	699a      	ldr	r2, [r3, #24]
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	18d1      	adds	r1, r2, r3
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009580:	f7ff ff00 	bl	8009384 <prvInsertTimerInActiveList>
					break;
 8009584:	e015      	b.n	80095b2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d103      	bne.n	800959c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009596:	f000 fbc7 	bl	8009d28 <vPortFree>
 800959a:	e00a      	b.n	80095b2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095ae:	e000      	b.n	80095b2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <prvProcessReceivedCommands+0x1cc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	1d39      	adds	r1, r7, #4
 80095b8:	2200      	movs	r2, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fbb8 	bl	8007d30 <xQueueReceive>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f47f af24 	bne.w	8009410 <prvProcessReceivedCommands+0x8>
	}
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	3730      	adds	r7, #48	; 0x30
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20005c00 	.word	0x20005c00

080095d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095de:	e04a      	b.n	8009676 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095e0:	4b2e      	ldr	r3, [pc, #184]	; (800969c <prvSwitchTimerLists+0xc4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ea:	4b2c      	ldr	r3, [pc, #176]	; (800969c <prvSwitchTimerLists+0xc4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe f8b9 	bl	8007770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	d030      	beq.n	8009676 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	4413      	add	r3, r2
 800961c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	429a      	cmp	r2, r3
 8009624:	d90e      	bls.n	8009644 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009632:	4b1a      	ldr	r3, [pc, #104]	; (800969c <prvSwitchTimerLists+0xc4>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7fe f85e 	bl	80076fe <vListInsert>
 8009642:	e018      	b.n	8009676 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	2100      	movs	r1, #0
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fd56 	bl	8009100 <xTimerGenericCommand>
 8009654:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10c      	bne.n	8009676 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	b672      	cpsid	i
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	b662      	cpsie	i
 8009670:	603b      	str	r3, [r7, #0]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <prvSwitchTimerLists+0xc4>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1af      	bne.n	80095e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <prvSwitchTimerLists+0xc4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009686:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <prvSwitchTimerLists+0xc8>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a04      	ldr	r2, [pc, #16]	; (800969c <prvSwitchTimerLists+0xc4>)
 800968c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800968e:	4a04      	ldr	r2, [pc, #16]	; (80096a0 <prvSwitchTimerLists+0xc8>)
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	6013      	str	r3, [r2, #0]
}
 8009694:	bf00      	nop
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20005bf8 	.word	0x20005bf8
 80096a0:	20005bfc 	.word	0x20005bfc

080096a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096aa:	f000 f947 	bl	800993c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096ae:	4b15      	ldr	r3, [pc, #84]	; (8009704 <prvCheckForValidListAndQueue+0x60>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d120      	bne.n	80096f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096b6:	4814      	ldr	r0, [pc, #80]	; (8009708 <prvCheckForValidListAndQueue+0x64>)
 80096b8:	f7fd ffd0 	bl	800765c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096bc:	4813      	ldr	r0, [pc, #76]	; (800970c <prvCheckForValidListAndQueue+0x68>)
 80096be:	f7fd ffcd 	bl	800765c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <prvCheckForValidListAndQueue+0x6c>)
 80096c4:	4a10      	ldr	r2, [pc, #64]	; (8009708 <prvCheckForValidListAndQueue+0x64>)
 80096c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096c8:	4b12      	ldr	r3, [pc, #72]	; (8009714 <prvCheckForValidListAndQueue+0x70>)
 80096ca:	4a10      	ldr	r2, [pc, #64]	; (800970c <prvCheckForValidListAndQueue+0x68>)
 80096cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096ce:	2300      	movs	r3, #0
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	4b11      	ldr	r3, [pc, #68]	; (8009718 <prvCheckForValidListAndQueue+0x74>)
 80096d4:	4a11      	ldr	r2, [pc, #68]	; (800971c <prvCheckForValidListAndQueue+0x78>)
 80096d6:	2110      	movs	r1, #16
 80096d8:	200a      	movs	r0, #10
 80096da:	f7fe f8dd 	bl	8007898 <xQueueGenericCreateStatic>
 80096de:	4603      	mov	r3, r0
 80096e0:	4a08      	ldr	r2, [pc, #32]	; (8009704 <prvCheckForValidListAndQueue+0x60>)
 80096e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096e4:	4b07      	ldr	r3, [pc, #28]	; (8009704 <prvCheckForValidListAndQueue+0x60>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <prvCheckForValidListAndQueue+0x60>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	490b      	ldr	r1, [pc, #44]	; (8009720 <prvCheckForValidListAndQueue+0x7c>)
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fd12 	bl	800811c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096f8:	f000 f954 	bl	80099a4 <vPortExitCritical>
}
 80096fc:	bf00      	nop
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20005c00 	.word	0x20005c00
 8009708:	20005bd0 	.word	0x20005bd0
 800970c:	20005be4 	.word	0x20005be4
 8009710:	20005bf8 	.word	0x20005bf8
 8009714:	20005bfc 	.word	0x20005bfc
 8009718:	20005cac 	.word	0x20005cac
 800971c:	20005c0c 	.word	0x20005c0c
 8009720:	0801eb1c 	.word	0x0801eb1c

08009724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3b04      	subs	r3, #4
 8009734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800973c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3b04      	subs	r3, #4
 8009742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f023 0201 	bic.w	r2, r3, #1
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3b04      	subs	r3, #4
 8009752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009754:	4a0c      	ldr	r2, [pc, #48]	; (8009788 <pxPortInitialiseStack+0x64>)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3b14      	subs	r3, #20
 800975e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b04      	subs	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f06f 0202 	mvn.w	r2, #2
 8009772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3b20      	subs	r3, #32
 8009778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800977a:	68fb      	ldr	r3, [r7, #12]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	0800978d 	.word	0x0800978d

0800978c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <prvTaskExitError+0x5c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800979e:	d00c      	beq.n	80097ba <prvTaskExitError+0x2e>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	b672      	cpsid	i
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	b662      	cpsie	i
 80097b4:	60fb      	str	r3, [r7, #12]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <prvTaskExitError+0x2c>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	b672      	cpsid	i
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	b662      	cpsie	i
 80097ce:	60bb      	str	r3, [r7, #8]
}
 80097d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097d2:	bf00      	nop
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0fc      	beq.n	80097d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097da:	bf00      	nop
 80097dc:	bf00      	nop
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20000010 	.word	0x20000010
 80097ec:	00000000 	.word	0x00000000

080097f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097f0:	4b07      	ldr	r3, [pc, #28]	; (8009810 <pxCurrentTCBConst2>)
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	6808      	ldr	r0, [r1, #0]
 80097f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f380 8809 	msr	PSP, r0
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8811 	msr	BASEPRI, r0
 800980a:	4770      	bx	lr
 800980c:	f3af 8000 	nop.w

08009810 <pxCurrentTCBConst2>:
 8009810:	200056d0 	.word	0x200056d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop

08009818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009818:	4808      	ldr	r0, [pc, #32]	; (800983c <prvPortStartFirstTask+0x24>)
 800981a:	6800      	ldr	r0, [r0, #0]
 800981c:	6800      	ldr	r0, [r0, #0]
 800981e:	f380 8808 	msr	MSP, r0
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8814 	msr	CONTROL, r0
 800982a:	b662      	cpsie	i
 800982c:	b661      	cpsie	f
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	df00      	svc	0
 8009838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800983a:	bf00      	nop
 800983c:	e000ed08 	.word	0xe000ed08

08009840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009846:	4b37      	ldr	r3, [pc, #220]	; (8009924 <xPortStartScheduler+0xe4>)
 8009848:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	22ff      	movs	r2, #255	; 0xff
 8009856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b2f      	ldr	r3, [pc, #188]	; (8009928 <xPortStartScheduler+0xe8>)
 800986c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800986e:	4b2f      	ldr	r3, [pc, #188]	; (800992c <xPortStartScheduler+0xec>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009874:	e009      	b.n	800988a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009876:	4b2d      	ldr	r3, [pc, #180]	; (800992c <xPortStartScheduler+0xec>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3b01      	subs	r3, #1
 800987c:	4a2b      	ldr	r2, [pc, #172]	; (800992c <xPortStartScheduler+0xec>)
 800987e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	b2db      	uxtb	r3, r3
 8009888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009892:	2b80      	cmp	r3, #128	; 0x80
 8009894:	d0ef      	beq.n	8009876 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009896:	4b25      	ldr	r3, [pc, #148]	; (800992c <xPortStartScheduler+0xec>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1c3 0307 	rsb	r3, r3, #7
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d00c      	beq.n	80098bc <xPortStartScheduler+0x7c>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	b672      	cpsid	i
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	b662      	cpsie	i
 80098b6:	60bb      	str	r3, [r7, #8]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098bc:	4b1b      	ldr	r3, [pc, #108]	; (800992c <xPortStartScheduler+0xec>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	4a1a      	ldr	r2, [pc, #104]	; (800992c <xPortStartScheduler+0xec>)
 80098c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098c6:	4b19      	ldr	r3, [pc, #100]	; (800992c <xPortStartScheduler+0xec>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ce:	4a17      	ldr	r2, [pc, #92]	; (800992c <xPortStartScheduler+0xec>)
 80098d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098da:	4b15      	ldr	r3, [pc, #84]	; (8009930 <xPortStartScheduler+0xf0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a14      	ldr	r2, [pc, #80]	; (8009930 <xPortStartScheduler+0xf0>)
 80098e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098e6:	4b12      	ldr	r3, [pc, #72]	; (8009930 <xPortStartScheduler+0xf0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a11      	ldr	r2, [pc, #68]	; (8009930 <xPortStartScheduler+0xf0>)
 80098ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098f2:	f000 f8dd 	bl	8009ab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <xPortStartScheduler+0xf4>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098fc:	f000 f8fc 	bl	8009af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009900:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <xPortStartScheduler+0xf8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a0c      	ldr	r2, [pc, #48]	; (8009938 <xPortStartScheduler+0xf8>)
 8009906:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800990a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800990c:	f7ff ff84 	bl	8009818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009910:	f7ff f826 	bl	8008960 <vTaskSwitchContext>
	prvTaskExitError();
 8009914:	f7ff ff3a 	bl	800978c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	e000e400 	.word	0xe000e400
 8009928:	20005cfc 	.word	0x20005cfc
 800992c:	20005d00 	.word	0x20005d00
 8009930:	e000ed20 	.word	0xe000ed20
 8009934:	20000010 	.word	0x20000010
 8009938:	e000ef34 	.word	0xe000ef34

0800993c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	607b      	str	r3, [r7, #4]
}
 8009958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800995a:	4b10      	ldr	r3, [pc, #64]	; (800999c <vPortEnterCritical+0x60>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3301      	adds	r3, #1
 8009960:	4a0e      	ldr	r2, [pc, #56]	; (800999c <vPortEnterCritical+0x60>)
 8009962:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009964:	4b0d      	ldr	r3, [pc, #52]	; (800999c <vPortEnterCritical+0x60>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d111      	bne.n	8009990 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800996c:	4b0c      	ldr	r3, [pc, #48]	; (80099a0 <vPortEnterCritical+0x64>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00c      	beq.n	8009990 <vPortEnterCritical+0x54>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	b672      	cpsid	i
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	b662      	cpsie	i
 800998a:	603b      	str	r3, [r7, #0]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <vPortEnterCritical+0x52>
	}
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	20000010 	.word	0x20000010
 80099a0:	e000ed04 	.word	0xe000ed04

080099a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <vPortExitCritical+0x54>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10c      	bne.n	80099cc <vPortExitCritical+0x28>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	b672      	cpsid	i
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	b662      	cpsie	i
 80099c6:	607b      	str	r3, [r7, #4]
}
 80099c8:	bf00      	nop
 80099ca:	e7fe      	b.n	80099ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <vPortExitCritical+0x54>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <vPortExitCritical+0x54>)
 80099d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099d6:	4b08      	ldr	r3, [pc, #32]	; (80099f8 <vPortExitCritical+0x54>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d105      	bne.n	80099ea <vPortExitCritical+0x46>
 80099de:	2300      	movs	r3, #0
 80099e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	f383 8811 	msr	BASEPRI, r3
}
 80099e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	20000010 	.word	0x20000010
 80099fc:	00000000 	.word	0x00000000

08009a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a00:	f3ef 8009 	mrs	r0, PSP
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <pxCurrentTCBConst>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	f01e 0f10 	tst.w	lr, #16
 8009a10:	bf08      	it	eq
 8009a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	6010      	str	r0, [r2, #0]
 8009a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a24:	b672      	cpsid	i
 8009a26:	f380 8811 	msr	BASEPRI, r0
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	b662      	cpsie	i
 8009a34:	f7fe ff94 	bl	8008960 <vTaskSwitchContext>
 8009a38:	f04f 0000 	mov.w	r0, #0
 8009a3c:	f380 8811 	msr	BASEPRI, r0
 8009a40:	bc09      	pop	{r0, r3}
 8009a42:	6819      	ldr	r1, [r3, #0]
 8009a44:	6808      	ldr	r0, [r1, #0]
 8009a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4a:	f01e 0f10 	tst.w	lr, #16
 8009a4e:	bf08      	it	eq
 8009a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a54:	f380 8809 	msr	PSP, r0
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop

08009a60 <pxCurrentTCBConst>:
 8009a60:	200056d0 	.word	0x200056d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop

08009a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	b672      	cpsid	i
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	b662      	cpsie	i
 8009a82:	607b      	str	r3, [r7, #4]
}
 8009a84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a86:	f7fe feaf 	bl	80087e8 <xTaskIncrementTick>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <SysTick_Handler+0x44>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	f383 8811 	msr	BASEPRI, r3
}
 8009aa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <vPortSetupTimerInterrupt+0x34>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <vPortSetupTimerInterrupt+0x38>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <vPortSetupTimerInterrupt+0x3c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a0a      	ldr	r2, [pc, #40]	; (8009af0 <vPortSetupTimerInterrupt+0x40>)
 8009ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aca:	099b      	lsrs	r3, r3, #6
 8009acc:	4a09      	ldr	r2, [pc, #36]	; (8009af4 <vPortSetupTimerInterrupt+0x44>)
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ad2:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <vPortSetupTimerInterrupt+0x34>)
 8009ad4:	2207      	movs	r2, #7
 8009ad6:	601a      	str	r2, [r3, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	e000e010 	.word	0xe000e010
 8009ae8:	e000e018 	.word	0xe000e018
 8009aec:	20000004 	.word	0x20000004
 8009af0:	10624dd3 	.word	0x10624dd3
 8009af4:	e000e014 	.word	0xe000e014

08009af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b08 <vPortEnableVFP+0x10>
 8009afc:	6801      	ldr	r1, [r0, #0]
 8009afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b02:	6001      	str	r1, [r0, #0]
 8009b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b06:	bf00      	nop
 8009b08:	e000ed88 	.word	0xe000ed88

08009b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b12:	f3ef 8305 	mrs	r3, IPSR
 8009b16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b0f      	cmp	r3, #15
 8009b1c:	d916      	bls.n	8009b4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b1e:	4a19      	ldr	r2, [pc, #100]	; (8009b84 <vPortValidateInterruptPriority+0x78>)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b28:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <vPortValidateInterruptPriority+0x7c>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	7afa      	ldrb	r2, [r7, #11]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d20c      	bcs.n	8009b4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	b672      	cpsid	i
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	b662      	cpsie	i
 8009b46:	607b      	str	r3, [r7, #4]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b4c:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <vPortValidateInterruptPriority+0x80>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b54:	4b0e      	ldr	r3, [pc, #56]	; (8009b90 <vPortValidateInterruptPriority+0x84>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d90c      	bls.n	8009b76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	b672      	cpsid	i
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	b662      	cpsie	i
 8009b70:	603b      	str	r3, [r7, #0]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <vPortValidateInterruptPriority+0x68>
	}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	e000e3f0 	.word	0xe000e3f0
 8009b88:	20005cfc 	.word	0x20005cfc
 8009b8c:	e000ed0c 	.word	0xe000ed0c
 8009b90:	20005d00 	.word	0x20005d00

08009b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ba0:	f7fe fd64 	bl	800866c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ba4:	4b5b      	ldr	r3, [pc, #364]	; (8009d14 <pvPortMalloc+0x180>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bac:	f000 f91a 	bl	8009de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bb0:	4b59      	ldr	r3, [pc, #356]	; (8009d18 <pvPortMalloc+0x184>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 8092 	bne.w	8009ce2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01f      	beq.n	8009c04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4413      	add	r3, r2
 8009bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f023 0307 	bic.w	r3, r3, #7
 8009bdc:	3308      	adds	r3, #8
 8009bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <pvPortMalloc+0x70>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	b672      	cpsid	i
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	b662      	cpsie	i
 8009bfe:	617b      	str	r3, [r7, #20]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d06b      	beq.n	8009ce2 <pvPortMalloc+0x14e>
 8009c0a:	4b44      	ldr	r3, [pc, #272]	; (8009d1c <pvPortMalloc+0x188>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d866      	bhi.n	8009ce2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c14:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <pvPortMalloc+0x18c>)
 8009c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c18:	4b41      	ldr	r3, [pc, #260]	; (8009d20 <pvPortMalloc+0x18c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c1e:	e004      	b.n	8009c2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d903      	bls.n	8009c3c <pvPortMalloc+0xa8>
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f1      	bne.n	8009c20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c3c:	4b35      	ldr	r3, [pc, #212]	; (8009d14 <pvPortMalloc+0x180>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d04d      	beq.n	8009ce2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	4413      	add	r3, r2
 8009c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	2308      	movs	r3, #8
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d921      	bls.n	8009cac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00c      	beq.n	8009c94 <pvPortMalloc+0x100>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	b672      	cpsid	i
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	b662      	cpsie	i
 8009c8e:	613b      	str	r3, [r7, #16]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	1ad2      	subs	r2, r2, r3
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ca6:	69b8      	ldr	r0, [r7, #24]
 8009ca8:	f000 f8fe 	bl	8009ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <pvPortMalloc+0x188>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	4a19      	ldr	r2, [pc, #100]	; (8009d1c <pvPortMalloc+0x188>)
 8009cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cba:	4b18      	ldr	r3, [pc, #96]	; (8009d1c <pvPortMalloc+0x188>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4b19      	ldr	r3, [pc, #100]	; (8009d24 <pvPortMalloc+0x190>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d203      	bcs.n	8009cce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cc6:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <pvPortMalloc+0x188>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <pvPortMalloc+0x190>)
 8009ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <pvPortMalloc+0x184>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ce2:	f7fe fcd1 	bl	8008688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	f003 0307 	and.w	r3, r3, #7
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00c      	beq.n	8009d0a <pvPortMalloc+0x176>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	b672      	cpsid	i
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	b662      	cpsie	i
 8009d04:	60fb      	str	r3, [r7, #12]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <pvPortMalloc+0x174>
	return pvReturn;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3728      	adds	r7, #40	; 0x28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	2000990c 	.word	0x2000990c
 8009d18:	20009918 	.word	0x20009918
 8009d1c:	20009910 	.word	0x20009910
 8009d20:	20009904 	.word	0x20009904
 8009d24:	20009914 	.word	0x20009914

08009d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d04c      	beq.n	8009dd4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	425b      	negs	r3, r3
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4b23      	ldr	r3, [pc, #140]	; (8009ddc <vPortFree+0xb4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4013      	ands	r3, r2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10c      	bne.n	8009d70 <vPortFree+0x48>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	b672      	cpsid	i
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	b662      	cpsie	i
 8009d6a:	60fb      	str	r3, [r7, #12]
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00c      	beq.n	8009d92 <vPortFree+0x6a>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	b672      	cpsid	i
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	b662      	cpsie	i
 8009d8c:	60bb      	str	r3, [r7, #8]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <vPortFree+0xb4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d019      	beq.n	8009dd4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d115      	bne.n	8009dd4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <vPortFree+0xb4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	43db      	mvns	r3, r3
 8009db2:	401a      	ands	r2, r3
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009db8:	f7fe fc58 	bl	800866c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <vPortFree+0xb8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	4a06      	ldr	r2, [pc, #24]	; (8009de0 <vPortFree+0xb8>)
 8009dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dca:	6938      	ldr	r0, [r7, #16]
 8009dcc:	f000 f86c 	bl	8009ea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009dd0:	f7fe fc5a 	bl	8008688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20009918 	.word	0x20009918
 8009de0:	20009910 	.word	0x20009910

08009de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009df0:	4b27      	ldr	r3, [pc, #156]	; (8009e90 <prvHeapInit+0xac>)
 8009df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00c      	beq.n	8009e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3307      	adds	r3, #7
 8009e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <prvHeapInit+0xac>)
 8009e14:	4413      	add	r3, r2
 8009e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e1c:	4a1d      	ldr	r2, [pc, #116]	; (8009e94 <prvHeapInit+0xb0>)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e22:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <prvHeapInit+0xb0>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e30:	2208      	movs	r2, #8
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1a9b      	subs	r3, r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0307 	bic.w	r3, r3, #7
 8009e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4a15      	ldr	r2, [pc, #84]	; (8009e98 <prvHeapInit+0xb4>)
 8009e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <prvHeapInit+0xb4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e4e:	4b12      	ldr	r3, [pc, #72]	; (8009e98 <prvHeapInit+0xb4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e64:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <prvHeapInit+0xb4>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <prvHeapInit+0xb8>)
 8009e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <prvHeapInit+0xbc>)
 8009e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <prvHeapInit+0xc0>)
 8009e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e82:	601a      	str	r2, [r3, #0]
}
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	20005d04 	.word	0x20005d04
 8009e94:	20009904 	.word	0x20009904
 8009e98:	2000990c 	.word	0x2000990c
 8009e9c:	20009914 	.word	0x20009914
 8009ea0:	20009910 	.word	0x20009910
 8009ea4:	20009918 	.word	0x20009918

08009ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eb0:	4b28      	ldr	r3, [pc, #160]	; (8009f54 <prvInsertBlockIntoFreeList+0xac>)
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	e002      	b.n	8009ebc <prvInsertBlockIntoFreeList+0x14>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d8f7      	bhi.n	8009eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d108      	bne.n	8009eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d118      	bne.n	8009f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <prvInsertBlockIntoFreeList+0xb0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d00d      	beq.n	8009f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	441a      	add	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	e008      	b.n	8009f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f26:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <prvInsertBlockIntoFreeList+0xb0>)
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e003      	b.n	8009f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d002      	beq.n	8009f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f46:	bf00      	nop
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20009904 	.word	0x20009904
 8009f58:	2000990c 	.word	0x2000990c

08009f5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__PointStamped>:
 8009f5c:	f000 b89e 	b.w	800a09c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PointStamped>

08009f60 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009f60:	f000 ba0c 	b.w	800a37c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

08009f64 <get_serialized_size_geometry_msgs__msg__PointStamped>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4604      	mov	r4, r0
 8009f68:	b158      	cbz	r0, 8009f82 <get_serialized_size_geometry_msgs__msg__PointStamped+0x1e>
 8009f6a:	460d      	mov	r5, r1
 8009f6c:	f006 fd20 	bl	80109b0 <get_serialized_size_std_msgs__msg__Header>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f104 0018 	add.w	r0, r4, #24
 8009f76:	461c      	mov	r4, r3
 8009f78:	18e9      	adds	r1, r5, r3
 8009f7a:	f000 f893 	bl	800a0a4 <get_serialized_size_geometry_msgs__msg__Point>
 8009f7e:	4420      	add	r0, r4
 8009f80:	bd38      	pop	{r3, r4, r5, pc}
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <get_serialized_size_geometry_msgs__msg__PointStamped+0x34>)
 8009f84:	221b      	movs	r2, #27
 8009f86:	2101      	movs	r1, #1
 8009f88:	4804      	ldr	r0, [pc, #16]	; (8009f9c <get_serialized_size_geometry_msgs__msg__PointStamped+0x38>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f00b f893 	bl	80150b8 <fwrite>
 8009f92:	4620      	mov	r0, r4
 8009f94:	bd38      	pop	{r3, r4, r5, pc}
 8009f96:	bf00      	nop
 8009f98:	20000208 	.word	0x20000208
 8009f9c:	0801f7a8 	.word	0x0801f7a8

08009fa0 <_PointStamped__cdr_deserialize>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	b199      	cbz	r1, 8009fce <_PointStamped__cdr_deserialize+0x2e>
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	f006 fd9a 	bl	8010ae0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8009fac:	4603      	mov	r3, r0
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	4798      	blx	r3
 8009fb8:	f000 f932 	bl	800a220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f104 0118 	add.w	r1, r4, #24
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	4718      	bx	r3
 8009fce:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <_PointStamped__cdr_deserialize+0x44>)
 8009fd0:	221b      	movs	r2, #27
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	4804      	ldr	r0, [pc, #16]	; (8009fe8 <_PointStamped__cdr_deserialize+0x48>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f00b f86d 	bl	80150b8 <fwrite>
 8009fde:	4620      	mov	r0, r4
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000208 	.word	0x20000208
 8009fe8:	0801f7a8 	.word	0x0801f7a8

08009fec <_PointStamped__cdr_serialize>:
 8009fec:	b510      	push	{r4, lr}
 8009fee:	4604      	mov	r4, r0
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	b1a0      	cbz	r0, 800a01e <_PointStamped__cdr_serialize+0x32>
 8009ff4:	9101      	str	r1, [sp, #4]
 8009ff6:	f006 fd73 	bl	8010ae0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	9901      	ldr	r1, [sp, #4]
 8009ffe:	4620      	mov	r0, r4
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	4798      	blx	r3
 800a006:	f000 f90b 	bl	800a220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 800a00a:	4603      	mov	r3, r0
 800a00c:	9901      	ldr	r1, [sp, #4]
 800a00e:	f104 0018 	add.w	r0, r4, #24
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	b002      	add	sp, #8
 800a018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a01c:	4718      	bx	r3
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <_PointStamped__cdr_serialize+0x48>)
 800a020:	221b      	movs	r2, #27
 800a022:	2101      	movs	r1, #1
 800a024:	4804      	ldr	r0, [pc, #16]	; (800a038 <_PointStamped__cdr_serialize+0x4c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f00b f845 	bl	80150b8 <fwrite>
 800a02e:	4620      	mov	r0, r4
 800a030:	b002      	add	sp, #8
 800a032:	bd10      	pop	{r4, pc}
 800a034:	20000208 	.word	0x20000208
 800a038:	0801f7a8 	.word	0x0801f7a8

0800a03c <_PointStamped__max_serialized_size>:
 800a03c:	b510      	push	{r4, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	2301      	movs	r3, #1
 800a042:	2100      	movs	r1, #0
 800a044:	f10d 0007 	add.w	r0, sp, #7
 800a048:	f88d 3007 	strb.w	r3, [sp, #7]
 800a04c:	f006 fd3e 	bl	8010acc <max_serialized_size_std_msgs__msg__Header>
 800a050:	4604      	mov	r4, r0
 800a052:	f10d 0007 	add.w	r0, sp, #7
 800a056:	4621      	mov	r1, r4
 800a058:	f000 f8c8 	bl	800a1ec <max_serialized_size_geometry_msgs__msg__Point>
 800a05c:	4420      	add	r0, r4
 800a05e:	b002      	add	sp, #8
 800a060:	bd10      	pop	{r4, pc}
 800a062:	bf00      	nop

0800a064 <_PointStamped__get_serialized_size>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4604      	mov	r4, r0
 800a068:	b150      	cbz	r0, 800a080 <_PointStamped__get_serialized_size+0x1c>
 800a06a:	2100      	movs	r1, #0
 800a06c:	f006 fca0 	bl	80109b0 <get_serialized_size_std_msgs__msg__Header>
 800a070:	4601      	mov	r1, r0
 800a072:	f104 0018 	add.w	r0, r4, #24
 800a076:	460c      	mov	r4, r1
 800a078:	f000 f814 	bl	800a0a4 <get_serialized_size_geometry_msgs__msg__Point>
 800a07c:	4420      	add	r0, r4
 800a07e:	bd10      	pop	{r4, pc}
 800a080:	4b04      	ldr	r3, [pc, #16]	; (800a094 <_PointStamped__get_serialized_size+0x30>)
 800a082:	221b      	movs	r2, #27
 800a084:	2101      	movs	r1, #1
 800a086:	4804      	ldr	r0, [pc, #16]	; (800a098 <_PointStamped__get_serialized_size+0x34>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	f00b f814 	bl	80150b8 <fwrite>
 800a090:	4620      	mov	r0, r4
 800a092:	bd10      	pop	{r4, pc}
 800a094:	20000208 	.word	0x20000208
 800a098:	0801f7a8 	.word	0x0801f7a8

0800a09c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PointStamped>:
 800a09c:	4800      	ldr	r0, [pc, #0]	; (800a0a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PointStamped+0x4>)
 800a09e:	4770      	bx	lr
 800a0a0:	20000014 	.word	0x20000014

0800a0a4 <get_serialized_size_geometry_msgs__msg__Point>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	b1b0      	cbz	r0, 800a0d6 <get_serialized_size_geometry_msgs__msg__Point+0x32>
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	2108      	movs	r1, #8
 800a0ac:	f105 0408 	add.w	r4, r5, #8
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f000 fddd 	bl	800ac70 <ucdr_alignment>
 800a0b6:	2108      	movs	r1, #8
 800a0b8:	4404      	add	r4, r0
 800a0ba:	f1c5 0508 	rsb	r5, r5, #8
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 fdd6 	bl	800ac70 <ucdr_alignment>
 800a0c4:	2108      	movs	r1, #8
 800a0c6:	4408      	add	r0, r1
 800a0c8:	4404      	add	r4, r0
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 fdd0 	bl	800ac70 <ucdr_alignment>
 800a0d0:	4428      	add	r0, r5
 800a0d2:	4420      	add	r0, r4
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <get_serialized_size_geometry_msgs__msg__Point+0x48>)
 800a0d8:	4604      	mov	r4, r0
 800a0da:	221b      	movs	r2, #27
 800a0dc:	2101      	movs	r1, #1
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4803      	ldr	r0, [pc, #12]	; (800a0f0 <get_serialized_size_geometry_msgs__msg__Point+0x4c>)
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f00a ffe8 	bl	80150b8 <fwrite>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20000208 	.word	0x20000208
 800a0f0:	0801f7a8 	.word	0x0801f7a8

0800a0f4 <_Point__cdr_serialize>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	b188      	cbz	r0, 800a11e <_Point__cdr_serialize+0x2a>
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	e9d0 2300 	ldrd	r2, r3, [r0]
 800a100:	4608      	mov	r0, r1
 800a102:	f000 fc4f 	bl	800a9a4 <ucdr_serialize_double>
 800a106:	4628      	mov	r0, r5
 800a108:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800a10c:	f000 fc4a 	bl	800a9a4 <ucdr_serialize_double>
 800a110:	4628      	mov	r0, r5
 800a112:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a11a:	f000 bc43 	b.w	800a9a4 <ucdr_serialize_double>
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <_Point__cdr_serialize+0x40>)
 800a120:	221b      	movs	r2, #27
 800a122:	2101      	movs	r1, #1
 800a124:	4804      	ldr	r0, [pc, #16]	; (800a138 <_Point__cdr_serialize+0x44>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f00a ffc5 	bl	80150b8 <fwrite>
 800a12e:	4620      	mov	r0, r4
 800a130:	bd70      	pop	{r4, r5, r6, pc}
 800a132:	bf00      	nop
 800a134:	20000208 	.word	0x20000208
 800a138:	0801f7a8 	.word	0x0801f7a8

0800a13c <_Point__cdr_deserialize>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	460c      	mov	r4, r1
 800a140:	b171      	cbz	r1, 800a160 <_Point__cdr_deserialize+0x24>
 800a142:	4605      	mov	r5, r0
 800a144:	f000 fcc2 	bl	800aacc <ucdr_deserialize_double>
 800a148:	f104 0108 	add.w	r1, r4, #8
 800a14c:	4628      	mov	r0, r5
 800a14e:	f000 fcbd 	bl	800aacc <ucdr_deserialize_double>
 800a152:	f104 0110 	add.w	r1, r4, #16
 800a156:	4628      	mov	r0, r5
 800a158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a15c:	f000 bcb6 	b.w	800aacc <ucdr_deserialize_double>
 800a160:	4b04      	ldr	r3, [pc, #16]	; (800a174 <_Point__cdr_deserialize+0x38>)
 800a162:	221b      	movs	r2, #27
 800a164:	2101      	movs	r1, #1
 800a166:	4804      	ldr	r0, [pc, #16]	; (800a178 <_Point__cdr_deserialize+0x3c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	f00a ffa4 	bl	80150b8 <fwrite>
 800a170:	4620      	mov	r0, r4
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	20000208 	.word	0x20000208
 800a178:	0801f7a8 	.word	0x0801f7a8

0800a17c <_Point__max_serialized_size>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	2108      	movs	r1, #8
 800a180:	2000      	movs	r0, #0
 800a182:	f000 fd75 	bl	800ac70 <ucdr_alignment>
 800a186:	2108      	movs	r1, #8
 800a188:	1845      	adds	r5, r0, r1
 800a18a:	4628      	mov	r0, r5
 800a18c:	f000 fd70 	bl	800ac70 <ucdr_alignment>
 800a190:	2108      	movs	r1, #8
 800a192:	1844      	adds	r4, r0, r1
 800a194:	442c      	add	r4, r5
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fd6a 	bl	800ac70 <ucdr_alignment>
 800a19c:	3008      	adds	r0, #8
 800a19e:	4420      	add	r0, r4
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	bf00      	nop

0800a1a4 <_Point__get_serialized_size>:
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	b188      	cbz	r0, 800a1cc <_Point__get_serialized_size+0x28>
 800a1a8:	2108      	movs	r1, #8
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f000 fd60 	bl	800ac70 <ucdr_alignment>
 800a1b0:	2108      	movs	r1, #8
 800a1b2:	1844      	adds	r4, r0, r1
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fd5b 	bl	800ac70 <ucdr_alignment>
 800a1ba:	2108      	movs	r1, #8
 800a1bc:	4408      	add	r0, r1
 800a1be:	4404      	add	r4, r0
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fd55 	bl	800ac70 <ucdr_alignment>
 800a1c6:	3008      	adds	r0, #8
 800a1c8:	4420      	add	r0, r4
 800a1ca:	bd10      	pop	{r4, pc}
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_Point__get_serialized_size+0x40>)
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	221b      	movs	r2, #27
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4804      	ldr	r0, [pc, #16]	; (800a1e8 <_Point__get_serialized_size+0x44>)
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f00a ff6d 	bl	80150b8 <fwrite>
 800a1de:	4620      	mov	r0, r4
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20000208 	.word	0x20000208
 800a1e8:	0801f7a8 	.word	0x0801f7a8

0800a1ec <max_serialized_size_geometry_msgs__msg__Point>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	2108      	movs	r1, #8
 800a1f4:	f104 0508 	add.w	r5, r4, #8
 800a1f8:	7003      	strb	r3, [r0, #0]
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f1c4 0408 	rsb	r4, r4, #8
 800a200:	f000 fd36 	bl	800ac70 <ucdr_alignment>
 800a204:	1946      	adds	r6, r0, r5
 800a206:	2108      	movs	r1, #8
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 fd31 	bl	800ac70 <ucdr_alignment>
 800a20e:	2108      	movs	r1, #8
 800a210:	1845      	adds	r5, r0, r1
 800a212:	4435      	add	r5, r6
 800a214:	4628      	mov	r0, r5
 800a216:	f000 fd2b 	bl	800ac70 <ucdr_alignment>
 800a21a:	4420      	add	r0, r4
 800a21c:	4428      	add	r0, r5
 800a21e:	bd70      	pop	{r4, r5, r6, pc}

0800a220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 800a220:	4800      	ldr	r0, [pc, #0]	; (800a224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 800a222:	4770      	bx	lr
 800a224:	2000003c 	.word	0x2000003c

0800a228 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4604      	mov	r4, r0
 800a22c:	b158      	cbz	r0, 800a246 <get_serialized_size_geometry_msgs__msg__Twist+0x1e>
 800a22e:	460d      	mov	r5, r1
 800a230:	f000 f8a8 	bl	800a384 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a234:	4603      	mov	r3, r0
 800a236:	f104 0018 	add.w	r0, r4, #24
 800a23a:	461c      	mov	r4, r3
 800a23c:	18e9      	adds	r1, r5, r3
 800a23e:	f000 f8a1 	bl	800a384 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a242:	4420      	add	r0, r4
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <get_serialized_size_geometry_msgs__msg__Twist+0x34>)
 800a248:	221b      	movs	r2, #27
 800a24a:	2101      	movs	r1, #1
 800a24c:	4804      	ldr	r0, [pc, #16]	; (800a260 <get_serialized_size_geometry_msgs__msg__Twist+0x38>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f00a ff31 	bl	80150b8 <fwrite>
 800a256:	4620      	mov	r0, r4
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	20000208 	.word	0x20000208
 800a260:	0801f7a8 	.word	0x0801f7a8

0800a264 <_Twist__cdr_deserialize>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	460c      	mov	r4, r1
 800a268:	b199      	cbz	r1, 800a292 <_Twist__cdr_deserialize+0x2e>
 800a26a:	4605      	mov	r5, r0
 800a26c:	f000 f948 	bl	800a500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a270:	4603      	mov	r3, r0
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	4798      	blx	r3
 800a27c:	f000 f940 	bl	800a500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a280:	4603      	mov	r3, r0
 800a282:	f104 0118 	add.w	r1, r4, #24
 800a286:	4628      	mov	r0, r5
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	4718      	bx	r3
 800a292:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <_Twist__cdr_deserialize+0x44>)
 800a294:	221b      	movs	r2, #27
 800a296:	2101      	movs	r1, #1
 800a298:	4804      	ldr	r0, [pc, #16]	; (800a2ac <_Twist__cdr_deserialize+0x48>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f00a ff0b 	bl	80150b8 <fwrite>
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000208 	.word	0x20000208
 800a2ac:	0801f7a8 	.word	0x0801f7a8

0800a2b0 <_Twist__cdr_serialize>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	b1a0      	cbz	r0, 800a2e2 <_Twist__cdr_serialize+0x32>
 800a2b8:	9101      	str	r1, [sp, #4]
 800a2ba:	f000 f921 	bl	800a500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	9901      	ldr	r1, [sp, #4]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	4798      	blx	r3
 800a2ca:	f000 f919 	bl	800a500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	9901      	ldr	r1, [sp, #4]
 800a2d2:	f104 0018 	add.w	r0, r4, #24
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	b002      	add	sp, #8
 800a2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e0:	4718      	bx	r3
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <_Twist__cdr_serialize+0x48>)
 800a2e4:	221b      	movs	r2, #27
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4804      	ldr	r0, [pc, #16]	; (800a2fc <_Twist__cdr_serialize+0x4c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f00a fee3 	bl	80150b8 <fwrite>
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	b002      	add	sp, #8
 800a2f6:	bd10      	pop	{r4, pc}
 800a2f8:	20000208 	.word	0x20000208
 800a2fc:	0801f7a8 	.word	0x0801f7a8

0800a300 <_Twist__max_serialized_size>:
 800a300:	b510      	push	{r4, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	2301      	movs	r3, #1
 800a306:	2100      	movs	r1, #0
 800a308:	f10d 0007 	add.w	r0, sp, #7
 800a30c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a310:	f000 f8dc 	bl	800a4cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a314:	4604      	mov	r4, r0
 800a316:	f10d 0007 	add.w	r0, sp, #7
 800a31a:	4621      	mov	r1, r4
 800a31c:	f000 f8d6 	bl	800a4cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a320:	4420      	add	r0, r4
 800a322:	b002      	add	sp, #8
 800a324:	bd10      	pop	{r4, pc}
 800a326:	bf00      	nop

0800a328 <_Twist__get_serialized_size>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4604      	mov	r4, r0
 800a32c:	b150      	cbz	r0, 800a344 <_Twist__get_serialized_size+0x1c>
 800a32e:	2100      	movs	r1, #0
 800a330:	f000 f828 	bl	800a384 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a334:	4601      	mov	r1, r0
 800a336:	f104 0018 	add.w	r0, r4, #24
 800a33a:	460c      	mov	r4, r1
 800a33c:	f000 f822 	bl	800a384 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a340:	4420      	add	r0, r4
 800a342:	bd10      	pop	{r4, pc}
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <_Twist__get_serialized_size+0x30>)
 800a346:	221b      	movs	r2, #27
 800a348:	2101      	movs	r1, #1
 800a34a:	4804      	ldr	r0, [pc, #16]	; (800a35c <_Twist__get_serialized_size+0x34>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f00a feb2 	bl	80150b8 <fwrite>
 800a354:	4620      	mov	r0, r4
 800a356:	bd10      	pop	{r4, pc}
 800a358:	20000208 	.word	0x20000208
 800a35c:	0801f7a8 	.word	0x0801f7a8

0800a360 <max_serialized_size_geometry_msgs__msg__Twist>:
 800a360:	2301      	movs	r3, #1
 800a362:	b570      	push	{r4, r5, r6, lr}
 800a364:	7003      	strb	r3, [r0, #0]
 800a366:	4605      	mov	r5, r0
 800a368:	460e      	mov	r6, r1
 800a36a:	f000 f8af 	bl	800a4cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a36e:	4604      	mov	r4, r0
 800a370:	4628      	mov	r0, r5
 800a372:	1931      	adds	r1, r6, r4
 800a374:	f000 f8aa 	bl	800a4cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800a378:	4420      	add	r0, r4
 800a37a:	bd70      	pop	{r4, r5, r6, pc}

0800a37c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a37c:	4800      	ldr	r0, [pc, #0]	; (800a380 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a37e:	4770      	bx	lr
 800a380:	20000064 	.word	0x20000064

0800a384 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	b1b0      	cbz	r0, 800a3b6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a388:	460d      	mov	r5, r1
 800a38a:	2108      	movs	r1, #8
 800a38c:	f105 0408 	add.w	r4, r5, #8
 800a390:	4628      	mov	r0, r5
 800a392:	f000 fc6d 	bl	800ac70 <ucdr_alignment>
 800a396:	2108      	movs	r1, #8
 800a398:	4404      	add	r4, r0
 800a39a:	f1c5 0508 	rsb	r5, r5, #8
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 fc66 	bl	800ac70 <ucdr_alignment>
 800a3a4:	2108      	movs	r1, #8
 800a3a6:	4408      	add	r0, r1
 800a3a8:	4404      	add	r4, r0
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fc60 	bl	800ac70 <ucdr_alignment>
 800a3b0:	4428      	add	r0, r5
 800a3b2:	4420      	add	r0, r4
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <get_serialized_size_geometry_msgs__msg__Vector3+0x48>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	221b      	movs	r2, #27
 800a3bc:	2101      	movs	r1, #1
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4803      	ldr	r0, [pc, #12]	; (800a3d0 <get_serialized_size_geometry_msgs__msg__Vector3+0x4c>)
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f00a fe78 	bl	80150b8 <fwrite>
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20000208 	.word	0x20000208
 800a3d0:	0801f7a8 	.word	0x0801f7a8

0800a3d4 <_Vector3__cdr_serialize>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b188      	cbz	r0, 800a3fe <_Vector3__cdr_serialize+0x2a>
 800a3da:	460d      	mov	r5, r1
 800a3dc:	e9d0 2300 	ldrd	r2, r3, [r0]
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	f000 fadf 	bl	800a9a4 <ucdr_serialize_double>
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800a3ec:	f000 fada 	bl	800a9a4 <ucdr_serialize_double>
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3fa:	f000 bad3 	b.w	800a9a4 <ucdr_serialize_double>
 800a3fe:	4b05      	ldr	r3, [pc, #20]	; (800a414 <_Vector3__cdr_serialize+0x40>)
 800a400:	221b      	movs	r2, #27
 800a402:	2101      	movs	r1, #1
 800a404:	4804      	ldr	r0, [pc, #16]	; (800a418 <_Vector3__cdr_serialize+0x44>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	f00a fe55 	bl	80150b8 <fwrite>
 800a40e:	4620      	mov	r0, r4
 800a410:	bd70      	pop	{r4, r5, r6, pc}
 800a412:	bf00      	nop
 800a414:	20000208 	.word	0x20000208
 800a418:	0801f7a8 	.word	0x0801f7a8

0800a41c <_Vector3__cdr_deserialize>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	460c      	mov	r4, r1
 800a420:	b171      	cbz	r1, 800a440 <_Vector3__cdr_deserialize+0x24>
 800a422:	4605      	mov	r5, r0
 800a424:	f000 fb52 	bl	800aacc <ucdr_deserialize_double>
 800a428:	f104 0108 	add.w	r1, r4, #8
 800a42c:	4628      	mov	r0, r5
 800a42e:	f000 fb4d 	bl	800aacc <ucdr_deserialize_double>
 800a432:	f104 0110 	add.w	r1, r4, #16
 800a436:	4628      	mov	r0, r5
 800a438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43c:	f000 bb46 	b.w	800aacc <ucdr_deserialize_double>
 800a440:	4b04      	ldr	r3, [pc, #16]	; (800a454 <_Vector3__cdr_deserialize+0x38>)
 800a442:	221b      	movs	r2, #27
 800a444:	2101      	movs	r1, #1
 800a446:	4804      	ldr	r0, [pc, #16]	; (800a458 <_Vector3__cdr_deserialize+0x3c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f00a fe34 	bl	80150b8 <fwrite>
 800a450:	4620      	mov	r0, r4
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	20000208 	.word	0x20000208
 800a458:	0801f7a8 	.word	0x0801f7a8

0800a45c <_Vector3__max_serialized_size>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	2108      	movs	r1, #8
 800a460:	2000      	movs	r0, #0
 800a462:	f000 fc05 	bl	800ac70 <ucdr_alignment>
 800a466:	2108      	movs	r1, #8
 800a468:	1845      	adds	r5, r0, r1
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 fc00 	bl	800ac70 <ucdr_alignment>
 800a470:	2108      	movs	r1, #8
 800a472:	1844      	adds	r4, r0, r1
 800a474:	442c      	add	r4, r5
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fbfa 	bl	800ac70 <ucdr_alignment>
 800a47c:	3008      	adds	r0, #8
 800a47e:	4420      	add	r0, r4
 800a480:	bd38      	pop	{r3, r4, r5, pc}
 800a482:	bf00      	nop

0800a484 <_Vector3__get_serialized_size>:
 800a484:	b510      	push	{r4, lr}
 800a486:	b188      	cbz	r0, 800a4ac <_Vector3__get_serialized_size+0x28>
 800a488:	2108      	movs	r1, #8
 800a48a:	2000      	movs	r0, #0
 800a48c:	f000 fbf0 	bl	800ac70 <ucdr_alignment>
 800a490:	2108      	movs	r1, #8
 800a492:	1844      	adds	r4, r0, r1
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fbeb 	bl	800ac70 <ucdr_alignment>
 800a49a:	2108      	movs	r1, #8
 800a49c:	4408      	add	r0, r1
 800a49e:	4404      	add	r4, r0
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fbe5 	bl	800ac70 <ucdr_alignment>
 800a4a6:	3008      	adds	r0, #8
 800a4a8:	4420      	add	r0, r4
 800a4aa:	bd10      	pop	{r4, pc}
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <_Vector3__get_serialized_size+0x40>)
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	221b      	movs	r2, #27
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4804      	ldr	r0, [pc, #16]	; (800a4c8 <_Vector3__get_serialized_size+0x44>)
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	f00a fdfd 	bl	80150b8 <fwrite>
 800a4be:	4620      	mov	r0, r4
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000208 	.word	0x20000208
 800a4c8:	0801f7a8 	.word	0x0801f7a8

0800a4cc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	2108      	movs	r1, #8
 800a4d4:	f104 0508 	add.w	r5, r4, #8
 800a4d8:	7003      	strb	r3, [r0, #0]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f1c4 0408 	rsb	r4, r4, #8
 800a4e0:	f000 fbc6 	bl	800ac70 <ucdr_alignment>
 800a4e4:	1946      	adds	r6, r0, r5
 800a4e6:	2108      	movs	r1, #8
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f000 fbc1 	bl	800ac70 <ucdr_alignment>
 800a4ee:	2108      	movs	r1, #8
 800a4f0:	1845      	adds	r5, r0, r1
 800a4f2:	4435      	add	r5, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f000 fbbb 	bl	800ac70 <ucdr_alignment>
 800a4fa:	4420      	add	r0, r4
 800a4fc:	4428      	add	r0, r5
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}

0800a500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a500:	4800      	ldr	r0, [pc, #0]	; (800a504 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a502:	4770      	bx	lr
 800a504:	2000008c 	.word	0x2000008c

0800a508 <ucdr_serialize_bool>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	460d      	mov	r5, r1
 800a50c:	2101      	movs	r1, #1
 800a50e:	4604      	mov	r4, r0
 800a510:	f000 fb64 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a514:	b148      	cbz	r0, 800a52a <ucdr_serialize_bool+0x22>
 800a516:	68a3      	ldr	r3, [r4, #8]
 800a518:	2101      	movs	r1, #1
 800a51a:	701d      	strb	r5, [r3, #0]
 800a51c:	68a2      	ldr	r2, [r4, #8]
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	440a      	add	r2, r1
 800a522:	7561      	strb	r1, [r4, #21]
 800a524:	440b      	add	r3, r1
 800a526:	60a2      	str	r2, [r4, #8]
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	7da0      	ldrb	r0, [r4, #22]
 800a52c:	f080 0001 	eor.w	r0, r0, #1
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop

0800a534 <ucdr_deserialize_bool>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	460d      	mov	r5, r1
 800a538:	2101      	movs	r1, #1
 800a53a:	4604      	mov	r4, r0
 800a53c:	f000 fb4e 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a540:	b160      	cbz	r0, 800a55c <ucdr_deserialize_bool+0x28>
 800a542:	68a2      	ldr	r2, [r4, #8]
 800a544:	2001      	movs	r0, #1
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a54c:	4403      	add	r3, r0
 800a54e:	3900      	subs	r1, #0
 800a550:	bf18      	it	ne
 800a552:	2101      	movne	r1, #1
 800a554:	7029      	strb	r1, [r5, #0]
 800a556:	60a2      	str	r2, [r4, #8]
 800a558:	6123      	str	r3, [r4, #16]
 800a55a:	7560      	strb	r0, [r4, #21]
 800a55c:	7da0      	ldrb	r0, [r4, #22]
 800a55e:	f080 0001 	eor.w	r0, r0, #1
 800a562:	bd38      	pop	{r3, r4, r5, pc}

0800a564 <ucdr_serialize_uint8_t>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	460d      	mov	r5, r1
 800a568:	2101      	movs	r1, #1
 800a56a:	4604      	mov	r4, r0
 800a56c:	f000 fb36 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a570:	b148      	cbz	r0, 800a586 <ucdr_serialize_uint8_t+0x22>
 800a572:	68a3      	ldr	r3, [r4, #8]
 800a574:	2101      	movs	r1, #1
 800a576:	701d      	strb	r5, [r3, #0]
 800a578:	68a2      	ldr	r2, [r4, #8]
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	440a      	add	r2, r1
 800a57e:	7561      	strb	r1, [r4, #21]
 800a580:	440b      	add	r3, r1
 800a582:	60a2      	str	r2, [r4, #8]
 800a584:	6123      	str	r3, [r4, #16]
 800a586:	7da0      	ldrb	r0, [r4, #22]
 800a588:	f080 0001 	eor.w	r0, r0, #1
 800a58c:	bd38      	pop	{r3, r4, r5, pc}
 800a58e:	bf00      	nop

0800a590 <ucdr_deserialize_uint8_t>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	460d      	mov	r5, r1
 800a594:	2101      	movs	r1, #1
 800a596:	4604      	mov	r4, r0
 800a598:	f000 fb20 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a59c:	b150      	cbz	r0, 800a5b4 <ucdr_deserialize_uint8_t+0x24>
 800a59e:	68a3      	ldr	r3, [r4, #8]
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	702b      	strb	r3, [r5, #0]
 800a5a6:	68a2      	ldr	r2, [r4, #8]
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	440a      	add	r2, r1
 800a5ac:	7561      	strb	r1, [r4, #21]
 800a5ae:	440b      	add	r3, r1
 800a5b0:	60a2      	str	r2, [r4, #8]
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	7da0      	ldrb	r0, [r4, #22]
 800a5b6:	f080 0001 	eor.w	r0, r0, #1
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}

0800a5bc <ucdr_serialize_uint16_t>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4604      	mov	r4, r0
 800a5c0:	460e      	mov	r6, r1
 800a5c2:	2102      	movs	r1, #2
 800a5c4:	f000 fb5c 	bl	800ac80 <ucdr_buffer_alignment>
 800a5c8:	68a5      	ldr	r5, [r4, #8]
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	2102      	movs	r1, #2
 800a5d2:	441d      	add	r5, r3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	60a5      	str	r5, [r4, #8]
 800a5d8:	6123      	str	r3, [r4, #16]
 800a5da:	f000 faff 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a5de:	b180      	cbz	r0, 800a602 <ucdr_serialize_uint16_t+0x46>
 800a5e0:	7d23      	ldrb	r3, [r4, #20]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	d010      	beq.n	800a60a <ucdr_serialize_uint16_t+0x4e>
 800a5e8:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	705e      	strb	r6, [r3, #1]
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	68a2      	ldr	r2, [r4, #8]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	7561      	strb	r1, [r4, #21]
 800a5fc:	440b      	add	r3, r1
 800a5fe:	60a2      	str	r2, [r4, #8]
 800a600:	6123      	str	r3, [r4, #16]
 800a602:	7da0      	ldrb	r0, [r4, #22]
 800a604:	f080 0001 	eor.w	r0, r0, #1
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	801e      	strh	r6, [r3, #0]
 800a60c:	e7f1      	b.n	800a5f2 <ucdr_serialize_uint16_t+0x36>
 800a60e:	bf00      	nop

0800a610 <ucdr_serialize_endian_uint16_t>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	4604      	mov	r4, r0
 800a614:	460f      	mov	r7, r1
 800a616:	2102      	movs	r1, #2
 800a618:	4616      	mov	r6, r2
 800a61a:	f000 fb31 	bl	800ac80 <ucdr_buffer_alignment>
 800a61e:	68a5      	ldr	r5, [r4, #8]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	2102      	movs	r1, #2
 800a624:	4405      	add	r5, r0
 800a626:	4403      	add	r3, r0
 800a628:	4620      	mov	r0, r4
 800a62a:	60a5      	str	r5, [r4, #8]
 800a62c:	6123      	str	r3, [r4, #16]
 800a62e:	f000 fad5 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a632:	b178      	cbz	r0, 800a654 <ucdr_serialize_endian_uint16_t+0x44>
 800a634:	2f01      	cmp	r7, #1
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	d010      	beq.n	800a65c <ucdr_serialize_endian_uint16_t+0x4c>
 800a63a:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800a63e:	701a      	strb	r2, [r3, #0]
 800a640:	68a3      	ldr	r3, [r4, #8]
 800a642:	705e      	strb	r6, [r3, #1]
 800a644:	2102      	movs	r1, #2
 800a646:	68a2      	ldr	r2, [r4, #8]
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	440a      	add	r2, r1
 800a64c:	7561      	strb	r1, [r4, #21]
 800a64e:	440b      	add	r3, r1
 800a650:	60a2      	str	r2, [r4, #8]
 800a652:	6123      	str	r3, [r4, #16]
 800a654:	7da0      	ldrb	r0, [r4, #22]
 800a656:	f080 0001 	eor.w	r0, r0, #1
 800a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65c:	801e      	strh	r6, [r3, #0]
 800a65e:	e7f1      	b.n	800a644 <ucdr_serialize_endian_uint16_t+0x34>

0800a660 <ucdr_deserialize_uint16_t>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4604      	mov	r4, r0
 800a664:	460e      	mov	r6, r1
 800a666:	2102      	movs	r1, #2
 800a668:	f000 fb0a 	bl	800ac80 <ucdr_buffer_alignment>
 800a66c:	68a5      	ldr	r5, [r4, #8]
 800a66e:	4603      	mov	r3, r0
 800a670:	6922      	ldr	r2, [r4, #16]
 800a672:	4620      	mov	r0, r4
 800a674:	2102      	movs	r1, #2
 800a676:	441d      	add	r5, r3
 800a678:	4413      	add	r3, r2
 800a67a:	60a5      	str	r5, [r4, #8]
 800a67c:	6123      	str	r3, [r4, #16]
 800a67e:	f000 faad 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a682:	b180      	cbz	r0, 800a6a6 <ucdr_deserialize_uint16_t+0x46>
 800a684:	7d23      	ldrb	r3, [r4, #20]
 800a686:	2b01      	cmp	r3, #1
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	d010      	beq.n	800a6ae <ucdr_deserialize_uint16_t+0x4e>
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	7033      	strb	r3, [r6, #0]
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	7073      	strb	r3, [r6, #1]
 800a696:	2102      	movs	r1, #2
 800a698:	68a2      	ldr	r2, [r4, #8]
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	440a      	add	r2, r1
 800a69e:	7561      	strb	r1, [r4, #21]
 800a6a0:	440b      	add	r3, r1
 800a6a2:	60a2      	str	r2, [r4, #8]
 800a6a4:	6123      	str	r3, [r4, #16]
 800a6a6:	7da0      	ldrb	r0, [r4, #22]
 800a6a8:	f080 0001 	eor.w	r0, r0, #1
 800a6ac:	bd70      	pop	{r4, r5, r6, pc}
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	8033      	strh	r3, [r6, #0]
 800a6b2:	e7f0      	b.n	800a696 <ucdr_deserialize_uint16_t+0x36>

0800a6b4 <ucdr_deserialize_endian_uint16_t>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	2102      	movs	r1, #2
 800a6bc:	4616      	mov	r6, r2
 800a6be:	f000 fadf 	bl	800ac80 <ucdr_buffer_alignment>
 800a6c2:	68a5      	ldr	r5, [r4, #8]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	4405      	add	r5, r0
 800a6ca:	4403      	add	r3, r0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	60a5      	str	r5, [r4, #8]
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	f000 fa83 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a6d6:	b178      	cbz	r0, 800a6f8 <ucdr_deserialize_endian_uint16_t+0x44>
 800a6d8:	2f01      	cmp	r7, #1
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	d010      	beq.n	800a700 <ucdr_deserialize_endian_uint16_t+0x4c>
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	7033      	strb	r3, [r6, #0]
 800a6e2:	68a3      	ldr	r3, [r4, #8]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	7073      	strb	r3, [r6, #1]
 800a6e8:	2102      	movs	r1, #2
 800a6ea:	68a2      	ldr	r2, [r4, #8]
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	7561      	strb	r1, [r4, #21]
 800a6f2:	440b      	add	r3, r1
 800a6f4:	60a2      	str	r2, [r4, #8]
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	7da0      	ldrb	r0, [r4, #22]
 800a6fa:	f080 0001 	eor.w	r0, r0, #1
 800a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	8033      	strh	r3, [r6, #0]
 800a704:	e7f0      	b.n	800a6e8 <ucdr_deserialize_endian_uint16_t+0x34>
 800a706:	bf00      	nop

0800a708 <ucdr_serialize_uint32_t>:
 800a708:	b570      	push	{r4, r5, r6, lr}
 800a70a:	4604      	mov	r4, r0
 800a70c:	460d      	mov	r5, r1
 800a70e:	2104      	movs	r1, #4
 800a710:	f000 fab6 	bl	800ac80 <ucdr_buffer_alignment>
 800a714:	68a1      	ldr	r1, [r4, #8]
 800a716:	4603      	mov	r3, r0
 800a718:	6922      	ldr	r2, [r4, #16]
 800a71a:	4620      	mov	r0, r4
 800a71c:	18ce      	adds	r6, r1, r3
 800a71e:	4413      	add	r3, r2
 800a720:	2104      	movs	r1, #4
 800a722:	60a6      	str	r6, [r4, #8]
 800a724:	6123      	str	r3, [r4, #16]
 800a726:	f000 fa59 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a72a:	b1c0      	cbz	r0, 800a75e <ucdr_serialize_uint32_t+0x56>
 800a72c:	7d23      	ldrb	r3, [r4, #20]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	d018      	beq.n	800a766 <ucdr_serialize_uint32_t+0x5e>
 800a734:	f3c5 6007 	ubfx	r0, r5, #24, #8
 800a738:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800a73c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800a740:	7018      	strb	r0, [r3, #0]
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	7059      	strb	r1, [r3, #1]
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	709a      	strb	r2, [r3, #2]
 800a74a:	68a3      	ldr	r3, [r4, #8]
 800a74c:	70dd      	strb	r5, [r3, #3]
 800a74e:	2104      	movs	r1, #4
 800a750:	68a2      	ldr	r2, [r4, #8]
 800a752:	6923      	ldr	r3, [r4, #16]
 800a754:	440a      	add	r2, r1
 800a756:	7561      	strb	r1, [r4, #21]
 800a758:	440b      	add	r3, r1
 800a75a:	60a2      	str	r2, [r4, #8]
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	7da0      	ldrb	r0, [r4, #22]
 800a760:	f080 0001 	eor.w	r0, r0, #1
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	601d      	str	r5, [r3, #0]
 800a768:	e7f1      	b.n	800a74e <ucdr_serialize_uint32_t+0x46>
 800a76a:	bf00      	nop

0800a76c <ucdr_serialize_endian_uint32_t>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	4604      	mov	r4, r0
 800a770:	460e      	mov	r6, r1
 800a772:	2104      	movs	r1, #4
 800a774:	4615      	mov	r5, r2
 800a776:	f000 fa83 	bl	800ac80 <ucdr_buffer_alignment>
 800a77a:	68a2      	ldr	r2, [r4, #8]
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	2104      	movs	r1, #4
 800a780:	4402      	add	r2, r0
 800a782:	4403      	add	r3, r0
 800a784:	4620      	mov	r0, r4
 800a786:	60a2      	str	r2, [r4, #8]
 800a788:	6123      	str	r3, [r4, #16]
 800a78a:	f000 fa27 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a78e:	b1b8      	cbz	r0, 800a7c0 <ucdr_serialize_endian_uint32_t+0x54>
 800a790:	2e01      	cmp	r6, #1
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	d018      	beq.n	800a7c8 <ucdr_serialize_endian_uint32_t+0x5c>
 800a796:	f3c5 6007 	ubfx	r0, r5, #24, #8
 800a79a:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800a79e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800a7a2:	7018      	strb	r0, [r3, #0]
 800a7a4:	68a3      	ldr	r3, [r4, #8]
 800a7a6:	7059      	strb	r1, [r3, #1]
 800a7a8:	68a3      	ldr	r3, [r4, #8]
 800a7aa:	709a      	strb	r2, [r3, #2]
 800a7ac:	68a3      	ldr	r3, [r4, #8]
 800a7ae:	70dd      	strb	r5, [r3, #3]
 800a7b0:	2104      	movs	r1, #4
 800a7b2:	68a2      	ldr	r2, [r4, #8]
 800a7b4:	6923      	ldr	r3, [r4, #16]
 800a7b6:	440a      	add	r2, r1
 800a7b8:	7561      	strb	r1, [r4, #21]
 800a7ba:	440b      	add	r3, r1
 800a7bc:	60a2      	str	r2, [r4, #8]
 800a7be:	6123      	str	r3, [r4, #16]
 800a7c0:	7da0      	ldrb	r0, [r4, #22]
 800a7c2:	f080 0001 	eor.w	r0, r0, #1
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	601d      	str	r5, [r3, #0]
 800a7ca:	e7f1      	b.n	800a7b0 <ucdr_serialize_endian_uint32_t+0x44>

0800a7cc <ucdr_deserialize_uint32_t>:
 800a7cc:	b570      	push	{r4, r5, r6, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	2104      	movs	r1, #4
 800a7d4:	f000 fa54 	bl	800ac80 <ucdr_buffer_alignment>
 800a7d8:	68a1      	ldr	r1, [r4, #8]
 800a7da:	4603      	mov	r3, r0
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	18ce      	adds	r6, r1, r3
 800a7e2:	4413      	add	r3, r2
 800a7e4:	2104      	movs	r1, #4
 800a7e6:	60a6      	str	r6, [r4, #8]
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	f000 f9f7 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a7ee:	b1b0      	cbz	r0, 800a81e <ucdr_deserialize_uint32_t+0x52>
 800a7f0:	7d23      	ldrb	r3, [r4, #20]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	68a3      	ldr	r3, [r4, #8]
 800a7f6:	d016      	beq.n	800a826 <ucdr_deserialize_uint32_t+0x5a>
 800a7f8:	78db      	ldrb	r3, [r3, #3]
 800a7fa:	702b      	strb	r3, [r5, #0]
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	789b      	ldrb	r3, [r3, #2]
 800a800:	706b      	strb	r3, [r5, #1]
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	70ab      	strb	r3, [r5, #2]
 800a808:	68a3      	ldr	r3, [r4, #8]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	70eb      	strb	r3, [r5, #3]
 800a80e:	2104      	movs	r1, #4
 800a810:	68a2      	ldr	r2, [r4, #8]
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	440a      	add	r2, r1
 800a816:	7561      	strb	r1, [r4, #21]
 800a818:	440b      	add	r3, r1
 800a81a:	60a2      	str	r2, [r4, #8]
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	7da0      	ldrb	r0, [r4, #22]
 800a820:	f080 0001 	eor.w	r0, r0, #1
 800a824:	bd70      	pop	{r4, r5, r6, pc}
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	e7f0      	b.n	800a80e <ucdr_deserialize_uint32_t+0x42>

0800a82c <ucdr_deserialize_endian_uint32_t>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	4604      	mov	r4, r0
 800a830:	460e      	mov	r6, r1
 800a832:	2104      	movs	r1, #4
 800a834:	4615      	mov	r5, r2
 800a836:	f000 fa23 	bl	800ac80 <ucdr_buffer_alignment>
 800a83a:	68a2      	ldr	r2, [r4, #8]
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	2104      	movs	r1, #4
 800a840:	4402      	add	r2, r0
 800a842:	4403      	add	r3, r0
 800a844:	4620      	mov	r0, r4
 800a846:	60a2      	str	r2, [r4, #8]
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	f000 f9c7 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a84e:	b1a8      	cbz	r0, 800a87c <ucdr_deserialize_endian_uint32_t+0x50>
 800a850:	2e01      	cmp	r6, #1
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	d016      	beq.n	800a884 <ucdr_deserialize_endian_uint32_t+0x58>
 800a856:	78db      	ldrb	r3, [r3, #3]
 800a858:	702b      	strb	r3, [r5, #0]
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	789b      	ldrb	r3, [r3, #2]
 800a85e:	706b      	strb	r3, [r5, #1]
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	70ab      	strb	r3, [r5, #2]
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	70eb      	strb	r3, [r5, #3]
 800a86c:	2104      	movs	r1, #4
 800a86e:	68a2      	ldr	r2, [r4, #8]
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	440a      	add	r2, r1
 800a874:	7561      	strb	r1, [r4, #21]
 800a876:	440b      	add	r3, r1
 800a878:	60a2      	str	r2, [r4, #8]
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	7da0      	ldrb	r0, [r4, #22]
 800a87e:	f080 0001 	eor.w	r0, r0, #1
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	e7f0      	b.n	800a86c <ucdr_deserialize_endian_uint32_t+0x40>
 800a88a:	bf00      	nop

0800a88c <ucdr_serialize_int16_t>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	4604      	mov	r4, r0
 800a890:	460e      	mov	r6, r1
 800a892:	2102      	movs	r1, #2
 800a894:	f000 f9f4 	bl	800ac80 <ucdr_buffer_alignment>
 800a898:	68a5      	ldr	r5, [r4, #8]
 800a89a:	4603      	mov	r3, r0
 800a89c:	6922      	ldr	r2, [r4, #16]
 800a89e:	4620      	mov	r0, r4
 800a8a0:	2102      	movs	r1, #2
 800a8a2:	441d      	add	r5, r3
 800a8a4:	4413      	add	r3, r2
 800a8a6:	60a5      	str	r5, [r4, #8]
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	f000 f997 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a8ae:	b180      	cbz	r0, 800a8d2 <ucdr_serialize_int16_t+0x46>
 800a8b0:	7d23      	ldrb	r3, [r4, #20]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	68a3      	ldr	r3, [r4, #8]
 800a8b6:	d010      	beq.n	800a8da <ucdr_serialize_int16_t+0x4e>
 800a8b8:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800a8bc:	701a      	strb	r2, [r3, #0]
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	705e      	strb	r6, [r3, #1]
 800a8c2:	2102      	movs	r1, #2
 800a8c4:	68a2      	ldr	r2, [r4, #8]
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	7561      	strb	r1, [r4, #21]
 800a8cc:	440b      	add	r3, r1
 800a8ce:	60a2      	str	r2, [r4, #8]
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	7da0      	ldrb	r0, [r4, #22]
 800a8d4:	f080 0001 	eor.w	r0, r0, #1
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
 800a8da:	801e      	strh	r6, [r3, #0]
 800a8dc:	e7f1      	b.n	800a8c2 <ucdr_serialize_int16_t+0x36>
 800a8de:	bf00      	nop

0800a8e0 <ucdr_serialize_int32_t>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	2104      	movs	r1, #4
 800a8e8:	f000 f9ca 	bl	800ac80 <ucdr_buffer_alignment>
 800a8ec:	68a1      	ldr	r1, [r4, #8]
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	18ce      	adds	r6, r1, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	2104      	movs	r1, #4
 800a8fa:	60a6      	str	r6, [r4, #8]
 800a8fc:	6123      	str	r3, [r4, #16]
 800a8fe:	f000 f96d 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a902:	b1c0      	cbz	r0, 800a936 <ucdr_serialize_int32_t+0x56>
 800a904:	7d23      	ldrb	r3, [r4, #20]
 800a906:	2b01      	cmp	r3, #1
 800a908:	68a3      	ldr	r3, [r4, #8]
 800a90a:	d018      	beq.n	800a93e <ucdr_serialize_int32_t+0x5e>
 800a90c:	f3c5 6007 	ubfx	r0, r5, #24, #8
 800a910:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800a914:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800a918:	7018      	strb	r0, [r3, #0]
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	7059      	strb	r1, [r3, #1]
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	709a      	strb	r2, [r3, #2]
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	70dd      	strb	r5, [r3, #3]
 800a926:	2104      	movs	r1, #4
 800a928:	68a2      	ldr	r2, [r4, #8]
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	440a      	add	r2, r1
 800a92e:	7561      	strb	r1, [r4, #21]
 800a930:	440b      	add	r3, r1
 800a932:	60a2      	str	r2, [r4, #8]
 800a934:	6123      	str	r3, [r4, #16]
 800a936:	7da0      	ldrb	r0, [r4, #22]
 800a938:	f080 0001 	eor.w	r0, r0, #1
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
 800a93e:	601d      	str	r5, [r3, #0]
 800a940:	e7f1      	b.n	800a926 <ucdr_serialize_int32_t+0x46>
 800a942:	bf00      	nop

0800a944 <ucdr_deserialize_int32_t>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	2104      	movs	r1, #4
 800a94c:	f000 f998 	bl	800ac80 <ucdr_buffer_alignment>
 800a950:	68a1      	ldr	r1, [r4, #8]
 800a952:	4603      	mov	r3, r0
 800a954:	6922      	ldr	r2, [r4, #16]
 800a956:	4620      	mov	r0, r4
 800a958:	18ce      	adds	r6, r1, r3
 800a95a:	4413      	add	r3, r2
 800a95c:	2104      	movs	r1, #4
 800a95e:	60a6      	str	r6, [r4, #8]
 800a960:	6123      	str	r3, [r4, #16]
 800a962:	f000 f93b 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a966:	b1b0      	cbz	r0, 800a996 <ucdr_deserialize_int32_t+0x52>
 800a968:	7d23      	ldrb	r3, [r4, #20]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	68a3      	ldr	r3, [r4, #8]
 800a96e:	d016      	beq.n	800a99e <ucdr_deserialize_int32_t+0x5a>
 800a970:	78db      	ldrb	r3, [r3, #3]
 800a972:	702b      	strb	r3, [r5, #0]
 800a974:	68a3      	ldr	r3, [r4, #8]
 800a976:	789b      	ldrb	r3, [r3, #2]
 800a978:	706b      	strb	r3, [r5, #1]
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	70ab      	strb	r3, [r5, #2]
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	70eb      	strb	r3, [r5, #3]
 800a986:	2104      	movs	r1, #4
 800a988:	68a2      	ldr	r2, [r4, #8]
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	440a      	add	r2, r1
 800a98e:	7561      	strb	r1, [r4, #21]
 800a990:	440b      	add	r3, r1
 800a992:	60a2      	str	r2, [r4, #8]
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	7da0      	ldrb	r0, [r4, #22]
 800a998:	f080 0001 	eor.w	r0, r0, #1
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	e7f0      	b.n	800a986 <ucdr_deserialize_int32_t+0x42>

0800a9a4 <ucdr_serialize_double>:
 800a9a4:	b530      	push	{r4, r5, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	2108      	movs	r1, #8
 800a9ac:	e9cd 2300 	strd	r2, r3, [sp]
 800a9b0:	f000 f966 	bl	800ac80 <ucdr_buffer_alignment>
 800a9b4:	68a5      	ldr	r5, [r4, #8]
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	6922      	ldr	r2, [r4, #16]
 800a9ba:	2108      	movs	r1, #8
 800a9bc:	4620      	mov	r0, r4
 800a9be:	441d      	add	r5, r3
 800a9c0:	4413      	add	r3, r2
 800a9c2:	60a5      	str	r5, [r4, #8]
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	f000 f909 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800a9ca:	b350      	cbz	r0, 800aa22 <ucdr_serialize_double+0x7e>
 800a9cc:	7d23      	ldrb	r3, [r4, #20]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d02c      	beq.n	800aa2c <ucdr_serialize_double+0x88>
 800a9d2:	68a3      	ldr	r3, [r4, #8]
 800a9d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800a9d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9dc:	7019      	strb	r1, [r3, #0]
 800a9de:	68a3      	ldr	r3, [r4, #8]
 800a9e0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800a9e4:	705a      	strb	r2, [r3, #1]
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9ec:	7099      	strb	r1, [r3, #2]
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800a9f4:	70da      	strb	r2, [r3, #3]
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a9fc:	7119      	strb	r1, [r3, #4]
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800aa04:	715a      	strb	r2, [r3, #5]
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	f89d 2000 	ldrb.w	r2, [sp]
 800aa0c:	7199      	strb	r1, [r3, #6]
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	71da      	strb	r2, [r3, #7]
 800aa12:	2108      	movs	r1, #8
 800aa14:	68a2      	ldr	r2, [r4, #8]
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	440a      	add	r2, r1
 800aa1a:	7561      	strb	r1, [r4, #21]
 800aa1c:	440b      	add	r3, r1
 800aa1e:	60a2      	str	r2, [r4, #8]
 800aa20:	6123      	str	r3, [r4, #16]
 800aa22:	7da0      	ldrb	r0, [r4, #22]
 800aa24:	f080 0001 	eor.w	r0, r0, #1
 800aa28:	b003      	add	sp, #12
 800aa2a:	bd30      	pop	{r4, r5, pc}
 800aa2c:	466b      	mov	r3, sp
 800aa2e:	68a2      	ldr	r2, [r4, #8]
 800aa30:	cb03      	ldmia	r3!, {r0, r1}
 800aa32:	6010      	str	r0, [r2, #0]
 800aa34:	6051      	str	r1, [r2, #4]
 800aa36:	e7ec      	b.n	800aa12 <ucdr_serialize_double+0x6e>

0800aa38 <ucdr_serialize_endian_double>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	460e      	mov	r6, r1
 800aa40:	2108      	movs	r1, #8
 800aa42:	e9cd 2300 	strd	r2, r3, [sp]
 800aa46:	f000 f91b 	bl	800ac80 <ucdr_buffer_alignment>
 800aa4a:	68a5      	ldr	r5, [r4, #8]
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	4620      	mov	r0, r4
 800aa52:	2108      	movs	r1, #8
 800aa54:	441d      	add	r5, r3
 800aa56:	4413      	add	r3, r2
 800aa58:	60a5      	str	r5, [r4, #8]
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	f000 f8be 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800aa60:	b348      	cbz	r0, 800aab6 <ucdr_serialize_endian_double+0x7e>
 800aa62:	2e01      	cmp	r6, #1
 800aa64:	d02c      	beq.n	800aac0 <ucdr_serialize_endian_double+0x88>
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800aa6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa70:	7019      	strb	r1, [r3, #0]
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800aa78:	705a      	strb	r2, [r3, #1]
 800aa7a:	68a3      	ldr	r3, [r4, #8]
 800aa7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa80:	7099      	strb	r1, [r3, #2]
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800aa88:	70da      	strb	r2, [r3, #3]
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800aa90:	7119      	strb	r1, [r3, #4]
 800aa92:	68a3      	ldr	r3, [r4, #8]
 800aa94:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800aa98:	715a      	strb	r2, [r3, #5]
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	f89d 2000 	ldrb.w	r2, [sp]
 800aaa0:	7199      	strb	r1, [r3, #6]
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	71da      	strb	r2, [r3, #7]
 800aaa6:	2108      	movs	r1, #8
 800aaa8:	68a2      	ldr	r2, [r4, #8]
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	440a      	add	r2, r1
 800aaae:	7561      	strb	r1, [r4, #21]
 800aab0:	440b      	add	r3, r1
 800aab2:	60a2      	str	r2, [r4, #8]
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	7da0      	ldrb	r0, [r4, #22]
 800aab8:	f080 0001 	eor.w	r0, r0, #1
 800aabc:	b002      	add	sp, #8
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	466b      	mov	r3, sp
 800aac2:	68a2      	ldr	r2, [r4, #8]
 800aac4:	cb03      	ldmia	r3!, {r0, r1}
 800aac6:	6010      	str	r0, [r2, #0]
 800aac8:	6051      	str	r1, [r2, #4]
 800aaca:	e7ec      	b.n	800aaa6 <ucdr_serialize_endian_double+0x6e>

0800aacc <ucdr_deserialize_double>:
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	460d      	mov	r5, r1
 800aad2:	2108      	movs	r1, #8
 800aad4:	f000 f8d4 	bl	800ac80 <ucdr_buffer_alignment>
 800aad8:	68a1      	ldr	r1, [r4, #8]
 800aada:	4603      	mov	r3, r0
 800aadc:	6922      	ldr	r2, [r4, #16]
 800aade:	4620      	mov	r0, r4
 800aae0:	18ce      	adds	r6, r1, r3
 800aae2:	4413      	add	r3, r2
 800aae4:	2108      	movs	r1, #8
 800aae6:	60a6      	str	r6, [r4, #8]
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	f000 f877 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800aaee:	b310      	cbz	r0, 800ab36 <ucdr_deserialize_double+0x6a>
 800aaf0:	7d23      	ldrb	r3, [r4, #20]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	68a3      	ldr	r3, [r4, #8]
 800aaf6:	d022      	beq.n	800ab3e <ucdr_deserialize_double+0x72>
 800aaf8:	79db      	ldrb	r3, [r3, #7]
 800aafa:	702b      	strb	r3, [r5, #0]
 800aafc:	68a3      	ldr	r3, [r4, #8]
 800aafe:	799b      	ldrb	r3, [r3, #6]
 800ab00:	706b      	strb	r3, [r5, #1]
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	795b      	ldrb	r3, [r3, #5]
 800ab06:	70ab      	strb	r3, [r5, #2]
 800ab08:	68a3      	ldr	r3, [r4, #8]
 800ab0a:	791b      	ldrb	r3, [r3, #4]
 800ab0c:	70eb      	strb	r3, [r5, #3]
 800ab0e:	68a3      	ldr	r3, [r4, #8]
 800ab10:	78db      	ldrb	r3, [r3, #3]
 800ab12:	712b      	strb	r3, [r5, #4]
 800ab14:	68a3      	ldr	r3, [r4, #8]
 800ab16:	789b      	ldrb	r3, [r3, #2]
 800ab18:	716b      	strb	r3, [r5, #5]
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	785b      	ldrb	r3, [r3, #1]
 800ab1e:	71ab      	strb	r3, [r5, #6]
 800ab20:	68a3      	ldr	r3, [r4, #8]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	71eb      	strb	r3, [r5, #7]
 800ab26:	2108      	movs	r1, #8
 800ab28:	68a2      	ldr	r2, [r4, #8]
 800ab2a:	6923      	ldr	r3, [r4, #16]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	7561      	strb	r1, [r4, #21]
 800ab30:	440b      	add	r3, r1
 800ab32:	60a2      	str	r2, [r4, #8]
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	7da0      	ldrb	r0, [r4, #22]
 800ab38:	f080 0001 	eor.w	r0, r0, #1
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	602a      	str	r2, [r5, #0]
 800ab44:	606b      	str	r3, [r5, #4]
 800ab46:	e7ee      	b.n	800ab26 <ucdr_deserialize_double+0x5a>

0800ab48 <ucdr_deserialize_endian_double>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	460e      	mov	r6, r1
 800ab4e:	2108      	movs	r1, #8
 800ab50:	4615      	mov	r5, r2
 800ab52:	f000 f895 	bl	800ac80 <ucdr_buffer_alignment>
 800ab56:	68a2      	ldr	r2, [r4, #8]
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	2108      	movs	r1, #8
 800ab5c:	4402      	add	r2, r0
 800ab5e:	4403      	add	r3, r0
 800ab60:	4620      	mov	r0, r4
 800ab62:	60a2      	str	r2, [r4, #8]
 800ab64:	6123      	str	r3, [r4, #16]
 800ab66:	f000 f839 	bl	800abdc <ucdr_check_final_buffer_behavior>
 800ab6a:	b308      	cbz	r0, 800abb0 <ucdr_deserialize_endian_double+0x68>
 800ab6c:	2e01      	cmp	r6, #1
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	d022      	beq.n	800abb8 <ucdr_deserialize_endian_double+0x70>
 800ab72:	79db      	ldrb	r3, [r3, #7]
 800ab74:	702b      	strb	r3, [r5, #0]
 800ab76:	68a3      	ldr	r3, [r4, #8]
 800ab78:	799b      	ldrb	r3, [r3, #6]
 800ab7a:	706b      	strb	r3, [r5, #1]
 800ab7c:	68a3      	ldr	r3, [r4, #8]
 800ab7e:	795b      	ldrb	r3, [r3, #5]
 800ab80:	70ab      	strb	r3, [r5, #2]
 800ab82:	68a3      	ldr	r3, [r4, #8]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	70eb      	strb	r3, [r5, #3]
 800ab88:	68a3      	ldr	r3, [r4, #8]
 800ab8a:	78db      	ldrb	r3, [r3, #3]
 800ab8c:	712b      	strb	r3, [r5, #4]
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	789b      	ldrb	r3, [r3, #2]
 800ab92:	716b      	strb	r3, [r5, #5]
 800ab94:	68a3      	ldr	r3, [r4, #8]
 800ab96:	785b      	ldrb	r3, [r3, #1]
 800ab98:	71ab      	strb	r3, [r5, #6]
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	71eb      	strb	r3, [r5, #7]
 800aba0:	2108      	movs	r1, #8
 800aba2:	68a2      	ldr	r2, [r4, #8]
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	440a      	add	r2, r1
 800aba8:	7561      	strb	r1, [r4, #21]
 800abaa:	440b      	add	r3, r1
 800abac:	60a2      	str	r2, [r4, #8]
 800abae:	6123      	str	r3, [r4, #16]
 800abb0:	7da0      	ldrb	r0, [r4, #22]
 800abb2:	f080 0001 	eor.w	r0, r0, #1
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	602a      	str	r2, [r5, #0]
 800abbe:	606b      	str	r3, [r5, #4]
 800abc0:	e7ee      	b.n	800aba0 <ucdr_deserialize_endian_double+0x58>
 800abc2:	bf00      	nop

0800abc4 <ucdr_check_buffer_available_for>:
 800abc4:	7d83      	ldrb	r3, [r0, #22]
 800abc6:	b93b      	cbnz	r3, 800abd8 <ucdr_check_buffer_available_for+0x14>
 800abc8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800abcc:	4419      	add	r1, r3
 800abce:	4288      	cmp	r0, r1
 800abd0:	bf34      	ite	cc
 800abd2:	2000      	movcc	r0, #0
 800abd4:	2001      	movcs	r0, #1
 800abd6:	4770      	bx	lr
 800abd8:	2000      	movs	r0, #0
 800abda:	4770      	bx	lr

0800abdc <ucdr_check_final_buffer_behavior>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	7d83      	ldrb	r3, [r0, #22]
 800abe0:	b97b      	cbnz	r3, 800ac02 <ucdr_check_final_buffer_behavior+0x26>
 800abe2:	4604      	mov	r4, r0
 800abe4:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 800abe8:	4411      	add	r1, r2
 800abea:	428d      	cmp	r5, r1
 800abec:	d20c      	bcs.n	800ac08 <ucdr_check_final_buffer_behavior+0x2c>
 800abee:	6982      	ldr	r2, [r0, #24]
 800abf0:	b16a      	cbz	r2, 800ac0e <ucdr_check_final_buffer_behavior+0x32>
 800abf2:	69c1      	ldr	r1, [r0, #28]
 800abf4:	4790      	blx	r2
 800abf6:	f080 0301 	eor.w	r3, r0, #1
 800abfa:	75a0      	strb	r0, [r4, #22]
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	4618      	mov	r0, r3
 800ac00:	bd38      	pop	{r3, r4, r5, pc}
 800ac02:	2300      	movs	r3, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	2301      	movs	r3, #1
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	bd38      	pop	{r3, r4, r5, pc}
 800ac0e:	2001      	movs	r0, #1
 800ac10:	75a0      	strb	r0, [r4, #22]
 800ac12:	e7f4      	b.n	800abfe <ucdr_check_final_buffer_behavior+0x22>

0800ac14 <ucdr_set_on_full_buffer_callback>:
 800ac14:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop

0800ac1c <ucdr_init_buffer_origin_offset_endian>:
 800ac1c:	b470      	push	{r4, r5, r6}
 800ac1e:	9c03      	ldr	r4, [sp, #12]
 800ac20:	440a      	add	r2, r1
 800ac22:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ac26:	190e      	adds	r6, r1, r4
 800ac28:	6001      	str	r1, [r0, #0]
 800ac2a:	441c      	add	r4, r3
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	7505      	strb	r5, [r0, #20]
 800ac30:	6104      	str	r4, [r0, #16]
 800ac32:	60c3      	str	r3, [r0, #12]
 800ac34:	7541      	strb	r1, [r0, #21]
 800ac36:	7581      	strb	r1, [r0, #22]
 800ac38:	e9c0 2601 	strd	r2, r6, [r0, #4]
 800ac3c:	e9c0 1106 	strd	r1, r1, [r0, #24]
 800ac40:	bc70      	pop	{r4, r5, r6}
 800ac42:	4770      	bx	lr

0800ac44 <ucdr_init_buffer_origin_offset>:
 800ac44:	b530      	push	{r4, r5, lr}
 800ac46:	b083      	sub	sp, #12
 800ac48:	2401      	movs	r4, #1
 800ac4a:	9d06      	ldr	r5, [sp, #24]
 800ac4c:	e9cd 5400 	strd	r5, r4, [sp]
 800ac50:	f7ff ffe4 	bl	800ac1c <ucdr_init_buffer_origin_offset_endian>
 800ac54:	b003      	add	sp, #12
 800ac56:	bd30      	pop	{r4, r5, pc}

0800ac58 <ucdr_init_buffer_origin>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	2400      	movs	r4, #0
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	9400      	str	r4, [sp, #0]
 800ac60:	f7ff fff0 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 800ac64:	b002      	add	sp, #8
 800ac66:	bd10      	pop	{r4, pc}

0800ac68 <ucdr_init_buffer>:
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f7ff bff5 	b.w	800ac58 <ucdr_init_buffer_origin>
 800ac6e:	bf00      	nop

0800ac70 <ucdr_alignment>:
 800ac70:	fbb0 f3f1 	udiv	r3, r0, r1
 800ac74:	fb03 0311 	mls	r3, r3, r1, r0
 800ac78:	1e48      	subs	r0, r1, #1
 800ac7a:	1ac9      	subs	r1, r1, r3
 800ac7c:	4008      	ands	r0, r1
 800ac7e:	4770      	bx	lr

0800ac80 <ucdr_buffer_alignment>:
 800ac80:	7d43      	ldrb	r3, [r0, #21]
 800ac82:	428b      	cmp	r3, r1
 800ac84:	d20b      	bcs.n	800ac9e <ucdr_buffer_alignment+0x1e>
 800ac86:	6903      	ldr	r3, [r0, #16]
 800ac88:	1e4a      	subs	r2, r1, #1
 800ac8a:	68c0      	ldr	r0, [r0, #12]
 800ac8c:	1a1b      	subs	r3, r3, r0
 800ac8e:	fbb3 f0f1 	udiv	r0, r3, r1
 800ac92:	fb01 3010 	mls	r0, r1, r0, r3
 800ac96:	1a09      	subs	r1, r1, r0
 800ac98:	ea01 0002 	and.w	r0, r1, r2
 800ac9c:	4770      	bx	lr
 800ac9e:	2000      	movs	r0, #0
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop

0800aca4 <ucdr_align_to>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	460e      	mov	r6, r1
 800acaa:	f7ff ffe9 	bl	800ac80 <ucdr_buffer_alignment>
 800acae:	68a5      	ldr	r5, [r4, #8]
 800acb0:	6863      	ldr	r3, [r4, #4]
 800acb2:	4405      	add	r5, r0
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	7566      	strb	r6, [r4, #21]
 800acb8:	42ab      	cmp	r3, r5
 800acba:	4410      	add	r0, r2
 800acbc:	bf28      	it	cs
 800acbe:	462b      	movcs	r3, r5
 800acc0:	6120      	str	r0, [r4, #16]
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
 800acc6:	bf00      	nop

0800acc8 <ucdr_buffer_length>:
 800acc8:	6882      	ldr	r2, [r0, #8]
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	1a10      	subs	r0, r2, r0
 800acce:	4770      	bx	lr

0800acd0 <ucdr_buffer_remaining>:
 800acd0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800acd4:	1a10      	subs	r0, r2, r0
 800acd6:	4770      	bx	lr

0800acd8 <ucdr_check_final_buffer_behavior_array>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	7d83      	ldrb	r3, [r0, #22]
 800acdc:	b9ab      	cbnz	r3, 800ad0a <ucdr_check_final_buffer_behavior_array+0x32>
 800acde:	460d      	mov	r5, r1
 800ace0:	4604      	mov	r4, r0
 800ace2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800ace6:	441a      	add	r2, r3
 800ace8:	4291      	cmp	r1, r2
 800acea:	d200      	bcs.n	800acee <ucdr_check_final_buffer_behavior_array+0x16>
 800acec:	b935      	cbnz	r5, 800acfc <ucdr_check_final_buffer_behavior_array+0x24>
 800acee:	4620      	mov	r0, r4
 800acf0:	f7ff ffee 	bl	800acd0 <ucdr_buffer_remaining>
 800acf4:	42a8      	cmp	r0, r5
 800acf6:	bf28      	it	cs
 800acf8:	4628      	movcs	r0, r5
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	6983      	ldr	r3, [r0, #24]
 800acfe:	b133      	cbz	r3, 800ad0e <ucdr_check_final_buffer_behavior_array+0x36>
 800ad00:	69c1      	ldr	r1, [r0, #28]
 800ad02:	4798      	blx	r3
 800ad04:	75a0      	strb	r0, [r4, #22]
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d0f1      	beq.n	800acee <ucdr_check_final_buffer_behavior_array+0x16>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	bd38      	pop	{r3, r4, r5, pc}
 800ad0e:	2301      	movs	r3, #1
 800ad10:	7583      	strb	r3, [r0, #22]
 800ad12:	e7fa      	b.n	800ad0a <ucdr_check_final_buffer_behavior_array+0x32>

0800ad14 <ucdr_advance_buffer>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7ff ff53 	bl	800abc4 <ucdr_check_buffer_available_for>
 800ad1e:	b178      	cbz	r0, 800ad40 <ucdr_advance_buffer+0x2c>
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	6921      	ldr	r1, [r4, #16]
 800ad24:	442b      	add	r3, r5
 800ad26:	4429      	add	r1, r5
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	6121      	str	r1, [r4, #16]
 800ad2e:	7563      	strb	r3, [r4, #21]
 800ad30:	bd38      	pop	{r3, r4, r5, pc}
 800ad32:	68a2      	ldr	r2, [r4, #8]
 800ad34:	1a2d      	subs	r5, r5, r0
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	4402      	add	r2, r0
 800ad3a:	4418      	add	r0, r3
 800ad3c:	60a2      	str	r2, [r4, #8]
 800ad3e:	6120      	str	r0, [r4, #16]
 800ad40:	2201      	movs	r2, #1
 800ad42:	4629      	mov	r1, r5
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff ffc7 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d1f1      	bne.n	800ad32 <ucdr_advance_buffer+0x1e>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	7563      	strb	r3, [r4, #21]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}

0800ad54 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800ad54:	f000 b8e8 	b.w	800af28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>

0800ad58 <_Odometry__cdr_deserialize>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	b331      	cbz	r1, 800adac <_Odometry__cdr_deserialize+0x54>
 800ad5e:	4605      	mov	r5, r0
 800ad60:	f005 febe 	bl	8010ae0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ad64:	4603      	mov	r3, r0
 800ad66:	4621      	mov	r1, r4
 800ad68:	4628      	mov	r0, r5
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	4798      	blx	r3
 800ad70:	69e2      	ldr	r2, [r4, #28]
 800ad72:	6961      	ldr	r1, [r4, #20]
 800ad74:	4628      	mov	r0, r5
 800ad76:	f006 fa55 	bl	8011224 <ucdr_deserialize_string>
 800ad7a:	b118      	cbz	r0, 800ad84 <_Odometry__cdr_deserialize+0x2c>
 800ad7c:	6960      	ldr	r0, [r4, #20]
 800ad7e:	f7f5 fc7f 	bl	8000680 <strlen>
 800ad82:	61a0      	str	r0, [r4, #24]
 800ad84:	f005 ffee 	bl	8010d64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f104 0120 	add.w	r1, r4, #32
 800ad8e:	4628      	mov	r0, r5
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	4798      	blx	r3
 800ad96:	f006 f88b 	bl	8010eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f504 71bc 	add.w	r1, r4, #376	; 0x178
 800ada0:	4628      	mov	r0, r5
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	4718      	bx	r3
 800adac:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <_Odometry__cdr_deserialize+0x68>)
 800adae:	221b      	movs	r2, #27
 800adb0:	2101      	movs	r1, #1
 800adb2:	4804      	ldr	r0, [pc, #16]	; (800adc4 <_Odometry__cdr_deserialize+0x6c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f00a f97e 	bl	80150b8 <fwrite>
 800adbc:	4620      	mov	r0, r4
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	20000208 	.word	0x20000208
 800adc4:	0801f7a8 	.word	0x0801f7a8

0800adc8 <_Odometry__cdr_serialize>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	4604      	mov	r4, r0
 800adcc:	b328      	cbz	r0, 800ae1a <_Odometry__cdr_serialize+0x52>
 800adce:	460d      	mov	r5, r1
 800add0:	f005 fe86 	bl	8010ae0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800add4:	4603      	mov	r3, r0
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	4798      	blx	r3
 800ade0:	6961      	ldr	r1, [r4, #20]
 800ade2:	4628      	mov	r0, r5
 800ade4:	f006 fa0e 	bl	8011204 <ucdr_serialize_string>
 800ade8:	b118      	cbz	r0, 800adf2 <_Odometry__cdr_serialize+0x2a>
 800adea:	6960      	ldr	r0, [r4, #20]
 800adec:	f7f5 fc48 	bl	8000680 <strlen>
 800adf0:	61a0      	str	r0, [r4, #24]
 800adf2:	f005 ffb7 	bl	8010d64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800adf6:	4603      	mov	r3, r0
 800adf8:	4629      	mov	r1, r5
 800adfa:	f104 0020 	add.w	r0, r4, #32
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	4798      	blx	r3
 800ae04:	f006 f854 	bl	8010eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	4718      	bx	r3
 800ae1a:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <_Odometry__cdr_serialize+0x68>)
 800ae1c:	221b      	movs	r2, #27
 800ae1e:	2101      	movs	r1, #1
 800ae20:	4804      	ldr	r0, [pc, #16]	; (800ae34 <_Odometry__cdr_serialize+0x6c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	f00a f947 	bl	80150b8 <fwrite>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	bd70      	pop	{r4, r5, r6, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000208 	.word	0x20000208
 800ae34:	0801f7a8 	.word	0x0801f7a8

0800ae38 <get_serialized_size_nav_msgs__msg__Odometry>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	b1d8      	cbz	r0, 800ae76 <get_serialized_size_nav_msgs__msg__Odometry+0x3e>
 800ae3e:	460e      	mov	r6, r1
 800ae40:	f005 fdb6 	bl	80109b0 <get_serialized_size_std_msgs__msg__Header>
 800ae44:	2104      	movs	r1, #4
 800ae46:	1837      	adds	r7, r6, r0
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff ff11 	bl	800ac70 <ucdr_alignment>
 800ae4e:	69a3      	ldr	r3, [r4, #24]
 800ae50:	4605      	mov	r5, r0
 800ae52:	f104 0020 	add.w	r0, r4, #32
 800ae56:	3305      	adds	r3, #5
 800ae58:	441d      	add	r5, r3
 800ae5a:	443d      	add	r5, r7
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f005 fedf 	bl	8010c20 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800ae62:	4601      	mov	r1, r0
 800ae64:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800ae68:	440d      	add	r5, r1
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	f005 ff7e 	bl	8010d6c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800ae70:	1b80      	subs	r0, r0, r6
 800ae72:	4428      	add	r0, r5
 800ae74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae76:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <get_serialized_size_nav_msgs__msg__Odometry+0x54>)
 800ae78:	221b      	movs	r2, #27
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	4804      	ldr	r0, [pc, #16]	; (800ae90 <get_serialized_size_nav_msgs__msg__Odometry+0x58>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f00a f919 	bl	80150b8 <fwrite>
 800ae86:	4620      	mov	r0, r4
 800ae88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000208 	.word	0x20000208
 800ae90:	0801f7a8 	.word	0x0801f7a8

0800ae94 <_Odometry__max_serialized_size>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	2301      	movs	r3, #1
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	f10d 0007 	add.w	r0, sp, #7
 800aea0:	f88d 3007 	strb.w	r3, [sp, #7]
 800aea4:	f005 fe12 	bl	8010acc <max_serialized_size_std_msgs__msg__Header>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f10d 0007 	add.w	r0, sp, #7
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f88d 3007 	strb.w	r3, [sp, #7]
 800aeb6:	f005 ff45 	bl	8010d44 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800aeba:	4601      	mov	r1, r0
 800aebc:	f10d 0007 	add.w	r0, sp, #7
 800aec0:	440c      	add	r4, r1
 800aec2:	4621      	mov	r1, r4
 800aec4:	f005 ffe4 	bl	8010e90 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800aec8:	4420      	add	r0, r4
 800aeca:	b002      	add	sp, #8
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop

0800aed0 <_Odometry__get_serialized_size>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	4604      	mov	r4, r0
 800aed4:	b1c8      	cbz	r0, 800af0a <_Odometry__get_serialized_size+0x3a>
 800aed6:	2100      	movs	r1, #0
 800aed8:	f005 fd6a 	bl	80109b0 <get_serialized_size_std_msgs__msg__Header>
 800aedc:	2104      	movs	r1, #4
 800aede:	4607      	mov	r7, r0
 800aee0:	f7ff fec6 	bl	800ac70 <ucdr_alignment>
 800aee4:	69a3      	ldr	r3, [r4, #24]
 800aee6:	4606      	mov	r6, r0
 800aee8:	f104 0020 	add.w	r0, r4, #32
 800aeec:	1d5a      	adds	r2, r3, #5
 800aeee:	19d3      	adds	r3, r2, r7
 800aef0:	441e      	add	r6, r3
 800aef2:	4631      	mov	r1, r6
 800aef4:	f005 fe94 	bl	8010c20 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800aef8:	4605      	mov	r5, r0
 800aefa:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800aefe:	4435      	add	r5, r6
 800af00:	4629      	mov	r1, r5
 800af02:	f005 ff33 	bl	8010d6c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800af06:	4428      	add	r0, r5
 800af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <_Odometry__get_serialized_size+0x50>)
 800af0c:	221b      	movs	r2, #27
 800af0e:	2101      	movs	r1, #1
 800af10:	4804      	ldr	r0, [pc, #16]	; (800af24 <_Odometry__get_serialized_size+0x54>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	f00a f8cf 	bl	80150b8 <fwrite>
 800af1a:	4620      	mov	r0, r4
 800af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1e:	bf00      	nop
 800af20:	20000208 	.word	0x20000208
 800af24:	0801f7a8 	.word	0x0801f7a8

0800af28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800af28:	4800      	ldr	r0, [pc, #0]	; (800af2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800af2a:	4770      	bx	lr
 800af2c:	200000b4 	.word	0x200000b4

0800af30 <_rclc_check_for_new_data>:
 800af30:	2800      	cmp	r0, #0
 800af32:	d040      	beq.n	800afb6 <_rclc_check_for_new_data+0x86>
 800af34:	b510      	push	{r4, lr}
 800af36:	7803      	ldrb	r3, [r0, #0]
 800af38:	b084      	sub	sp, #16
 800af3a:	4604      	mov	r4, r0
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d845      	bhi.n	800afcc <_rclc_check_for_new_data+0x9c>
 800af40:	e8df f003 	tbb	[pc, r3]
 800af44:	322b150e 	.word	0x322b150e
 800af48:	03          	.byte	0x03
 800af49:	00          	.byte	0x00
 800af4a:	688b      	ldr	r3, [r1, #8]
 800af4c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800af4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af52:	b118      	cbz	r0, 800af5c <_rclc_check_for_new_data+0x2c>
 800af54:	2301      	movs	r3, #1
 800af56:	2000      	movs	r0, #0
 800af58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800af5c:	b004      	add	sp, #16
 800af5e:	bd10      	pop	{r4, pc}
 800af60:	680b      	ldr	r3, [r1, #0]
 800af62:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800af64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1f3      	bne.n	800af54 <_rclc_check_for_new_data+0x24>
 800af6c:	e7f6      	b.n	800af5c <_rclc_check_for_new_data+0x2c>
 800af6e:	690b      	ldr	r3, [r1, #16]
 800af70:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800af72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af76:	2800      	cmp	r0, #0
 800af78:	d0f0      	beq.n	800af5c <_rclc_check_for_new_data+0x2c>
 800af7a:	2300      	movs	r3, #0
 800af7c:	f10d 010f 	add.w	r1, sp, #15
 800af80:	6860      	ldr	r0, [r4, #4]
 800af82:	f88d 300f 	strb.w	r3, [sp, #15]
 800af86:	f002 fb1f 	bl	800d5c8 <rcl_timer_is_ready>
 800af8a:	b9d0      	cbnz	r0, 800afc2 <_rclc_check_for_new_data+0x92>
 800af8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800af90:	b19b      	cbz	r3, 800afba <_rclc_check_for_new_data+0x8a>
 800af92:	2301      	movs	r3, #1
 800af94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800af98:	e7e0      	b.n	800af5c <_rclc_check_for_new_data+0x2c>
 800af9a:	698b      	ldr	r3, [r1, #24]
 800af9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800af9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1d6      	bne.n	800af54 <_rclc_check_for_new_data+0x24>
 800afa6:	e7d9      	b.n	800af5c <_rclc_check_for_new_data+0x2c>
 800afa8:	6a0b      	ldr	r3, [r1, #32]
 800afaa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800afac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d1cf      	bne.n	800af54 <_rclc_check_for_new_data+0x24>
 800afb4:	e7d2      	b.n	800af5c <_rclc_check_for_new_data+0x2c>
 800afb6:	200b      	movs	r0, #11
 800afb8:	4770      	bx	lr
 800afba:	f003 fbe7 	bl	800e78c <rcutils_reset_error>
 800afbe:	2001      	movs	r0, #1
 800afc0:	e7cc      	b.n	800af5c <_rclc_check_for_new_data+0x2c>
 800afc2:	9001      	str	r0, [sp, #4]
 800afc4:	f003 fbe2 	bl	800e78c <rcutils_reset_error>
 800afc8:	9801      	ldr	r0, [sp, #4]
 800afca:	e7c7      	b.n	800af5c <_rclc_check_for_new_data+0x2c>
 800afcc:	2001      	movs	r0, #1
 800afce:	e7c5      	b.n	800af5c <_rclc_check_for_new_data+0x2c>

0800afd0 <_rclc_take_new_data>:
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d044      	beq.n	800b05e <_rclc_take_new_data+0x8e>
 800afd4:	b500      	push	{lr}
 800afd6:	7803      	ldrb	r3, [r0, #0]
 800afd8:	b08f      	sub	sp, #60	; 0x3c
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d846      	bhi.n	800b06c <_rclc_take_new_data+0x9c>
 800afde:	e8df f003 	tbb	[pc, r3]
 800afe2:	1014      	.short	0x1014
 800afe4:	0327      	.short	0x0327
 800afe6:	10          	.byte	0x10
 800afe7:	00          	.byte	0x00
 800afe8:	6a0b      	ldr	r3, [r1, #32]
 800afea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	b13b      	cbz	r3, 800b002 <_rclc_take_new_data+0x32>
 800aff2:	6882      	ldr	r2, [r0, #8]
 800aff4:	f100 0110 	add.w	r1, r0, #16
 800aff8:	6840      	ldr	r0, [r0, #4]
 800affa:	f001 fda1 	bl	800cb40 <rcl_take_request>
 800affe:	2800      	cmp	r0, #0
 800b000:	d12f      	bne.n	800b062 <_rclc_take_new_data+0x92>
 800b002:	2000      	movs	r0, #0
 800b004:	b00f      	add	sp, #60	; 0x3c
 800b006:	f85d fb04 	ldr.w	pc, [sp], #4
 800b00a:	680b      	ldr	r3, [r1, #0]
 800b00c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0f5      	beq.n	800b002 <_rclc_take_new_data+0x32>
 800b016:	2300      	movs	r3, #0
 800b018:	aa02      	add	r2, sp, #8
 800b01a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b01e:	f001 ff0d 	bl	800ce3c <rcl_take>
 800b022:	2800      	cmp	r0, #0
 800b024:	d0ee      	beq.n	800b004 <_rclc_take_new_data+0x34>
 800b026:	f240 1391 	movw	r3, #401	; 0x191
 800b02a:	4298      	cmp	r0, r3
 800b02c:	d0ea      	beq.n	800b004 <_rclc_take_new_data+0x34>
 800b02e:	e011      	b.n	800b054 <_rclc_take_new_data+0x84>
 800b030:	698b      	ldr	r3, [r1, #24]
 800b032:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d0e2      	beq.n	800b002 <_rclc_take_new_data+0x32>
 800b03c:	6882      	ldr	r2, [r0, #8]
 800b03e:	f100 0110 	add.w	r1, r0, #16
 800b042:	6840      	ldr	r0, [r0, #4]
 800b044:	f000 fb9a 	bl	800b77c <rcl_take_response>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d0da      	beq.n	800b002 <_rclc_take_new_data+0x32>
 800b04c:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b050:	4298      	cmp	r0, r3
 800b052:	d0d7      	beq.n	800b004 <_rclc_take_new_data+0x34>
 800b054:	9001      	str	r0, [sp, #4]
 800b056:	f003 fb99 	bl	800e78c <rcutils_reset_error>
 800b05a:	9801      	ldr	r0, [sp, #4]
 800b05c:	e7d2      	b.n	800b004 <_rclc_take_new_data+0x34>
 800b05e:	200b      	movs	r0, #11
 800b060:	4770      	bx	lr
 800b062:	f240 2359 	movw	r3, #601	; 0x259
 800b066:	4298      	cmp	r0, r3
 800b068:	d0cc      	beq.n	800b004 <_rclc_take_new_data+0x34>
 800b06a:	e7f3      	b.n	800b054 <_rclc_take_new_data+0x84>
 800b06c:	2001      	movs	r0, #1
 800b06e:	e7c9      	b.n	800b004 <_rclc_take_new_data+0x34>

0800b070 <_rclc_execute>:
 800b070:	2800      	cmp	r0, #0
 800b072:	d05d      	beq.n	800b130 <_rclc_execute+0xc0>
 800b074:	b530      	push	{r4, r5, lr}
 800b076:	7843      	ldrb	r3, [r0, #1]
 800b078:	b083      	sub	sp, #12
 800b07a:	4604      	mov	r4, r0
 800b07c:	b14b      	cbz	r3, 800b092 <_rclc_execute+0x22>
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d015      	beq.n	800b0ae <_rclc_execute+0x3e>
 800b082:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800b086:	b17b      	cbz	r3, 800b0a8 <_rclc_execute+0x38>
 800b088:	2000      	movs	r0, #0
 800b08a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800b08e:	b003      	add	sp, #12
 800b090:	bd30      	pop	{r4, r5, pc}
 800b092:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b096:	b13b      	cbz	r3, 800b0a8 <_rclc_execute+0x38>
 800b098:	7803      	ldrb	r3, [r0, #0]
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d861      	bhi.n	800b162 <_rclc_execute+0xf2>
 800b09e:	e8df f003 	tbb	[pc, r3]
 800b0a2:	3743      	.short	0x3743
 800b0a4:	1129      	.short	0x1129
 800b0a6:	0e          	.byte	0x0e
 800b0a7:	00          	.byte	0x00
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	b003      	add	sp, #12
 800b0ac:	bd30      	pop	{r4, r5, pc}
 800b0ae:	7803      	ldrb	r3, [r0, #0]
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d856      	bhi.n	800b162 <_rclc_execute+0xf2>
 800b0b4:	e8df f003 	tbb	[pc, r3]
 800b0b8:	061e2c32 	.word	0x061e2c32
 800b0bc:	03          	.byte	0x03
 800b0bd:	00          	.byte	0x00
 800b0be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0c0:	4798      	blx	r3
 800b0c2:	e7de      	b.n	800b082 <_rclc_execute+0x12>
 800b0c4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d042      	beq.n	800b152 <_rclc_execute+0xe2>
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	d038      	beq.n	800b142 <_rclc_execute+0xd2>
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d02f      	beq.n	800b134 <_rclc_execute+0xc4>
 800b0d4:	f104 0510 	add.w	r5, r4, #16
 800b0d8:	f003 fb58 	bl	800e78c <rcutils_reset_error>
 800b0dc:	4629      	mov	r1, r5
 800b0de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b0e0:	6860      	ldr	r0, [r4, #4]
 800b0e2:	f001 fd67 	bl	800cbb4 <rcl_send_response>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d0cb      	beq.n	800b082 <_rclc_execute+0x12>
 800b0ea:	9001      	str	r0, [sp, #4]
 800b0ec:	f003 fb4e 	bl	800e78c <rcutils_reset_error>
 800b0f0:	9801      	ldr	r0, [sp, #4]
 800b0f2:	e7cc      	b.n	800b08e <_rclc_execute+0x1e>
 800b0f4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800b0f8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800b0fc:	2a01      	cmp	r2, #1
 800b0fe:	d013      	beq.n	800b128 <_rclc_execute+0xb8>
 800b100:	2b02      	cmp	r3, #2
 800b102:	d1be      	bne.n	800b082 <_rclc_execute+0x12>
 800b104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b106:	f104 0110 	add.w	r1, r4, #16
 800b10a:	68a0      	ldr	r0, [r4, #8]
 800b10c:	4798      	blx	r3
 800b10e:	e7b8      	b.n	800b082 <_rclc_execute+0x12>
 800b110:	6860      	ldr	r0, [r4, #4]
 800b112:	f002 f9c5 	bl	800d4a0 <rcl_timer_call>
 800b116:	2800      	cmp	r0, #0
 800b118:	d0b3      	beq.n	800b082 <_rclc_execute+0x12>
 800b11a:	e7e6      	b.n	800b0ea <_rclc_execute+0x7a>
 800b11c:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b120:	b910      	cbnz	r0, 800b128 <_rclc_execute+0xb8>
 800b122:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b124:	4798      	blx	r3
 800b126:	e7ac      	b.n	800b082 <_rclc_execute+0x12>
 800b128:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b12a:	68a0      	ldr	r0, [r4, #8]
 800b12c:	4798      	blx	r3
 800b12e:	e7a8      	b.n	800b082 <_rclc_execute+0x12>
 800b130:	200b      	movs	r0, #11
 800b132:	4770      	bx	lr
 800b134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b136:	f104 0510 	add.w	r5, r4, #16
 800b13a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b13c:	68a0      	ldr	r0, [r4, #8]
 800b13e:	4798      	blx	r3
 800b140:	e7cc      	b.n	800b0dc <_rclc_execute+0x6c>
 800b142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b144:	f104 0510 	add.w	r5, r4, #16
 800b148:	68a0      	ldr	r0, [r4, #8]
 800b14a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800b14e:	4798      	blx	r3
 800b150:	e7c4      	b.n	800b0dc <_rclc_execute+0x6c>
 800b152:	f104 0510 	add.w	r5, r4, #16
 800b156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b158:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b15a:	4629      	mov	r1, r5
 800b15c:	68a0      	ldr	r0, [r4, #8]
 800b15e:	4798      	blx	r3
 800b160:	e7bc      	b.n	800b0dc <_rclc_execute+0x6c>
 800b162:	2001      	movs	r0, #1
 800b164:	e793      	b.n	800b08e <_rclc_execute+0x1e>
 800b166:	bf00      	nop

0800b168 <rclc_executor_trigger_any>:
 800b168:	b170      	cbz	r0, 800b188 <rclc_executor_trigger_any+0x20>
 800b16a:	b179      	cbz	r1, 800b18c <rclc_executor_trigger_any+0x24>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2200      	movs	r2, #0
 800b170:	e005      	b.n	800b17e <rclc_executor_trigger_any+0x16>
 800b172:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800b176:	3340      	adds	r3, #64	; 0x40
 800b178:	b930      	cbnz	r0, 800b188 <rclc_executor_trigger_any+0x20>
 800b17a:	4291      	cmp	r1, r2
 800b17c:	d005      	beq.n	800b18a <rclc_executor_trigger_any+0x22>
 800b17e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800b182:	3201      	adds	r2, #1
 800b184:	2800      	cmp	r0, #0
 800b186:	d1f4      	bne.n	800b172 <rclc_executor_trigger_any+0xa>
 800b188:	4770      	bx	lr
 800b18a:	4770      	bx	lr
 800b18c:	4608      	mov	r0, r1
 800b18e:	e7fb      	b.n	800b188 <rclc_executor_trigger_any+0x20>

0800b190 <rclc_executor_get_zero_initialized_executor>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	2280      	movs	r2, #128	; 0x80
 800b196:	4902      	ldr	r1, [pc, #8]	; (800b1a0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b198:	f7f5 f852 	bl	8000240 <memcpy>
 800b19c:	4620      	mov	r0, r4
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	0801f860 	.word	0x0801f860
 800b1a4:	00000000 	.word	0x00000000

0800b1a8 <rclc_executor_init>:
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d068      	beq.n	800b27e <rclc_executor_init+0xd6>
 800b1ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1b0:	460f      	mov	r7, r1
 800b1b2:	b0af      	sub	sp, #188	; 0xbc
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d05a      	beq.n	800b26e <rclc_executor_init+0xc6>
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	4616      	mov	r6, r2
 800b1be:	4698      	mov	r8, r3
 800b1c0:	f003 f9ee 	bl	800e5a0 <rcutils_allocator_is_valid>
 800b1c4:	f080 0001 	eor.w	r0, r0, #1
 800b1c8:	f010 0fff 	tst.w	r0, #255	; 0xff
 800b1cc:	d14f      	bne.n	800b26e <rclc_executor_init+0xc6>
 800b1ce:	fab6 f486 	clz	r4, r6
 800b1d2:	0964      	lsrs	r4, r4, #5
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	d04a      	beq.n	800b26e <rclc_executor_init+0xc6>
 800b1d8:	2280      	movs	r2, #128	; 0x80
 800b1da:	492d      	ldr	r1, [pc, #180]	; (800b290 <rclc_executor_init+0xe8>)
 800b1dc:	a80e      	add	r0, sp, #56	; 0x38
 800b1de:	f7f5 f82f 	bl	8000240 <memcpy>
 800b1e2:	a90e      	add	r1, sp, #56	; 0x38
 800b1e4:	2280      	movs	r2, #128	; 0x80
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7f5 f82a 	bl	8000240 <memcpy>
 800b1ec:	602f      	str	r7, [r5, #0]
 800b1ee:	466f      	mov	r7, sp
 800b1f0:	4668      	mov	r0, sp
 800b1f2:	60ae      	str	r6, [r5, #8]
 800b1f4:	60ec      	str	r4, [r5, #12]
 800b1f6:	f002 fb95 	bl	800d924 <rcl_get_zero_initialized_wait_set>
 800b1fa:	f105 0c14 	add.w	ip, r5, #20
 800b1fe:	f8d8 9000 	ldr.w	r9, [r8]
 800b202:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b208:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b20a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b20e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b214:	a31c      	add	r3, pc, #112	; (adr r3, 800b288 <rclc_executor_init+0xe0>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	683f      	ldr	r7, [r7, #0]
 800b21c:	01b0      	lsls	r0, r6, #6
 800b21e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b222:	f8cc 7000 	str.w	r7, [ip]
 800b226:	f8c5 8010 	str.w	r8, [r5, #16]
 800b22a:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800b22e:	47c8      	blx	r9
 800b230:	6068      	str	r0, [r5, #4]
 800b232:	b908      	cbnz	r0, 800b238 <rclc_executor_init+0x90>
 800b234:	e025      	b.n	800b282 <rclc_executor_init+0xda>
 800b236:	6868      	ldr	r0, [r5, #4]
 800b238:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b23c:	3401      	adds	r4, #1
 800b23e:	4631      	mov	r1, r6
 800b240:	f000 fa3e 	bl	800b6c0 <rclc_executor_handle_init>
 800b244:	42a6      	cmp	r6, r4
 800b246:	d8f6      	bhi.n	800b236 <rclc_executor_init+0x8e>
 800b248:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800b24c:	f000 fa2a 	bl	800b6a4 <rclc_executor_handle_counters_zero_init>
 800b250:	4a10      	ldr	r2, [pc, #64]	; (800b294 <rclc_executor_init+0xec>)
 800b252:	2000      	movs	r0, #0
 800b254:	686b      	ldr	r3, [r5, #4]
 800b256:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 800b25a:	b163      	cbz	r3, 800b276 <rclc_executor_init+0xce>
 800b25c:	692b      	ldr	r3, [r5, #16]
 800b25e:	b153      	cbz	r3, 800b276 <rclc_executor_init+0xce>
 800b260:	68ab      	ldr	r3, [r5, #8]
 800b262:	b143      	cbz	r3, 800b276 <rclc_executor_init+0xce>
 800b264:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800b268:	b02f      	add	sp, #188	; 0xbc
 800b26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b26e:	200b      	movs	r0, #11
 800b270:	b02f      	add	sp, #188	; 0xbc
 800b272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b276:	4618      	mov	r0, r3
 800b278:	b02f      	add	sp, #188	; 0xbc
 800b27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b27e:	200b      	movs	r0, #11
 800b280:	4770      	bx	lr
 800b282:	200a      	movs	r0, #10
 800b284:	e7f4      	b.n	800b270 <rclc_executor_init+0xc8>
 800b286:	bf00      	nop
 800b288:	3b9aca00 	.word	0x3b9aca00
 800b28c:	00000000 	.word	0x00000000
 800b290:	0801f860 	.word	0x0801f860
 800b294:	0800b169 	.word	0x0800b169

0800b298 <rclc_executor_set_timeout>:
 800b298:	b168      	cbz	r0, 800b2b6 <rclc_executor_set_timeout+0x1e>
 800b29a:	6841      	ldr	r1, [r0, #4]
 800b29c:	b141      	cbz	r1, 800b2b0 <rclc_executor_set_timeout+0x18>
 800b29e:	6901      	ldr	r1, [r0, #16]
 800b2a0:	b131      	cbz	r1, 800b2b0 <rclc_executor_set_timeout+0x18>
 800b2a2:	6881      	ldr	r1, [r0, #8]
 800b2a4:	b121      	cbz	r1, 800b2b0 <rclc_executor_set_timeout+0x18>
 800b2a6:	6602      	str	r2, [r0, #96]	; 0x60
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	6643      	str	r3, [r0, #100]	; 0x64
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4770      	bx	lr
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4770      	bx	lr
 800b2b6:	220b      	movs	r2, #11
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4770      	bx	lr

0800b2bc <rclc_executor_add_subscription>:
 800b2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c0:	fab3 f483 	clz	r4, r3
 800b2c4:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800b2c8:	0964      	lsrs	r4, r4, #5
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	bf08      	it	eq
 800b2ce:	2401      	moveq	r4, #1
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	bf08      	it	eq
 800b2d4:	2401      	moveq	r4, #1
 800b2d6:	bb5c      	cbnz	r4, 800b330 <rclc_executor_add_subscription+0x74>
 800b2d8:	fab0 f680 	clz	r6, r0
 800b2dc:	4605      	mov	r5, r0
 800b2de:	0976      	lsrs	r6, r6, #5
 800b2e0:	b330      	cbz	r0, 800b330 <rclc_executor_add_subscription+0x74>
 800b2e2:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800b2e6:	4284      	cmp	r4, r0
 800b2e8:	d302      	bcc.n	800b2f0 <rclc_executor_add_subscription+0x34>
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800b2f4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800b2f8:	f104 0e01 	add.w	lr, r4, #1
 800b2fc:	f04f 0801 	mov.w	r8, #1
 800b300:	f80c 6009 	strb.w	r6, [ip, r9]
 800b304:	eb0c 1484 	add.w	r4, ip, r4, lsl #6
 800b308:	f105 0614 	add.w	r6, r5, #20
 800b30c:	6323      	str	r3, [r4, #48]	; 0x30
 800b30e:	7067      	strb	r7, [r4, #1]
 800b310:	4630      	mov	r0, r6
 800b312:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
 800b316:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b31a:	f8c5 e00c 	str.w	lr, [r5, #12]
 800b31e:	f002 fb13 	bl	800d948 <rcl_wait_set_is_valid>
 800b322:	b940      	cbnz	r0, 800b336 <rclc_executor_add_subscription+0x7a>
 800b324:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800b326:	2000      	movs	r0, #0
 800b328:	3301      	adds	r3, #1
 800b32a:	64ab      	str	r3, [r5, #72]	; 0x48
 800b32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b330:	200b      	movs	r0, #11
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	4630      	mov	r0, r6
 800b338:	f002 fb0c 	bl	800d954 <rcl_wait_set_fini>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d0f1      	beq.n	800b324 <rclc_executor_add_subscription+0x68>
 800b340:	e7d4      	b.n	800b2ec <rclc_executor_add_subscription+0x30>
 800b342:	bf00      	nop

0800b344 <rclc_executor_add_timer>:
 800b344:	b331      	cbz	r1, 800b394 <rclc_executor_add_timer+0x50>
 800b346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b348:	4604      	mov	r4, r0
 800b34a:	b1d8      	cbz	r0, 800b384 <rclc_executor_add_timer+0x40>
 800b34c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800b350:	4293      	cmp	r3, r2
 800b352:	d301      	bcc.n	800b358 <rclc_executor_add_timer+0x14>
 800b354:	2001      	movs	r0, #1
 800b356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b358:	6840      	ldr	r0, [r0, #4]
 800b35a:	019f      	lsls	r7, r3, #6
 800b35c:	1c5e      	adds	r6, r3, #1
 800b35e:	2201      	movs	r2, #1
 800b360:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800b364:	f104 0514 	add.w	r5, r4, #20
 800b368:	6059      	str	r1, [r3, #4]
 800b36a:	53c2      	strh	r2, [r0, r7]
 800b36c:	4628      	mov	r0, r5
 800b36e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800b372:	60e6      	str	r6, [r4, #12]
 800b374:	f002 fae8 	bl	800d948 <rcl_wait_set_is_valid>
 800b378:	b930      	cbnz	r0, 800b388 <rclc_executor_add_timer+0x44>
 800b37a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b37c:	2000      	movs	r0, #0
 800b37e:	3301      	adds	r3, #1
 800b380:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b384:	200b      	movs	r0, #11
 800b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b388:	4628      	mov	r0, r5
 800b38a:	f002 fae3 	bl	800d954 <rcl_wait_set_fini>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d0f3      	beq.n	800b37a <rclc_executor_add_timer+0x36>
 800b392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b394:	200b      	movs	r0, #11
 800b396:	4770      	bx	lr

0800b398 <rclc_executor_spin_some>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	b09a      	sub	sp, #104	; 0x68
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f000 80f8 	beq.w	800b594 <rclc_executor_spin_some+0x1fc>
 800b3a4:	f100 0714 	add.w	r7, r0, #20
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	4690      	mov	r8, r2
 800b3ac:	4699      	mov	r9, r3
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	f002 faca 	bl	800d948 <rcl_wait_set_is_valid>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f000 80b0 	beq.w	800b51a <rclc_executor_spin_some+0x182>
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f002 fb98 	bl	800daf0 <rcl_wait_set_clear>
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f040 80d9 	bne.w	800b57a <rclc_executor_spin_some+0x1e2>
 800b3c8:	68a3      	ldr	r3, [r4, #8]
 800b3ca:	b1e3      	cbz	r3, 800b406 <rclc_executor_spin_some+0x6e>
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	6863      	ldr	r3, [r4, #4]
 800b3d0:	01a8      	lsls	r0, r5, #6
 800b3d2:	eb03 1185 	add.w	r1, r3, r5, lsl #6
 800b3d6:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 800b3da:	b1a2      	cbz	r2, 800b406 <rclc_executor_spin_some+0x6e>
 800b3dc:	5c1b      	ldrb	r3, [r3, r0]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	f200 80d1 	bhi.w	800b586 <rclc_executor_spin_some+0x1ee>
 800b3e4:	e8df f003 	tbb	[pc, r3]
 800b3e8:	6e7c858f 	.word	0x6e7c858f
 800b3ec:	03          	.byte	0x03
 800b3ed:	00          	.byte	0x00
 800b3ee:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	6849      	ldr	r1, [r1, #4]
 800b3f6:	f002 fe67 	bl	800e0c8 <rcl_wait_set_add_guard_condition>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d16a      	bne.n	800b4d4 <rclc_executor_spin_some+0x13c>
 800b3fe:	3501      	adds	r5, #1
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	42ab      	cmp	r3, r5
 800b404:	d8e3      	bhi.n	800b3ce <rclc_executor_spin_some+0x36>
 800b406:	4642      	mov	r2, r8
 800b408:	464b      	mov	r3, r9
 800b40a:	4638      	mov	r0, r7
 800b40c:	f002 ff18 	bl	800e240 <rcl_wait>
 800b410:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800b414:	2d00      	cmp	r5, #0
 800b416:	f000 80c8 	beq.w	800b5aa <rclc_executor_spin_some+0x212>
 800b41a:	2d01      	cmp	r5, #1
 800b41c:	f040 80b3 	bne.w	800b586 <rclc_executor_spin_some+0x1ee>
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80be 	beq.w	800b5a4 <rclc_executor_spin_some+0x20c>
 800b428:	2500      	movs	r5, #0
 800b42a:	f240 1991 	movw	r9, #401	; 0x191
 800b42e:	46a8      	mov	r8, r5
 800b430:	e009      	b.n	800b446 <rclc_executor_spin_some+0xae>
 800b432:	f7ff fd7d 	bl	800af30 <_rclc_check_for_new_data>
 800b436:	4605      	mov	r5, r0
 800b438:	b108      	cbz	r0, 800b43e <rclc_executor_spin_some+0xa6>
 800b43a:	4548      	cmp	r0, r9
 800b43c:	d140      	bne.n	800b4c0 <rclc_executor_spin_some+0x128>
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	4598      	cmp	r8, r3
 800b442:	f080 80fd 	bcs.w	800b640 <rclc_executor_spin_some+0x2a8>
 800b446:	6862      	ldr	r2, [r4, #4]
 800b448:	4639      	mov	r1, r7
 800b44a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b44e:	f108 0801 	add.w	r8, r8, #1
 800b452:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800b456:	f1bc 0f00 	cmp.w	ip, #0
 800b45a:	d1ea      	bne.n	800b432 <rclc_executor_spin_some+0x9a>
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800b464:	4798      	blx	r3
 800b466:	b358      	cbz	r0, 800b4c0 <rclc_executor_spin_some+0x128>
 800b468:	68a3      	ldr	r3, [r4, #8]
 800b46a:	b34b      	cbz	r3, 800b4c0 <rclc_executor_spin_some+0x128>
 800b46c:	f04f 0800 	mov.w	r8, #0
 800b470:	f240 1991 	movw	r9, #401	; 0x191
 800b474:	e008      	b.n	800b488 <rclc_executor_spin_some+0xf0>
 800b476:	f7ff fdab 	bl	800afd0 <_rclc_take_new_data>
 800b47a:	4605      	mov	r5, r0
 800b47c:	b108      	cbz	r0, 800b482 <rclc_executor_spin_some+0xea>
 800b47e:	4548      	cmp	r0, r9
 800b480:	d11e      	bne.n	800b4c0 <rclc_executor_spin_some+0x128>
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	4598      	cmp	r8, r3
 800b486:	d209      	bcs.n	800b49c <rclc_executor_spin_some+0x104>
 800b488:	6860      	ldr	r0, [r4, #4]
 800b48a:	4639      	mov	r1, r7
 800b48c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b490:	f108 0801 	add.w	r8, r8, #1
 800b494:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b498:	2a00      	cmp	r2, #0
 800b49a:	d1ec      	bne.n	800b476 <rclc_executor_spin_some+0xde>
 800b49c:	b183      	cbz	r3, 800b4c0 <rclc_executor_spin_some+0x128>
 800b49e:	2700      	movs	r7, #0
 800b4a0:	e006      	b.n	800b4b0 <rclc_executor_spin_some+0x118>
 800b4a2:	f7ff fde5 	bl	800b070 <_rclc_execute>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	b950      	cbnz	r0, 800b4c0 <rclc_executor_spin_some+0x128>
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	429f      	cmp	r7, r3
 800b4ae:	d266      	bcs.n	800b57e <rclc_executor_spin_some+0x1e6>
 800b4b0:	6860      	ldr	r0, [r4, #4]
 800b4b2:	eb00 1087 	add.w	r0, r0, r7, lsl #6
 800b4b6:	3701      	adds	r7, #1
 800b4b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f0      	bne.n	800b4a2 <rclc_executor_spin_some+0x10a>
 800b4c0:	462e      	mov	r6, r5
 800b4c2:	e05c      	b.n	800b57e <rclc_executor_spin_some+0x1e6>
 800b4c4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	6849      	ldr	r1, [r1, #4]
 800b4cc:	f002 fe8a 	bl	800e1e4 <rcl_wait_set_add_service>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d094      	beq.n	800b3fe <rclc_executor_spin_some+0x66>
 800b4d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4d6:	f003 f959 	bl	800e78c <rcutils_reset_error>
 800b4da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b4dc:	4606      	mov	r6, r0
 800b4de:	e04e      	b.n	800b57e <rclc_executor_spin_some+0x1e6>
 800b4e0:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	6849      	ldr	r1, [r1, #4]
 800b4e8:	f002 fe4e 	bl	800e188 <rcl_wait_set_add_client>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d086      	beq.n	800b3fe <rclc_executor_spin_some+0x66>
 800b4f0:	e7f0      	b.n	800b4d4 <rclc_executor_spin_some+0x13c>
 800b4f2:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	6849      	ldr	r1, [r1, #4]
 800b4fa:	f002 fe13 	bl	800e124 <rcl_wait_set_add_timer>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f af7d 	beq.w	800b3fe <rclc_executor_spin_some+0x66>
 800b504:	e7e6      	b.n	800b4d4 <rclc_executor_spin_some+0x13c>
 800b506:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b50a:	4638      	mov	r0, r7
 800b50c:	6849      	ldr	r1, [r1, #4]
 800b50e:	f002 fac1 	bl	800da94 <rcl_wait_set_add_subscription>
 800b512:	2800      	cmp	r0, #0
 800b514:	f43f af73 	beq.w	800b3fe <rclc_executor_spin_some+0x66>
 800b518:	e7dc      	b.n	800b4d4 <rclc_executor_spin_some+0x13c>
 800b51a:	4638      	mov	r0, r7
 800b51c:	f002 fa1a 	bl	800d954 <rcl_wait_set_fini>
 800b520:	2800      	cmp	r0, #0
 800b522:	d13c      	bne.n	800b59e <rclc_executor_spin_some+0x206>
 800b524:	ad0c      	add	r5, sp, #48	; 0x30
 800b526:	a80c      	add	r0, sp, #48	; 0x30
 800b528:	f002 f9fc 	bl	800d924 <rcl_get_zero_initialized_wait_set>
 800b52c:	463e      	mov	r6, r7
 800b52e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800b532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b534:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b538:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b53c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b53e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b542:	f8d5 e000 	ldr.w	lr, [r5]
 800b546:	ad04      	add	r5, sp, #16
 800b548:	f8c6 e000 	str.w	lr, [r6]
 800b54c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b54e:	e9d4 2114 	ldrd	r2, r1, [r4, #80]	; 0x50
 800b552:	f8dc 3000 	ldr.w	r3, [ip]
 800b556:	4638      	mov	r0, r7
 800b558:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 800b55a:	f8d4 e000 	ldr.w	lr, [r4]
 800b55e:	602b      	str	r3, [r5, #0]
 800b560:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b562:	e9cd 6e02 	strd	r6, lr, [sp, #8]
 800b566:	e9cd 2100 	strd	r2, r1, [sp]
 800b56a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b56c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b56e:	f002 fd11 	bl	800df94 <rcl_wait_set_init>
 800b572:	4606      	mov	r6, r0
 800b574:	2800      	cmp	r0, #0
 800b576:	f43f af20 	beq.w	800b3ba <rclc_executor_spin_some+0x22>
 800b57a:	f003 f907 	bl	800e78c <rcutils_reset_error>
 800b57e:	4630      	mov	r0, r6
 800b580:	b01a      	add	sp, #104	; 0x68
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	2601      	movs	r6, #1
 800b588:	f003 f900 	bl	800e78c <rcutils_reset_error>
 800b58c:	4630      	mov	r0, r6
 800b58e:	b01a      	add	sp, #104	; 0x68
 800b590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b594:	260b      	movs	r6, #11
 800b596:	4630      	mov	r0, r6
 800b598:	b01a      	add	sp, #104	; 0x68
 800b59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59e:	f003 f8f5 	bl	800e78c <rcutils_reset_error>
 800b5a2:	e7bf      	b.n	800b524 <rclc_executor_spin_some+0x18c>
 800b5a4:	6862      	ldr	r2, [r4, #4]
 800b5a6:	461d      	mov	r5, r3
 800b5a8:	e758      	b.n	800b45c <rclc_executor_spin_some+0xc4>
 800b5aa:	68a3      	ldr	r3, [r4, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d04d      	beq.n	800b64c <rclc_executor_spin_some+0x2b4>
 800b5b0:	f240 1991 	movw	r9, #401	; 0x191
 800b5b4:	46a8      	mov	r8, r5
 800b5b6:	e009      	b.n	800b5cc <rclc_executor_spin_some+0x234>
 800b5b8:	f7ff fcba 	bl	800af30 <_rclc_check_for_new_data>
 800b5bc:	4605      	mov	r5, r0
 800b5be:	b110      	cbz	r0, 800b5c6 <rclc_executor_spin_some+0x22e>
 800b5c0:	4548      	cmp	r0, r9
 800b5c2:	f47f af7d 	bne.w	800b4c0 <rclc_executor_spin_some+0x128>
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	4598      	cmp	r8, r3
 800b5ca:	d23b      	bcs.n	800b644 <rclc_executor_spin_some+0x2ac>
 800b5cc:	6862      	ldr	r2, [r4, #4]
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b5d4:	f108 0801 	add.w	r8, r8, #1
 800b5d8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800b5dc:	f1bc 0f00 	cmp.w	ip, #0
 800b5e0:	d1ea      	bne.n	800b5b8 <rclc_executor_spin_some+0x220>
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800b5ea:	4798      	blx	r3
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f43f af67 	beq.w	800b4c0 <rclc_executor_spin_some+0x128>
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f43f af63 	beq.w	800b4c0 <rclc_executor_spin_some+0x128>
 800b5fa:	f04f 0800 	mov.w	r8, #0
 800b5fe:	f240 1991 	movw	r9, #401	; 0x191
 800b602:	e00f      	b.n	800b624 <rclc_executor_spin_some+0x28c>
 800b604:	f7ff fce4 	bl	800afd0 <_rclc_take_new_data>
 800b608:	b108      	cbz	r0, 800b60e <rclc_executor_spin_some+0x276>
 800b60a:	4548      	cmp	r0, r9
 800b60c:	d11c      	bne.n	800b648 <rclc_executor_spin_some+0x2b0>
 800b60e:	6860      	ldr	r0, [r4, #4]
 800b610:	4450      	add	r0, sl
 800b612:	f7ff fd2d 	bl	800b070 <_rclc_execute>
 800b616:	4605      	mov	r5, r0
 800b618:	2800      	cmp	r0, #0
 800b61a:	f47f af51 	bne.w	800b4c0 <rclc_executor_spin_some+0x128>
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	4598      	cmp	r8, r3
 800b622:	d2ac      	bcs.n	800b57e <rclc_executor_spin_some+0x1e6>
 800b624:	6860      	ldr	r0, [r4, #4]
 800b626:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800b62a:	4639      	mov	r1, r7
 800b62c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b630:	f108 0801 	add.w	r8, r8, #1
 800b634:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e3      	bne.n	800b604 <rclc_executor_spin_some+0x26c>
 800b63c:	462e      	mov	r6, r5
 800b63e:	e79e      	b.n	800b57e <rclc_executor_spin_some+0x1e6>
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	e70b      	b.n	800b45c <rclc_executor_spin_some+0xc4>
 800b644:	6862      	ldr	r2, [r4, #4]
 800b646:	e7cc      	b.n	800b5e2 <rclc_executor_spin_some+0x24a>
 800b648:	4606      	mov	r6, r0
 800b64a:	e798      	b.n	800b57e <rclc_executor_spin_some+0x1e6>
 800b64c:	6862      	ldr	r2, [r4, #4]
 800b64e:	461d      	mov	r5, r3
 800b650:	e7c7      	b.n	800b5e2 <rclc_executor_spin_some+0x24a>
 800b652:	bf00      	nop

0800b654 <rclc_executor_spin>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	b1f0      	cbz	r0, 800b696 <rclc_executor_spin+0x42>
 800b658:	4605      	mov	r5, r0
 800b65a:	4a10      	ldr	r2, [pc, #64]	; (800b69c <rclc_executor_spin+0x48>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	2400      	movs	r4, #0
 800b660:	e9d0 0118 	ldrd	r0, r1, [r0, #96]	; 0x60
 800b664:	f7f5 febe 	bl	80013e4 <__aeabi_uldivmod>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	480c      	ldr	r0, [pc, #48]	; (800b6a0 <rclc_executor_spin+0x4c>)
 800b66e:	f00a f96f 	bl	8015950 <printf>
 800b672:	e007      	b.n	800b684 <rclc_executor_spin+0x30>
 800b674:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
 800b678:	f7ff fe8e 	bl	800b398 <rclc_executor_spin_some>
 800b67c:	f030 0302 	bics.w	r3, r0, #2
 800b680:	4604      	mov	r4, r0
 800b682:	d106      	bne.n	800b692 <rclc_executor_spin+0x3e>
 800b684:	6828      	ldr	r0, [r5, #0]
 800b686:	f000 f907 	bl	800b898 <rcl_context_is_valid>
 800b68a:	4603      	mov	r3, r0
 800b68c:	4628      	mov	r0, r5
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f0      	bne.n	800b674 <rclc_executor_spin+0x20>
 800b692:	4620      	mov	r0, r4
 800b694:	bd38      	pop	{r3, r4, r5, pc}
 800b696:	240b      	movs	r4, #11
 800b698:	4620      	mov	r0, r4
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	000f4240 	.word	0x000f4240
 800b6a0:	0801f840 	.word	0x0801f840

0800b6a4 <rclc_executor_handle_counters_zero_init>:
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	b140      	cbz	r0, 800b6ba <rclc_executor_handle_counters_zero_init+0x16>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	6002      	str	r2, [r0, #0]
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	605a      	str	r2, [r3, #4]
 800b6b0:	609a      	str	r2, [r3, #8]
 800b6b2:	60da      	str	r2, [r3, #12]
 800b6b4:	611a      	str	r2, [r3, #16]
 800b6b6:	615a      	str	r2, [r3, #20]
 800b6b8:	4770      	bx	lr
 800b6ba:	200b      	movs	r0, #11
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop

0800b6c0 <rclc_executor_handle_init>:
 800b6c0:	b190      	cbz	r0, 800b6e8 <rclc_executor_handle_init+0x28>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2005      	movs	r0, #5
 800b6c8:	b430      	push	{r4, r5}
 800b6ca:	2400      	movs	r4, #0
 800b6cc:	2500      	movs	r5, #0
 800b6ce:	8018      	strh	r0, [r3, #0]
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b6d6:	6359      	str	r1, [r3, #52]	; 0x34
 800b6d8:	631a      	str	r2, [r3, #48]	; 0x30
 800b6da:	871a      	strh	r2, [r3, #56]	; 0x38
 800b6dc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800b6e0:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800b6e4:	bc30      	pop	{r4, r5}
 800b6e6:	4770      	bx	lr
 800b6e8:	200b      	movs	r0, #11
 800b6ea:	4770      	bx	lr

0800b6ec <rclc_support_init>:
 800b6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	b089      	sub	sp, #36	; 0x24
 800b6f2:	b3b8      	cbz	r0, 800b764 <rclc_support_init+0x78>
 800b6f4:	461c      	mov	r4, r3
 800b6f6:	b3ab      	cbz	r3, 800b764 <rclc_support_init+0x78>
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	4690      	mov	r8, r2
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	f000 fc47 	bl	800bf90 <rcl_get_zero_initialized_init_options>
 800b702:	4603      	mov	r3, r0
 800b704:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800b708:	9307      	str	r3, [sp, #28]
 800b70a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b70e:	a807      	add	r0, sp, #28
 800b710:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b714:	f000 fc3e 	bl	800bf94 <rcl_init_options_init>
 800b718:	4605      	mov	r5, r0
 800b71a:	b9e8      	cbnz	r0, 800b758 <rclc_support_init+0x6c>
 800b71c:	4635      	mov	r5, r6
 800b71e:	9b07      	ldr	r3, [sp, #28]
 800b720:	f10d 0908 	add.w	r9, sp, #8
 800b724:	f845 3b08 	str.w	r3, [r5], #8
 800b728:	4648      	mov	r0, r9
 800b72a:	f000 f8a5 	bl	800b878 <rcl_get_zero_initialized_context>
 800b72e:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800b732:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b736:	462b      	mov	r3, r5
 800b738:	4641      	mov	r1, r8
 800b73a:	4638      	mov	r0, r7
 800b73c:	4632      	mov	r2, r6
 800b73e:	f000 fb19 	bl	800bd74 <rcl_init>
 800b742:	4605      	mov	r5, r0
 800b744:	b940      	cbnz	r0, 800b758 <rclc_support_init+0x6c>
 800b746:	4622      	mov	r2, r4
 800b748:	f106 011c 	add.w	r1, r6, #28
 800b74c:	2003      	movs	r0, #3
 800b74e:	61b4      	str	r4, [r6, #24]
 800b750:	f001 fbe0 	bl	800cf14 <rcl_clock_init>
 800b754:	4605      	mov	r5, r0
 800b756:	b108      	cbz	r0, 800b75c <rclc_support_init+0x70>
 800b758:	f003 f818 	bl	800e78c <rcutils_reset_error>
 800b75c:	4628      	mov	r0, r5
 800b75e:	b009      	add	sp, #36	; 0x24
 800b760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b764:	250b      	movs	r5, #11
 800b766:	4628      	mov	r0, r5
 800b768:	b009      	add	sp, #36	; 0x24
 800b76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b76e:	bf00      	nop

0800b770 <rcl_client_get_rmw_handle>:
 800b770:	b110      	cbz	r0, 800b778 <rcl_client_get_rmw_handle+0x8>
 800b772:	6800      	ldr	r0, [r0, #0]
 800b774:	b100      	cbz	r0, 800b778 <rcl_client_get_rmw_handle+0x8>
 800b776:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop

0800b77c <rcl_take_response>:
 800b77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b77e:	460e      	mov	r6, r1
 800b780:	b08d      	sub	sp, #52	; 0x34
 800b782:	460c      	mov	r4, r1
 800b784:	4694      	mov	ip, r2
 800b786:	ad06      	add	r5, sp, #24
 800b788:	4607      	mov	r7, r0
 800b78a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b78c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b78e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b792:	e885 0003 	stmia.w	r5, {r0, r1}
 800b796:	b347      	cbz	r7, 800b7ea <rcl_take_response+0x6e>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	b333      	cbz	r3, 800b7ea <rcl_take_response+0x6e>
 800b79c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b79e:	b320      	cbz	r0, 800b7ea <rcl_take_response+0x6e>
 800b7a0:	f1bc 0f00 	cmp.w	ip, #0
 800b7a4:	d024      	beq.n	800b7f0 <rcl_take_response+0x74>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2600      	movs	r6, #0
 800b7aa:	2700      	movs	r7, #0
 800b7ac:	4662      	mov	r2, ip
 800b7ae:	f88d 3007 	strb.w	r3, [sp, #7]
 800b7b2:	a902      	add	r1, sp, #8
 800b7b4:	f10d 0307 	add.w	r3, sp, #7
 800b7b8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b7bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b7c0:	f004 f8de 	bl	800f980 <rmw_take_response>
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	b9a8      	cbnz	r0, 800b7f4 <rcl_take_response+0x78>
 800b7c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b7cc:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	bf08      	it	eq
 800b7d4:	461e      	moveq	r6, r3
 800b7d6:	ad06      	add	r5, sp, #24
 800b7d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b7e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	b00d      	add	sp, #52	; 0x34
 800b7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ea:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800b7ee:	e7f2      	b.n	800b7d6 <rcl_take_response+0x5a>
 800b7f0:	260b      	movs	r6, #11
 800b7f2:	e7f0      	b.n	800b7d6 <rcl_take_response+0x5a>
 800b7f4:	2601      	movs	r6, #1
 800b7f6:	e7ee      	b.n	800b7d6 <rcl_take_response+0x5a>

0800b7f8 <rclc_node_init_default>:
 800b7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	fab3 f483 	clz	r4, r3
 800b800:	b08f      	sub	sp, #60	; 0x3c
 800b802:	0964      	lsrs	r4, r4, #5
 800b804:	2a00      	cmp	r2, #0
 800b806:	bf08      	it	eq
 800b808:	2401      	moveq	r4, #1
 800b80a:	2900      	cmp	r1, #0
 800b80c:	bf08      	it	eq
 800b80e:	2401      	moveq	r4, #1
 800b810:	bb2c      	cbnz	r4, 800b85e <rclc_node_init_default+0x66>
 800b812:	4605      	mov	r5, r0
 800b814:	b318      	cbz	r0, 800b85e <rclc_node_init_default+0x66>
 800b816:	ac04      	add	r4, sp, #16
 800b818:	4698      	mov	r8, r3
 800b81a:	4617      	mov	r7, r2
 800b81c:	460e      	mov	r6, r1
 800b81e:	4620      	mov	r0, r4
 800b820:	f10d 091c 	add.w	r9, sp, #28
 800b824:	f000 fd40 	bl	800c2a8 <rcl_get_zero_initialized_node>
 800b828:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b82c:	e885 0003 	stmia.w	r5, {r0, r1}
 800b830:	4648      	mov	r0, r9
 800b832:	f000 fefb 	bl	800c62c <rcl_node_get_default_options>
 800b836:	4620      	mov	r0, r4
 800b838:	f000 fd36 	bl	800c2a8 <rcl_get_zero_initialized_node>
 800b83c:	f8cd 9000 	str.w	r9, [sp]
 800b840:	f108 0308 	add.w	r3, r8, #8
 800b844:	463a      	mov	r2, r7
 800b846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b84a:	e885 0003 	stmia.w	r5, {r0, r1}
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	f000 fd33 	bl	800c2bc <rcl_node_init>
 800b856:	b930      	cbnz	r0, 800b866 <rclc_node_init_default+0x6e>
 800b858:	b00f      	add	sp, #60	; 0x3c
 800b85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b85e:	200b      	movs	r0, #11
 800b860:	b00f      	add	sp, #60	; 0x3c
 800b862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b866:	9003      	str	r0, [sp, #12]
 800b868:	f002 ff90 	bl	800e78c <rcutils_reset_error>
 800b86c:	f002 ff8e 	bl	800e78c <rcutils_reset_error>
 800b870:	9803      	ldr	r0, [sp, #12]
 800b872:	b00f      	add	sp, #60	; 0x3c
 800b874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b878 <rcl_get_zero_initialized_context>:
 800b878:	b4d0      	push	{r4, r6, r7}
 800b87a:	4b06      	ldr	r3, [pc, #24]	; (800b894 <rcl_get_zero_initialized_context+0x1c>)
 800b87c:	2600      	movs	r6, #0
 800b87e:	2700      	movs	r7, #0
 800b880:	4604      	mov	r4, r0
 800b882:	e9c3 6702 	strd	r6, r7, [r3, #8]
 800b886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b88c:	4620      	mov	r0, r4
 800b88e:	bcd0      	pop	{r4, r6, r7}
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20009920 	.word	0x20009920

0800b898 <rcl_context_is_valid>:
 800b898:	b150      	cbz	r0, 800b8b0 <rcl_context_is_valid+0x18>
 800b89a:	3008      	adds	r0, #8
 800b89c:	2105      	movs	r1, #5
 800b89e:	b508      	push	{r3, lr}
 800b8a0:	f7f7 f9e5 	bl	8002c6e <__atomic_load_8>
 800b8a4:	ea51 0300 	orrs.w	r3, r1, r0
 800b8a8:	bf14      	ite	ne
 800b8aa:	2001      	movne	r0, #1
 800b8ac:	2000      	moveq	r0, #0
 800b8ae:	bd08      	pop	{r3, pc}
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop

0800b8b4 <__cleanup_context>:
 800b8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	2105      	movs	r1, #5
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	4606      	mov	r6, r0
 800b8be:	2200      	movs	r2, #0
 800b8c0:	3008      	adds	r0, #8
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9100      	str	r1, [sp, #0]
 800b8c6:	f7f7 f9eb 	bl	8002ca0 <__atomic_store_8>
 800b8ca:	6830      	ldr	r0, [r6, #0]
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d056      	beq.n	800b97e <__cleanup_context+0xca>
 800b8d0:	6947      	ldr	r7, [r0, #20]
 800b8d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b8d6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b8da:	b137      	cbz	r7, 800b8ea <__cleanup_context+0x36>
 800b8dc:	3014      	adds	r0, #20
 800b8de:	f000 fbad 	bl	800c03c <rcl_init_options_fini>
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d14c      	bne.n	800b982 <__cleanup_context+0xce>
 800b8e8:	6830      	ldr	r0, [r6, #0]
 800b8ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b8ec:	b143      	cbz	r3, 800b900 <__cleanup_context+0x4c>
 800b8ee:	3028      	adds	r0, #40	; 0x28
 800b8f0:	f003 fcc0 	bl	800f274 <rmw_context_fini>
 800b8f4:	b118      	cbz	r0, 800b8fe <__cleanup_context+0x4a>
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	d046      	beq.n	800b988 <__cleanup_context+0xd4>
 800b8fa:	f002 ff47 	bl	800e78c <rcutils_reset_error>
 800b8fe:	6830      	ldr	r0, [r6, #0]
 800b900:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800b904:	f1bc 0f00 	cmp.w	ip, #0
 800b908:	d01c      	beq.n	800b944 <__cleanup_context+0x90>
 800b90a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b90e:	2a01      	cmp	r2, #1
 800b910:	f173 0100 	sbcs.w	r1, r3, #0
 800b914:	db12      	blt.n	800b93c <__cleanup_context+0x88>
 800b916:	2400      	movs	r4, #0
 800b918:	2500      	movs	r5, #0
 800b91a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800b91e:	4649      	mov	r1, r9
 800b920:	b308      	cbz	r0, 800b966 <__cleanup_context+0xb2>
 800b922:	47c0      	blx	r8
 800b924:	6833      	ldr	r3, [r6, #0]
 800b926:	3401      	adds	r4, #1
 800b928:	f8d3 c020 	ldr.w	ip, [r3, #32]
 800b92c:	f145 0500 	adc.w	r5, r5, #0
 800b930:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b934:	4294      	cmp	r4, r2
 800b936:	eb75 0103 	sbcs.w	r1, r5, r3
 800b93a:	dbee      	blt.n	800b91a <__cleanup_context+0x66>
 800b93c:	4660      	mov	r0, ip
 800b93e:	4649      	mov	r1, r9
 800b940:	47c0      	blx	r8
 800b942:	6830      	ldr	r0, [r6, #0]
 800b944:	4649      	mov	r1, r9
 800b946:	47c0      	blx	r8
 800b948:	4b11      	ldr	r3, [pc, #68]	; (800b990 <__cleanup_context+0xdc>)
 800b94a:	2000      	movs	r0, #0
 800b94c:	2100      	movs	r1, #0
 800b94e:	ac02      	add	r4, sp, #8
 800b950:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b956:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b95a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800b95e:	4638      	mov	r0, r7
 800b960:	b007      	add	sp, #28
 800b962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b966:	3401      	adds	r4, #1
 800b968:	f145 0500 	adc.w	r5, r5, #0
 800b96c:	4294      	cmp	r4, r2
 800b96e:	eb75 0103 	sbcs.w	r1, r5, r3
 800b972:	dbd2      	blt.n	800b91a <__cleanup_context+0x66>
 800b974:	4660      	mov	r0, ip
 800b976:	4649      	mov	r1, r9
 800b978:	47c0      	blx	r8
 800b97a:	6830      	ldr	r0, [r6, #0]
 800b97c:	e7e2      	b.n	800b944 <__cleanup_context+0x90>
 800b97e:	4607      	mov	r7, r0
 800b980:	e7e2      	b.n	800b948 <__cleanup_context+0x94>
 800b982:	f002 ff03 	bl	800e78c <rcutils_reset_error>
 800b986:	e7af      	b.n	800b8e8 <__cleanup_context+0x34>
 800b988:	f008 f8b6 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800b98c:	4607      	mov	r7, r0
 800b98e:	e7b4      	b.n	800b8fa <__cleanup_context+0x46>
 800b990:	20009920 	.word	0x20009920

0800b994 <rclc_publisher_init_default>:
 800b994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b998:	fab2 f482 	clz	r4, r2
 800b99c:	b09e      	sub	sp, #120	; 0x78
 800b99e:	0964      	lsrs	r4, r4, #5
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bf08      	it	eq
 800b9a4:	2401      	moveq	r4, #1
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	bf08      	it	eq
 800b9aa:	2401      	moveq	r4, #1
 800b9ac:	b9b4      	cbnz	r4, 800b9dc <rclc_publisher_init_default+0x48>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b1a0      	cbz	r0, 800b9dc <rclc_publisher_init_default+0x48>
 800b9b2:	ac04      	add	r4, sp, #16
 800b9b4:	4690      	mov	r8, r2
 800b9b6:	461f      	mov	r7, r3
 800b9b8:	460e      	mov	r6, r1
 800b9ba:	f000 fe75 	bl	800c6a8 <rcl_get_zero_initialized_publisher>
 800b9be:	6028      	str	r0, [r5, #0]
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 ff75 	bl	800c8b0 <rcl_publisher_get_default_options>
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	4642      	mov	r2, r8
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	9400      	str	r4, [sp, #0]
 800b9d0:	f000 fe70 	bl	800c6b4 <rcl_publisher_init>
 800b9d4:	b930      	cbnz	r0, 800b9e4 <rclc_publisher_init_default+0x50>
 800b9d6:	b01e      	add	sp, #120	; 0x78
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	200b      	movs	r0, #11
 800b9de:	b01e      	add	sp, #120	; 0x78
 800b9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e4:	9003      	str	r0, [sp, #12]
 800b9e6:	f002 fed1 	bl	800e78c <rcutils_reset_error>
 800b9ea:	9803      	ldr	r0, [sp, #12]
 800b9ec:	b01e      	add	sp, #120	; 0x78
 800b9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f2:	bf00      	nop

0800b9f4 <rclc_subscription_init_default>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	fab2 f482 	clz	r4, r2
 800b9fc:	b0a0      	sub	sp, #128	; 0x80
 800b9fe:	0964      	lsrs	r4, r4, #5
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bf08      	it	eq
 800ba04:	2401      	moveq	r4, #1
 800ba06:	2900      	cmp	r1, #0
 800ba08:	bf08      	it	eq
 800ba0a:	2401      	moveq	r4, #1
 800ba0c:	b9b4      	cbnz	r4, 800ba3c <rclc_subscription_init_default+0x48>
 800ba0e:	4605      	mov	r5, r0
 800ba10:	b1a0      	cbz	r0, 800ba3c <rclc_subscription_init_default+0x48>
 800ba12:	ac04      	add	r4, sp, #16
 800ba14:	4690      	mov	r8, r2
 800ba16:	461f      	mov	r7, r3
 800ba18:	460e      	mov	r6, r1
 800ba1a:	f001 f8e1 	bl	800cbe0 <rcl_get_zero_initialized_subscription>
 800ba1e:	6028      	str	r0, [r5, #0]
 800ba20:	4620      	mov	r0, r4
 800ba22:	f001 f9df 	bl	800cde4 <rcl_subscription_get_default_options>
 800ba26:	463b      	mov	r3, r7
 800ba28:	4642      	mov	r2, r8
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	9400      	str	r4, [sp, #0]
 800ba30:	f001 f8dc 	bl	800cbec <rcl_subscription_init>
 800ba34:	b930      	cbnz	r0, 800ba44 <rclc_subscription_init_default+0x50>
 800ba36:	b020      	add	sp, #128	; 0x80
 800ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3c:	200b      	movs	r0, #11
 800ba3e:	b020      	add	sp, #128	; 0x80
 800ba40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba44:	9003      	str	r0, [sp, #12]
 800ba46:	f002 fea1 	bl	800e78c <rcutils_reset_error>
 800ba4a:	9803      	ldr	r0, [sp, #12]
 800ba4c:	b020      	add	sp, #128	; 0x80
 800ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba52:	bf00      	nop

0800ba54 <rclc_timer_init_default>:
 800ba54:	b351      	cbz	r1, 800baac <rclc_timer_init_default+0x58>
 800ba56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba5a:	4607      	mov	r7, r0
 800ba5c:	b08b      	sub	sp, #44	; 0x2c
 800ba5e:	b308      	cbz	r0, 800baa4 <rclc_timer_init_default+0x50>
 800ba60:	460c      	mov	r4, r1
 800ba62:	4691      	mov	r9, r2
 800ba64:	4698      	mov	r8, r3
 800ba66:	f001 fc59 	bl	800d31c <rcl_get_zero_initialized_timer>
 800ba6a:	69a6      	ldr	r6, [r4, #24]
 800ba6c:	ad03      	add	r5, sp, #12
 800ba6e:	6038      	str	r0, [r7, #0]
 800ba70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ba72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba74:	6833      	ldr	r3, [r6, #0]
 800ba76:	4638      	mov	r0, r7
 800ba78:	f104 0208 	add.w	r2, r4, #8
 800ba7c:	f104 011c 	add.w	r1, r4, #28
 800ba80:	602b      	str	r3, [r5, #0]
 800ba82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba84:	e9cd 9800 	strd	r9, r8, [sp]
 800ba88:	9302      	str	r3, [sp, #8]
 800ba8a:	f001 fc4d 	bl	800d328 <rcl_timer_init>
 800ba8e:	b910      	cbnz	r0, 800ba96 <rclc_timer_init_default+0x42>
 800ba90:	b00b      	add	sp, #44	; 0x2c
 800ba92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba96:	9009      	str	r0, [sp, #36]	; 0x24
 800ba98:	f002 fe78 	bl	800e78c <rcutils_reset_error>
 800ba9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba9e:	b00b      	add	sp, #44	; 0x2c
 800baa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa4:	200b      	movs	r0, #11
 800baa6:	b00b      	add	sp, #44	; 0x2c
 800baa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baac:	200b      	movs	r0, #11
 800baae:	4770      	bx	lr

0800bab0 <rcl_expand_topic_name>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	b08b      	sub	sp, #44	; 0x2c
 800bab6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800bab8:	fab4 f584 	clz	r5, r4
 800babc:	096d      	lsrs	r5, r5, #5
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf08      	it	eq
 800bac2:	2501      	moveq	r5, #1
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	bf08      	it	eq
 800bac8:	2501      	moveq	r5, #1
 800baca:	2900      	cmp	r1, #0
 800bacc:	bf08      	it	eq
 800bace:	2501      	moveq	r5, #1
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	d13d      	bne.n	800bb50 <rcl_expand_topic_name+0xa0>
 800bad4:	4616      	mov	r6, r2
 800bad6:	fab0 f280 	clz	r2, r0
 800bada:	4604      	mov	r4, r0
 800badc:	0952      	lsrs	r2, r2, #5
 800bade:	2800      	cmp	r0, #0
 800bae0:	d036      	beq.n	800bb50 <rcl_expand_topic_name+0xa0>
 800bae2:	460f      	mov	r7, r1
 800bae4:	a909      	add	r1, sp, #36	; 0x24
 800bae6:	4698      	mov	r8, r3
 800bae8:	f001 fe54 	bl	800d794 <rcl_validate_topic_name>
 800baec:	4605      	mov	r5, r0
 800baee:	bb58      	cbnz	r0, 800bb48 <rcl_expand_topic_name+0x98>
 800baf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d135      	bne.n	800bb62 <rcl_expand_topic_name+0xb2>
 800baf6:	4602      	mov	r2, r0
 800baf8:	a909      	add	r1, sp, #36	; 0x24
 800bafa:	4638      	mov	r0, r7
 800bafc:	f004 fee2 	bl	80108c4 <rmw_validate_node_name>
 800bb00:	bb58      	cbnz	r0, 800bb5a <rcl_expand_topic_name+0xaa>
 800bb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb04:	bb93      	cbnz	r3, 800bb6c <rcl_expand_topic_name+0xbc>
 800bb06:	462a      	mov	r2, r5
 800bb08:	a909      	add	r1, sp, #36	; 0x24
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f004 febc 	bl	8010888 <rmw_validate_namespace>
 800bb10:	bb18      	cbnz	r0, 800bb5a <rcl_expand_topic_name+0xaa>
 800bb12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bb14:	2d00      	cmp	r5, #0
 800bb16:	f040 809f 	bne.w	800bc58 <rcl_expand_topic_name+0x1a8>
 800bb1a:	217b      	movs	r1, #123	; 0x7b
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f00a f9ef 	bl	8015f00 <strchr>
 800bb22:	7823      	ldrb	r3, [r4, #0]
 800bb24:	4681      	mov	r9, r0
 800bb26:	bb18      	cbnz	r0, 800bb70 <rcl_expand_topic_name+0xc0>
 800bb28:	2b2f      	cmp	r3, #47	; 0x2f
 800bb2a:	d121      	bne.n	800bb70 <rcl_expand_topic_name+0xc0>
 800bb2c:	ab14      	add	r3, sp, #80	; 0x50
 800bb2e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 800bb32:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bb36:	4620      	mov	r0, r4
 800bb38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb3a:	f002 ffc7 	bl	800eacc <rcutils_strdup>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb42:	bf08      	it	eq
 800bb44:	250a      	moveq	r5, #10
 800bb46:	6018      	str	r0, [r3, #0]
 800bb48:	4628      	mov	r0, r5
 800bb4a:	b00b      	add	sp, #44	; 0x2c
 800bb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb50:	250b      	movs	r5, #11
 800bb52:	4628      	mov	r0, r5
 800bb54:	b00b      	add	sp, #44	; 0x2c
 800bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5a:	f007 ffcd 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800bb5e:	4605      	mov	r5, r0
 800bb60:	e7f2      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bb62:	2567      	movs	r5, #103	; 0x67
 800bb64:	4628      	mov	r0, r5
 800bb66:	b00b      	add	sp, #44	; 0x2c
 800bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6c:	25c9      	movs	r5, #201	; 0xc9
 800bb6e:	e7eb      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bb70:	2b7e      	cmp	r3, #126	; 0x7e
 800bb72:	d073      	beq.n	800bc5c <rcl_expand_topic_name+0x1ac>
 800bb74:	f1b9 0f00 	cmp.w	r9, #0
 800bb78:	f000 80c4 	beq.w	800bd04 <rcl_expand_topic_name+0x254>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	46a2      	mov	sl, r4
 800bb80:	469b      	mov	fp, r3
 800bb82:	9506      	str	r5, [sp, #24]
 800bb84:	4655      	mov	r5, sl
 800bb86:	9407      	str	r4, [sp, #28]
 800bb88:	464c      	mov	r4, r9
 800bb8a:	2c00      	cmp	r4, #0
 800bb8c:	f000 80b4 	beq.w	800bcf8 <rcl_expand_topic_name+0x248>
 800bb90:	217d      	movs	r1, #125	; 0x7d
 800bb92:	4628      	mov	r0, r5
 800bb94:	f00a f9b4 	bl	8015f00 <strchr>
 800bb98:	4681      	mov	r9, r0
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	486b      	ldr	r0, [pc, #428]	; (800bd4c <rcl_expand_topic_name+0x29c>)
 800bb9e:	eba9 0904 	sub.w	r9, r9, r4
 800bba2:	f109 0a01 	add.w	sl, r9, #1
 800bba6:	4652      	mov	r2, sl
 800bba8:	f00a fa70 	bl	801608c <strncmp>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d051      	beq.n	800bc54 <rcl_expand_topic_name+0x1a4>
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4866      	ldr	r0, [pc, #408]	; (800bd50 <rcl_expand_topic_name+0x2a0>)
 800bbb6:	f00a fa69 	bl	801608c <strncmp>
 800bbba:	b128      	cbz	r0, 800bbc8 <rcl_expand_topic_name+0x118>
 800bbbc:	4652      	mov	r2, sl
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4864      	ldr	r0, [pc, #400]	; (800bd54 <rcl_expand_topic_name+0x2a4>)
 800bbc2:	f00a fa63 	bl	801608c <strncmp>
 800bbc6:	bb38      	cbnz	r0, 800bc18 <rcl_expand_topic_name+0x168>
 800bbc8:	46b1      	mov	r9, r6
 800bbca:	ab16      	add	r3, sp, #88	; 0x58
 800bbcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbd0:	ab14      	add	r3, sp, #80	; 0x50
 800bbd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4651      	mov	r1, sl
 800bbda:	cb0c      	ldmia	r3, {r2, r3}
 800bbdc:	f002 ff98 	bl	800eb10 <rcutils_strndup>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f000 80a7 	beq.w	800bd36 <rcl_expand_topic_name+0x286>
 800bbe8:	464a      	mov	r2, r9
 800bbea:	4628      	mov	r0, r5
 800bbec:	ab14      	add	r3, sp, #80	; 0x50
 800bbee:	4621      	mov	r1, r4
 800bbf0:	f002 fe76 	bl	800e8e0 <rcutils_repl_str>
 800bbf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	4798      	blx	r3
 800bbfe:	4658      	mov	r0, fp
 800bc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc04:	4798      	blx	r3
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	d071      	beq.n	800bcee <rcl_expand_topic_name+0x23e>
 800bc0a:	217b      	movs	r1, #123	; 0x7b
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f00a f977 	bl	8015f00 <strchr>
 800bc12:	46ab      	mov	fp, r5
 800bc14:	4604      	mov	r4, r0
 800bc16:	e7b8      	b.n	800bb8a <rcl_expand_topic_name+0xda>
 800bc18:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800bc1c:	1c61      	adds	r1, r4, #1
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f003 f88e 	bl	800ed40 <rcutils_string_map_getn>
 800bc24:	4681      	mov	r9, r0
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d1cf      	bne.n	800bbca <rcl_expand_topic_name+0x11a>
 800bc2a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800bc2c:	aa16      	add	r2, sp, #88	; 0x58
 800bc2e:	ab14      	add	r3, sp, #80	; 0x50
 800bc30:	2569      	movs	r5, #105	; 0x69
 800bc32:	6008      	str	r0, [r1, #0]
 800bc34:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bc3a:	4651      	mov	r1, sl
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	cb0c      	ldmia	r3, {r2, r3}
 800bc40:	f002 ff66 	bl	800eb10 <rcutils_strndup>
 800bc44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc48:	4798      	blx	r3
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc50:	4798      	blx	r3
 800bc52:	e779      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bc54:	46b9      	mov	r9, r7
 800bc56:	e7b8      	b.n	800bbca <rcl_expand_topic_name+0x11a>
 800bc58:	25ca      	movs	r5, #202	; 0xca
 800bc5a:	e775      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7f4 fd0f 	bl	8000680 <strlen>
 800bc62:	4a3d      	ldr	r2, [pc, #244]	; (800bd58 <rcl_expand_topic_name+0x2a8>)
 800bc64:	1c63      	adds	r3, r4, #1
 800bc66:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800bd64 <rcl_expand_topic_name+0x2b4>
 800bc6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc6e:	9704      	str	r7, [sp, #16]
 800bc70:	2801      	cmp	r0, #1
 800bc72:	bf0c      	ite	eq
 800bc74:	4610      	moveq	r0, r2
 800bc76:	4660      	movne	r0, ip
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc7c:	ab14      	add	r3, sp, #80	; 0x50
 800bc7e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800bc82:	e9cd 2100 	strd	r2, r1, [sp]
 800bc86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc88:	f002 fdd8 	bl	800e83c <rcutils_format_string_limit>
 800bc8c:	4683      	mov	fp, r0
 800bc8e:	b370      	cbz	r0, 800bcee <rcl_expand_topic_name+0x23e>
 800bc90:	f1b9 0f00 	cmp.w	r9, #0
 800bc94:	d005      	beq.n	800bca2 <rcl_expand_topic_name+0x1f2>
 800bc96:	217b      	movs	r1, #123	; 0x7b
 800bc98:	4682      	mov	sl, r0
 800bc9a:	f00a f931 	bl	8015f00 <strchr>
 800bc9e:	4681      	mov	r9, r0
 800bca0:	e76f      	b.n	800bb82 <rcl_expand_topic_name+0xd2>
 800bca2:	f89b 3000 	ldrb.w	r3, [fp]
 800bca6:	2b2f      	cmp	r3, #47	; 0x2f
 800bca8:	d01d      	beq.n	800bce6 <rcl_expand_topic_name+0x236>
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f7f4 fce8 	bl	8000680 <strlen>
 800bcb0:	4b2a      	ldr	r3, [pc, #168]	; (800bd5c <rcl_expand_topic_name+0x2ac>)
 800bcb2:	492b      	ldr	r1, [pc, #172]	; (800bd60 <rcl_expand_topic_name+0x2b0>)
 800bcb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcb8:	f8cd b010 	str.w	fp, [sp, #16]
 800bcbc:	2801      	cmp	r0, #1
 800bcbe:	bf0c      	ite	eq
 800bcc0:	4618      	moveq	r0, r3
 800bcc2:	4608      	movne	r0, r1
 800bcc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bcc6:	e9cd 3200 	strd	r3, r2, [sp]
 800bcca:	ab14      	add	r3, sp, #80	; 0x50
 800bccc:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800bcd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcd2:	f002 fdb3 	bl	800e83c <rcutils_format_string_limit>
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4658      	mov	r0, fp
 800bcda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcdc:	46a3      	mov	fp, r4
 800bcde:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bce0:	4798      	blx	r3
 800bce2:	465b      	mov	r3, fp
 800bce4:	b11b      	cbz	r3, 800bcee <rcl_expand_topic_name+0x23e>
 800bce6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bce8:	f8c3 b000 	str.w	fp, [r3]
 800bcec:	e72c      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcf2:	250a      	movs	r5, #10
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	e727      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bcf8:	465b      	mov	r3, fp
 800bcfa:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1cf      	bne.n	800bca2 <rcl_expand_topic_name+0x1f2>
 800bd02:	7823      	ldrb	r3, [r4, #0]
 800bd04:	2b2f      	cmp	r3, #47	; 0x2f
 800bd06:	d01e      	beq.n	800bd46 <rcl_expand_topic_name+0x296>
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7f4 fcb9 	bl	8000680 <strlen>
 800bd0e:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <rcl_expand_topic_name+0x2ac>)
 800bd10:	4913      	ldr	r1, [pc, #76]	; (800bd60 <rcl_expand_topic_name+0x2b0>)
 800bd12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd16:	9404      	str	r4, [sp, #16]
 800bd18:	2801      	cmp	r0, #1
 800bd1a:	bf0c      	ite	eq
 800bd1c:	4618      	moveq	r0, r3
 800bd1e:	4608      	movne	r0, r1
 800bd20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bd22:	e9cd 3200 	strd	r3, r2, [sp]
 800bd26:	ab14      	add	r3, sp, #80	; 0x50
 800bd28:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800bd2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd2e:	f002 fd85 	bl	800e83c <rcutils_format_string_limit>
 800bd32:	4683      	mov	fp, r0
 800bd34:	e7d5      	b.n	800bce2 <rcl_expand_topic_name+0x232>
 800bd36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd38:	4658      	mov	r0, fp
 800bd3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd3c:	250a      	movs	r5, #10
 800bd3e:	601c      	str	r4, [r3, #0]
 800bd40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd42:	4798      	blx	r3
 800bd44:	e700      	b.n	800bb48 <rcl_expand_topic_name+0x98>
 800bd46:	2300      	movs	r3, #0
 800bd48:	469b      	mov	fp, r3
 800bd4a:	e7cc      	b.n	800bce6 <rcl_expand_topic_name+0x236>
 800bd4c:	0801f900 	.word	0x0801f900
 800bd50:	0801f908 	.word	0x0801f908
 800bd54:	0801f910 	.word	0x0801f910
 800bd58:	0801f8e0 	.word	0x0801f8e0
 800bd5c:	0801f8f0 	.word	0x0801f8f0
 800bd60:	0801f8f8 	.word	0x0801f8f8
 800bd64:	0801f8e8 	.word	0x0801f8e8

0800bd68 <rcl_get_default_topic_name_substitutions>:
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	bf0c      	ite	eq
 800bd6c:	200b      	moveq	r0, #11
 800bd6e:	2000      	movne	r0, #0
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop

0800bd74 <rcl_init>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	f1b0 0b00 	subs.w	fp, r0, #0
 800bd7c:	b0a1      	sub	sp, #132	; 0x84
 800bd7e:	468a      	mov	sl, r1
 800bd80:	4690      	mov	r8, r2
 800bd82:	461f      	mov	r7, r3
 800bd84:	f340 8091 	ble.w	800beaa <rcl_init+0x136>
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	f000 8091 	beq.w	800beb0 <rcl_init+0x13c>
 800bd8e:	1f0d      	subs	r5, r1, #4
 800bd90:	2400      	movs	r4, #0
 800bd92:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800bd96:	3401      	adds	r4, #1
 800bd98:	2e00      	cmp	r6, #0
 800bd9a:	f000 8089 	beq.w	800beb0 <rcl_init+0x13c>
 800bd9e:	45a3      	cmp	fp, r4
 800bda0:	d1f7      	bne.n	800bd92 <rcl_init+0x1e>
 800bda2:	f1b8 0f00 	cmp.w	r8, #0
 800bda6:	f000 8083 	beq.w	800beb0 <rcl_init+0x13c>
 800bdaa:	f8d8 4000 	ldr.w	r4, [r8]
 800bdae:	2c00      	cmp	r4, #0
 800bdb0:	d07e      	beq.n	800beb0 <rcl_init+0x13c>
 800bdb2:	ad1b      	add	r5, sp, #108	; 0x6c
 800bdb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdb6:	6824      	ldr	r4, [r4, #0]
 800bdb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdba:	a81b      	add	r0, sp, #108	; 0x6c
 800bdbc:	602c      	str	r4, [r5, #0]
 800bdbe:	f002 fbef 	bl	800e5a0 <rcutils_allocator_is_valid>
 800bdc2:	f080 0001 	eor.w	r0, r0, #1
 800bdc6:	f010 0fff 	tst.w	r0, #255	; 0xff
 800bdca:	d171      	bne.n	800beb0 <rcl_init+0x13c>
 800bdcc:	2f00      	cmp	r7, #0
 800bdce:	d06f      	beq.n	800beb0 <rcl_init+0x13c>
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d171      	bne.n	800beba <rcl_init+0x146>
 800bdd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdd8:	2178      	movs	r1, #120	; 0x78
 800bdda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bddc:	2001      	movs	r0, #1
 800bdde:	4798      	blx	r3
 800bde0:	4604      	mov	r4, r0
 800bde2:	6038      	str	r0, [r7, #0]
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f000 80be 	beq.w	800bf66 <rcl_init+0x1f2>
 800bdea:	a804      	add	r0, sp, #16
 800bdec:	f003 f82e 	bl	800ee4c <rmw_get_zero_initialized_context>
 800bdf0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bdf4:	ac1b      	add	r4, sp, #108	; 0x6c
 800bdf6:	a904      	add	r1, sp, #16
 800bdf8:	2250      	movs	r2, #80	; 0x50
 800bdfa:	f7f4 fa21 	bl	8000240 <memcpy>
 800bdfe:	683e      	ldr	r6, [r7, #0]
 800be00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be02:	4635      	mov	r5, r6
 800be04:	6824      	ldr	r4, [r4, #0]
 800be06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be08:	f106 0114 	add.w	r1, r6, #20
 800be0c:	602c      	str	r4, [r5, #0]
 800be0e:	4640      	mov	r0, r8
 800be10:	f000 f938 	bl	800c084 <rcl_init_options_copy>
 800be14:	4604      	mov	r4, r0
 800be16:	2800      	cmp	r0, #0
 800be18:	d140      	bne.n	800be9c <rcl_init+0x128>
 800be1a:	683d      	ldr	r5, [r7, #0]
 800be1c:	46d8      	mov	r8, fp
 800be1e:	ea4f 79eb 	mov.w	r9, fp, asr #31
 800be22:	6228      	str	r0, [r5, #32]
 800be24:	e9c5 8906 	strd	r8, r9, [r5, #24]
 800be28:	f1bb 0f00 	cmp.w	fp, #0
 800be2c:	d04a      	beq.n	800bec4 <rcl_init+0x150>
 800be2e:	f1ba 0f00 	cmp.w	sl, #0
 800be32:	d047      	beq.n	800bec4 <rcl_init+0x150>
 800be34:	4658      	mov	r0, fp
 800be36:	2104      	movs	r1, #4
 800be38:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 800be3c:	4798      	blx	r3
 800be3e:	683e      	ldr	r6, [r7, #0]
 800be40:	6228      	str	r0, [r5, #32]
 800be42:	6a33      	ldr	r3, [r6, #32]
 800be44:	b34b      	cbz	r3, 800be9a <rcl_init+0x126>
 800be46:	f1bb 0f01 	cmp.w	fp, #1
 800be4a:	f179 0300 	sbcs.w	r3, r9, #0
 800be4e:	db39      	blt.n	800bec4 <rcl_init+0x150>
 800be50:	f1aa 0404 	sub.w	r4, sl, #4
 800be54:	f04f 0b00 	mov.w	fp, #0
 800be58:	f04f 0a00 	mov.w	sl, #0
 800be5c:	e00b      	b.n	800be76 <rcl_init+0x102>
 800be5e:	6821      	ldr	r1, [r4, #0]
 800be60:	f7f4 f9ee 	bl	8000240 <memcpy>
 800be64:	f11a 0a01 	adds.w	sl, sl, #1
 800be68:	f14b 0b00 	adc.w	fp, fp, #0
 800be6c:	45d9      	cmp	r9, fp
 800be6e:	bf08      	it	eq
 800be70:	45d0      	cmpeq	r8, sl
 800be72:	d027      	beq.n	800bec4 <rcl_init+0x150>
 800be74:	683e      	ldr	r6, [r7, #0]
 800be76:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800be7a:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800be7e:	f7f4 fbff 	bl	8000680 <strlen>
 800be82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be84:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800be86:	6a36      	ldr	r6, [r6, #32]
 800be88:	9003      	str	r0, [sp, #12]
 800be8a:	4798      	blx	r3
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	5170      	str	r0, [r6, r5]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	9a03      	ldr	r2, [sp, #12]
 800be94:	5958      	ldr	r0, [r3, r5]
 800be96:	2800      	cmp	r0, #0
 800be98:	d1e1      	bne.n	800be5e <rcl_init+0xea>
 800be9a:	240a      	movs	r4, #10
 800be9c:	4638      	mov	r0, r7
 800be9e:	f7ff fd09 	bl	800b8b4 <__cleanup_context>
 800bea2:	4620      	mov	r0, r4
 800bea4:	b021      	add	sp, #132	; 0x84
 800bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beaa:	2900      	cmp	r1, #0
 800beac:	f43f af79 	beq.w	800bda2 <rcl_init+0x2e>
 800beb0:	240b      	movs	r4, #11
 800beb2:	4620      	mov	r0, r4
 800beb4:	b021      	add	sp, #132	; 0x84
 800beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beba:	2464      	movs	r4, #100	; 0x64
 800bebc:	4620      	mov	r0, r4
 800bebe:	b021      	add	sp, #132	; 0x84
 800bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec4:	2605      	movs	r6, #5
 800bec6:	2300      	movs	r3, #0
 800bec8:	2201      	movs	r2, #1
 800beca:	4830      	ldr	r0, [pc, #192]	; (800bf8c <rcl_init+0x218>)
 800becc:	9600      	str	r6, [sp, #0]
 800bece:	f7f6 ff1d 	bl	8002d0c <__atomic_fetch_add_8>
 800bed2:	4604      	mov	r4, r0
 800bed4:	460d      	mov	r5, r1
 800bed6:	ea54 0305 	orrs.w	r3, r4, r5
 800beda:	d03a      	beq.n	800bf52 <rcl_init+0x1de>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	9600      	str	r6, [sp, #0]
 800bee2:	f107 0008 	add.w	r0, r7, #8
 800bee6:	f7f6 fedb 	bl	8002ca0 <__atomic_store_8>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	695e      	ldr	r6, [r3, #20]
 800beee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bef0:	3301      	adds	r3, #1
 800bef2:	e9c6 4506 	strd	r4, r5, [r6, #24]
 800bef6:	d03a      	beq.n	800bf6e <rcl_init+0x1fa>
 800bef8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800befc:	b943      	cbnz	r3, 800bf10 <rcl_init+0x19c>
 800befe:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800bf02:	f000 f971 	bl	800c1e8 <rcl_get_localhost_only>
 800bf06:	4604      	mov	r4, r0
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d1c7      	bne.n	800be9c <rcl_init+0x128>
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	695e      	ldr	r6, [r3, #20]
 800bf10:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800bf12:	aa1a      	add	r2, sp, #104	; 0x68
 800bf14:	a919      	add	r1, sp, #100	; 0x64
 800bf16:	f001 fc2b 	bl	800d770 <rcl_validate_enclave_name>
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d1bd      	bne.n	800be9c <rcl_init+0x128>
 800bf20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf22:	bb13      	cbnz	r3, 800bf6a <rcl_init+0x1f6>
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	694b      	ldr	r3, [r1, #20]
 800bf28:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bf2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bf2e:	f000 fdaf 	bl	800ca90 <rcl_get_security_options_from_environment>
 800bf32:	4604      	mov	r4, r0
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d1b1      	bne.n	800be9c <rcl_init+0x128>
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6948      	ldr	r0, [r1, #20]
 800bf3c:	3128      	adds	r1, #40	; 0x28
 800bf3e:	3018      	adds	r0, #24
 800bf40:	f003 f898 	bl	800f074 <rmw_init>
 800bf44:	4604      	mov	r4, r0
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d0b3      	beq.n	800beb2 <rcl_init+0x13e>
 800bf4a:	f007 fdd5 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf4e:	4604      	mov	r4, r0
 800bf50:	e7a4      	b.n	800be9c <rcl_init+0x128>
 800bf52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5a:	480c      	ldr	r0, [pc, #48]	; (800bf8c <rcl_init+0x218>)
 800bf5c:	2401      	movs	r4, #1
 800bf5e:	9600      	str	r6, [sp, #0]
 800bf60:	f7f6 fe9e 	bl	8002ca0 <__atomic_store_8>
 800bf64:	e79a      	b.n	800be9c <rcl_init+0x128>
 800bf66:	240a      	movs	r4, #10
 800bf68:	e7a3      	b.n	800beb2 <rcl_init+0x13e>
 800bf6a:	2401      	movs	r4, #1
 800bf6c:	e796      	b.n	800be9c <rcl_init+0x128>
 800bf6e:	f106 0024 	add.w	r0, r6, #36	; 0x24
 800bf72:	f007 fdd5 	bl	8013b20 <rcl_get_default_domain_id>
 800bf76:	4604      	mov	r4, r0
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d18f      	bne.n	800be9c <rcl_init+0x128>
 800bf7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf7e:	3301      	adds	r3, #1
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	bf08      	it	eq
 800bf84:	6270      	streq	r0, [r6, #36]	; 0x24
 800bf86:	695e      	ldr	r6, [r3, #20]
 800bf88:	e7b6      	b.n	800bef8 <rcl_init+0x184>
 800bf8a:	bf00      	nop
 800bf8c:	200000e0 	.word	0x200000e0

0800bf90 <rcl_get_zero_initialized_init_options>:
 800bf90:	2000      	movs	r0, #0
 800bf92:	4770      	bx	lr

0800bf94 <rcl_init_options_init>:
 800bf94:	b084      	sub	sp, #16
 800bf96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf98:	b091      	sub	sp, #68	; 0x44
 800bf9a:	af17      	add	r7, sp, #92	; 0x5c
 800bf9c:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d046      	beq.n	800c032 <rcl_init_options_init+0x9e>
 800bfa4:	6803      	ldr	r3, [r0, #0]
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	b133      	cbz	r3, 800bfb8 <rcl_init_options_init+0x24>
 800bfaa:	2464      	movs	r4, #100	; 0x64
 800bfac:	4620      	mov	r0, r4
 800bfae:	b011      	add	sp, #68	; 0x44
 800bfb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bfb4:	b004      	add	sp, #16
 800bfb6:	4770      	bx	lr
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f002 faf1 	bl	800e5a0 <rcutils_allocator_is_valid>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d037      	beq.n	800c032 <rcl_init_options_init+0x9e>
 800bfc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfc4:	2050      	movs	r0, #80	; 0x50
 800bfc6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800bfc8:	4798      	blx	r3
 800bfca:	4604      	mov	r4, r0
 800bfcc:	6030      	str	r0, [r6, #0]
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d031      	beq.n	800c036 <rcl_init_options_init+0xa2>
 800bfd2:	46bc      	mov	ip, r7
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	3418      	adds	r4, #24
 800bfd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfdc:	f8dc c000 	ldr.w	ip, [ip]
 800bfe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfe2:	f8c5 c000 	str.w	ip, [r5]
 800bfe6:	ad02      	add	r5, sp, #8
 800bfe8:	a802      	add	r0, sp, #8
 800bfea:	f002 ff37 	bl	800ee5c <rmw_get_zero_initialized_init_options>
 800bfee:	f8d6 c000 	ldr.w	ip, [r6]
 800bff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bffe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c002:	e884 0003 	stmia.w	r4, {r0, r1}
 800c006:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800c00a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c00e:	f10c 0018 	add.w	r0, ip, #24
 800c012:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c016:	f002 ff69 	bl	800eeec <rmw_init_options_init>
 800c01a:	4604      	mov	r4, r0
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0c5      	beq.n	800bfac <rcl_init_options_init+0x18>
 800c020:	6830      	ldr	r0, [r6, #0]
 800c022:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c024:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c026:	4798      	blx	r3
 800c028:	4620      	mov	r0, r4
 800c02a:	f007 fd65 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c02e:	4604      	mov	r4, r0
 800c030:	e7bc      	b.n	800bfac <rcl_init_options_init+0x18>
 800c032:	240b      	movs	r4, #11
 800c034:	e7ba      	b.n	800bfac <rcl_init_options_init+0x18>
 800c036:	240a      	movs	r4, #10
 800c038:	e7b8      	b.n	800bfac <rcl_init_options_init+0x18>
 800c03a:	bf00      	nop

0800c03c <rcl_init_options_fini>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	b1c0      	cbz	r0, 800c074 <rcl_init_options_fini+0x38>
 800c042:	6804      	ldr	r4, [r0, #0]
 800c044:	4606      	mov	r6, r0
 800c046:	b1ac      	cbz	r4, 800c074 <rcl_init_options_fini+0x38>
 800c048:	ad01      	add	r5, sp, #4
 800c04a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c04c:	6824      	ldr	r4, [r4, #0]
 800c04e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c050:	a801      	add	r0, sp, #4
 800c052:	602c      	str	r4, [r5, #0]
 800c054:	f002 faa4 	bl	800e5a0 <rcutils_allocator_is_valid>
 800c058:	b160      	cbz	r0, 800c074 <rcl_init_options_fini+0x38>
 800c05a:	6830      	ldr	r0, [r6, #0]
 800c05c:	3018      	adds	r0, #24
 800c05e:	f002 ffdb 	bl	800f018 <rmw_init_options_fini>
 800c062:	4604      	mov	r4, r0
 800c064:	b950      	cbnz	r0, 800c07c <rcl_init_options_fini+0x40>
 800c066:	6830      	ldr	r0, [r6, #0]
 800c068:	9b02      	ldr	r3, [sp, #8]
 800c06a:	9905      	ldr	r1, [sp, #20]
 800c06c:	4798      	blx	r3
 800c06e:	4620      	mov	r0, r4
 800c070:	b006      	add	sp, #24
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	240b      	movs	r4, #11
 800c076:	4620      	mov	r0, r4
 800c078:	b006      	add	sp, #24
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	f007 fd3c 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c080:	4604      	mov	r4, r0
 800c082:	e7f8      	b.n	800c076 <rcl_init_options_fini+0x3a>

0800c084 <rcl_init_options_copy>:
 800c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c088:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d068      	beq.n	800c162 <rcl_init_options_copy+0xde>
 800c090:	6806      	ldr	r6, [r0, #0]
 800c092:	4605      	mov	r5, r0
 800c094:	2e00      	cmp	r6, #0
 800c096:	d064      	beq.n	800c162 <rcl_init_options_copy+0xde>
 800c098:	460c      	mov	r4, r1
 800c09a:	2900      	cmp	r1, #0
 800c09c:	d061      	beq.n	800c162 <rcl_init_options_copy+0xde>
 800c09e:	680b      	ldr	r3, [r1, #0]
 800c0a0:	b12b      	cbz	r3, 800c0ae <rcl_init_options_copy+0x2a>
 800c0a2:	2664      	movs	r6, #100	; 0x64
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800c0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ae:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800c0b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c0b4:	4647      	mov	r7, r8
 800c0b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c0b8:	6833      	ldr	r3, [r6, #0]
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	f002 fa6f 	bl	800e5a0 <rcutils_allocator_is_valid>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d04d      	beq.n	800c162 <rcl_init_options_copy+0xde>
 800c0c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ca:	2050      	movs	r0, #80	; 0x50
 800c0cc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c0d0:	4798      	blx	r3
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	6020      	str	r0, [r4, #0]
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d07e      	beq.n	800c1d8 <rcl_init_options_copy+0x154>
 800c0da:	46c4      	mov	ip, r8
 800c0dc:	4607      	mov	r7, r0
 800c0de:	3618      	adds	r6, #24
 800c0e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c0e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ea:	a802      	add	r0, sp, #8
 800c0ec:	603b      	str	r3, [r7, #0]
 800c0ee:	af02      	add	r7, sp, #8
 800c0f0:	f002 feb4 	bl	800ee5c <rmw_get_zero_initialized_init_options>
 800c0f4:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 800c0f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c0fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c100:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c102:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c104:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	e886 0003 	stmia.w	r6, {r0, r1}
 800c10e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800c112:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c116:	f103 0018 	add.w	r0, r3, #24
 800c11a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800c11e:	f002 fee5 	bl	800eeec <rmw_init_options_init>
 800c122:	4606      	mov	r6, r0
 800c124:	bb18      	cbnz	r0, 800c16e <rcl_init_options_copy+0xea>
 800c126:	f8d4 c000 	ldr.w	ip, [r4]
 800c12a:	682f      	ldr	r7, [r5, #0]
 800c12c:	4666      	mov	r6, ip
 800c12e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c130:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	f10c 0018 	add.w	r0, ip, #24
 800c138:	6033      	str	r3, [r6, #0]
 800c13a:	f002 ff6d 	bl	800f018 <rmw_init_options_fini>
 800c13e:	4607      	mov	r7, r0
 800c140:	b310      	cbz	r0, 800c188 <rcl_init_options_copy+0x104>
 800c142:	4640      	mov	r0, r8
 800c144:	f002 fafa 	bl	800e73c <rcutils_get_error_string>
 800c148:	f002 fb20 	bl	800e78c <rcutils_reset_error>
 800c14c:	4620      	mov	r0, r4
 800c14e:	f7ff ff75 	bl	800c03c <rcl_init_options_fini>
 800c152:	4606      	mov	r6, r0
 800c154:	2800      	cmp	r0, #0
 800c156:	d1a5      	bne.n	800c0a4 <rcl_init_options_copy+0x20>
 800c158:	4638      	mov	r0, r7
 800c15a:	f007 fccd 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c15e:	4606      	mov	r6, r0
 800c160:	e7a0      	b.n	800c0a4 <rcl_init_options_copy+0x20>
 800c162:	260b      	movs	r6, #11
 800c164:	4630      	mov	r0, r6
 800c166:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800c16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c172:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c176:	6820      	ldr	r0, [r4, #0]
 800c178:	4798      	blx	r3
 800c17a:	4630      	mov	r0, r6
 800c17c:	f007 fcbc 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c180:	4606      	mov	r6, r0
 800c182:	2800      	cmp	r0, #0
 800c184:	d0cf      	beq.n	800c126 <rcl_init_options_copy+0xa2>
 800c186:	e78d      	b.n	800c0a4 <rcl_init_options_copy+0x20>
 800c188:	6827      	ldr	r7, [r4, #0]
 800c18a:	ae02      	add	r6, sp, #8
 800c18c:	a802      	add	r0, sp, #8
 800c18e:	f002 fe65 	bl	800ee5c <rmw_get_zero_initialized_init_options>
 800c192:	3718      	adds	r7, #24
 800c194:	f8d5 c000 	ldr.w	ip, [r5]
 800c198:	6825      	ldr	r5, [r4, #0]
 800c19a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c19c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c19e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c1a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c1a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c1a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c1a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c1aa:	e887 0003 	stmia.w	r7, {r0, r1}
 800c1ae:	f10c 0018 	add.w	r0, ip, #24
 800c1b2:	f105 0118 	add.w	r1, r5, #24
 800c1b6:	f002 fee7 	bl	800ef88 <rmw_init_options_copy>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	f43f af71 	beq.w	800c0a4 <rcl_init_options_copy+0x20>
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	f002 faba 	bl	800e73c <rcutils_get_error_string>
 800c1c8:	f002 fae0 	bl	800e78c <rcutils_reset_error>
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f7ff ff35 	bl	800c03c <rcl_init_options_fini>
 800c1d2:	b118      	cbz	r0, 800c1dc <rcl_init_options_copy+0x158>
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	e765      	b.n	800c0a4 <rcl_init_options_copy+0x20>
 800c1d8:	260a      	movs	r6, #10
 800c1da:	e763      	b.n	800c0a4 <rcl_init_options_copy+0x20>
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f007 fc8b 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	e75e      	b.n	800c0a4 <rcl_init_options_copy+0x20>
 800c1e6:	bf00      	nop

0800c1e8 <rcl_get_localhost_only>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	b1b8      	cbz	r0, 800c222 <rcl_get_localhost_only+0x3a>
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	a901      	add	r1, sp, #4
 800c1f6:	480c      	ldr	r0, [pc, #48]	; (800c228 <rcl_get_localhost_only+0x40>)
 800c1f8:	f002 fb5a 	bl	800e8b0 <rcutils_get_env>
 800c1fc:	b110      	cbz	r0, 800c204 <rcl_get_localhost_only+0x1c>
 800c1fe:	2001      	movs	r0, #1
 800c200:	b002      	add	sp, #8
 800c202:	bd10      	pop	{r4, pc}
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	b113      	cbz	r3, 800c20e <rcl_get_localhost_only+0x26>
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	2a31      	cmp	r2, #49	; 0x31
 800c20c:	d004      	beq.n	800c218 <rcl_get_localhost_only+0x30>
 800c20e:	2302      	movs	r3, #2
 800c210:	2000      	movs	r0, #0
 800c212:	7023      	strb	r3, [r4, #0]
 800c214:	b002      	add	sp, #8
 800c216:	bd10      	pop	{r4, pc}
 800c218:	785b      	ldrb	r3, [r3, #1]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1f7      	bne.n	800c20e <rcl_get_localhost_only+0x26>
 800c21e:	2301      	movs	r3, #1
 800c220:	e7f6      	b.n	800c210 <rcl_get_localhost_only+0x28>
 800c222:	200b      	movs	r0, #11
 800c224:	b002      	add	sp, #8
 800c226:	bd10      	pop	{r4, pc}
 800c228:	0801f91c 	.word	0x0801f91c

0800c22c <rcl_create_node_logger_name>:
 800c22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22e:	4607      	mov	r7, r0
 800c230:	b087      	sub	sp, #28
 800c232:	4608      	mov	r0, r1
 800c234:	460d      	mov	r5, r1
 800c236:	4614      	mov	r4, r2
 800c238:	f7f4 fa22 	bl	8000680 <strlen>
 800c23c:	2801      	cmp	r0, #1
 800c23e:	d01f      	beq.n	800c280 <rcl_create_node_logger_name+0x54>
 800c240:	4e16      	ldr	r6, [pc, #88]	; (800c29c <rcl_create_node_logger_name+0x70>)
 800c242:	1c68      	adds	r0, r5, #1
 800c244:	4623      	mov	r3, r4
 800c246:	4916      	ldr	r1, [pc, #88]	; (800c2a0 <rcl_create_node_logger_name+0x74>)
 800c248:	4632      	mov	r2, r6
 800c24a:	f002 fb49 	bl	800e8e0 <rcutils_repl_str>
 800c24e:	4605      	mov	r5, r0
 800c250:	b198      	cbz	r0, 800c27a <rcl_create_node_logger_name+0x4e>
 800c252:	6923      	ldr	r3, [r4, #16]
 800c254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c258:	4912      	ldr	r1, [pc, #72]	; (800c2a4 <rcl_create_node_logger_name+0x78>)
 800c25a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c25e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800c262:	e9cd 3200 	strd	r3, r2, [sp]
 800c266:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c26a:	f002 fae7 	bl	800e83c <rcutils_format_string_limit>
 800c26e:	4603      	mov	r3, r0
 800c270:	6862      	ldr	r2, [r4, #4]
 800c272:	4628      	mov	r0, r5
 800c274:	6921      	ldr	r1, [r4, #16]
 800c276:	461d      	mov	r5, r3
 800c278:	4790      	blx	r2
 800c27a:	4628      	mov	r0, r5
 800c27c:	b007      	add	sp, #28
 800c27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c280:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800c284:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c288:	4638      	mov	r0, r7
 800c28a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c28e:	f002 fc1d 	bl	800eacc <rcutils_strdup>
 800c292:	4605      	mov	r5, r0
 800c294:	4628      	mov	r0, r5
 800c296:	b007      	add	sp, #28
 800c298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c29a:	bf00      	nop
 800c29c:	0801f930 	.word	0x0801f930
 800c2a0:	0801f934 	.word	0x0801f934
 800c2a4:	0801f8e0 	.word	0x0801f8e0

0800c2a8 <rcl_get_zero_initialized_node>:
 800c2a8:	4a03      	ldr	r2, [pc, #12]	; (800c2b8 <rcl_get_zero_initialized_node+0x10>)
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	4770      	bx	lr
 800c2b8:	0801f93c 	.word	0x0801f93c

0800c2bc <rcl_node_init>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	b09b      	sub	sp, #108	; 0x6c
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	460f      	mov	r7, r1
 800c2c8:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800c2cc:	a815      	add	r0, sp, #84	; 0x54
 800c2ce:	4616      	mov	r6, r2
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	9413      	str	r4, [sp, #76]	; 0x4c
 800c2d4:	f007 fd26 	bl	8013d24 <rcl_guard_condition_get_default_options>
 800c2d8:	f1b9 0f00 	cmp.w	r9, #0
 800c2dc:	f000 812c 	beq.w	800c538 <rcl_node_init+0x27c>
 800c2e0:	fab6 f486 	clz	r4, r6
 800c2e4:	f109 0a04 	add.w	sl, r9, #4
 800c2e8:	0964      	lsrs	r4, r4, #5
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	f002 f958 	bl	800e5a0 <rcutils_allocator_is_valid>
 800c2f0:	f080 0001 	eor.w	r0, r0, #1
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	bf08      	it	eq
 800c2f8:	2401      	moveq	r4, #1
 800c2fa:	2f00      	cmp	r7, #0
 800c2fc:	bf08      	it	eq
 800c2fe:	2401      	moveq	r4, #1
 800c300:	4304      	orrs	r4, r0
 800c302:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800c306:	f040 8117 	bne.w	800c538 <rcl_node_init+0x27c>
 800c30a:	686a      	ldr	r2, [r5, #4]
 800c30c:	9207      	str	r2, [sp, #28]
 800c30e:	2a00      	cmp	r2, #0
 800c310:	f040 8136 	bne.w	800c580 <rcl_node_init+0x2c4>
 800c314:	f1b8 0f00 	cmp.w	r8, #0
 800c318:	f000 810e 	beq.w	800c538 <rcl_node_init+0x27c>
 800c31c:	4640      	mov	r0, r8
 800c31e:	f7ff fabb 	bl	800b898 <rcl_context_is_valid>
 800c322:	4683      	mov	fp, r0
 800c324:	2800      	cmp	r0, #0
 800c326:	f000 810c 	beq.w	800c542 <rcl_node_init+0x286>
 800c32a:	9a07      	ldr	r2, [sp, #28]
 800c32c:	4638      	mov	r0, r7
 800c32e:	a914      	add	r1, sp, #80	; 0x50
 800c330:	9214      	str	r2, [sp, #80]	; 0x50
 800c332:	f004 fac7 	bl	80108c4 <rmw_validate_node_name>
 800c336:	4603      	mov	r3, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	f040 80fe 	bne.w	800c53a <rcl_node_init+0x27e>
 800c33e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c340:	2800      	cmp	r0, #0
 800c342:	f040 812b 	bne.w	800c59c <rcl_node_init+0x2e0>
 800c346:	4630      	mov	r0, r6
 800c348:	f7f4 f99a 	bl	8000680 <strlen>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	f040 80fa 	bne.w	800c546 <rcl_node_init+0x28a>
 800c352:	4e9e      	ldr	r6, [pc, #632]	; (800c5cc <rcl_node_init+0x310>)
 800c354:	a914      	add	r1, sp, #80	; 0x50
 800c356:	2200      	movs	r2, #0
 800c358:	4630      	mov	r0, r6
 800c35a:	f004 fa95 	bl	8010888 <rmw_validate_namespace>
 800c35e:	4603      	mov	r3, r0
 800c360:	2800      	cmp	r0, #0
 800c362:	f040 80ea 	bne.w	800c53a <rcl_node_init+0x27e>
 800c366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f040 810e 	bne.w	800c58a <rcl_node_init+0x2ce>
 800c36e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c372:	2030      	movs	r0, #48	; 0x30
 800c374:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c378:	9307      	str	r3, [sp, #28]
 800c37a:	4790      	blx	r2
 800c37c:	4683      	mov	fp, r0
 800c37e:	6068      	str	r0, [r5, #4]
 800c380:	2800      	cmp	r0, #0
 800c382:	f000 8109 	beq.w	800c598 <rcl_node_init+0x2dc>
 800c386:	9b07      	ldr	r3, [sp, #28]
 800c388:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800c38c:	6283      	str	r3, [r0, #40]	; 0x28
 800c38e:	a80a      	add	r0, sp, #40	; 0x28
 800c390:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 800c394:	f000 f94a 	bl	800c62c <rcl_node_get_default_options>
 800c398:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c39c:	46dc      	mov	ip, fp
 800c39e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3a6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800c3aa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800c3ae:	4648      	mov	r0, r9
 800c3b0:	6869      	ldr	r1, [r5, #4]
 800c3b2:	f8c5 8000 	str.w	r8, [r5]
 800c3b6:	f000 f955 	bl	800c664 <rcl_node_options_copy>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f040 8084 	bne.w	800c4c8 <rcl_node_init+0x20c>
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7f4 f95d 	bl	8000680 <strlen>
 800c3c6:	4430      	add	r0, r6
 800c3c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3cc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c3d0:	2b2f      	cmp	r3, #47	; 0x2f
 800c3d2:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c3d6:	bf0c      	ite	eq
 800c3d8:	497d      	ldreq	r1, [pc, #500]	; (800c5d0 <rcl_node_init+0x314>)
 800c3da:	497e      	ldrne	r1, [pc, #504]	; (800c5d4 <rcl_node_init+0x318>)
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	e9cd 6703 	strd	r6, r7, [sp, #12]
 800c3e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c3e6:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800c3ea:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c3ee:	f002 fa25 	bl	800e83c <rcutils_format_string_limit>
 800c3f2:	686b      	ldr	r3, [r5, #4]
 800c3f4:	4652      	mov	r2, sl
 800c3f6:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	4638      	mov	r0, r7
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	f7ff ff14 	bl	800c22c <rcl_create_node_logger_name>
 800c404:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c408:	9b07      	ldr	r3, [sp, #28]
 800c40a:	6298      	str	r0, [r3, #40]	; 0x28
 800c40c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 800c410:	2b00      	cmp	r3, #0
 800c412:	d05e      	beq.n	800c4d2 <rcl_node_init+0x216>
 800c414:	f8db 3000 	ldr.w	r3, [fp]
 800c418:	1c59      	adds	r1, r3, #1
 800c41a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c41c:	f000 80c6 	beq.w	800c5ac <rcl_node_init+0x2f0>
 800c420:	f8d8 2000 	ldr.w	r2, [r8]
 800c424:	4639      	mov	r1, r7
 800c426:	f8cb 301c 	str.w	r3, [fp, #28]
 800c42a:	6957      	ldr	r7, [r2, #20]
 800c42c:	4632      	mov	r2, r6
 800c42e:	6828      	ldr	r0, [r5, #0]
 800c430:	f897 7030 	ldrb.w	r7, [r7, #48]	; 0x30
 800c434:	6800      	ldr	r0, [r0, #0]
 800c436:	f1a7 0701 	sub.w	r7, r7, #1
 800c43a:	3028      	adds	r0, #40	; 0x28
 800c43c:	fab7 f787 	clz	r7, r7
 800c440:	097f      	lsrs	r7, r7, #5
 800c442:	9700      	str	r7, [sp, #0]
 800c444:	f002 ffbe 	bl	800f3c4 <rmw_create_node>
 800c448:	f8cb 0020 	str.w	r0, [fp, #32]
 800c44c:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c450:	f8db 0020 	ldr.w	r0, [fp, #32]
 800c454:	2800      	cmp	r0, #0
 800c456:	d03c      	beq.n	800c4d2 <rcl_node_init+0x216>
 800c458:	f003 f83a 	bl	800f4d0 <rmw_node_get_graph_guard_condition>
 800c45c:	4607      	mov	r7, r0
 800c45e:	b398      	cbz	r0, 800c4c8 <rcl_node_init+0x20c>
 800c460:	686b      	ldr	r3, [r5, #4]
 800c462:	2008      	movs	r0, #8
 800c464:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c468:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c46c:	9307      	str	r3, [sp, #28]
 800c46e:	4790      	blx	r2
 800c470:	9b07      	ldr	r3, [sp, #28]
 800c472:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c476:	6258      	str	r0, [r3, #36]	; 0x24
 800c478:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	b343      	cbz	r3, 800c4d2 <rcl_node_init+0x216>
 800c480:	f10d 0b20 	add.w	fp, sp, #32
 800c484:	4658      	mov	r0, fp
 800c486:	f007 fb7f 	bl	8013b88 <rcl_get_zero_initialized_guard_condition>
 800c48a:	686a      	ldr	r2, [r5, #4]
 800c48c:	9b07      	ldr	r3, [sp, #28]
 800c48e:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800c492:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 800c496:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800c49a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c49e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800c4a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4a6:	f8da a000 	ldr.w	sl, [sl]
 800c4aa:	ab1a      	add	r3, sp, #104	; 0x68
 800c4ac:	f8cc a000 	str.w	sl, [ip]
 800c4b0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c4b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c4b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4ba:	4670      	mov	r0, lr
 800c4bc:	4642      	mov	r2, r8
 800c4be:	4639      	mov	r1, r7
 800c4c0:	f007 fbb6 	bl	8013c30 <rcl_guard_condition_init_from_rmw>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	b368      	cbz	r0, 800c524 <rcl_node_init+0x268>
 800c4c8:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c4cc:	f1bb 0f00 	cmp.w	fp, #0
 800c4d0:	d024      	beq.n	800c51c <rcl_node_init+0x260>
 800c4d2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800c4d6:	b130      	cbz	r0, 800c4e6 <rcl_node_init+0x22a>
 800c4d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c4dc:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c4e0:	4798      	blx	r3
 800c4e2:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c4e6:	f8db 0020 	ldr.w	r0, [fp, #32]
 800c4ea:	b118      	cbz	r0, 800c4f4 <rcl_node_init+0x238>
 800c4ec:	f002 ff7e 	bl	800f3ec <rmw_destroy_node>
 800c4f0:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c4f4:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 800c4f8:	b150      	cbz	r0, 800c510 <rcl_node_init+0x254>
 800c4fa:	f007 fbed 	bl	8013cd8 <rcl_guard_condition_fini>
 800c4fe:	686a      	ldr	r2, [r5, #4]
 800c500:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c504:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800c506:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c50a:	4798      	blx	r3
 800c50c:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c510:	4658      	mov	r0, fp
 800c512:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c516:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c51a:	4798      	blx	r3
 800c51c:	2200      	movs	r2, #0
 800c51e:	2301      	movs	r3, #1
 800c520:	e9c5 2200 	strd	r2, r2, [r5]
 800c524:	b14c      	cbz	r4, 800c53a <rcl_node_init+0x27e>
 800c526:	4630      	mov	r0, r6
 800c528:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c52c:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c530:	9307      	str	r3, [sp, #28]
 800c532:	4790      	blx	r2
 800c534:	9b07      	ldr	r3, [sp, #28]
 800c536:	e000      	b.n	800c53a <rcl_node_init+0x27e>
 800c538:	230b      	movs	r3, #11
 800c53a:	4618      	mov	r0, r3
 800c53c:	b01b      	add	sp, #108	; 0x6c
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c542:	2365      	movs	r3, #101	; 0x65
 800c544:	e7f9      	b.n	800c53a <rcl_node_init+0x27e>
 800c546:	7833      	ldrb	r3, [r6, #0]
 800c548:	2b2f      	cmp	r3, #47	; 0x2f
 800c54a:	f43f af03 	beq.w	800c354 <rcl_node_init+0x98>
 800c54e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c556:	4920      	ldr	r1, [pc, #128]	; (800c5d8 <rcl_node_init+0x31c>)
 800c558:	e9cd 3200 	strd	r3, r2, [sp]
 800c55c:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800c560:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800c564:	f002 f96a 	bl	800e83c <rcutils_format_string_limit>
 800c568:	4606      	mov	r6, r0
 800c56a:	b1e8      	cbz	r0, 800c5a8 <rcl_node_init+0x2ec>
 800c56c:	2200      	movs	r2, #0
 800c56e:	a914      	add	r1, sp, #80	; 0x50
 800c570:	9214      	str	r2, [sp, #80]	; 0x50
 800c572:	f004 f989 	bl	8010888 <rmw_validate_namespace>
 800c576:	4603      	mov	r3, r0
 800c578:	2800      	cmp	r0, #0
 800c57a:	d1d4      	bne.n	800c526 <rcl_node_init+0x26a>
 800c57c:	465c      	mov	r4, fp
 800c57e:	e6f2      	b.n	800c366 <rcl_node_init+0xaa>
 800c580:	2364      	movs	r3, #100	; 0x64
 800c582:	4618      	mov	r0, r3
 800c584:	b01b      	add	sp, #108	; 0x6c
 800c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58a:	4618      	mov	r0, r3
 800c58c:	23ca      	movs	r3, #202	; 0xca
 800c58e:	9307      	str	r3, [sp, #28]
 800c590:	f004 f98c 	bl	80108ac <rmw_namespace_validation_result_string>
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	e7c5      	b.n	800c524 <rcl_node_init+0x268>
 800c598:	230a      	movs	r3, #10
 800c59a:	e7c3      	b.n	800c524 <rcl_node_init+0x268>
 800c59c:	23c9      	movs	r3, #201	; 0xc9
 800c59e:	9307      	str	r3, [sp, #28]
 800c5a0:	f004 f9e0 	bl	8010964 <rmw_node_name_validation_result_string>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	e7c8      	b.n	800c53a <rcl_node_init+0x27e>
 800c5a8:	230a      	movs	r3, #10
 800c5aa:	e7c6      	b.n	800c53a <rcl_node_init+0x27e>
 800c5ac:	a813      	add	r0, sp, #76	; 0x4c
 800c5ae:	f007 fab7 	bl	8013b20 <rcl_get_default_domain_id>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d188      	bne.n	800c4c8 <rcl_node_init+0x20c>
 800c5b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	d104      	bne.n	800c5c6 <rcl_node_init+0x30a>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c5c2:	9013      	str	r0, [sp, #76]	; 0x4c
 800c5c4:	e72c      	b.n	800c420 <rcl_node_init+0x164>
 800c5c6:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c5ca:	e729      	b.n	800c420 <rcl_node_init+0x164>
 800c5cc:	0801f934 	.word	0x0801f934
 800c5d0:	0801f8f0 	.word	0x0801f8f0
 800c5d4:	0801f8f8 	.word	0x0801f8f8
 800c5d8:	0801f938 	.word	0x0801f938

0800c5dc <rcl_node_is_valid>:
 800c5dc:	b130      	cbz	r0, 800c5ec <rcl_node_is_valid+0x10>
 800c5de:	6843      	ldr	r3, [r0, #4]
 800c5e0:	b123      	cbz	r3, 800c5ec <rcl_node_is_valid+0x10>
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	b113      	cbz	r3, 800c5ec <rcl_node_is_valid+0x10>
 800c5e6:	6800      	ldr	r0, [r0, #0]
 800c5e8:	f7ff b956 	b.w	800b898 <rcl_context_is_valid>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	4770      	bx	lr

0800c5f0 <rcl_node_get_name>:
 800c5f0:	b120      	cbz	r0, 800c5fc <rcl_node_get_name+0xc>
 800c5f2:	6840      	ldr	r0, [r0, #4]
 800c5f4:	b110      	cbz	r0, 800c5fc <rcl_node_get_name+0xc>
 800c5f6:	6a00      	ldr	r0, [r0, #32]
 800c5f8:	b100      	cbz	r0, 800c5fc <rcl_node_get_name+0xc>
 800c5fa:	6880      	ldr	r0, [r0, #8]
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop

0800c600 <rcl_node_get_namespace>:
 800c600:	b120      	cbz	r0, 800c60c <rcl_node_get_namespace+0xc>
 800c602:	6840      	ldr	r0, [r0, #4]
 800c604:	b110      	cbz	r0, 800c60c <rcl_node_get_namespace+0xc>
 800c606:	6a00      	ldr	r0, [r0, #32]
 800c608:	b100      	cbz	r0, 800c60c <rcl_node_get_namespace+0xc>
 800c60a:	68c0      	ldr	r0, [r0, #12]
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop

0800c610 <rcl_node_get_options>:
 800c610:	b128      	cbz	r0, 800c61e <rcl_node_get_options+0xe>
 800c612:	6840      	ldr	r0, [r0, #4]
 800c614:	b118      	cbz	r0, 800c61e <rcl_node_get_options+0xe>
 800c616:	6a03      	ldr	r3, [r0, #32]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bf08      	it	eq
 800c61c:	2000      	moveq	r0, #0
 800c61e:	4770      	bx	lr

0800c620 <rcl_node_get_rmw_handle>:
 800c620:	b110      	cbz	r0, 800c628 <rcl_node_get_rmw_handle+0x8>
 800c622:	6840      	ldr	r0, [r0, #4]
 800c624:	b100      	cbz	r0, 800c628 <rcl_node_get_rmw_handle+0x8>
 800c626:	6a00      	ldr	r0, [r0, #32]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop

0800c62c <rcl_node_get_default_options>:
 800c62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	b086      	sub	sp, #24
 800c632:	4c0b      	ldr	r4, [pc, #44]	; (800c660 <rcl_node_get_default_options+0x34>)
 800c634:	4680      	mov	r8, r0
 800c636:	466d      	mov	r5, sp
 800c638:	4668      	mov	r0, sp
 800c63a:	f001 ffa3 	bl	800e584 <rcutils_get_default_allocator>
 800c63e:	1d27      	adds	r7, r4, #4
 800c640:	4646      	mov	r6, r8
 800c642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c644:	682d      	ldr	r5, [r5, #0]
 800c646:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c64a:	603d      	str	r5, [r7, #0]
 800c64c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c64e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c652:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800c656:	4640      	mov	r0, r8
 800c658:	b006      	add	sp, #24
 800c65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65e:	bf00      	nop
 800c660:	200000e8 	.word	0x200000e8

0800c664 <rcl_node_options_copy>:
 800c664:	2800      	cmp	r0, #0
 800c666:	bf18      	it	ne
 800c668:	4288      	cmpne	r0, r1
 800c66a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66c:	d019      	beq.n	800c6a2 <rcl_node_options_copy+0x3e>
 800c66e:	fab1 f381 	clz	r3, r1
 800c672:	460c      	mov	r4, r1
 800c674:	095b      	lsrs	r3, r3, #5
 800c676:	b1a1      	cbz	r1, 800c6a2 <rcl_node_options_copy+0x3e>
 800c678:	4606      	mov	r6, r0
 800c67a:	460d      	mov	r5, r1
 800c67c:	461f      	mov	r7, r3
 800c67e:	f890 e018 	ldrb.w	lr, [r0, #24]
 800c682:	f856 3b04 	ldr.w	r3, [r6], #4
 800c686:	f890 c019 	ldrb.w	ip, [r0, #25]
 800c68a:	f845 3b04 	str.w	r3, [r5], #4
 800c68e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c692:	6833      	ldr	r3, [r6, #0]
 800c694:	4638      	mov	r0, r7
 800c696:	602b      	str	r3, [r5, #0]
 800c698:	f884 e018 	strb.w	lr, [r4, #24]
 800c69c:	f884 c019 	strb.w	ip, [r4, #25]
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a2:	270b      	movs	r7, #11
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6a8 <rcl_get_zero_initialized_publisher>:
 800c6a8:	4b01      	ldr	r3, [pc, #4]	; (800c6b0 <rcl_get_zero_initialized_publisher+0x8>)
 800c6aa:	6818      	ldr	r0, [r3, #0]
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	0801f944 	.word	0x0801f944

0800c6b4 <rcl_publisher_init>:
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	b091      	sub	sp, #68	; 0x44
 800c6ba:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c6bc:	2f00      	cmp	r7, #0
 800c6be:	d041      	beq.n	800c744 <rcl_publisher_init+0x90>
 800c6c0:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	460e      	mov	r6, r1
 800c6c8:	4690      	mov	r8, r2
 800c6ca:	4648      	mov	r0, r9
 800c6cc:	461d      	mov	r5, r3
 800c6ce:	f001 ff67 	bl	800e5a0 <rcutils_allocator_is_valid>
 800c6d2:	f080 0001 	eor.w	r0, r0, #1
 800c6d6:	f010 0fff 	tst.w	r0, #255	; 0xff
 800c6da:	d133      	bne.n	800c744 <rcl_publisher_init+0x90>
 800c6dc:	b394      	cbz	r4, 800c744 <rcl_publisher_init+0x90>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	b123      	cbz	r3, 800c6ec <rcl_publisher_init+0x38>
 800c6e2:	2564      	movs	r5, #100	; 0x64
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	b011      	add	sp, #68	; 0x44
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f7ff ff75 	bl	800c5dc <rcl_node_is_valid>
 800c6f2:	b360      	cbz	r0, 800c74e <rcl_publisher_init+0x9a>
 800c6f4:	f1b8 0f00 	cmp.w	r8, #0
 800c6f8:	d024      	beq.n	800c744 <rcl_publisher_init+0x90>
 800c6fa:	fab5 fa85 	clz	sl, r5
 800c6fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800c702:	b1fd      	cbz	r5, 800c744 <rcl_publisher_init+0x90>
 800c704:	46ce      	mov	lr, r9
 800c706:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800c70a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c70e:	f8de e000 	ldr.w	lr, [lr]
 800c712:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c716:	f8cc e000 	str.w	lr, [ip]
 800c71a:	f002 fa15 	bl	800eb48 <rcutils_get_zero_initialized_string_map>
 800c71e:	aa10      	add	r2, sp, #64	; 0x40
 800c720:	4684      	mov	ip, r0
 800c722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c724:	f8cd c020 	str.w	ip, [sp, #32]
 800c728:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800c72c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c730:	4651      	mov	r1, sl
 800c732:	a808      	add	r0, sp, #32
 800c734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c736:	f002 fa81 	bl	800ec3c <rcutils_string_map_init>
 800c73a:	b150      	cbz	r0, 800c752 <rcl_publisher_init+0x9e>
 800c73c:	280a      	cmp	r0, #10
 800c73e:	d013      	beq.n	800c768 <rcl_publisher_init+0xb4>
 800c740:	2501      	movs	r5, #1
 800c742:	e7cf      	b.n	800c6e4 <rcl_publisher_init+0x30>
 800c744:	250b      	movs	r5, #11
 800c746:	4628      	mov	r0, r5
 800c748:	b011      	add	sp, #68	; 0x44
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	25c8      	movs	r5, #200	; 0xc8
 800c750:	e7c8      	b.n	800c6e4 <rcl_publisher_init+0x30>
 800c752:	a808      	add	r0, sp, #32
 800c754:	f7ff fb08 	bl	800bd68 <rcl_get_default_topic_name_substitutions>
 800c758:	4682      	mov	sl, r0
 800c75a:	b138      	cbz	r0, 800c76c <rcl_publisher_init+0xb8>
 800c75c:	a808      	add	r0, sp, #32
 800c75e:	f002 faab 	bl	800ecb8 <rcutils_string_map_fini>
 800c762:	f1ba 0f0a 	cmp.w	sl, #10
 800c766:	d1eb      	bne.n	800c740 <rcl_publisher_init+0x8c>
 800c768:	250a      	movs	r5, #10
 800c76a:	e7bb      	b.n	800c6e4 <rcl_publisher_init+0x30>
 800c76c:	4630      	mov	r0, r6
 800c76e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c772:	f7ff ff3d 	bl	800c5f0 <rcl_node_get_name>
 800c776:	4682      	mov	sl, r0
 800c778:	4630      	mov	r0, r6
 800c77a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800c77e:	f7ff ff3f 	bl	800c600 <rcl_node_get_namespace>
 800c782:	4686      	mov	lr, r0
 800c784:	46ec      	mov	ip, sp
 800c786:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c78a:	f8d9 9000 	ldr.w	r9, [r9]
 800c78e:	f8cd b014 	str.w	fp, [sp, #20]
 800c792:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c796:	4628      	mov	r0, r5
 800c798:	4651      	mov	r1, sl
 800c79a:	4672      	mov	r2, lr
 800c79c:	ab08      	add	r3, sp, #32
 800c79e:	f8cc 9000 	str.w	r9, [ip]
 800c7a2:	f7ff f985 	bl	800bab0 <rcl_expand_topic_name>
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	a808      	add	r0, sp, #32
 800c7aa:	f002 fa85 	bl	800ecb8 <rcutils_string_map_fini>
 800c7ae:	b920      	cbnz	r0, 800c7ba <rcl_publisher_init+0x106>
 800c7b0:	b15d      	cbz	r5, 800c7ca <rcl_publisher_init+0x116>
 800c7b2:	2d67      	cmp	r5, #103	; 0x67
 800c7b4:	d05f      	beq.n	800c876 <rcl_publisher_init+0x1c2>
 800c7b6:	2d69      	cmp	r5, #105	; 0x69
 800c7b8:	d05d      	beq.n	800c876 <rcl_publisher_init+0x1c2>
 800c7ba:	2501      	movs	r5, #1
 800c7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d090      	beq.n	800c6e4 <rcl_publisher_init+0x30>
 800c7c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c7c6:	4798      	blx	r3
 800c7c8:	e78c      	b.n	800c6e4 <rcl_publisher_init+0x30>
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f7ff ff20 	bl	800c610 <rcl_node_get_options>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0f2      	beq.n	800c7ba <rcl_publisher_init+0x106>
 800c7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7d6:	f7f3 ff53 	bl	8000680 <strlen>
 800c7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c7de:	3001      	adds	r0, #1
 800c7e0:	4798      	blx	r3
 800c7e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7e4:	4681      	mov	r9, r0
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	9107      	str	r1, [sp, #28]
 800c7ea:	f7f3 ff49 	bl	8000680 <strlen>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	9907      	ldr	r1, [sp, #28]
 800c7f2:	4648      	mov	r0, r9
 800c7f4:	3201      	adds	r2, #1
 800c7f6:	f7f3 fd23 	bl	8000240 <memcpy>
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	a90a      	add	r1, sp, #40	; 0x28
 800c800:	f003 ff6a 	bl	80106d8 <rmw_validate_full_topic_name>
 800c804:	2800      	cmp	r0, #0
 800c806:	d138      	bne.n	800c87a <rcl_publisher_init+0x1c6>
 800c808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d137      	bne.n	800c87e <rcl_publisher_init+0x1ca>
 800c80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c810:	20c0      	movs	r0, #192	; 0xc0
 800c812:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c814:	4798      	blx	r3
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	b398      	cbz	r0, 800c882 <rcl_publisher_init+0x1ce>
 800c81a:	4630      	mov	r0, r6
 800c81c:	f7ff ff00 	bl	800c620 <rcl_node_get_rmw_handle>
 800c820:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800c824:	4641      	mov	r1, r8
 800c826:	463b      	mov	r3, r7
 800c828:	9200      	str	r2, [sp, #0]
 800c82a:	464a      	mov	r2, r9
 800c82c:	6825      	ldr	r5, [r4, #0]
 800c82e:	f002 febb 	bl	800f5a8 <rmw_create_publisher>
 800c832:	6821      	ldr	r1, [r4, #0]
 800c834:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800c838:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800c83c:	b380      	cbz	r0, 800c8a0 <rcl_publisher_init+0x1ec>
 800c83e:	3168      	adds	r1, #104	; 0x68
 800c840:	f002 ffb2 	bl	800f7a8 <rmw_publisher_get_actual_qos>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	4605      	mov	r5, r0
 800c848:	b9e8      	cbnz	r0, 800c886 <rcl_publisher_init+0x1d2>
 800c84a:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 800c84e:	2268      	movs	r2, #104	; 0x68
 800c850:	4639      	mov	r1, r7
 800c852:	4618      	mov	r0, r3
 800c854:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0
 800c858:	f7f3 fcf2 	bl	8000240 <memcpy>
 800c85c:	6832      	ldr	r2, [r6, #0]
 800c85e:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800c862:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c864:	b110      	cbz	r0, 800c86c <rcl_publisher_init+0x1b8>
 800c866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c868:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c86a:	4798      	blx	r3
 800c86c:	4648      	mov	r0, r9
 800c86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c870:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c872:	4798      	blx	r3
 800c874:	e736      	b.n	800c6e4 <rcl_publisher_init+0x30>
 800c876:	2567      	movs	r5, #103	; 0x67
 800c878:	e7a0      	b.n	800c7bc <rcl_publisher_init+0x108>
 800c87a:	2501      	movs	r5, #1
 800c87c:	e7f1      	b.n	800c862 <rcl_publisher_init+0x1ae>
 800c87e:	2567      	movs	r5, #103	; 0x67
 800c880:	e7ef      	b.n	800c862 <rcl_publisher_init+0x1ae>
 800c882:	250a      	movs	r5, #10
 800c884:	e7ed      	b.n	800c862 <rcl_publisher_init+0x1ae>
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0f7      	beq.n	800c87a <rcl_publisher_init+0x1c6>
 800c88a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c88e:	b13b      	cbz	r3, 800c8a0 <rcl_publisher_init+0x1ec>
 800c890:	4630      	mov	r0, r6
 800c892:	f7ff fec5 	bl	800c620 <rcl_node_get_rmw_handle>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800c89c:	f002 ff86 	bl	800f7ac <rmw_destroy_publisher>
 800c8a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a2:	2501      	movs	r5, #1
 800c8a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c8a6:	6820      	ldr	r0, [r4, #0]
 800c8a8:	4798      	blx	r3
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	e7d8      	b.n	800c862 <rcl_publisher_init+0x1ae>

0800c8b0 <rcl_publisher_get_default_options>:
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	4f0e      	ldr	r7, [pc, #56]	; (800c8ec <rcl_publisher_get_default_options+0x3c>)
 800c8b4:	b087      	sub	sp, #28
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	2250      	movs	r2, #80	; 0x50
 800c8ba:	490d      	ldr	r1, [pc, #52]	; (800c8f0 <rcl_publisher_get_default_options+0x40>)
 800c8bc:	4638      	mov	r0, r7
 800c8be:	466c      	mov	r4, sp
 800c8c0:	f7f3 fcbe 	bl	8000240 <memcpy>
 800c8c4:	4668      	mov	r0, sp
 800c8c6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800c8ca:	f001 fe5b 	bl	800e584 <rcutils_get_default_allocator>
 800c8ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8d0:	6824      	ldr	r4, [r4, #0]
 800c8d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8d4:	602c      	str	r4, [r5, #0]
 800c8d6:	f003 fee3 	bl	80106a0 <rmw_get_default_publisher_options>
 800c8da:	4639      	mov	r1, r7
 800c8dc:	6678      	str	r0, [r7, #100]	; 0x64
 800c8de:	2268      	movs	r2, #104	; 0x68
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f7f3 fcad 	bl	8000240 <memcpy>
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	b007      	add	sp, #28
 800c8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ec:	20009930 	.word	0x20009930
 800c8f0:	0801f948 	.word	0x0801f948

0800c8f4 <rcl_publish>:
 800c8f4:	b1f8      	cbz	r0, 800c936 <rcl_publish+0x42>
 800c8f6:	6803      	ldr	r3, [r0, #0]
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	b1b3      	cbz	r3, 800c92c <rcl_publish+0x38>
 800c8fe:	4616      	mov	r6, r2
 800c900:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800c904:	b192      	cbz	r2, 800c92c <rcl_publish+0x38>
 800c906:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800c90a:	460d      	mov	r5, r1
 800c90c:	f7fe ffc4 	bl	800b898 <rcl_context_is_valid>
 800c910:	b160      	cbz	r0, 800c92c <rcl_publish+0x38>
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800c918:	b140      	cbz	r0, 800c92c <rcl_publish+0x38>
 800c91a:	b155      	cbz	r5, 800c932 <rcl_publish+0x3e>
 800c91c:	4632      	mov	r2, r6
 800c91e:	4629      	mov	r1, r5
 800c920:	f002 fde0 	bl	800f4e4 <rmw_publish>
 800c924:	3800      	subs	r0, #0
 800c926:	bf18      	it	ne
 800c928:	2001      	movne	r0, #1
 800c92a:	bd70      	pop	{r4, r5, r6, pc}
 800c92c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c930:	bd70      	pop	{r4, r5, r6, pc}
 800c932:	200b      	movs	r0, #11
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c93a:	4770      	bx	lr

0800c93c <exact_match_lookup>:
 800c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93e:	f102 0608 	add.w	r6, r2, #8
 800c942:	460b      	mov	r3, r1
 800c944:	b085      	sub	sp, #20
 800c946:	4614      	mov	r4, r2
 800c948:	4607      	mov	r7, r0
 800c94a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c94e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c952:	4618      	mov	r0, r3
 800c954:	4918      	ldr	r1, [pc, #96]	; (800c9b8 <exact_match_lookup+0x7c>)
 800c956:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c95a:	f001 ff37 	bl	800e7cc <rcutils_join_path>
 800c95e:	783b      	ldrb	r3, [r7, #0]
 800c960:	4605      	mov	r5, r0
 800c962:	2b2f      	cmp	r3, #47	; 0x2f
 800c964:	d022      	beq.n	800c9ac <exact_match_lookup+0x70>
 800c966:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800c96a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c96e:	1c78      	adds	r0, r7, #1
 800c970:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c974:	f001 ff50 	bl	800e818 <rcutils_to_native_path>
 800c978:	4603      	mov	r3, r0
 800c97a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c97e:	461e      	mov	r6, r3
 800c980:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c984:	4619      	mov	r1, r3
 800c986:	4628      	mov	r0, r5
 800c988:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c98c:	f001 ff1e 	bl	800e7cc <rcutils_join_path>
 800c990:	4603      	mov	r3, r0
 800c992:	4630      	mov	r0, r6
 800c994:	6862      	ldr	r2, [r4, #4]
 800c996:	461e      	mov	r6, r3
 800c998:	6921      	ldr	r1, [r4, #16]
 800c99a:	4790      	blx	r2
 800c99c:	4628      	mov	r0, r5
 800c99e:	4635      	mov	r5, r6
 800c9a0:	6863      	ldr	r3, [r4, #4]
 800c9a2:	6921      	ldr	r1, [r4, #16]
 800c9a4:	4798      	blx	r3
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	b005      	add	sp, #20
 800c9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ac:	787b      	ldrb	r3, [r7, #1]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1d9      	bne.n	800c966 <exact_match_lookup+0x2a>
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	b005      	add	sp, #20
 800c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b8:	0801f9d4 	.word	0x0801f9d4

0800c9bc <rcl_get_secure_root>:
 800c9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9c0:	b085      	sub	sp, #20
 800c9c2:	b168      	cbz	r0, 800c9e0 <rcl_get_secure_root+0x24>
 800c9c4:	4607      	mov	r7, r0
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	f001 fde9 	bl	800e5a0 <rcutils_allocator_is_valid>
 800c9ce:	b138      	cbz	r0, 800c9e0 <rcl_get_secure_root+0x24>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	482d      	ldr	r0, [pc, #180]	; (800ca88 <rcl_get_secure_root+0xcc>)
 800c9d4:	a903      	add	r1, sp, #12
 800c9d6:	9303      	str	r3, [sp, #12]
 800c9d8:	f001 ff6a 	bl	800e8b0 <rcutils_get_env>
 800c9dc:	4605      	mov	r5, r0
 800c9de:	b120      	cbz	r0, 800c9ea <rcl_get_secure_root+0x2e>
 800c9e0:	2500      	movs	r5, #0
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	b005      	add	sp, #20
 800c9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9ea:	9b03      	ldr	r3, [sp, #12]
 800c9ec:	781a      	ldrb	r2, [r3, #0]
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	d0f6      	beq.n	800c9e0 <rcl_get_secure_root+0x24>
 800c9f2:	f104 090c 	add.w	r9, r4, #12
 800c9f6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c9fa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ca04:	f002 f862 	bl	800eacc <rcutils_strdup>
 800ca08:	4680      	mov	r8, r0
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d0e8      	beq.n	800c9e0 <rcl_get_secure_root+0x24>
 800ca0e:	a903      	add	r1, sp, #12
 800ca10:	481e      	ldr	r0, [pc, #120]	; (800ca8c <rcl_get_secure_root+0xd0>)
 800ca12:	9503      	str	r5, [sp, #12]
 800ca14:	f001 ff4c 	bl	800e8b0 <rcutils_get_env>
 800ca18:	b160      	cbz	r0, 800ca34 <rcl_get_secure_root+0x78>
 800ca1a:	2600      	movs	r6, #0
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	6863      	ldr	r3, [r4, #4]
 800ca20:	6921      	ldr	r1, [r4, #16]
 800ca22:	4798      	blx	r3
 800ca24:	4640      	mov	r0, r8
 800ca26:	6863      	ldr	r3, [r4, #4]
 800ca28:	6921      	ldr	r1, [r4, #16]
 800ca2a:	4798      	blx	r3
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	b005      	add	sp, #20
 800ca30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca34:	9b03      	ldr	r3, [sp, #12]
 800ca36:	781e      	ldrb	r6, [r3, #0]
 800ca38:	b1f6      	cbz	r6, 800ca78 <rcl_get_secure_root+0xbc>
 800ca3a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ca3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca42:	4618      	mov	r0, r3
 800ca44:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ca48:	f002 f840 	bl	800eacc <rcutils_strdup>
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d0e3      	beq.n	800ca1a <rcl_get_secure_root+0x5e>
 800ca52:	4622      	mov	r2, r4
 800ca54:	4641      	mov	r1, r8
 800ca56:	f7ff ff71 	bl	800c93c <exact_match_lookup>
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	2d00      	cmp	r5, #0
 800ca5e:	d0dd      	beq.n	800ca1c <rcl_get_secure_root+0x60>
 800ca60:	4628      	mov	r0, r5
 800ca62:	f001 feb1 	bl	800e7c8 <rcutils_is_directory>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d1d7      	bne.n	800ca1c <rcl_get_secure_root+0x60>
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	6921      	ldr	r1, [r4, #16]
 800ca70:	461d      	mov	r5, r3
 800ca72:	6863      	ldr	r3, [r4, #4]
 800ca74:	4798      	blx	r3
 800ca76:	e7d1      	b.n	800ca1c <rcl_get_secure_root+0x60>
 800ca78:	4638      	mov	r0, r7
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	4641      	mov	r1, r8
 800ca7e:	f7ff ff5d 	bl	800c93c <exact_match_lookup>
 800ca82:	4605      	mov	r5, r0
 800ca84:	e7ea      	b.n	800ca5c <rcl_get_secure_root+0xa0>
 800ca86:	bf00      	nop
 800ca88:	0801f9e0 	.word	0x0801f9e0
 800ca8c:	0801f9f8 	.word	0x0801f9f8

0800ca90 <rcl_get_security_options_from_environment>:
 800ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	2300      	movs	r3, #0
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	4821      	ldr	r0, [pc, #132]	; (800cb24 <rcl_get_security_options_from_environment+0x94>)
 800ca9e:	a901      	add	r1, sp, #4
 800caa0:	4690      	mov	r8, r2
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	f001 ff04 	bl	800e8b0 <rcutils_get_env>
 800caa8:	b120      	cbz	r0, 800cab4 <rcl_get_security_options_from_environment+0x24>
 800caaa:	2501      	movs	r5, #1
 800caac:	4628      	mov	r0, r5
 800caae:	b002      	add	sp, #8
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	4604      	mov	r4, r0
 800cab6:	491c      	ldr	r1, [pc, #112]	; (800cb28 <rcl_get_security_options_from_environment+0x98>)
 800cab8:	9801      	ldr	r0, [sp, #4]
 800caba:	f7f3 fc65 	bl	8000388 <strcmp>
 800cabe:	4605      	mov	r5, r0
 800cac0:	b9f0      	cbnz	r0, 800cb00 <rcl_get_security_options_from_environment+0x70>
 800cac2:	9001      	str	r0, [sp, #4]
 800cac4:	f1b8 0f00 	cmp.w	r8, #0
 800cac8:	d021      	beq.n	800cb0e <rcl_get_security_options_from_environment+0x7e>
 800caca:	a901      	add	r1, sp, #4
 800cacc:	4817      	ldr	r0, [pc, #92]	; (800cb2c <rcl_get_security_options_from_environment+0x9c>)
 800cace:	f001 feef 	bl	800e8b0 <rcutils_get_env>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d1e9      	bne.n	800caaa <rcl_get_security_options_from_environment+0x1a>
 800cad6:	4916      	ldr	r1, [pc, #88]	; (800cb30 <rcl_get_security_options_from_environment+0xa0>)
 800cad8:	9801      	ldr	r0, [sp, #4]
 800cada:	f7f3 fc55 	bl	8000388 <strcmp>
 800cade:	4603      	mov	r3, r0
 800cae0:	4639      	mov	r1, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	fab3 f383 	clz	r3, r3
 800cae8:	095b      	lsrs	r3, r3, #5
 800caea:	f888 3000 	strb.w	r3, [r8]
 800caee:	f7ff ff65 	bl	800c9bc <rcl_get_secure_root>
 800caf2:	b170      	cbz	r0, 800cb12 <rcl_get_security_options_from_environment+0x82>
 800caf4:	f8c8 0004 	str.w	r0, [r8, #4]
 800caf8:	4628      	mov	r0, r5
 800cafa:	b002      	add	sp, #8
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	4625      	mov	r5, r4
 800cb02:	f888 4000 	strb.w	r4, [r8]
 800cb06:	4628      	mov	r0, r5
 800cb08:	b002      	add	sp, #8
 800cb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0e:	250b      	movs	r5, #11
 800cb10:	e7cc      	b.n	800caac <rcl_get_security_options_from_environment+0x1c>
 800cb12:	f898 5000 	ldrb.w	r5, [r8]
 800cb16:	f1a5 0501 	sub.w	r5, r5, #1
 800cb1a:	fab5 f585 	clz	r5, r5
 800cb1e:	096d      	lsrs	r5, r5, #5
 800cb20:	e7c4      	b.n	800caac <rcl_get_security_options_from_environment+0x1c>
 800cb22:	bf00      	nop
 800cb24:	0801f998 	.word	0x0801f998
 800cb28:	0801f9ac 	.word	0x0801f9ac
 800cb2c:	0801f9b4 	.word	0x0801f9b4
 800cb30:	0801f9cc 	.word	0x0801f9cc

0800cb34 <rcl_service_get_rmw_handle>:
 800cb34:	b110      	cbz	r0, 800cb3c <rcl_service_get_rmw_handle+0x8>
 800cb36:	6800      	ldr	r0, [r0, #0]
 800cb38:	b100      	cbz	r0, 800cb3c <rcl_service_get_rmw_handle+0x8>
 800cb3a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop

0800cb40 <rcl_take_request>:
 800cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb42:	460e      	mov	r6, r1
 800cb44:	b08d      	sub	sp, #52	; 0x34
 800cb46:	460c      	mov	r4, r1
 800cb48:	4694      	mov	ip, r2
 800cb4a:	ad06      	add	r5, sp, #24
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cb50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb52:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cb56:	e885 0003 	stmia.w	r5, {r0, r1}
 800cb5a:	b1f7      	cbz	r7, 800cb9a <rcl_take_request+0x5a>
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	b1e3      	cbz	r3, 800cb9a <rcl_take_request+0x5a>
 800cb60:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800cb62:	b1d0      	cbz	r0, 800cb9a <rcl_take_request+0x5a>
 800cb64:	f1bc 0f00 	cmp.w	ip, #0
 800cb68:	d022      	beq.n	800cbb0 <rcl_take_request+0x70>
 800cb6a:	2500      	movs	r5, #0
 800cb6c:	4662      	mov	r2, ip
 800cb6e:	f10d 0307 	add.w	r3, sp, #7
 800cb72:	a902      	add	r1, sp, #8
 800cb74:	f88d 5007 	strb.w	r5, [sp, #7]
 800cb78:	f002 fe60 	bl	800f83c <rmw_take_request>
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	b178      	cbz	r0, 800cba0 <rcl_take_request+0x60>
 800cb80:	280a      	cmp	r0, #10
 800cb82:	bf18      	it	ne
 800cb84:	2601      	movne	r6, #1
 800cb86:	ad06      	add	r5, sp, #24
 800cb88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb90:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb94:	4630      	mov	r0, r6
 800cb96:	b00d      	add	sp, #52	; 0x34
 800cb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb9a:	f44f 7616 	mov.w	r6, #600	; 0x258
 800cb9e:	e7f2      	b.n	800cb86 <rcl_take_request+0x46>
 800cba0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cba4:	f240 2359 	movw	r3, #601	; 0x259
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	bf08      	it	eq
 800cbac:	461e      	moveq	r6, r3
 800cbae:	e7ea      	b.n	800cb86 <rcl_take_request+0x46>
 800cbb0:	260b      	movs	r6, #11
 800cbb2:	e7e8      	b.n	800cb86 <rcl_take_request+0x46>

0800cbb4 <rcl_send_response>:
 800cbb4:	b160      	cbz	r0, 800cbd0 <rcl_send_response+0x1c>
 800cbb6:	6800      	ldr	r0, [r0, #0]
 800cbb8:	b150      	cbz	r0, 800cbd0 <rcl_send_response+0x1c>
 800cbba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800cbbc:	b140      	cbz	r0, 800cbd0 <rcl_send_response+0x1c>
 800cbbe:	b161      	cbz	r1, 800cbda <rcl_send_response+0x26>
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	b142      	cbz	r2, 800cbd6 <rcl_send_response+0x22>
 800cbc4:	f002 fe92 	bl	800f8ec <rmw_send_response>
 800cbc8:	3800      	subs	r0, #0
 800cbca:	bf18      	it	ne
 800cbcc:	2001      	movne	r0, #1
 800cbce:	bd10      	pop	{r4, pc}
 800cbd0:	f44f 7016 	mov.w	r0, #600	; 0x258
 800cbd4:	4770      	bx	lr
 800cbd6:	200b      	movs	r0, #11
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	200b      	movs	r0, #11
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop

0800cbe0 <rcl_get_zero_initialized_subscription>:
 800cbe0:	4b01      	ldr	r3, [pc, #4]	; (800cbe8 <rcl_get_zero_initialized_subscription+0x8>)
 800cbe2:	6818      	ldr	r0, [r3, #0]
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	0801fa18 	.word	0x0801fa18

0800cbec <rcl_subscription_init>:
 800cbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf0:	b091      	sub	sp, #68	; 0x44
 800cbf2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cbf4:	b307      	cbz	r7, 800cc38 <rcl_subscription_init+0x4c>
 800cbf6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	4690      	mov	r8, r2
 800cc00:	4648      	mov	r0, r9
 800cc02:	461e      	mov	r6, r3
 800cc04:	f001 fccc 	bl	800e5a0 <rcutils_allocator_is_valid>
 800cc08:	f080 0001 	eor.w	r0, r0, #1
 800cc0c:	f010 0fff 	tst.w	r0, #255	; 0xff
 800cc10:	d112      	bne.n	800cc38 <rcl_subscription_init+0x4c>
 800cc12:	b18c      	cbz	r4, 800cc38 <rcl_subscription_init+0x4c>
 800cc14:	4628      	mov	r0, r5
 800cc16:	f7ff fce1 	bl	800c5dc <rcl_node_is_valid>
 800cc1a:	b390      	cbz	r0, 800cc82 <rcl_subscription_init+0x96>
 800cc1c:	f1b8 0f00 	cmp.w	r8, #0
 800cc20:	d00a      	beq.n	800cc38 <rcl_subscription_init+0x4c>
 800cc22:	b14e      	cbz	r6, 800cc38 <rcl_subscription_init+0x4c>
 800cc24:	f8d4 a000 	ldr.w	sl, [r4]
 800cc28:	f1ba 0f00 	cmp.w	sl, #0
 800cc2c:	d009      	beq.n	800cc42 <rcl_subscription_init+0x56>
 800cc2e:	2664      	movs	r6, #100	; 0x64
 800cc30:	4630      	mov	r0, r6
 800cc32:	b011      	add	sp, #68	; 0x44
 800cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc38:	260b      	movs	r6, #11
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	b011      	add	sp, #68	; 0x44
 800cc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc42:	46ce      	mov	lr, r9
 800cc44:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800cc48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc4c:	f8de e000 	ldr.w	lr, [lr]
 800cc50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc54:	f8cc e000 	str.w	lr, [ip]
 800cc58:	f001 ff76 	bl	800eb48 <rcutils_get_zero_initialized_string_map>
 800cc5c:	aa10      	add	r2, sp, #64	; 0x40
 800cc5e:	4684      	mov	ip, r0
 800cc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc62:	f8cd c020 	str.w	ip, [sp, #32]
 800cc66:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800cc6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cc6e:	4651      	mov	r1, sl
 800cc70:	a808      	add	r0, sp, #32
 800cc72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc74:	f001 ffe2 	bl	800ec3c <rcutils_string_map_init>
 800cc78:	b140      	cbz	r0, 800cc8c <rcl_subscription_init+0xa0>
 800cc7a:	280a      	cmp	r0, #10
 800cc7c:	d011      	beq.n	800cca2 <rcl_subscription_init+0xb6>
 800cc7e:	2601      	movs	r6, #1
 800cc80:	e7db      	b.n	800cc3a <rcl_subscription_init+0x4e>
 800cc82:	26c8      	movs	r6, #200	; 0xc8
 800cc84:	4630      	mov	r0, r6
 800cc86:	b011      	add	sp, #68	; 0x44
 800cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8c:	a808      	add	r0, sp, #32
 800cc8e:	f7ff f86b 	bl	800bd68 <rcl_get_default_topic_name_substitutions>
 800cc92:	4682      	mov	sl, r0
 800cc94:	b138      	cbz	r0, 800cca6 <rcl_subscription_init+0xba>
 800cc96:	a808      	add	r0, sp, #32
 800cc98:	f002 f80e 	bl	800ecb8 <rcutils_string_map_fini>
 800cc9c:	f1ba 0f0a 	cmp.w	sl, #10
 800cca0:	d1ed      	bne.n	800cc7e <rcl_subscription_init+0x92>
 800cca2:	260a      	movs	r6, #10
 800cca4:	e7c9      	b.n	800cc3a <rcl_subscription_init+0x4e>
 800cca6:	4628      	mov	r0, r5
 800cca8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ccac:	f7ff fca0 	bl	800c5f0 <rcl_node_get_name>
 800ccb0:	4682      	mov	sl, r0
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ccb8:	f7ff fca2 	bl	800c600 <rcl_node_get_namespace>
 800ccbc:	4686      	mov	lr, r0
 800ccbe:	46ec      	mov	ip, sp
 800ccc0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ccc4:	f8d9 9000 	ldr.w	r9, [r9]
 800ccc8:	f8cd b014 	str.w	fp, [sp, #20]
 800cccc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	4651      	mov	r1, sl
 800ccd4:	4672      	mov	r2, lr
 800ccd6:	ab08      	add	r3, sp, #32
 800ccd8:	f8cc 9000 	str.w	r9, [ip]
 800ccdc:	f7fe fee8 	bl	800bab0 <rcl_expand_topic_name>
 800cce0:	4606      	mov	r6, r0
 800cce2:	a808      	add	r0, sp, #32
 800cce4:	f001 ffe8 	bl	800ecb8 <rcutils_string_map_fini>
 800cce8:	b920      	cbnz	r0, 800ccf4 <rcl_subscription_init+0x108>
 800ccea:	b15e      	cbz	r6, 800cd04 <rcl_subscription_init+0x118>
 800ccec:	2e67      	cmp	r6, #103	; 0x67
 800ccee:	d05b      	beq.n	800cda8 <rcl_subscription_init+0x1bc>
 800ccf0:	2e69      	cmp	r6, #105	; 0x69
 800ccf2:	d059      	beq.n	800cda8 <rcl_subscription_init+0x1bc>
 800ccf4:	2601      	movs	r6, #1
 800ccf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d09e      	beq.n	800cc3a <rcl_subscription_init+0x4e>
 800ccfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd00:	4798      	blx	r3
 800cd02:	e79a      	b.n	800cc3a <rcl_subscription_init+0x4e>
 800cd04:	4628      	mov	r0, r5
 800cd06:	f7ff fc83 	bl	800c610 <rcl_node_get_options>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d0f2      	beq.n	800ccf4 <rcl_subscription_init+0x108>
 800cd0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd10:	f7f3 fcb6 	bl	8000680 <strlen>
 800cd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd18:	3001      	adds	r0, #1
 800cd1a:	4798      	blx	r3
 800cd1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd1e:	4681      	mov	r9, r0
 800cd20:	4608      	mov	r0, r1
 800cd22:	9107      	str	r1, [sp, #28]
 800cd24:	f7f3 fcac 	bl	8000680 <strlen>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	9907      	ldr	r1, [sp, #28]
 800cd2c:	4648      	mov	r0, r9
 800cd2e:	3201      	adds	r2, #1
 800cd30:	f7f3 fa86 	bl	8000240 <memcpy>
 800cd34:	4632      	mov	r2, r6
 800cd36:	4648      	mov	r0, r9
 800cd38:	a90a      	add	r1, sp, #40	; 0x28
 800cd3a:	f003 fccd 	bl	80106d8 <rmw_validate_full_topic_name>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d134      	bne.n	800cdac <rcl_subscription_init+0x1c0>
 800cd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d133      	bne.n	800cdb0 <rcl_subscription_init+0x1c4>
 800cd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4a:	20c8      	movs	r0, #200	; 0xc8
 800cd4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd4e:	4798      	blx	r3
 800cd50:	6020      	str	r0, [r4, #0]
 800cd52:	b378      	cbz	r0, 800cdb4 <rcl_subscription_init+0x1c8>
 800cd54:	4628      	mov	r0, r5
 800cd56:	f7ff fc63 	bl	800c620 <rcl_node_get_rmw_handle>
 800cd5a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cd5e:	4641      	mov	r1, r8
 800cd60:	463b      	mov	r3, r7
 800cd62:	9200      	str	r2, [sp, #0]
 800cd64:	464a      	mov	r2, r9
 800cd66:	6826      	ldr	r6, [r4, #0]
 800cd68:	f002 fe7c 	bl	800fa64 <rmw_create_subscription>
 800cd6c:	6821      	ldr	r1, [r4, #0]
 800cd6e:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
 800cd72:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800cd76:	b368      	cbz	r0, 800cdd4 <rcl_subscription_init+0x1e8>
 800cd78:	3170      	adds	r1, #112	; 0x70
 800cd7a:	f002 ff75 	bl	800fc68 <rmw_subscription_get_actual_qos>
 800cd7e:	4606      	mov	r6, r0
 800cd80:	b9d0      	cbnz	r0, 800cdb8 <rcl_subscription_init+0x1cc>
 800cd82:	6820      	ldr	r0, [r4, #0]
 800cd84:	2270      	movs	r2, #112	; 0x70
 800cd86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800cd90:	f7f3 fa56 	bl	8000240 <memcpy>
 800cd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd96:	b110      	cbz	r0, 800cd9e <rcl_subscription_init+0x1b2>
 800cd98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd9c:	4798      	blx	r3
 800cd9e:	4648      	mov	r0, r9
 800cda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cda2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cda4:	4798      	blx	r3
 800cda6:	e748      	b.n	800cc3a <rcl_subscription_init+0x4e>
 800cda8:	2667      	movs	r6, #103	; 0x67
 800cdaa:	e7a4      	b.n	800ccf6 <rcl_subscription_init+0x10a>
 800cdac:	2601      	movs	r6, #1
 800cdae:	e7f1      	b.n	800cd94 <rcl_subscription_init+0x1a8>
 800cdb0:	2667      	movs	r6, #103	; 0x67
 800cdb2:	e7ef      	b.n	800cd94 <rcl_subscription_init+0x1a8>
 800cdb4:	260a      	movs	r6, #10
 800cdb6:	e7ed      	b.n	800cd94 <rcl_subscription_init+0x1a8>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0f6      	beq.n	800cdac <rcl_subscription_init+0x1c0>
 800cdbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cdc2:	b13b      	cbz	r3, 800cdd4 <rcl_subscription_init+0x1e8>
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	f7ff fc2b 	bl	800c620 <rcl_node_get_rmw_handle>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800cdd0:	f002 ff4c 	bl	800fc6c <rmw_destroy_subscription>
 800cdd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdd6:	2601      	movs	r6, #1
 800cdd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdda:	6820      	ldr	r0, [r4, #0]
 800cddc:	4798      	blx	r3
 800cdde:	2300      	movs	r3, #0
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	e7d7      	b.n	800cd94 <rcl_subscription_init+0x1a8>

0800cde4 <rcl_subscription_get_default_options>:
 800cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde8:	4f12      	ldr	r7, [pc, #72]	; (800ce34 <rcl_subscription_get_default_options+0x50>)
 800cdea:	b088      	sub	sp, #32
 800cdec:	4606      	mov	r6, r0
 800cdee:	2250      	movs	r2, #80	; 0x50
 800cdf0:	4911      	ldr	r1, [pc, #68]	; (800ce38 <rcl_subscription_get_default_options+0x54>)
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	ac02      	add	r4, sp, #8
 800cdf6:	f7f3 fa23 	bl	8000240 <memcpy>
 800cdfa:	a802      	add	r0, sp, #8
 800cdfc:	46e8      	mov	r8, sp
 800cdfe:	f001 fbc1 	bl	800e584 <rcutils_get_default_allocator>
 800ce02:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ce06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce08:	6824      	ldr	r4, [r4, #0]
 800ce0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	602c      	str	r4, [r5, #0]
 800ce10:	f003 fc4c 	bl	80106ac <rmw_get_default_subscription_options>
 800ce14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ce18:	2270      	movs	r2, #112	; 0x70
 800ce1a:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ce1e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce22:	4639      	mov	r1, r7
 800ce24:	4630      	mov	r0, r6
 800ce26:	f7f3 fa0b 	bl	8000240 <memcpy>
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	b008      	add	sp, #32
 800ce2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce32:	bf00      	nop
 800ce34:	20009998 	.word	0x20009998
 800ce38:	0801fa20 	.word	0x0801fa20

0800ce3c <rcl_take>:
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d03f      	beq.n	800cec0 <rcl_take+0x84>
 800ce40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce44:	4617      	mov	r7, r2
 800ce46:	6802      	ldr	r2, [r0, #0]
 800ce48:	b09d      	sub	sp, #116	; 0x74
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	b382      	cbz	r2, 800ceb0 <rcl_take+0x74>
 800ce4e:	4699      	mov	r9, r3
 800ce50:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800ce54:	b363      	cbz	r3, 800ceb0 <rcl_take+0x74>
 800ce56:	4688      	mov	r8, r1
 800ce58:	b381      	cbz	r1, 800cebc <rcl_take+0x80>
 800ce5a:	2f00      	cmp	r7, #0
 800ce5c:	d034      	beq.n	800cec8 <rcl_take+0x8c>
 800ce5e:	a802      	add	r0, sp, #8
 800ce60:	ac02      	add	r4, sp, #8
 800ce62:	f003 fc27 	bl	80106b4 <rmw_get_zero_initialized_message_info>
 800ce66:	6833      	ldr	r3, [r6, #0]
 800ce68:	463d      	mov	r5, r7
 800ce6a:	2600      	movs	r6, #0
 800ce6c:	f8d3 c0c0 	ldr.w	ip, [r3, #192]	; 0xc0
 800ce70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ce7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ce80:	463b      	mov	r3, r7
 800ce82:	4660      	mov	r0, ip
 800ce84:	4641      	mov	r1, r8
 800ce86:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800ce8a:	f8cd 9000 	str.w	r9, [sp]
 800ce8e:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
 800ce92:	f002 ff2f 	bl	800fcf4 <rmw_take_with_info>
 800ce96:	4603      	mov	r3, r0
 800ce98:	b9c0      	cbnz	r0, 800cecc <rcl_take+0x90>
 800ce9a:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ce9e:	f240 1291 	movw	r2, #401	; 0x191
 800cea2:	2900      	cmp	r1, #0
 800cea4:	bf08      	it	eq
 800cea6:	4613      	moveq	r3, r2
 800cea8:	4618      	mov	r0, r3
 800ceaa:	b01d      	add	sp, #116	; 0x74
 800ceac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	b01d      	add	sp, #116	; 0x74
 800ceb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cebc:	230b      	movs	r3, #11
 800cebe:	e7f3      	b.n	800cea8 <rcl_take+0x6c>
 800cec0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cec4:	4618      	mov	r0, r3
 800cec6:	4770      	bx	lr
 800cec8:	af10      	add	r7, sp, #64	; 0x40
 800ceca:	e7c8      	b.n	800ce5e <rcl_take+0x22>
 800cecc:	f006 fe14 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800ced0:	4603      	mov	r3, r0
 800ced2:	e7e9      	b.n	800cea8 <rcl_take+0x6c>

0800ced4 <rcl_subscription_get_rmw_handle>:
 800ced4:	b118      	cbz	r0, 800cede <rcl_subscription_get_rmw_handle+0xa>
 800ced6:	6800      	ldr	r0, [r0, #0]
 800ced8:	b108      	cbz	r0, 800cede <rcl_subscription_get_rmw_handle+0xa>
 800ceda:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800cede:	4770      	bx	lr

0800cee0 <rcl_get_system_time>:
 800cee0:	4608      	mov	r0, r1
 800cee2:	f001 bf63 	b.w	800edac <rcutils_system_time_now>
 800cee6:	bf00      	nop

0800cee8 <rcl_get_steady_time>:
 800cee8:	4608      	mov	r0, r1
 800ceea:	f001 bf87 	b.w	800edfc <rcutils_steady_time_now>
 800ceee:	bf00      	nop

0800cef0 <rcl_get_ros_time>:
 800cef0:	7a03      	ldrb	r3, [r0, #8]
 800cef2:	b510      	push	{r4, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	b143      	cbz	r3, 800cf0a <rcl_get_ros_time+0x1a>
 800cef8:	2105      	movs	r1, #5
 800cefa:	f7f5 feb8 	bl	8002c6e <__atomic_load_8>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	2000      	movs	r0, #0
 800cf04:	e9c4 2300 	strd	r2, r3, [r4]
 800cf08:	bd10      	pop	{r4, pc}
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf10:	f001 bf4c 	b.w	800edac <rcutils_system_time_now>

0800cf14 <rcl_clock_init>:
 800cf14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf18:	4605      	mov	r5, r0
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	4614      	mov	r4, r2
 800cf1e:	460e      	mov	r6, r1
 800cf20:	f001 fb3e 	bl	800e5a0 <rcutils_allocator_is_valid>
 800cf24:	b128      	cbz	r0, 800cf32 <rcl_clock_init+0x1e>
 800cf26:	2d03      	cmp	r5, #3
 800cf28:	d803      	bhi.n	800cf32 <rcl_clock_init+0x1e>
 800cf2a:	e8df f005 	tbb	[pc, r5]
 800cf2e:	3321      	.short	0x3321
 800cf30:	065c      	.short	0x065c
 800cf32:	250b      	movs	r5, #11
 800cf34:	4628      	mov	r0, r5
 800cf36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf3a:	2c00      	cmp	r4, #0
 800cf3c:	d0f9      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cf3e:	fab6 f386 	clz	r3, r6
 800cf42:	095b      	lsrs	r3, r3, #5
 800cf44:	2e00      	cmp	r6, #0
 800cf46:	d0f4      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cf48:	7033      	strb	r3, [r6, #0]
 800cf4a:	461d      	mov	r5, r3
 800cf4c:	6133      	str	r3, [r6, #16]
 800cf4e:	f106 0714 	add.w	r7, r6, #20
 800cf52:	f04f 0c03 	mov.w	ip, #3
 800cf56:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cf5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf5c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cf5e:	4b30      	ldr	r3, [pc, #192]	; (800d020 <rcl_clock_init+0x10c>)
 800cf60:	4628      	mov	r0, r5
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	603a      	str	r2, [r7, #0]
 800cf66:	60f3      	str	r3, [r6, #12]
 800cf68:	f886 c000 	strb.w	ip, [r6]
 800cf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf70:	2e00      	cmp	r6, #0
 800cf72:	d0de      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cf74:	2300      	movs	r3, #0
 800cf76:	f106 0714 	add.w	r7, r6, #20
 800cf7a:	7033      	strb	r3, [r6, #0]
 800cf7c:	461d      	mov	r5, r3
 800cf7e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cf82:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800cf86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf94:	2c00      	cmp	r4, #0
 800cf96:	d0cc      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cf98:	fab6 f586 	clz	r5, r6
 800cf9c:	096d      	lsrs	r5, r5, #5
 800cf9e:	2e00      	cmp	r6, #0
 800cfa0:	d0c7      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cfa2:	46a4      	mov	ip, r4
 800cfa4:	7035      	strb	r5, [r6, #0]
 800cfa6:	f106 0714 	add.w	r7, r6, #20
 800cfaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cfae:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800cfb2:	e9c6 5503 	strd	r5, r5, [r6, #12]
 800cfb6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cfb8:	f8dc 2000 	ldr.w	r2, [ip]
 800cfbc:	2010      	movs	r0, #16
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	603a      	str	r2, [r7, #0]
 800cfc2:	6921      	ldr	r1, [r4, #16]
 800cfc4:	4798      	blx	r3
 800cfc6:	6130      	str	r0, [r6, #16]
 800cfc8:	b340      	cbz	r0, 800d01c <rcl_clock_init+0x108>
 800cfca:	f04f 0800 	mov.w	r8, #0
 800cfce:	f04f 0900 	mov.w	r9, #0
 800cfd2:	4a14      	ldr	r2, [pc, #80]	; (800d024 <rcl_clock_init+0x110>)
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	7205      	strb	r5, [r0, #8]
 800cfd8:	e9c0 8900 	strd	r8, r9, [r0]
 800cfdc:	4628      	mov	r0, r5
 800cfde:	60f2      	str	r2, [r6, #12]
 800cfe0:	7033      	strb	r3, [r6, #0]
 800cfe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe6:	2c00      	cmp	r4, #0
 800cfe8:	d0a3      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cfea:	fab6 f386 	clz	r3, r6
 800cfee:	095b      	lsrs	r3, r3, #5
 800cff0:	2e00      	cmp	r6, #0
 800cff2:	d09e      	beq.n	800cf32 <rcl_clock_init+0x1e>
 800cff4:	7033      	strb	r3, [r6, #0]
 800cff6:	461d      	mov	r5, r3
 800cff8:	6133      	str	r3, [r6, #16]
 800cffa:	f106 0714 	add.w	r7, r6, #20
 800cffe:	f04f 0c02 	mov.w	ip, #2
 800d002:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d008:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d00a:	4b07      	ldr	r3, [pc, #28]	; (800d028 <rcl_clock_init+0x114>)
 800d00c:	4628      	mov	r0, r5
 800d00e:	6822      	ldr	r2, [r4, #0]
 800d010:	603a      	str	r2, [r7, #0]
 800d012:	60f3      	str	r3, [r6, #12]
 800d014:	f886 c000 	strb.w	ip, [r6]
 800d018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d01c:	250a      	movs	r5, #10
 800d01e:	e789      	b.n	800cf34 <rcl_clock_init+0x20>
 800d020:	0800cee9 	.word	0x0800cee9
 800d024:	0800cef1 	.word	0x0800cef1
 800d028:	0800cee1 	.word	0x0800cee1

0800d02c <rcl_clock_get_now>:
 800d02c:	b141      	cbz	r1, 800d040 <rcl_clock_get_now+0x14>
 800d02e:	b138      	cbz	r0, 800d040 <rcl_clock_get_now+0x14>
 800d030:	7803      	ldrb	r3, [r0, #0]
 800d032:	b11b      	cbz	r3, 800d03c <rcl_clock_get_now+0x10>
 800d034:	68c3      	ldr	r3, [r0, #12]
 800d036:	b10b      	cbz	r3, 800d03c <rcl_clock_get_now+0x10>
 800d038:	6900      	ldr	r0, [r0, #16]
 800d03a:	4718      	bx	r3
 800d03c:	2001      	movs	r0, #1
 800d03e:	4770      	bx	lr
 800d040:	200b      	movs	r0, #11
 800d042:	4770      	bx	lr

0800d044 <rcl_clock_add_jump_callback>:
 800d044:	b082      	sub	sp, #8
 800d046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d04a:	a906      	add	r1, sp, #24
 800d04c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 800d050:	e881 000c 	stmia.w	r1, {r2, r3}
 800d054:	b360      	cbz	r0, 800d0b0 <rcl_clock_add_jump_callback+0x6c>
 800d056:	4604      	mov	r4, r0
 800d058:	3014      	adds	r0, #20
 800d05a:	f001 faa1 	bl	800e5a0 <rcutils_allocator_is_valid>
 800d05e:	b33d      	cbz	r5, 800d0b0 <rcl_clock_add_jump_callback+0x6c>
 800d060:	f080 0301 	eor.w	r3, r0, #1
 800d064:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800d068:	d122      	bne.n	800d0b0 <rcl_clock_add_jump_callback+0x6c>
 800d06a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d06e:	2a00      	cmp	r2, #0
 800d070:	f173 0300 	sbcs.w	r3, r3, #0
 800d074:	db1c      	blt.n	800d0b0 <rcl_clock_add_jump_callback+0x6c>
 800d076:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d07a:	2a01      	cmp	r2, #1
 800d07c:	f173 0300 	sbcs.w	r3, r3, #0
 800d080:	da16      	bge.n	800d0b0 <rcl_clock_add_jump_callback+0x6c>
 800d082:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 800d086:	2f00      	cmp	r7, #0
 800d088:	d042      	beq.n	800d110 <rcl_clock_add_jump_callback+0xcc>
 800d08a:	460b      	mov	r3, r1
 800d08c:	f100 0220 	add.w	r2, r0, #32
 800d090:	e003      	b.n	800d09a <rcl_clock_add_jump_callback+0x56>
 800d092:	42bb      	cmp	r3, r7
 800d094:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800d098:	d011      	beq.n	800d0be <rcl_clock_add_jump_callback+0x7a>
 800d09a:	f852 1c20 	ldr.w	r1, [r2, #-32]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	42a9      	cmp	r1, r5
 800d0a2:	d1f6      	bne.n	800d092 <rcl_clock_add_jump_callback+0x4e>
 800d0a4:	6811      	ldr	r1, [r2, #0]
 800d0a6:	42b1      	cmp	r1, r6
 800d0a8:	d1f3      	bne.n	800d092 <rcl_clock_add_jump_callback+0x4e>
 800d0aa:	f04f 0c01 	mov.w	ip, #1
 800d0ae:	e001      	b.n	800d0b4 <rcl_clock_add_jump_callback+0x70>
 800d0b0:	f04f 0c0b 	mov.w	ip, #11
 800d0b4:	4660      	mov	r0, ip
 800d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	b002      	add	sp, #8
 800d0bc:	4770      	bx	lr
 800d0be:	3301      	adds	r3, #1
 800d0c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d0c4:	00d9      	lsls	r1, r3, #3
 800d0c6:	69e3      	ldr	r3, [r4, #28]
 800d0c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d0ca:	4798      	blx	r3
 800d0cc:	b1e8      	cbz	r0, 800d10a <rcl_clock_add_jump_callback+0xc6>
 800d0ce:	68a3      	ldr	r3, [r4, #8]
 800d0d0:	af06      	add	r7, sp, #24
 800d0d2:	6060      	str	r0, [r4, #4]
 800d0d4:	f04f 0c00 	mov.w	ip, #0
 800d0d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d0dc:	f103 0e01 	add.w	lr, r3, #1
 800d0e0:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
 800d0e4:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 800d0e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d0ea:	f108 0508 	add.w	r5, r8, #8
 800d0ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0f0:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d0f4:	e885 0003 	stmia.w	r5, {r0, r1}
 800d0f8:	f8c8 6020 	str.w	r6, [r8, #32]
 800d0fc:	4660      	mov	r0, ip
 800d0fe:	f8c4 e008 	str.w	lr, [r4, #8]
 800d102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d106:	b002      	add	sp, #8
 800d108:	4770      	bx	lr
 800d10a:	f04f 0c0a 	mov.w	ip, #10
 800d10e:	e7d1      	b.n	800d0b4 <rcl_clock_add_jump_callback+0x70>
 800d110:	2128      	movs	r1, #40	; 0x28
 800d112:	e7d8      	b.n	800d0c6 <rcl_clock_add_jump_callback+0x82>

0800d114 <rcl_clock_remove_jump_callback>:
 800d114:	2800      	cmp	r0, #0
 800d116:	d05a      	beq.n	800d1ce <rcl_clock_remove_jump_callback+0xba>
 800d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11c:	4607      	mov	r7, r0
 800d11e:	3014      	adds	r0, #20
 800d120:	460d      	mov	r5, r1
 800d122:	4614      	mov	r4, r2
 800d124:	f001 fa3c 	bl	800e5a0 <rcutils_allocator_is_valid>
 800d128:	f080 0001 	eor.w	r0, r0, #1
 800d12c:	f010 0fff 	tst.w	r0, #255	; 0xff
 800d130:	d13a      	bne.n	800d1a8 <rcl_clock_remove_jump_callback+0x94>
 800d132:	2d00      	cmp	r5, #0
 800d134:	d038      	beq.n	800d1a8 <rcl_clock_remove_jump_callback+0x94>
 800d136:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800d13a:	f1b8 0f00 	cmp.w	r8, #0
 800d13e:	d00c      	beq.n	800d15a <rcl_clock_remove_jump_callback+0x46>
 800d140:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800d144:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 800d148:	4676      	mov	r6, lr
 800d14a:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 800d14e:	6833      	ldr	r3, [r6, #0]
 800d150:	42ab      	cmp	r3, r5
 800d152:	d005      	beq.n	800d160 <rcl_clock_remove_jump_callback+0x4c>
 800d154:	3628      	adds	r6, #40	; 0x28
 800d156:	45b4      	cmp	ip, r6
 800d158:	d1f9      	bne.n	800d14e <rcl_clock_remove_jump_callback+0x3a>
 800d15a:	2001      	movs	r0, #1
 800d15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d160:	6a33      	ldr	r3, [r6, #32]
 800d162:	3628      	adds	r6, #40	; 0x28
 800d164:	45b4      	cmp	ip, r6
 800d166:	d02a      	beq.n	800d1be <rcl_clock_remove_jump_callback+0xaa>
 800d168:	42a3      	cmp	r3, r4
 800d16a:	d1f0      	bne.n	800d14e <rcl_clock_remove_jump_callback+0x3a>
 800d16c:	4635      	mov	r5, r6
 800d16e:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 800d172:	3628      	adds	r6, #40	; 0x28
 800d174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d17a:	4566      	cmp	r6, ip
 800d17c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d17e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d182:	e884 0003 	stmia.w	r4, {r0, r1}
 800d186:	d1f1      	bne.n	800d16c <rcl_clock_remove_jump_callback+0x58>
 800d188:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800d18c:	60bc      	str	r4, [r7, #8]
 800d18e:	b174      	cbz	r4, 800d1ae <rcl_clock_remove_jump_callback+0x9a>
 800d190:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d194:	4670      	mov	r0, lr
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	00e1      	lsls	r1, r4, #3
 800d19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d19c:	4798      	blx	r3
 800d19e:	b1c0      	cbz	r0, 800d1d2 <rcl_clock_remove_jump_callback+0xbe>
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a8:	200b      	movs	r0, #11
 800d1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ae:	4670      	mov	r0, lr
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1b4:	4798      	blx	r3
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	607c      	str	r4, [r7, #4]
 800d1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1be:	42a3      	cmp	r3, r4
 800d1c0:	d1cb      	bne.n	800d15a <rcl_clock_remove_jump_callback+0x46>
 800d1c2:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800d1c6:	60bc      	str	r4, [r7, #8]
 800d1c8:	2c00      	cmp	r4, #0
 800d1ca:	d1e1      	bne.n	800d190 <rcl_clock_remove_jump_callback+0x7c>
 800d1cc:	e7ef      	b.n	800d1ae <rcl_clock_remove_jump_callback+0x9a>
 800d1ce:	200b      	movs	r0, #11
 800d1d0:	4770      	bx	lr
 800d1d2:	200a      	movs	r0, #10
 800d1d4:	e7e9      	b.n	800d1aa <rcl_clock_remove_jump_callback+0x96>
 800d1d6:	bf00      	nop

0800d1d8 <_rcl_timer_time_jump>:
 800d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	4682      	mov	sl, r0
 800d1de:	b087      	sub	sp, #28
 800d1e0:	4614      	mov	r4, r2
 800d1e2:	b131      	cbz	r1, 800d1f2 <_rcl_timer_time_jump+0x1a>
 800d1e4:	7803      	ldrb	r3, [r0, #0]
 800d1e6:	3b02      	subs	r3, #2
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d944      	bls.n	800d276 <_rcl_timer_time_jump+0x9e>
 800d1ec:	b007      	add	sp, #28
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	6813      	ldr	r3, [r2, #0]
 800d1f4:	a904      	add	r1, sp, #16
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	f7ff ff18 	bl	800d02c <rcl_clock_get_now>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d1f5      	bne.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	2105      	movs	r1, #5
 800d204:	3020      	adds	r0, #32
 800d206:	f7f5 fd32 	bl	8002c6e <__atomic_load_8>
 800d20a:	6822      	ldr	r2, [r4, #0]
 800d20c:	460b      	mov	r3, r1
 800d20e:	4680      	mov	r8, r0
 800d210:	2105      	movs	r1, #5
 800d212:	f102 0028 	add.w	r0, r2, #40	; 0x28
 800d216:	4699      	mov	r9, r3
 800d218:	f7f5 fd29 	bl	8002c6e <__atomic_load_8>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	460a      	mov	r2, r1
 800d220:	4606      	mov	r6, r0
 800d222:	2105      	movs	r1, #5
 800d224:	f103 0018 	add.w	r0, r3, #24
 800d228:	4617      	mov	r7, r2
 800d22a:	f7f5 fd20 	bl	8002c6e <__atomic_load_8>
 800d22e:	f89a 3000 	ldrb.w	r3, [sl]
 800d232:	4605      	mov	r5, r0
 800d234:	9103      	str	r1, [sp, #12]
 800d236:	3b02      	subs	r3, #2
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d939      	bls.n	800d2b0 <_rcl_timer_time_jump+0xd8>
 800d23c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d240:	45b2      	cmp	sl, r6
 800d242:	eb7b 0307 	sbcs.w	r3, fp, r7
 800d246:	da64      	bge.n	800d312 <_rcl_timer_time_jump+0x13a>
 800d248:	45c2      	cmp	sl, r8
 800d24a:	eb7b 0309 	sbcs.w	r3, fp, r9
 800d24e:	dacd      	bge.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d250:	eb10 020a 	adds.w	r2, r0, sl
 800d254:	f04f 0505 	mov.w	r5, #5
 800d258:	6820      	ldr	r0, [r4, #0]
 800d25a:	eb41 030b 	adc.w	r3, r1, fp
 800d25e:	9500      	str	r5, [sp, #0]
 800d260:	3028      	adds	r0, #40	; 0x28
 800d262:	f7f5 fd1d 	bl	8002ca0 <__atomic_store_8>
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	9500      	str	r5, [sp, #0]
 800d26a:	3020      	adds	r0, #32
 800d26c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d270:	f7f5 fd16 	bl	8002ca0 <__atomic_store_8>
 800d274:	e7ba      	b.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d276:	6813      	ldr	r3, [r2, #0]
 800d278:	a904      	add	r1, sp, #16
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	f7ff fed6 	bl	800d02c <rcl_clock_get_now>
 800d280:	2800      	cmp	r0, #0
 800d282:	d1b3      	bne.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d288:	4313      	orrs	r3, r2
 800d28a:	d0af      	beq.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d28c:	6820      	ldr	r0, [r4, #0]
 800d28e:	2105      	movs	r1, #5
 800d290:	3028      	adds	r0, #40	; 0x28
 800d292:	f7f5 fcec 	bl	8002c6e <__atomic_load_8>
 800d296:	9a04      	ldr	r2, [sp, #16]
 800d298:	6826      	ldr	r6, [r4, #0]
 800d29a:	2305      	movs	r3, #5
 800d29c:	1a82      	subs	r2, r0, r2
 800d29e:	9c05      	ldr	r4, [sp, #20]
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800d2a6:	eb61 0304 	sbc.w	r3, r1, r4
 800d2aa:	f7f5 fcf9 	bl	8002ca0 <__atomic_store_8>
 800d2ae:	e79d      	b.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d2b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	d099      	beq.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d2b8:	6820      	ldr	r0, [r4, #0]
 800d2ba:	f04f 0805 	mov.w	r8, #5
 800d2be:	2300      	movs	r3, #0
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	3030      	adds	r0, #48	; 0x30
 800d2c4:	f8cd 8000 	str.w	r8, [sp]
 800d2c8:	f7f5 fd01 	bl	8002cce <__atomic_exchange_8>
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460f      	mov	r7, r1
 800d2d0:	ea56 0307 	orrs.w	r3, r6, r7
 800d2d4:	d08a      	beq.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d2d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2da:	1a12      	subs	r2, r2, r0
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	f8cd 8000 	str.w	r8, [sp]
 800d2e2:	eb63 0301 	sbc.w	r3, r3, r1
 800d2e6:	1952      	adds	r2, r2, r5
 800d2e8:	9903      	ldr	r1, [sp, #12]
 800d2ea:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800d2ee:	eb43 0101 	adc.w	r1, r3, r1
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	f7f5 fcd4 	bl	8002ca0 <__atomic_store_8>
 800d2f8:	9a04      	ldr	r2, [sp, #16]
 800d2fa:	6820      	ldr	r0, [r4, #0]
 800d2fc:	1b92      	subs	r2, r2, r6
 800d2fe:	9b05      	ldr	r3, [sp, #20]
 800d300:	f100 0020 	add.w	r0, r0, #32
 800d304:	f8cd 8000 	str.w	r8, [sp]
 800d308:	eb63 0307 	sbc.w	r3, r3, r7
 800d30c:	f7f5 fcc8 	bl	8002ca0 <__atomic_store_8>
 800d310:	e76c      	b.n	800d1ec <_rcl_timer_time_jump+0x14>
 800d312:	6820      	ldr	r0, [r4, #0]
 800d314:	3008      	adds	r0, #8
 800d316:	f006 fd1d 	bl	8013d54 <rcl_trigger_guard_condition>
 800d31a:	e767      	b.n	800d1ec <_rcl_timer_time_jump+0x14>

0800d31c <rcl_get_zero_initialized_timer>:
 800d31c:	4b01      	ldr	r3, [pc, #4]	; (800d324 <rcl_get_zero_initialized_timer+0x8>)
 800d31e:	6818      	ldr	r0, [r3, #0]
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	0801fa70 	.word	0x0801fa70

0800d328 <rcl_timer_init>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	b0ad      	sub	sp, #180	; 0xb4
 800d32e:	460d      	mov	r5, r1
 800d330:	4604      	mov	r4, r0
 800d332:	4690      	mov	r8, r2
 800d334:	a839      	add	r0, sp, #228	; 0xe4
 800d336:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 800d33a:	f001 f931 	bl	800e5a0 <rcutils_allocator_is_valid>
 800d33e:	fab5 f385 	clz	r3, r5
 800d342:	095b      	lsrs	r3, r3, #5
 800d344:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 800d348:	2c00      	cmp	r4, #0
 800d34a:	bf08      	it	eq
 800d34c:	2301      	moveq	r3, #1
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d16e      	bne.n	800d430 <rcl_timer_init+0x108>
 800d352:	f080 0001 	eor.w	r0, r0, #1
 800d356:	f010 0fff 	tst.w	r0, #255	; 0xff
 800d35a:	d169      	bne.n	800d430 <rcl_timer_init+0x108>
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	b12b      	cbz	r3, 800d36c <rcl_timer_init+0x44>
 800d360:	f04f 0964 	mov.w	r9, #100	; 0x64
 800d364:	4648      	mov	r0, r9
 800d366:	b02d      	add	sp, #180	; 0xb4
 800d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36c:	a90a      	add	r1, sp, #40	; 0x28
 800d36e:	4628      	mov	r0, r5
 800d370:	f7ff fe5c 	bl	800d02c <rcl_clock_get_now>
 800d374:	4681      	mov	r9, r0
 800d376:	2800      	cmp	r0, #0
 800d378:	d1f4      	bne.n	800d364 <rcl_timer_init+0x3c>
 800d37a:	f10d 0b20 	add.w	fp, sp, #32
 800d37e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 800d382:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800d386:	4658      	mov	r0, fp
 800d388:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 800d38c:	f006 fbfc 	bl	8013b88 <rcl_get_zero_initialized_guard_condition>
 800d390:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800d394:	e88a 0003 	stmia.w	sl, {r0, r1}
 800d398:	4648      	mov	r0, r9
 800d39a:	f006 fcc3 	bl	8013d24 <rcl_guard_condition_get_default_options>
 800d39e:	ab0f      	add	r3, sp, #60	; 0x3c
 800d3a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d3a8:	4641      	mov	r1, r8
 800d3aa:	4650      	mov	r0, sl
 800d3ac:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d3b0:	f006 fbf4 	bl	8013b9c <rcl_guard_condition_init>
 800d3b4:	4681      	mov	r9, r0
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d1d4      	bne.n	800d364 <rcl_timer_init+0x3c>
 800d3ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d3bc:	f893 c000 	ldrb.w	ip, [r3]
 800d3c0:	f1bc 0f01 	cmp.w	ip, #1
 800d3c4:	d03a      	beq.n	800d43c <rcl_timer_init+0x114>
 800d3c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800d3c8:	463a      	mov	r2, r7
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	931c      	str	r3, [sp, #112]	; 0x70
 800d3d0:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 800d3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d6:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 800d3da:	199b      	adds	r3, r3, r6
 800d3dc:	f04f 0600 	mov.w	r6, #0
 800d3e0:	9306      	str	r3, [sp, #24]
 800d3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3e4:	eb43 0202 	adc.w	r2, r3, r2
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	9207      	str	r2, [sp, #28]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800d3f2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800d3f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d3fe:	f8dc 7000 	ldr.w	r7, [ip]
 800d402:	2050      	movs	r0, #80	; 0x50
 800d404:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800d406:	f8ce 7000 	str.w	r7, [lr]
 800d40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d40e:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
 800d412:	e9cd bc20 	strd	fp, ip, [sp, #128]	; 0x80
 800d416:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800d41a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800d41c:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
 800d420:	4798      	blx	r3
 800d422:	6020      	str	r0, [r4, #0]
 800d424:	b370      	cbz	r0, 800d484 <rcl_timer_init+0x15c>
 800d426:	2250      	movs	r2, #80	; 0x50
 800d428:	a918      	add	r1, sp, #96	; 0x60
 800d42a:	f7f2 ff09 	bl	8000240 <memcpy>
 800d42e:	e799      	b.n	800d364 <rcl_timer_init+0x3c>
 800d430:	f04f 090b 	mov.w	r9, #11
 800d434:	4648      	mov	r0, r9
 800d436:	b02d      	add	sp, #180	; 0xb4
 800d438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43c:	2001      	movs	r0, #1
 800d43e:	2100      	movs	r1, #0
 800d440:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 800d444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d44c:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 800d450:	9405      	str	r4, [sp, #20]
 800d452:	f8df c048 	ldr.w	ip, [pc, #72]	; 800d49c <rcl_timer_init+0x174>
 800d456:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800d45a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d45e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800d462:	f8cd c010 	str.w	ip, [sp, #16]
 800d466:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d46a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d46e:	4628      	mov	r0, r5
 800d470:	f7ff fde8 	bl	800d044 <rcl_clock_add_jump_callback>
 800d474:	4603      	mov	r3, r0
 800d476:	2800      	cmp	r0, #0
 800d478:	d0a5      	beq.n	800d3c6 <rcl_timer_init+0x9e>
 800d47a:	4650      	mov	r0, sl
 800d47c:	4699      	mov	r9, r3
 800d47e:	f006 fc2b 	bl	8013cd8 <rcl_guard_condition_fini>
 800d482:	e76f      	b.n	800d364 <rcl_timer_init+0x3c>
 800d484:	4650      	mov	r0, sl
 800d486:	f04f 090a 	mov.w	r9, #10
 800d48a:	f006 fc25 	bl	8013cd8 <rcl_guard_condition_fini>
 800d48e:	4622      	mov	r2, r4
 800d490:	4628      	mov	r0, r5
 800d492:	4902      	ldr	r1, [pc, #8]	; (800d49c <rcl_timer_init+0x174>)
 800d494:	f7ff fe3e 	bl	800d114 <rcl_clock_remove_jump_callback>
 800d498:	e764      	b.n	800d364 <rcl_timer_init+0x3c>
 800d49a:	bf00      	nop
 800d49c:	0800d1d9 	.word	0x0800d1d9

0800d4a0 <rcl_timer_call>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	b089      	sub	sp, #36	; 0x24
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d06c      	beq.n	800d584 <rcl_timer_call+0xe4>
 800d4aa:	6803      	ldr	r3, [r0, #0]
 800d4ac:	f3bf 8f5b 	dmb	ish
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d4b6:	f3bf 8f5b 	dmb	ish
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d157      	bne.n	800d56e <rcl_timer_call+0xce>
 800d4be:	6803      	ldr	r3, [r0, #0]
 800d4c0:	a906      	add	r1, sp, #24
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	f7ff fdb2 	bl	800d02c <rcl_clock_get_now>
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d14b      	bne.n	800d566 <rcl_timer_call+0xc6>
 800d4ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4d2:	2a00      	cmp	r2, #0
 800d4d4:	f173 0100 	sbcs.w	r1, r3, #0
 800d4d8:	db4f      	blt.n	800d57a <rcl_timer_call+0xda>
 800d4da:	2605      	movs	r6, #5
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	9600      	str	r6, [sp, #0]
 800d4e0:	3020      	adds	r0, #32
 800d4e2:	f7f5 fbf4 	bl	8002cce <__atomic_exchange_8>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	460a      	mov	r2, r1
 800d4ea:	f3bf 8f5b 	dmb	ish
 800d4ee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800d4f2:	f3bf 8f5b 	dmb	ish
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	e9cd 0204 	strd	r0, r2, [sp, #16]
 800d4fe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d502:	f7f5 fbb4 	bl	8002c6e <__atomic_load_8>
 800d506:	6827      	ldr	r7, [r4, #0]
 800d508:	468a      	mov	sl, r1
 800d50a:	9002      	str	r0, [sp, #8]
 800d50c:	4631      	mov	r1, r6
 800d50e:	f107 0018 	add.w	r0, r7, #24
 800d512:	f7f5 fbac 	bl	8002c6e <__atomic_load_8>
 800d516:	9b02      	ldr	r3, [sp, #8]
 800d518:	460f      	mov	r7, r1
 800d51a:	4606      	mov	r6, r0
 800d51c:	eb13 0800 	adds.w	r8, r3, r0
 800d520:	eb4a 0901 	adc.w	r9, sl, r1
 800d524:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d528:	4588      	cmp	r8, r1
 800d52a:	eb79 0302 	sbcs.w	r3, r9, r2
 800d52e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d532:	da04      	bge.n	800d53e <rcl_timer_call+0x9e>
 800d534:	ea56 0307 	orrs.w	r3, r6, r7
 800d538:	d129      	bne.n	800d58e <rcl_timer_call+0xee>
 800d53a:	4688      	mov	r8, r1
 800d53c:	4691      	mov	r9, r2
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	2105      	movs	r1, #5
 800d542:	4642      	mov	r2, r8
 800d544:	464b      	mov	r3, r9
 800d546:	3028      	adds	r0, #40	; 0x28
 800d548:	9100      	str	r1, [sp, #0]
 800d54a:	f7f5 fba9 	bl	8002ca0 <__atomic_store_8>
 800d54e:	f1bb 0f00 	cmp.w	fp, #0
 800d552:	d008      	beq.n	800d566 <rcl_timer_call+0xc6>
 800d554:	9904      	ldr	r1, [sp, #16]
 800d556:	4620      	mov	r0, r4
 800d558:	9a06      	ldr	r2, [sp, #24]
 800d55a:	9b07      	ldr	r3, [sp, #28]
 800d55c:	1a52      	subs	r2, r2, r1
 800d55e:	9905      	ldr	r1, [sp, #20]
 800d560:	eb63 0301 	sbc.w	r3, r3, r1
 800d564:	47d8      	blx	fp
 800d566:	4628      	mov	r0, r5
 800d568:	b009      	add	sp, #36	; 0x24
 800d56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56e:	f240 3521 	movw	r5, #801	; 0x321
 800d572:	4628      	mov	r0, r5
 800d574:	b009      	add	sp, #36	; 0x24
 800d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57a:	2501      	movs	r5, #1
 800d57c:	4628      	mov	r0, r5
 800d57e:	b009      	add	sp, #36	; 0x24
 800d580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d584:	250b      	movs	r5, #11
 800d586:	4628      	mov	r0, r5
 800d588:	b009      	add	sp, #36	; 0x24
 800d58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58e:	ebb1 0008 	subs.w	r0, r1, r8
 800d592:	9903      	ldr	r1, [sp, #12]
 800d594:	4632      	mov	r2, r6
 800d596:	463b      	mov	r3, r7
 800d598:	eb61 0109 	sbc.w	r1, r1, r9
 800d59c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 800d5a0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 800d5a4:	f7f3 fece 	bl	8001344 <__aeabi_ldivmod>
 800d5a8:	1c42      	adds	r2, r0, #1
 800d5aa:	fb00 7007 	mla	r0, r0, r7, r7
 800d5ae:	f141 0100 	adc.w	r1, r1, #0
 800d5b2:	fba2 2306 	umull	r2, r3, r2, r6
 800d5b6:	fb06 0001 	mla	r0, r6, r1, r0
 800d5ba:	eb18 0802 	adds.w	r8, r8, r2
 800d5be:	4403      	add	r3, r0
 800d5c0:	eb49 0903 	adc.w	r9, r9, r3
 800d5c4:	e7bb      	b.n	800d53e <rcl_timer_call+0x9e>
 800d5c6:	bf00      	nop

0800d5c8 <rcl_timer_is_ready>:
 800d5c8:	fab0 f380 	clz	r3, r0
 800d5cc:	095b      	lsrs	r3, r3, #5
 800d5ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5d2:	2900      	cmp	r1, #0
 800d5d4:	bf14      	ite	ne
 800d5d6:	461c      	movne	r4, r3
 800d5d8:	2401      	moveq	r4, #1
 800d5da:	b083      	sub	sp, #12
 800d5dc:	bb0c      	cbnz	r4, 800d622 <rcl_timer_is_ready+0x5a>
 800d5de:	6803      	ldr	r3, [r0, #0]
 800d5e0:	4689      	mov	r9, r1
 800d5e2:	4680      	mov	r8, r0
 800d5e4:	4669      	mov	r1, sp
 800d5e6:	6818      	ldr	r0, [r3, #0]
 800d5e8:	f7ff fd20 	bl	800d02c <rcl_clock_get_now>
 800d5ec:	4605      	mov	r5, r0
 800d5ee:	b118      	cbz	r0, 800d5f8 <rcl_timer_is_ready+0x30>
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	b003      	add	sp, #12
 800d5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5f8:	f8d8 0000 	ldr.w	r0, [r8]
 800d5fc:	2105      	movs	r1, #5
 800d5fe:	3028      	adds	r0, #40	; 0x28
 800d600:	f7f5 fb35 	bl	8002c6e <__atomic_load_8>
 800d604:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d608:	1ac6      	subs	r6, r0, r3
 800d60a:	eb61 0702 	sbc.w	r7, r1, r2
 800d60e:	2e01      	cmp	r6, #1
 800d610:	f177 0300 	sbcs.w	r3, r7, #0
 800d614:	db0a      	blt.n	800d62c <rcl_timer_is_ready+0x64>
 800d616:	4628      	mov	r0, r5
 800d618:	f889 4000 	strb.w	r4, [r9]
 800d61c:	b003      	add	sp, #12
 800d61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d622:	250b      	movs	r5, #11
 800d624:	4628      	mov	r0, r5
 800d626:	b003      	add	sp, #12
 800d628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d62c:	f8d8 3000 	ldr.w	r3, [r8]
 800d630:	f3bf 8f5b 	dmb	ish
 800d634:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d638:	f3bf 8f5b 	dmb	ish
 800d63c:	fab3 f483 	clz	r4, r3
 800d640:	0964      	lsrs	r4, r4, #5
 800d642:	e7e8      	b.n	800d616 <rcl_timer_is_ready+0x4e>

0800d644 <rcl_timer_get_time_until_next_call>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	b1d9      	cbz	r1, 800d682 <rcl_timer_get_time_until_next_call+0x3e>
 800d64a:	4604      	mov	r4, r0
 800d64c:	b1c8      	cbz	r0, 800d682 <rcl_timer_get_time_until_next_call+0x3e>
 800d64e:	6803      	ldr	r3, [r0, #0]
 800d650:	460d      	mov	r5, r1
 800d652:	4669      	mov	r1, sp
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	f7ff fce9 	bl	800d02c <rcl_clock_get_now>
 800d65a:	4606      	mov	r6, r0
 800d65c:	b110      	cbz	r0, 800d664 <rcl_timer_get_time_until_next_call+0x20>
 800d65e:	4630      	mov	r0, r6
 800d660:	b002      	add	sp, #8
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	6820      	ldr	r0, [r4, #0]
 800d666:	2105      	movs	r1, #5
 800d668:	3028      	adds	r0, #40	; 0x28
 800d66a:	f7f5 fb00 	bl	8002c6e <__atomic_load_8>
 800d66e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d672:	1ac0      	subs	r0, r0, r3
 800d674:	eb61 0102 	sbc.w	r1, r1, r2
 800d678:	e9c5 0100 	strd	r0, r1, [r5]
 800d67c:	4630      	mov	r0, r6
 800d67e:	b002      	add	sp, #8
 800d680:	bd70      	pop	{r4, r5, r6, pc}
 800d682:	260b      	movs	r6, #11
 800d684:	4630      	mov	r0, r6
 800d686:	b002      	add	sp, #8
 800d688:	bd70      	pop	{r4, r5, r6, pc}
 800d68a:	bf00      	nop

0800d68c <rcl_timer_is_canceled>:
 800d68c:	b180      	cbz	r0, 800d6b0 <rcl_timer_is_canceled+0x24>
 800d68e:	fab1 f381 	clz	r3, r1
 800d692:	095b      	lsrs	r3, r3, #5
 800d694:	b161      	cbz	r1, 800d6b0 <rcl_timer_is_canceled+0x24>
 800d696:	6802      	ldr	r2, [r0, #0]
 800d698:	f3bf 8f5b 	dmb	ish
 800d69c:	4618      	mov	r0, r3
 800d69e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800d6a2:	f3bf 8f5b 	dmb	ish
 800d6a6:	3b00      	subs	r3, #0
 800d6a8:	bf18      	it	ne
 800d6aa:	2301      	movne	r3, #1
 800d6ac:	700b      	strb	r3, [r1, #0]
 800d6ae:	4770      	bx	lr
 800d6b0:	200b      	movs	r0, #11
 800d6b2:	4770      	bx	lr

0800d6b4 <rcl_timer_get_guard_condition>:
 800d6b4:	b130      	cbz	r0, 800d6c4 <rcl_timer_get_guard_condition+0x10>
 800d6b6:	6800      	ldr	r0, [r0, #0]
 800d6b8:	b120      	cbz	r0, 800d6c4 <rcl_timer_get_guard_condition+0x10>
 800d6ba:	68c3      	ldr	r3, [r0, #12]
 800d6bc:	b10b      	cbz	r3, 800d6c2 <rcl_timer_get_guard_condition+0xe>
 800d6be:	3008      	adds	r0, #8
 800d6c0:	4770      	bx	lr
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop

0800d6c8 <rcl_validate_enclave_name_with_size>:
 800d6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ca:	b0c3      	sub	sp, #268	; 0x10c
 800d6cc:	b1a8      	cbz	r0, 800d6fa <rcl_validate_enclave_name_with_size+0x32>
 800d6ce:	4615      	mov	r5, r2
 800d6d0:	b19a      	cbz	r2, 800d6fa <rcl_validate_enclave_name_with_size+0x32>
 800d6d2:	461f      	mov	r7, r3
 800d6d4:	466a      	mov	r2, sp
 800d6d6:	ab01      	add	r3, sp, #4
 800d6d8:	460e      	mov	r6, r1
 800d6da:	f003 f885 	bl	80107e8 <rmw_validate_namespace_with_size>
 800d6de:	4604      	mov	r4, r0
 800d6e0:	b9b0      	cbnz	r0, 800d710 <rcl_validate_enclave_name_with_size+0x48>
 800d6e2:	9b00      	ldr	r3, [sp, #0]
 800d6e4:	b16b      	cbz	r3, 800d702 <rcl_validate_enclave_name_with_size+0x3a>
 800d6e6:	2b07      	cmp	r3, #7
 800d6e8:	d018      	beq.n	800d71c <rcl_validate_enclave_name_with_size+0x54>
 800d6ea:	1e5a      	subs	r2, r3, #1
 800d6ec:	2a05      	cmp	r2, #5
 800d6ee:	d835      	bhi.n	800d75c <rcl_validate_enclave_name_with_size+0x94>
 800d6f0:	e8df f002 	tbb	[pc, r2]
 800d6f4:	2e2b2825 	.word	0x2e2b2825
 800d6f8:	1c31      	.short	0x1c31
 800d6fa:	240b      	movs	r4, #11
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	b043      	add	sp, #268	; 0x10c
 800d700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d702:	2b07      	cmp	r3, #7
 800d704:	d00a      	beq.n	800d71c <rcl_validate_enclave_name_with_size+0x54>
 800d706:	2300      	movs	r3, #0
 800d708:	4620      	mov	r0, r4
 800d70a:	602b      	str	r3, [r5, #0]
 800d70c:	b043      	add	sp, #268	; 0x10c
 800d70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d710:	f006 f9f2 	bl	8013af8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d714:	4604      	mov	r4, r0
 800d716:	4620      	mov	r0, r4
 800d718:	b043      	add	sp, #268	; 0x10c
 800d71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71c:	2eff      	cmp	r6, #255	; 0xff
 800d71e:	d9f2      	bls.n	800d706 <rcl_validate_enclave_name_with_size+0x3e>
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	2f00      	cmp	r7, #0
 800d724:	d0ea      	beq.n	800d6fc <rcl_validate_enclave_name_with_size+0x34>
 800d726:	23fe      	movs	r3, #254	; 0xfe
 800d728:	603b      	str	r3, [r7, #0]
 800d72a:	e7e7      	b.n	800d6fc <rcl_validate_enclave_name_with_size+0x34>
 800d72c:	2306      	movs	r3, #6
 800d72e:	602b      	str	r3, [r5, #0]
 800d730:	2f00      	cmp	r7, #0
 800d732:	d0e3      	beq.n	800d6fc <rcl_validate_enclave_name_with_size+0x34>
 800d734:	9b01      	ldr	r3, [sp, #4]
 800d736:	4620      	mov	r0, r4
 800d738:	603b      	str	r3, [r7, #0]
 800d73a:	b043      	add	sp, #268	; 0x10c
 800d73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d73e:	2301      	movs	r3, #1
 800d740:	602b      	str	r3, [r5, #0]
 800d742:	e7f5      	b.n	800d730 <rcl_validate_enclave_name_with_size+0x68>
 800d744:	2302      	movs	r3, #2
 800d746:	602b      	str	r3, [r5, #0]
 800d748:	e7f2      	b.n	800d730 <rcl_validate_enclave_name_with_size+0x68>
 800d74a:	2303      	movs	r3, #3
 800d74c:	602b      	str	r3, [r5, #0]
 800d74e:	e7ef      	b.n	800d730 <rcl_validate_enclave_name_with_size+0x68>
 800d750:	2304      	movs	r3, #4
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	e7ec      	b.n	800d730 <rcl_validate_enclave_name_with_size+0x68>
 800d756:	2305      	movs	r3, #5
 800d758:	602b      	str	r3, [r5, #0]
 800d75a:	e7e9      	b.n	800d730 <rcl_validate_enclave_name_with_size+0x68>
 800d75c:	4a03      	ldr	r2, [pc, #12]	; (800d76c <rcl_validate_enclave_name_with_size+0xa4>)
 800d75e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d762:	a802      	add	r0, sp, #8
 800d764:	2401      	movs	r4, #1
 800d766:	f001 f961 	bl	800ea2c <rcutils_snprintf>
 800d76a:	e7c7      	b.n	800d6fc <rcl_validate_enclave_name_with_size+0x34>
 800d76c:	0801fa74 	.word	0x0801fa74

0800d770 <rcl_validate_enclave_name>:
 800d770:	b168      	cbz	r0, 800d78e <rcl_validate_enclave_name+0x1e>
 800d772:	b570      	push	{r4, r5, r6, lr}
 800d774:	460d      	mov	r5, r1
 800d776:	4616      	mov	r6, r2
 800d778:	4604      	mov	r4, r0
 800d77a:	f7f2 ff81 	bl	8000680 <strlen>
 800d77e:	4633      	mov	r3, r6
 800d780:	4601      	mov	r1, r0
 800d782:	462a      	mov	r2, r5
 800d784:	4620      	mov	r0, r4
 800d786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d78a:	f7ff bf9d 	b.w	800d6c8 <rcl_validate_enclave_name_with_size>
 800d78e:	200b      	movs	r0, #11
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop

0800d794 <rcl_validate_topic_name>:
 800d794:	2800      	cmp	r0, #0
 800d796:	f000 8083 	beq.w	800d8a0 <rcl_validate_topic_name+0x10c>
 800d79a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d79e:	460e      	mov	r6, r1
 800d7a0:	2900      	cmp	r1, #0
 800d7a2:	f000 8084 	beq.w	800d8ae <rcl_validate_topic_name+0x11a>
 800d7a6:	4617      	mov	r7, r2
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	f7f2 ff69 	bl	8000680 <strlen>
 800d7ae:	b1b0      	cbz	r0, 800d7de <rcl_validate_topic_name+0x4a>
 800d7b0:	f895 8000 	ldrb.w	r8, [r5]
 800d7b4:	f8df c168 	ldr.w	ip, [pc, #360]	; 800d920 <rcl_validate_topic_name+0x18c>
 800d7b8:	f81c 3008 	ldrb.w	r3, [ip, r8]
 800d7bc:	f013 0304 	ands.w	r3, r3, #4
 800d7c0:	d170      	bne.n	800d8a4 <rcl_validate_topic_name+0x110>
 800d7c2:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
 800d7c6:	f815 2009 	ldrb.w	r2, [r5, r9]
 800d7ca:	2a2f      	cmp	r2, #47	; 0x2f
 800d7cc:	d10e      	bne.n	800d7ec <rcl_validate_topic_name+0x58>
 800d7ce:	2202      	movs	r2, #2
 800d7d0:	6032      	str	r2, [r6, #0]
 800d7d2:	b36f      	cbz	r7, 800d830 <rcl_validate_topic_name+0x9c>
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f8c7 9000 	str.w	r9, [r7]
 800d7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7de:	2301      	movs	r3, #1
 800d7e0:	6033      	str	r3, [r6, #0]
 800d7e2:	b32f      	cbz	r7, 800d830 <rcl_validate_topic_name+0x9c>
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	6038      	str	r0, [r7, #0]
 800d7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ec:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800d7f0:	461c      	mov	r4, r3
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800d7f8:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d7fc:	f1be 0f09 	cmp.w	lr, #9
 800d800:	d919      	bls.n	800d836 <rcl_validate_topic_name+0xa2>
 800d802:	f022 0e20 	bic.w	lr, r2, #32
 800d806:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800d80a:	f1be 0f19 	cmp.w	lr, #25
 800d80e:	d912      	bls.n	800d836 <rcl_validate_topic_name+0xa2>
 800d810:	2a5f      	cmp	r2, #95	; 0x5f
 800d812:	d01d      	beq.n	800d850 <rcl_validate_topic_name+0xbc>
 800d814:	2a2f      	cmp	r2, #47	; 0x2f
 800d816:	d058      	beq.n	800d8ca <rcl_validate_topic_name+0x136>
 800d818:	2a7e      	cmp	r2, #126	; 0x7e
 800d81a:	d04a      	beq.n	800d8b2 <rcl_validate_topic_name+0x11e>
 800d81c:	2a7b      	cmp	r2, #123	; 0x7b
 800d81e:	d05f      	beq.n	800d8e0 <rcl_validate_topic_name+0x14c>
 800d820:	2a7d      	cmp	r2, #125	; 0x7d
 800d822:	d16c      	bne.n	800d8fe <rcl_validate_topic_name+0x16a>
 800d824:	2c00      	cmp	r4, #0
 800d826:	d160      	bne.n	800d8ea <rcl_validate_topic_name+0x156>
 800d828:	2305      	movs	r3, #5
 800d82a:	6033      	str	r3, [r6, #0]
 800d82c:	b107      	cbz	r7, 800d830 <rcl_validate_topic_name+0x9c>
 800d82e:	6039      	str	r1, [r7, #0]
 800d830:	2000      	movs	r0, #0
 800d832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d836:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800d83a:	0752      	lsls	r2, r2, #29
 800d83c:	d508      	bpl.n	800d850 <rcl_validate_topic_name+0xbc>
 800d83e:	2900      	cmp	r1, #0
 800d840:	bf14      	ite	ne
 800d842:	4622      	movne	r2, r4
 800d844:	2200      	moveq	r2, #0
 800d846:	b11a      	cbz	r2, 800d850 <rcl_validate_topic_name+0xbc>
 800d848:	1e4c      	subs	r4, r1, #1
 800d84a:	429c      	cmp	r4, r3
 800d84c:	d038      	beq.n	800d8c0 <rcl_validate_topic_name+0x12c>
 800d84e:	4614      	mov	r4, r2
 800d850:	3101      	adds	r1, #1
 800d852:	4288      	cmp	r0, r1
 800d854:	d1ce      	bne.n	800d7f4 <rcl_validate_topic_name+0x60>
 800d856:	2c00      	cmp	r4, #0
 800d858:	d14c      	bne.n	800d8f4 <rcl_validate_topic_name+0x160>
 800d85a:	4620      	mov	r0, r4
 800d85c:	f109 0e01 	add.w	lr, r9, #1
 800d860:	e009      	b.n	800d876 <rcl_validate_topic_name+0xe2>
 800d862:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800d866:	d101      	bne.n	800d86c <rcl_validate_topic_name+0xd8>
 800d868:	2801      	cmp	r0, #1
 800d86a:	d050      	beq.n	800d90e <rcl_validate_topic_name+0x17a>
 800d86c:	428a      	cmp	r2, r1
 800d86e:	f105 0501 	add.w	r5, r5, #1
 800d872:	4618      	mov	r0, r3
 800d874:	d23b      	bcs.n	800d8ee <rcl_validate_topic_name+0x15a>
 800d876:	4581      	cmp	r9, r0
 800d878:	f100 0301 	add.w	r3, r0, #1
 800d87c:	d02c      	beq.n	800d8d8 <rcl_validate_topic_name+0x144>
 800d87e:	782c      	ldrb	r4, [r5, #0]
 800d880:	461a      	mov	r2, r3
 800d882:	2c2f      	cmp	r4, #47	; 0x2f
 800d884:	d1ed      	bne.n	800d862 <rcl_validate_topic_name+0xce>
 800d886:	786a      	ldrb	r2, [r5, #1]
 800d888:	f81c 0002 	ldrb.w	r0, [ip, r2]
 800d88c:	461a      	mov	r2, r3
 800d88e:	0740      	lsls	r0, r0, #29
 800d890:	d5ec      	bpl.n	800d86c <rcl_validate_topic_name+0xd8>
 800d892:	2204      	movs	r2, #4
 800d894:	6032      	str	r2, [r6, #0]
 800d896:	2f00      	cmp	r7, #0
 800d898:	d0ca      	beq.n	800d830 <rcl_validate_topic_name+0x9c>
 800d89a:	2000      	movs	r0, #0
 800d89c:	603b      	str	r3, [r7, #0]
 800d89e:	e7a3      	b.n	800d7e8 <rcl_validate_topic_name+0x54>
 800d8a0:	200b      	movs	r0, #11
 800d8a2:	4770      	bx	lr
 800d8a4:	2304      	movs	r3, #4
 800d8a6:	6033      	str	r3, [r6, #0]
 800d8a8:	2f00      	cmp	r7, #0
 800d8aa:	d19b      	bne.n	800d7e4 <rcl_validate_topic_name+0x50>
 800d8ac:	e7c0      	b.n	800d830 <rcl_validate_topic_name+0x9c>
 800d8ae:	200b      	movs	r0, #11
 800d8b0:	e79a      	b.n	800d7e8 <rcl_validate_topic_name+0x54>
 800d8b2:	2900      	cmp	r1, #0
 800d8b4:	d0cc      	beq.n	800d850 <rcl_validate_topic_name+0xbc>
 800d8b6:	2306      	movs	r3, #6
 800d8b8:	6033      	str	r3, [r6, #0]
 800d8ba:	2f00      	cmp	r7, #0
 800d8bc:	d1b7      	bne.n	800d82e <rcl_validate_topic_name+0x9a>
 800d8be:	e7b7      	b.n	800d830 <rcl_validate_topic_name+0x9c>
 800d8c0:	2309      	movs	r3, #9
 800d8c2:	6033      	str	r3, [r6, #0]
 800d8c4:	2f00      	cmp	r7, #0
 800d8c6:	d1b2      	bne.n	800d82e <rcl_validate_topic_name+0x9a>
 800d8c8:	e7b2      	b.n	800d830 <rcl_validate_topic_name+0x9c>
 800d8ca:	2c00      	cmp	r4, #0
 800d8cc:	d0c0      	beq.n	800d850 <rcl_validate_topic_name+0xbc>
 800d8ce:	2308      	movs	r3, #8
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	2f00      	cmp	r7, #0
 800d8d4:	d1ab      	bne.n	800d82e <rcl_validate_topic_name+0x9a>
 800d8d6:	e7ab      	b.n	800d830 <rcl_validate_topic_name+0x9c>
 800d8d8:	4672      	mov	r2, lr
 800d8da:	f109 0301 	add.w	r3, r9, #1
 800d8de:	e7c5      	b.n	800d86c <rcl_validate_topic_name+0xd8>
 800d8e0:	2c00      	cmp	r4, #0
 800d8e2:	d1f4      	bne.n	800d8ce <rcl_validate_topic_name+0x13a>
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	2401      	movs	r4, #1
 800d8e8:	e7b2      	b.n	800d850 <rcl_validate_topic_name+0xbc>
 800d8ea:	2400      	movs	r4, #0
 800d8ec:	e7b0      	b.n	800d850 <rcl_validate_topic_name+0xbc>
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	6030      	str	r0, [r6, #0]
 800d8f2:	e779      	b.n	800d7e8 <rcl_validate_topic_name+0x54>
 800d8f4:	2205      	movs	r2, #5
 800d8f6:	6032      	str	r2, [r6, #0]
 800d8f8:	2f00      	cmp	r7, #0
 800d8fa:	d1ce      	bne.n	800d89a <rcl_validate_topic_name+0x106>
 800d8fc:	e798      	b.n	800d830 <rcl_validate_topic_name+0x9c>
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	bf14      	ite	ne
 800d902:	2308      	movne	r3, #8
 800d904:	2303      	moveq	r3, #3
 800d906:	6033      	str	r3, [r6, #0]
 800d908:	2f00      	cmp	r7, #0
 800d90a:	d190      	bne.n	800d82e <rcl_validate_topic_name+0x9a>
 800d90c:	e790      	b.n	800d830 <rcl_validate_topic_name+0x9c>
 800d90e:	2307      	movs	r3, #7
 800d910:	6033      	str	r3, [r6, #0]
 800d912:	2f00      	cmp	r7, #0
 800d914:	d08c      	beq.n	800d830 <rcl_validate_topic_name+0x9c>
 800d916:	2301      	movs	r3, #1
 800d918:	2000      	movs	r0, #0
 800d91a:	603b      	str	r3, [r7, #0]
 800d91c:	e764      	b.n	800d7e8 <rcl_validate_topic_name+0x54>
 800d91e:	bf00      	nop
 800d920:	0802041d 	.word	0x0802041d

0800d924 <rcl_get_zero_initialized_wait_set>:
 800d924:	b470      	push	{r4, r5, r6}
 800d926:	4606      	mov	r6, r0
 800d928:	4d06      	ldr	r5, [pc, #24]	; (800d944 <rcl_get_zero_initialized_wait_set+0x20>)
 800d92a:	4634      	mov	r4, r6
 800d92c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d92e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d936:	682d      	ldr	r5, [r5, #0]
 800d938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d93a:	4630      	mov	r0, r6
 800d93c:	6025      	str	r5, [r4, #0]
 800d93e:	bc70      	pop	{r4, r5, r6}
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	0801fad4 	.word	0x0801fad4

0800d948 <rcl_wait_set_is_valid>:
 800d948:	b118      	cbz	r0, 800d952 <rcl_wait_set_is_valid+0xa>
 800d94a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d94c:	3800      	subs	r0, #0
 800d94e:	bf18      	it	ne
 800d950:	2001      	movne	r0, #1
 800d952:	4770      	bx	lr

0800d954 <rcl_wait_set_fini>:
 800d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d958:	b082      	sub	sp, #8
 800d95a:	2800      	cmp	r0, #0
 800d95c:	f000 8095 	beq.w	800da8a <rcl_wait_set_fini+0x136>
 800d960:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800d962:	4604      	mov	r4, r0
 800d964:	2e00      	cmp	r6, #0
 800d966:	f000 808c 	beq.w	800da82 <rcl_wait_set_fini+0x12e>
 800d96a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800d96c:	f002 fb58 	bl	8010020 <rmw_destroy_wait_set>
 800d970:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d972:	1e06      	subs	r6, r0, #0
 800d974:	bf18      	it	ne
 800d976:	f44f 7661 	movne.w	r6, #900	; 0x384
 800d97a:	2d00      	cmp	r5, #0
 800d97c:	f000 8081 	beq.w	800da82 <rcl_wait_set_fini+0x12e>
 800d980:	2700      	movs	r7, #0
 800d982:	6820      	ldr	r0, [r4, #0]
 800d984:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800d988:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800d98a:	6067      	str	r7, [r4, #4]
 800d98c:	602f      	str	r7, [r5, #0]
 800d98e:	b120      	cbz	r0, 800d99a <rcl_wait_set_fini+0x46>
 800d990:	9101      	str	r1, [sp, #4]
 800d992:	47c0      	blx	r8
 800d994:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d996:	9901      	ldr	r1, [sp, #4]
 800d998:	6027      	str	r7, [r4, #0]
 800d99a:	68a8      	ldr	r0, [r5, #8]
 800d99c:	b120      	cbz	r0, 800d9a8 <rcl_wait_set_fini+0x54>
 800d99e:	47c0      	blx	r8
 800d9a0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800d9a8:	f04f 0800 	mov.w	r8, #0
 800d9ac:	68a0      	ldr	r0, [r4, #8]
 800d9ae:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800d9b0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800d9b2:	f8c4 800c 	str.w	r8, [r4, #12]
 800d9b6:	f8c5 800c 	str.w	r8, [r5, #12]
 800d9ba:	b128      	cbz	r0, 800d9c8 <rcl_wait_set_fini+0x74>
 800d9bc:	47b8      	blx	r7
 800d9be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d9c0:	f8c4 8008 	str.w	r8, [r4, #8]
 800d9c4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800d9c6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800d9c8:	f04f 0800 	mov.w	r8, #0
 800d9cc:	6968      	ldr	r0, [r5, #20]
 800d9ce:	f8c5 8010 	str.w	r8, [r5, #16]
 800d9d2:	b128      	cbz	r0, 800d9e0 <rcl_wait_set_fini+0x8c>
 800d9d4:	47b8      	blx	r7
 800d9d6:	f8c5 8014 	str.w	r8, [r5, #20]
 800d9da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d9dc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800d9de:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800d9e0:	f04f 0800 	mov.w	r8, #0
 800d9e4:	6920      	ldr	r0, [r4, #16]
 800d9e6:	f8c4 8014 	str.w	r8, [r4, #20]
 800d9ea:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800d9ee:	b128      	cbz	r0, 800d9fc <rcl_wait_set_fini+0xa8>
 800d9f0:	47b8      	blx	r7
 800d9f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d9f4:	f8c4 8010 	str.w	r8, [r4, #16]
 800d9f8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800d9fa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800d9fc:	f04f 0800 	mov.w	r8, #0
 800da00:	69a0      	ldr	r0, [r4, #24]
 800da02:	f8c4 801c 	str.w	r8, [r4, #28]
 800da06:	f8c5 8018 	str.w	r8, [r5, #24]
 800da0a:	b128      	cbz	r0, 800da18 <rcl_wait_set_fini+0xc4>
 800da0c:	9101      	str	r1, [sp, #4]
 800da0e:	47b8      	blx	r7
 800da10:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da12:	9901      	ldr	r1, [sp, #4]
 800da14:	f8c4 8018 	str.w	r8, [r4, #24]
 800da18:	6a28      	ldr	r0, [r5, #32]
 800da1a:	b120      	cbz	r0, 800da26 <rcl_wait_set_fini+0xd2>
 800da1c:	47b8      	blx	r7
 800da1e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da20:	2300      	movs	r3, #0
 800da22:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800da26:	2700      	movs	r7, #0
 800da28:	6a20      	ldr	r0, [r4, #32]
 800da2a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800da2e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800da30:	6267      	str	r7, [r4, #36]	; 0x24
 800da32:	626f      	str	r7, [r5, #36]	; 0x24
 800da34:	b120      	cbz	r0, 800da40 <rcl_wait_set_fini+0xec>
 800da36:	9101      	str	r1, [sp, #4]
 800da38:	47c0      	blx	r8
 800da3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da3c:	9901      	ldr	r1, [sp, #4]
 800da3e:	6227      	str	r7, [r4, #32]
 800da40:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800da42:	b120      	cbz	r0, 800da4e <rcl_wait_set_fini+0xfa>
 800da44:	47c0      	blx	r8
 800da46:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da48:	2300      	movs	r3, #0
 800da4a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800da4e:	2700      	movs	r7, #0
 800da50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800da52:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800da56:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800da58:	62e7      	str	r7, [r4, #44]	; 0x2c
 800da5a:	632f      	str	r7, [r5, #48]	; 0x30
 800da5c:	b120      	cbz	r0, 800da68 <rcl_wait_set_fini+0x114>
 800da5e:	9101      	str	r1, [sp, #4]
 800da60:	47c0      	blx	r8
 800da62:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da64:	9901      	ldr	r1, [sp, #4]
 800da66:	62a7      	str	r7, [r4, #40]	; 0x28
 800da68:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800da6a:	b120      	cbz	r0, 800da76 <rcl_wait_set_fini+0x122>
 800da6c:	47c0      	blx	r8
 800da6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da70:	2300      	movs	r3, #0
 800da72:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800da76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800da78:	4628      	mov	r0, r5
 800da7a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800da7c:	4798      	blx	r3
 800da7e:	2300      	movs	r3, #0
 800da80:	6323      	str	r3, [r4, #48]	; 0x30
 800da82:	4630      	mov	r0, r6
 800da84:	b002      	add	sp, #8
 800da86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8a:	260b      	movs	r6, #11
 800da8c:	4630      	mov	r0, r6
 800da8e:	b002      	add	sp, #8
 800da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da94 <rcl_wait_set_add_subscription>:
 800da94:	b328      	cbz	r0, 800dae2 <rcl_wait_set_add_subscription+0x4e>
 800da96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	4604      	mov	r4, r0
 800da9c:	b1db      	cbz	r3, 800dad6 <rcl_wait_set_add_subscription+0x42>
 800da9e:	b321      	cbz	r1, 800daea <rcl_wait_set_add_subscription+0x56>
 800daa0:	681d      	ldr	r5, [r3, #0]
 800daa2:	6860      	ldr	r0, [r4, #4]
 800daa4:	4285      	cmp	r5, r0
 800daa6:	d219      	bcs.n	800dadc <rcl_wait_set_add_subscription+0x48>
 800daa8:	6826      	ldr	r6, [r4, #0]
 800daaa:	1c68      	adds	r0, r5, #1
 800daac:	6018      	str	r0, [r3, #0]
 800daae:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
 800dab2:	b102      	cbz	r2, 800dab6 <rcl_wait_set_add_subscription+0x22>
 800dab4:	6015      	str	r5, [r2, #0]
 800dab6:	4608      	mov	r0, r1
 800dab8:	f7ff fa0c 	bl	800ced4 <rcl_subscription_get_rmw_handle>
 800dabc:	4603      	mov	r3, r0
 800dabe:	b190      	cbz	r0, 800dae6 <rcl_wait_set_add_subscription+0x52>
 800dac0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dac2:	2000      	movs	r0, #0
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	688b      	ldr	r3, [r1, #8]
 800dac8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dacc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dace:	6853      	ldr	r3, [r2, #4]
 800dad0:	3301      	adds	r3, #1
 800dad2:	6053      	str	r3, [r2, #4]
 800dad4:	bd70      	pop	{r4, r5, r6, pc}
 800dad6:	f44f 7061 	mov.w	r0, #900	; 0x384
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	f240 3086 	movw	r0, #902	; 0x386
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
 800dae2:	200b      	movs	r0, #11
 800dae4:	4770      	bx	lr
 800dae6:	2001      	movs	r0, #1
 800dae8:	bd70      	pop	{r4, r5, r6, pc}
 800daea:	200b      	movs	r0, #11
 800daec:	bd70      	pop	{r4, r5, r6, pc}
 800daee:	bf00      	nop

0800daf0 <rcl_wait_set_clear>:
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d073      	beq.n	800dbdc <rcl_wait_set_clear+0xec>
 800daf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800daf6:	b510      	push	{r4, lr}
 800daf8:	4604      	mov	r4, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d070      	beq.n	800dbe0 <rcl_wait_set_clear+0xf0>
 800dafe:	6800      	ldr	r0, [r0, #0]
 800db00:	b138      	cbz	r0, 800db12 <rcl_wait_set_clear+0x22>
 800db02:	6862      	ldr	r2, [r4, #4]
 800db04:	2100      	movs	r1, #0
 800db06:	0092      	lsls	r2, r2, #2
 800db08:	f007 fec6 	bl	8015898 <memset>
 800db0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db0e:	2200      	movs	r2, #0
 800db10:	601a      	str	r2, [r3, #0]
 800db12:	68a0      	ldr	r0, [r4, #8]
 800db14:	b138      	cbz	r0, 800db26 <rcl_wait_set_clear+0x36>
 800db16:	68e2      	ldr	r2, [r4, #12]
 800db18:	2100      	movs	r1, #0
 800db1a:	0092      	lsls	r2, r2, #2
 800db1c:	f007 febc 	bl	8015898 <memset>
 800db20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db22:	2200      	movs	r2, #0
 800db24:	60da      	str	r2, [r3, #12]
 800db26:	69a0      	ldr	r0, [r4, #24]
 800db28:	b138      	cbz	r0, 800db3a <rcl_wait_set_clear+0x4a>
 800db2a:	69e2      	ldr	r2, [r4, #28]
 800db2c:	2100      	movs	r1, #0
 800db2e:	0092      	lsls	r2, r2, #2
 800db30:	f007 feb2 	bl	8015898 <memset>
 800db34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db36:	2200      	movs	r2, #0
 800db38:	619a      	str	r2, [r3, #24]
 800db3a:	6a20      	ldr	r0, [r4, #32]
 800db3c:	b138      	cbz	r0, 800db4e <rcl_wait_set_clear+0x5e>
 800db3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db40:	2100      	movs	r1, #0
 800db42:	0092      	lsls	r2, r2, #2
 800db44:	f007 fea8 	bl	8015898 <memset>
 800db48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db4a:	2200      	movs	r2, #0
 800db4c:	625a      	str	r2, [r3, #36]	; 0x24
 800db4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800db50:	b138      	cbz	r0, 800db62 <rcl_wait_set_clear+0x72>
 800db52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800db54:	2100      	movs	r1, #0
 800db56:	0092      	lsls	r2, r2, #2
 800db58:	f007 fe9e 	bl	8015898 <memset>
 800db5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db5e:	2200      	movs	r2, #0
 800db60:	631a      	str	r2, [r3, #48]	; 0x30
 800db62:	6920      	ldr	r0, [r4, #16]
 800db64:	b138      	cbz	r0, 800db76 <rcl_wait_set_clear+0x86>
 800db66:	6962      	ldr	r2, [r4, #20]
 800db68:	2100      	movs	r1, #0
 800db6a:	0092      	lsls	r2, r2, #2
 800db6c:	f007 fe94 	bl	8015898 <memset>
 800db70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db72:	2200      	movs	r2, #0
 800db74:	641a      	str	r2, [r3, #64]	; 0x40
 800db76:	6898      	ldr	r0, [r3, #8]
 800db78:	b138      	cbz	r0, 800db8a <rcl_wait_set_clear+0x9a>
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	2100      	movs	r1, #0
 800db7e:	0092      	lsls	r2, r2, #2
 800db80:	f007 fe8a 	bl	8015898 <memset>
 800db84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db86:	2200      	movs	r2, #0
 800db88:	605a      	str	r2, [r3, #4]
 800db8a:	6958      	ldr	r0, [r3, #20]
 800db8c:	b138      	cbz	r0, 800db9e <rcl_wait_set_clear+0xae>
 800db8e:	691a      	ldr	r2, [r3, #16]
 800db90:	2100      	movs	r1, #0
 800db92:	0092      	lsls	r2, r2, #2
 800db94:	f007 fe80 	bl	8015898 <memset>
 800db98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800db9a:	2200      	movs	r2, #0
 800db9c:	611a      	str	r2, [r3, #16]
 800db9e:	6a18      	ldr	r0, [r3, #32]
 800dba0:	b138      	cbz	r0, 800dbb2 <rcl_wait_set_clear+0xc2>
 800dba2:	69da      	ldr	r2, [r3, #28]
 800dba4:	2100      	movs	r1, #0
 800dba6:	0092      	lsls	r2, r2, #2
 800dba8:	f007 fe76 	bl	8015898 <memset>
 800dbac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dbae:	2200      	movs	r2, #0
 800dbb0:	61da      	str	r2, [r3, #28]
 800dbb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dbb4:	b138      	cbz	r0, 800dbc6 <rcl_wait_set_clear+0xd6>
 800dbb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbb8:	2100      	movs	r1, #0
 800dbba:	0092      	lsls	r2, r2, #2
 800dbbc:	f007 fe6c 	bl	8015898 <memset>
 800dbc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	629a      	str	r2, [r3, #40]	; 0x28
 800dbc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dbc8:	b138      	cbz	r0, 800dbda <rcl_wait_set_clear+0xea>
 800dbca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbcc:	2100      	movs	r1, #0
 800dbce:	0092      	lsls	r2, r2, #2
 800dbd0:	f007 fe62 	bl	8015898 <memset>
 800dbd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	6358      	str	r0, [r3, #52]	; 0x34
 800dbda:	bd10      	pop	{r4, pc}
 800dbdc:	200b      	movs	r0, #11
 800dbde:	4770      	bx	lr
 800dbe0:	f44f 7061 	mov.w	r0, #900	; 0x384
 800dbe4:	bd10      	pop	{r4, pc}
 800dbe6:	bf00      	nop

0800dbe8 <rcl_wait_set_resize>:
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	f000 81a7 	beq.w	800df3c <rcl_wait_set_resize+0x354>
 800dbee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf2:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	f1ba 0f00 	cmp.w	sl, #0
 800dbfe:	f000 819f 	beq.w	800df40 <rcl_wait_set_resize+0x358>
 800dc02:	f04f 0800 	mov.w	r8, #0
 800dc06:	461e      	mov	r6, r3
 800dc08:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 800dc0c:	460f      	mov	r7, r1
 800dc0e:	4615      	mov	r5, r2
 800dc10:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 800dc14:	f8c0 8004 	str.w	r8, [r0, #4]
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	f8ca 8000 	str.w	r8, [sl]
 800dc1e:	2900      	cmp	r1, #0
 800dc20:	f000 80ca 	beq.w	800ddb8 <rcl_wait_set_resize+0x1d0>
 800dc24:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800dc28:	464a      	mov	r2, r9
 800dc2a:	6800      	ldr	r0, [r0, #0]
 800dc2c:	4651      	mov	r1, sl
 800dc2e:	4798      	blx	r3
 800dc30:	6020      	str	r0, [r4, #0]
 800dc32:	2800      	cmp	r0, #0
 800dc34:	f000 80d9 	beq.w	800ddea <rcl_wait_set_resize+0x202>
 800dc38:	4652      	mov	r2, sl
 800dc3a:	4641      	mov	r1, r8
 800dc3c:	f007 fe2c 	bl	8015898 <memset>
 800dc40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dc42:	6067      	str	r7, [r4, #4]
 800dc44:	464a      	mov	r2, r9
 800dc46:	6898      	ldr	r0, [r3, #8]
 800dc48:	4651      	mov	r1, sl
 800dc4a:	f8c3 8004 	str.w	r8, [r3, #4]
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	9b00      	ldr	r3, [sp, #0]
 800dc52:	4798      	blx	r3
 800dc54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dc56:	9b01      	ldr	r3, [sp, #4]
 800dc58:	6098      	str	r0, [r3, #8]
 800dc5a:	6897      	ldr	r7, [r2, #8]
 800dc5c:	2f00      	cmp	r7, #0
 800dc5e:	f000 80bf 	beq.w	800dde0 <rcl_wait_set_resize+0x1f8>
 800dc62:	4652      	mov	r2, sl
 800dc64:	4641      	mov	r1, r8
 800dc66:	4638      	mov	r0, r7
 800dc68:	f007 fe16 	bl	8015898 <memset>
 800dc6c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dc70:	2700      	movs	r7, #0
 800dc72:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800dc76:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 800dc7a:	60e7      	str	r7, [r4, #12]
 800dc7c:	f8ca 700c 	str.w	r7, [sl, #12]
 800dc80:	2d00      	cmp	r5, #0
 800dc82:	f040 80b6 	bne.w	800ddf2 <rcl_wait_set_resize+0x20a>
 800dc86:	68a0      	ldr	r0, [r4, #8]
 800dc88:	b130      	cbz	r0, 800dc98 <rcl_wait_set_resize+0xb0>
 800dc8a:	4641      	mov	r1, r8
 800dc8c:	4790      	blx	r2
 800dc8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dc92:	60a5      	str	r5, [r4, #8]
 800dc94:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800dc98:	2700      	movs	r7, #0
 800dc9a:	19ad      	adds	r5, r5, r6
 800dc9c:	f8ca 7010 	str.w	r7, [sl, #16]
 800dca0:	f040 80bf 	bne.w	800de22 <rcl_wait_set_resize+0x23a>
 800dca4:	f8da 0014 	ldr.w	r0, [sl, #20]
 800dca8:	b148      	cbz	r0, 800dcbe <rcl_wait_set_resize+0xd6>
 800dcaa:	4641      	mov	r1, r8
 800dcac:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800dcb0:	4798      	blx	r3
 800dcb2:	f8ca 5014 	str.w	r5, [sl, #20]
 800dcb6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dcba:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800dcc4:	6165      	str	r5, [r4, #20]
 800dcc6:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 800dcca:	2e00      	cmp	r6, #0
 800dccc:	f040 80c0 	bne.w	800de50 <rcl_wait_set_resize+0x268>
 800dcd0:	6920      	ldr	r0, [r4, #16]
 800dcd2:	b140      	cbz	r0, 800dce6 <rcl_wait_set_resize+0xfe>
 800dcd4:	4641      	mov	r1, r8
 800dcd6:	47c8      	blx	r9
 800dcd8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dcdc:	6126      	str	r6, [r4, #16]
 800dcde:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800dce2:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800dce6:	2500      	movs	r5, #0
 800dce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcea:	61e5      	str	r5, [r4, #28]
 800dcec:	f8ca 5018 	str.w	r5, [sl, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 80c2 	bne.w	800de7a <rcl_wait_set_resize+0x292>
 800dcf6:	69a0      	ldr	r0, [r4, #24]
 800dcf8:	b128      	cbz	r0, 800dd06 <rcl_wait_set_resize+0x11e>
 800dcfa:	4641      	mov	r1, r8
 800dcfc:	47c8      	blx	r9
 800dcfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd00:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dd04:	61a3      	str	r3, [r4, #24]
 800dd06:	f8da 0020 	ldr.w	r0, [sl, #32]
 800dd0a:	b130      	cbz	r0, 800dd1a <rcl_wait_set_resize+0x132>
 800dd0c:	4641      	mov	r1, r8
 800dd0e:	47c8      	blx	r9
 800dd10:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dd14:	2300      	movs	r3, #0
 800dd16:	e9ca 3307 	strd	r3, r3, [sl, #28]
 800dd1a:	2600      	movs	r6, #0
 800dd1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd1e:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 800dd22:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 800dd26:	6266      	str	r6, [r4, #36]	; 0x24
 800dd28:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80c9 	beq.w	800dec4 <rcl_wait_set_resize+0x2dc>
 800dd32:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800dd36:	463a      	mov	r2, r7
 800dd38:	6a20      	ldr	r0, [r4, #32]
 800dd3a:	4651      	mov	r1, sl
 800dd3c:	47c8      	blx	r9
 800dd3e:	6220      	str	r0, [r4, #32]
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d052      	beq.n	800ddea <rcl_wait_set_resize+0x202>
 800dd44:	4652      	mov	r2, sl
 800dd46:	4631      	mov	r1, r6
 800dd48:	f007 fda6 	bl	8015898 <memset>
 800dd4c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800dd4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd50:	463a      	mov	r2, r7
 800dd52:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800dd54:	4651      	mov	r1, sl
 800dd56:	6263      	str	r3, [r4, #36]	; 0x24
 800dd58:	62ae      	str	r6, [r5, #40]	; 0x28
 800dd5a:	47c8      	blx	r9
 800dd5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dd5e:	62e8      	str	r0, [r5, #44]	; 0x2c
 800dd60:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800dd62:	2d00      	cmp	r5, #0
 800dd64:	f000 8106 	beq.w	800df74 <rcl_wait_set_resize+0x38c>
 800dd68:	4652      	mov	r2, sl
 800dd6a:	4631      	mov	r1, r6
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f007 fd93 	bl	8015898 <memset>
 800dd72:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dd76:	2500      	movs	r5, #0
 800dd78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd7a:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 800dd7e:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 800dd82:	62e5      	str	r5, [r4, #44]	; 0x2c
 800dd84:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f040 80b0 	bne.w	800deee <rcl_wait_set_resize+0x306>
 800dd8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dd90:	b128      	cbz	r0, 800dd9e <rcl_wait_set_resize+0x1b6>
 800dd92:	4631      	mov	r1, r6
 800dd94:	47b8      	blx	r7
 800dd96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd98:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dd9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd9e:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800dda2:	b318      	cbz	r0, 800ddec <rcl_wait_set_resize+0x204>
 800dda4:	4631      	mov	r1, r6
 800dda6:	47b8      	blx	r7
 800dda8:	2300      	movs	r3, #0
 800ddaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ddac:	4618      	mov	r0, r3
 800ddae:	6393      	str	r3, [r2, #56]	; 0x38
 800ddb0:	6353      	str	r3, [r2, #52]	; 0x34
 800ddb2:	b003      	add	sp, #12
 800ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb8:	6800      	ldr	r0, [r0, #0]
 800ddba:	b120      	cbz	r0, 800ddc6 <rcl_wait_set_resize+0x1de>
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	47d8      	blx	fp
 800ddc0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800ddc4:	6027      	str	r7, [r4, #0]
 800ddc6:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	f43f af50 	beq.w	800dc70 <rcl_wait_set_resize+0x88>
 800ddd0:	4649      	mov	r1, r9
 800ddd2:	47d8      	blx	fp
 800ddd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800ddd8:	2300      	movs	r3, #0
 800ddda:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800ddde:	e747      	b.n	800dc70 <rcl_wait_set_resize+0x88>
 800dde0:	4649      	mov	r1, r9
 800dde2:	6820      	ldr	r0, [r4, #0]
 800dde4:	47d8      	blx	fp
 800dde6:	e9c4 7700 	strd	r7, r7, [r4]
 800ddea:	200a      	movs	r0, #10
 800ddec:	b003      	add	sp, #12
 800ddee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf2:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800ddf6:	4642      	mov	r2, r8
 800ddf8:	68a0      	ldr	r0, [r4, #8]
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	4798      	blx	r3
 800ddfe:	60a0      	str	r0, [r4, #8]
 800de00:	2800      	cmp	r0, #0
 800de02:	d0f2      	beq.n	800ddea <rcl_wait_set_resize+0x202>
 800de04:	4639      	mov	r1, r7
 800de06:	464a      	mov	r2, r9
 800de08:	f007 fd46 	bl	8015898 <memset>
 800de0c:	2700      	movs	r7, #0
 800de0e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800de12:	60e5      	str	r5, [r4, #12]
 800de14:	19ad      	adds	r5, r5, r6
 800de16:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800de1a:	f8ca 7010 	str.w	r7, [sl, #16]
 800de1e:	f43f af41 	beq.w	800dca4 <rcl_wait_set_resize+0xbc>
 800de22:	00ad      	lsls	r5, r5, #2
 800de24:	4642      	mov	r2, r8
 800de26:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 800de2a:	4629      	mov	r1, r5
 800de2c:	f8da 0014 	ldr.w	r0, [sl, #20]
 800de30:	4798      	blx	r3
 800de32:	4680      	mov	r8, r0
 800de34:	f8ca 0014 	str.w	r0, [sl, #20]
 800de38:	2800      	cmp	r0, #0
 800de3a:	f000 8084 	beq.w	800df46 <rcl_wait_set_resize+0x35e>
 800de3e:	462a      	mov	r2, r5
 800de40:	4639      	mov	r1, r7
 800de42:	f007 fd29 	bl	8015898 <memset>
 800de46:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800de4a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800de4e:	e736      	b.n	800dcbe <rcl_wait_set_resize+0xd6>
 800de50:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800de54:	4642      	mov	r2, r8
 800de56:	6920      	ldr	r0, [r4, #16]
 800de58:	4649      	mov	r1, r9
 800de5a:	47b8      	blx	r7
 800de5c:	6120      	str	r0, [r4, #16]
 800de5e:	2800      	cmp	r0, #0
 800de60:	d0c3      	beq.n	800ddea <rcl_wait_set_resize+0x202>
 800de62:	464a      	mov	r2, r9
 800de64:	4629      	mov	r1, r5
 800de66:	f007 fd17 	bl	8015898 <memset>
 800de6a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800de6e:	6166      	str	r6, [r4, #20]
 800de70:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800de74:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800de78:	e735      	b.n	800dce6 <rcl_wait_set_resize+0xfe>
 800de7a:	009e      	lsls	r6, r3, #2
 800de7c:	4642      	mov	r2, r8
 800de7e:	69a0      	ldr	r0, [r4, #24]
 800de80:	4631      	mov	r1, r6
 800de82:	47b8      	blx	r7
 800de84:	61a0      	str	r0, [r4, #24]
 800de86:	2800      	cmp	r0, #0
 800de88:	d0af      	beq.n	800ddea <rcl_wait_set_resize+0x202>
 800de8a:	4632      	mov	r2, r6
 800de8c:	4629      	mov	r1, r5
 800de8e:	f007 fd03 	bl	8015898 <memset>
 800de92:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800de96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de98:	4642      	mov	r2, r8
 800de9a:	4631      	mov	r1, r6
 800de9c:	f8da 0020 	ldr.w	r0, [sl, #32]
 800dea0:	61e3      	str	r3, [r4, #28]
 800dea2:	f8ca 501c 	str.w	r5, [sl, #28]
 800dea6:	47b8      	blx	r7
 800dea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800deaa:	f8ca 0020 	str.w	r0, [sl, #32]
 800deae:	6a1f      	ldr	r7, [r3, #32]
 800deb0:	2f00      	cmp	r7, #0
 800deb2:	d058      	beq.n	800df66 <rcl_wait_set_resize+0x37e>
 800deb4:	4632      	mov	r2, r6
 800deb6:	4629      	mov	r1, r5
 800deb8:	4638      	mov	r0, r7
 800deba:	f007 fced 	bl	8015898 <memset>
 800debe:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dec2:	e72a      	b.n	800dd1a <rcl_wait_set_resize+0x132>
 800dec4:	6a20      	ldr	r0, [r4, #32]
 800dec6:	b128      	cbz	r0, 800ded4 <rcl_wait_set_resize+0x2ec>
 800dec8:	4639      	mov	r1, r7
 800deca:	47c0      	blx	r8
 800decc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dece:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800ded2:	6223      	str	r3, [r4, #32]
 800ded4:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800ded8:	2800      	cmp	r0, #0
 800deda:	f43f af4c 	beq.w	800dd76 <rcl_wait_set_resize+0x18e>
 800dede:	4639      	mov	r1, r7
 800dee0:	47c0      	blx	r8
 800dee2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dee6:	2300      	movs	r3, #0
 800dee8:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 800deec:	e743      	b.n	800dd76 <rcl_wait_set_resize+0x18e>
 800deee:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800def2:	4632      	mov	r2, r6
 800def4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800def6:	4641      	mov	r1, r8
 800def8:	47c8      	blx	r9
 800defa:	62a0      	str	r0, [r4, #40]	; 0x28
 800defc:	2800      	cmp	r0, #0
 800defe:	f43f af74 	beq.w	800ddea <rcl_wait_set_resize+0x202>
 800df02:	4642      	mov	r2, r8
 800df04:	4629      	mov	r1, r5
 800df06:	f007 fcc7 	bl	8015898 <memset>
 800df0a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800df0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df10:	4632      	mov	r2, r6
 800df12:	4641      	mov	r1, r8
 800df14:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800df18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df1a:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800df1e:	47c8      	blx	r9
 800df20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df22:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	b35b      	cbz	r3, 800df82 <rcl_wait_set_resize+0x39a>
 800df2a:	4642      	mov	r2, r8
 800df2c:	4618      	mov	r0, r3
 800df2e:	4629      	mov	r1, r5
 800df30:	f007 fcb2 	bl	8015898 <memset>
 800df34:	4628      	mov	r0, r5
 800df36:	b003      	add	sp, #12
 800df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3c:	200b      	movs	r0, #11
 800df3e:	4770      	bx	lr
 800df40:	f44f 7061 	mov.w	r0, #900	; 0x384
 800df44:	e752      	b.n	800ddec <rcl_wait_set_resize+0x204>
 800df46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df48:	68a0      	ldr	r0, [r4, #8]
 800df4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df4c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800df4e:	4790      	blx	r2
 800df50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df52:	6920      	ldr	r0, [r4, #16]
 800df54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df56:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800df58:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800df5c:	4790      	blx	r2
 800df5e:	200a      	movs	r0, #10
 800df60:	e9c4 8804 	strd	r8, r8, [r4, #16]
 800df64:	e742      	b.n	800ddec <rcl_wait_set_resize+0x204>
 800df66:	69a0      	ldr	r0, [r4, #24]
 800df68:	4641      	mov	r1, r8
 800df6a:	47c8      	blx	r9
 800df6c:	200a      	movs	r0, #10
 800df6e:	e9c4 7706 	strd	r7, r7, [r4, #24]
 800df72:	e73b      	b.n	800ddec <rcl_wait_set_resize+0x204>
 800df74:	6a20      	ldr	r0, [r4, #32]
 800df76:	4639      	mov	r1, r7
 800df78:	47c0      	blx	r8
 800df7a:	200a      	movs	r0, #10
 800df7c:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800df80:	e734      	b.n	800ddec <rcl_wait_set_resize+0x204>
 800df82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800df84:	4631      	mov	r1, r6
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	47b8      	blx	r7
 800df8a:	9b00      	ldr	r3, [sp, #0]
 800df8c:	200a      	movs	r0, #10
 800df8e:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800df92:	e72b      	b.n	800ddec <rcl_wait_set_resize+0x204>

0800df94 <rcl_wait_set_init>:
 800df94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	b087      	sub	sp, #28
 800df9a:	4604      	mov	r4, r0
 800df9c:	460d      	mov	r5, r1
 800df9e:	4616      	mov	r6, r2
 800dfa0:	a814      	add	r0, sp, #80	; 0x50
 800dfa2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800dfa6:	9305      	str	r3, [sp, #20]
 800dfa8:	f000 fafa 	bl	800e5a0 <rcutils_allocator_is_valid>
 800dfac:	2c00      	cmp	r4, #0
 800dfae:	d078      	beq.n	800e0a2 <rcl_wait_set_init+0x10e>
 800dfb0:	f080 0001 	eor.w	r0, r0, #1
 800dfb4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800dfb8:	d173      	bne.n	800e0a2 <rcl_wait_set_init+0x10e>
 800dfba:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800dfbe:	f1b9 0f00 	cmp.w	r9, #0
 800dfc2:	d004      	beq.n	800dfce <rcl_wait_set_init+0x3a>
 800dfc4:	2564      	movs	r5, #100	; 0x64
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	b007      	add	sp, #28
 800dfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfce:	f1b8 0f00 	cmp.w	r8, #0
 800dfd2:	d066      	beq.n	800e0a2 <rcl_wait_set_init+0x10e>
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	f7fd fc5f 	bl	800b898 <rcl_context_is_valid>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d06e      	beq.n	800e0bc <rcl_wait_set_init+0x128>
 800dfde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfe0:	205c      	movs	r0, #92	; 0x5c
 800dfe2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dfe4:	4798      	blx	r3
 800dfe6:	6320      	str	r0, [r4, #48]	; 0x30
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d069      	beq.n	800e0c0 <rcl_wait_set_init+0x12c>
 800dfec:	4649      	mov	r1, r9
 800dfee:	225c      	movs	r2, #92	; 0x5c
 800dff0:	f007 fc52 	bl	8015898 <memset>
 800dff4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dff6:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 800dffa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800dffe:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 800e002:	e9ca 990a 	strd	r9, r9, [sl, #40]	; 0x28
 800e006:	eb03 0e02 	add.w	lr, r3, r2
 800e00a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e00e:	44be      	add	lr, r7
 800e010:	f8dc b000 	ldr.w	fp, [ip]
 800e014:	f8ca 9008 	str.w	r9, [sl, #8]
 800e018:	f10a 0c48 	add.w	ip, sl, #72	; 0x48
 800e01c:	f8ca 9004 	str.w	r9, [sl, #4]
 800e020:	44b6      	add	lr, r6
 800e022:	e9ca 9904 	strd	r9, r9, [sl, #16]
 800e026:	e9ca 9907 	strd	r9, r9, [sl, #28]
 800e02a:	e9ca 990d 	strd	r9, r9, [sl, #52]	; 0x34
 800e02e:	f8d8 9000 	ldr.w	r9, [r8]
 800e032:	f8ca 8044 	str.w	r8, [sl, #68]	; 0x44
 800e036:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e03a:	f109 0028 	add.w	r0, r9, #40	; 0x28
 800e03e:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 800e042:	f8cc b000 	str.w	fp, [ip]
 800e046:	f001 ffe7 	bl	8010018 <rmw_create_wait_set>
 800e04a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e04c:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800e050:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e052:	2800      	cmp	r0, #0
 800e054:	d02a      	beq.n	800e0ac <rcl_wait_set_init+0x118>
 800e056:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e058:	4620      	mov	r0, r4
 800e05a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e05c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e05e:	9302      	str	r3, [sp, #8]
 800e060:	9201      	str	r2, [sp, #4]
 800e062:	4632      	mov	r2, r6
 800e064:	9100      	str	r1, [sp, #0]
 800e066:	4629      	mov	r1, r5
 800e068:	9b05      	ldr	r3, [sp, #20]
 800e06a:	f7ff fdbd 	bl	800dbe8 <rcl_wait_set_resize>
 800e06e:	4605      	mov	r5, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	d0a8      	beq.n	800dfc6 <rcl_wait_set_init+0x32>
 800e074:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e076:	bb2b      	cbnz	r3, 800e0c4 <rcl_wait_set_init+0x130>
 800e078:	2600      	movs	r6, #0
 800e07a:	4620      	mov	r0, r4
 800e07c:	4633      	mov	r3, r6
 800e07e:	4632      	mov	r2, r6
 800e080:	4631      	mov	r1, r6
 800e082:	9602      	str	r6, [sp, #8]
 800e084:	9601      	str	r6, [sp, #4]
 800e086:	9600      	str	r6, [sp, #0]
 800e088:	f7ff fdae 	bl	800dbe8 <rcl_wait_set_resize>
 800e08c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e08e:	2800      	cmp	r0, #0
 800e090:	d099      	beq.n	800dfc6 <rcl_wait_set_init+0x32>
 800e092:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e094:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800e096:	4798      	blx	r3
 800e098:	4628      	mov	r0, r5
 800e09a:	6326      	str	r6, [r4, #48]	; 0x30
 800e09c:	b007      	add	sp, #28
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	250b      	movs	r5, #11
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	b007      	add	sp, #28
 800e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ac:	2501      	movs	r5, #1
 800e0ae:	f001 ffb7 	bl	8010020 <rmw_destroy_wait_set>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	bf18      	it	ne
 800e0b6:	f44f 7561 	movne.w	r5, #900	; 0x384
 800e0ba:	e7dd      	b.n	800e078 <rcl_wait_set_init+0xe4>
 800e0bc:	2565      	movs	r5, #101	; 0x65
 800e0be:	e782      	b.n	800dfc6 <rcl_wait_set_init+0x32>
 800e0c0:	250a      	movs	r5, #10
 800e0c2:	e780      	b.n	800dfc6 <rcl_wait_set_init+0x32>
 800e0c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e0c6:	e7f2      	b.n	800e0ae <rcl_wait_set_init+0x11a>

0800e0c8 <rcl_wait_set_add_guard_condition>:
 800e0c8:	b328      	cbz	r0, 800e116 <rcl_wait_set_add_guard_condition+0x4e>
 800e0ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	b1db      	cbz	r3, 800e10a <rcl_wait_set_add_guard_condition+0x42>
 800e0d2:	b321      	cbz	r1, 800e11e <rcl_wait_set_add_guard_condition+0x56>
 800e0d4:	68dd      	ldr	r5, [r3, #12]
 800e0d6:	68e0      	ldr	r0, [r4, #12]
 800e0d8:	4285      	cmp	r5, r0
 800e0da:	d219      	bcs.n	800e110 <rcl_wait_set_add_guard_condition+0x48>
 800e0dc:	68a6      	ldr	r6, [r4, #8]
 800e0de:	1c68      	adds	r0, r5, #1
 800e0e0:	60d8      	str	r0, [r3, #12]
 800e0e2:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
 800e0e6:	b102      	cbz	r2, 800e0ea <rcl_wait_set_add_guard_condition+0x22>
 800e0e8:	6015      	str	r5, [r2, #0]
 800e0ea:	4608      	mov	r0, r1
 800e0ec:	f005 fe42 	bl	8013d74 <rcl_guard_condition_get_rmw_handle>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	b190      	cbz	r0, 800e11a <rcl_wait_set_add_guard_condition+0x52>
 800e0f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	694b      	ldr	r3, [r1, #20]
 800e0fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e100:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e102:	6913      	ldr	r3, [r2, #16]
 800e104:	3301      	adds	r3, #1
 800e106:	6113      	str	r3, [r2, #16]
 800e108:	bd70      	pop	{r4, r5, r6, pc}
 800e10a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e10e:	bd70      	pop	{r4, r5, r6, pc}
 800e110:	f240 3086 	movw	r0, #902	; 0x386
 800e114:	bd70      	pop	{r4, r5, r6, pc}
 800e116:	200b      	movs	r0, #11
 800e118:	4770      	bx	lr
 800e11a:	2001      	movs	r0, #1
 800e11c:	bd70      	pop	{r4, r5, r6, pc}
 800e11e:	200b      	movs	r0, #11
 800e120:	bd70      	pop	{r4, r5, r6, pc}
 800e122:	bf00      	nop

0800e124 <rcl_wait_set_add_timer>:
 800e124:	b348      	cbz	r0, 800e17a <rcl_wait_set_add_timer+0x56>
 800e126:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	4604      	mov	r4, r0
 800e12c:	b1fb      	cbz	r3, 800e16e <rcl_wait_set_add_timer+0x4a>
 800e12e:	b331      	cbz	r1, 800e17e <rcl_wait_set_add_timer+0x5a>
 800e130:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e132:	6965      	ldr	r5, [r4, #20]
 800e134:	42a8      	cmp	r0, r5
 800e136:	d21d      	bcs.n	800e174 <rcl_wait_set_add_timer+0x50>
 800e138:	6926      	ldr	r6, [r4, #16]
 800e13a:	1c45      	adds	r5, r0, #1
 800e13c:	641d      	str	r5, [r3, #64]	; 0x40
 800e13e:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
 800e142:	b102      	cbz	r2, 800e146 <rcl_wait_set_add_timer+0x22>
 800e144:	6010      	str	r0, [r2, #0]
 800e146:	4608      	mov	r0, r1
 800e148:	f7ff fab4 	bl	800d6b4 <rcl_timer_get_guard_condition>
 800e14c:	b170      	cbz	r0, 800e16c <rcl_wait_set_add_timer+0x48>
 800e14e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e150:	68e3      	ldr	r3, [r4, #12]
 800e152:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800e154:	3b01      	subs	r3, #1
 800e156:	441d      	add	r5, r3
 800e158:	f005 fe0c 	bl	8013d74 <rcl_guard_condition_get_rmw_handle>
 800e15c:	4603      	mov	r3, r0
 800e15e:	b180      	cbz	r0, 800e182 <rcl_wait_set_add_timer+0x5e>
 800e160:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e162:	2000      	movs	r0, #0
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	694b      	ldr	r3, [r1, #20]
 800e168:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e16c:	bd70      	pop	{r4, r5, r6, pc}
 800e16e:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	f240 3086 	movw	r0, #902	; 0x386
 800e178:	bd70      	pop	{r4, r5, r6, pc}
 800e17a:	200b      	movs	r0, #11
 800e17c:	4770      	bx	lr
 800e17e:	200b      	movs	r0, #11
 800e180:	bd70      	pop	{r4, r5, r6, pc}
 800e182:	2001      	movs	r0, #1
 800e184:	bd70      	pop	{r4, r5, r6, pc}
 800e186:	bf00      	nop

0800e188 <rcl_wait_set_add_client>:
 800e188:	b328      	cbz	r0, 800e1d6 <rcl_wait_set_add_client+0x4e>
 800e18a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	4604      	mov	r4, r0
 800e190:	b1db      	cbz	r3, 800e1ca <rcl_wait_set_add_client+0x42>
 800e192:	b321      	cbz	r1, 800e1de <rcl_wait_set_add_client+0x56>
 800e194:	699d      	ldr	r5, [r3, #24]
 800e196:	69e0      	ldr	r0, [r4, #28]
 800e198:	4285      	cmp	r5, r0
 800e19a:	d219      	bcs.n	800e1d0 <rcl_wait_set_add_client+0x48>
 800e19c:	69a6      	ldr	r6, [r4, #24]
 800e19e:	1c68      	adds	r0, r5, #1
 800e1a0:	6198      	str	r0, [r3, #24]
 800e1a2:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
 800e1a6:	b102      	cbz	r2, 800e1aa <rcl_wait_set_add_client+0x22>
 800e1a8:	6015      	str	r5, [r2, #0]
 800e1aa:	4608      	mov	r0, r1
 800e1ac:	f7fd fae0 	bl	800b770 <rcl_client_get_rmw_handle>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	b190      	cbz	r0, 800e1da <rcl_wait_set_add_client+0x52>
 800e1b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	6a0b      	ldr	r3, [r1, #32]
 800e1bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e1c2:	69d3      	ldr	r3, [r2, #28]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	61d3      	str	r3, [r2, #28]
 800e1c8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e1ce:	bd70      	pop	{r4, r5, r6, pc}
 800e1d0:	f240 3086 	movw	r0, #902	; 0x386
 800e1d4:	bd70      	pop	{r4, r5, r6, pc}
 800e1d6:	200b      	movs	r0, #11
 800e1d8:	4770      	bx	lr
 800e1da:	2001      	movs	r0, #1
 800e1dc:	bd70      	pop	{r4, r5, r6, pc}
 800e1de:	200b      	movs	r0, #11
 800e1e0:	bd70      	pop	{r4, r5, r6, pc}
 800e1e2:	bf00      	nop

0800e1e4 <rcl_wait_set_add_service>:
 800e1e4:	b328      	cbz	r0, 800e232 <rcl_wait_set_add_service+0x4e>
 800e1e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	b1db      	cbz	r3, 800e226 <rcl_wait_set_add_service+0x42>
 800e1ee:	b321      	cbz	r1, 800e23a <rcl_wait_set_add_service+0x56>
 800e1f0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e1f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e1f4:	4285      	cmp	r5, r0
 800e1f6:	d219      	bcs.n	800e22c <rcl_wait_set_add_service+0x48>
 800e1f8:	6a26      	ldr	r6, [r4, #32]
 800e1fa:	1c68      	adds	r0, r5, #1
 800e1fc:	6258      	str	r0, [r3, #36]	; 0x24
 800e1fe:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
 800e202:	b102      	cbz	r2, 800e206 <rcl_wait_set_add_service+0x22>
 800e204:	6015      	str	r5, [r2, #0]
 800e206:	4608      	mov	r0, r1
 800e208:	f7fe fc94 	bl	800cb34 <rcl_service_get_rmw_handle>
 800e20c:	4603      	mov	r3, r0
 800e20e:	b190      	cbz	r0, 800e236 <rcl_wait_set_add_service+0x52>
 800e210:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e212:	2000      	movs	r0, #0
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800e218:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e21c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e21e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800e220:	3301      	adds	r3, #1
 800e222:	6293      	str	r3, [r2, #40]	; 0x28
 800e224:	bd70      	pop	{r4, r5, r6, pc}
 800e226:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e22a:	bd70      	pop	{r4, r5, r6, pc}
 800e22c:	f240 3086 	movw	r0, #902	; 0x386
 800e230:	bd70      	pop	{r4, r5, r6, pc}
 800e232:	200b      	movs	r0, #11
 800e234:	4770      	bx	lr
 800e236:	2001      	movs	r0, #1
 800e238:	bd70      	pop	{r4, r5, r6, pc}
 800e23a:	200b      	movs	r0, #11
 800e23c:	bd70      	pop	{r4, r5, r6, pc}
 800e23e:	bf00      	nop

0800e240 <rcl_wait>:
 800e240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e244:	b08f      	sub	sp, #60	; 0x3c
 800e246:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f000 8155 	beq.w	800e4fa <rcl_wait+0x2ba>
 800e250:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800e252:	4604      	mov	r4, r0
 800e254:	2d00      	cmp	r5, #0
 800e256:	f000 8122 	beq.w	800e49e <rcl_wait+0x25e>
 800e25a:	6843      	ldr	r3, [r0, #4]
 800e25c:	b973      	cbnz	r3, 800e27c <rcl_wait+0x3c>
 800e25e:	68e3      	ldr	r3, [r4, #12]
 800e260:	b963      	cbnz	r3, 800e27c <rcl_wait+0x3c>
 800e262:	6963      	ldr	r3, [r4, #20]
 800e264:	b953      	cbnz	r3, 800e27c <rcl_wait+0x3c>
 800e266:	69e3      	ldr	r3, [r4, #28]
 800e268:	b943      	cbnz	r3, 800e27c <rcl_wait+0x3c>
 800e26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e26c:	b933      	cbnz	r3, 800e27c <rcl_wait+0x3c>
 800e26e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e270:	b923      	cbnz	r3, 800e27c <rcl_wait+0x3c>
 800e272:	f240 3085 	movw	r0, #901	; 0x385
 800e276:	b00f      	add	sp, #60	; 0x3c
 800e278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e280:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800e282:	2a01      	cmp	r2, #1
 800e284:	f173 0300 	sbcs.w	r3, r3, #0
 800e288:	db57      	blt.n	800e33a <rcl_wait+0xfa>
 800e28a:	2900      	cmp	r1, #0
 800e28c:	f000 810c 	beq.w	800e4a8 <rcl_wait+0x268>
 800e290:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800e294:	2300      	movs	r3, #0
 800e296:	f04f 0800 	mov.w	r8, #0
 800e29a:	f04f 0900 	mov.w	r9, #0
 800e29e:	469b      	mov	fp, r3
 800e2a0:	9307      	str	r3, [sp, #28]
 800e2a2:	e00e      	b.n	800e2c2 <rcl_wait+0x82>
 800e2a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e2a6:	6922      	ldr	r2, [r4, #16]
 800e2a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800e2aa:	f842 000a 	str.w	r0, [r2, sl]
 800e2ae:	f118 0801 	adds.w	r8, r8, #1
 800e2b2:	f04f 0300 	mov.w	r3, #0
 800e2b6:	f149 0900 	adc.w	r9, r9, #0
 800e2ba:	4599      	cmp	r9, r3
 800e2bc:	bf08      	it	eq
 800e2be:	4588      	cmpeq	r8, r1
 800e2c0:	d246      	bcs.n	800e350 <rcl_wait+0x110>
 800e2c2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800e2c6:	6922      	ldr	r2, [r4, #16]
 800e2c8:	f852 000a 	ldr.w	r0, [r2, sl]
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d0ee      	beq.n	800e2ae <rcl_wait+0x6e>
 800e2d0:	68e2      	ldr	r2, [r4, #12]
 800e2d2:	6969      	ldr	r1, [r5, #20]
 800e2d4:	4442      	add	r2, r8
 800e2d6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800e2da:	b13b      	cbz	r3, 800e2ec <rcl_wait+0xac>
 800e2dc:	692a      	ldr	r2, [r5, #16]
 800e2de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e2e2:	3201      	adds	r2, #1
 800e2e4:	6921      	ldr	r1, [r4, #16]
 800e2e6:	612a      	str	r2, [r5, #16]
 800e2e8:	f851 000a 	ldr.w	r0, [r1, sl]
 800e2ec:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800e2f0:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 800e2f4:	f7ff f9ca 	bl	800d68c <rcl_timer_is_canceled>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d1bc      	bne.n	800e276 <rcl_wait+0x36>
 800e2fc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800e300:	2a00      	cmp	r2, #0
 800e302:	d1cf      	bne.n	800e2a4 <rcl_wait+0x64>
 800e304:	6922      	ldr	r2, [r4, #16]
 800e306:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e30a:	a90a      	add	r1, sp, #40	; 0x28
 800e30c:	f852 000a 	ldr.w	r0, [r2, sl]
 800e310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e314:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e318:	f7ff f994 	bl	800d644 <rcl_timer_get_time_until_next_call>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d1aa      	bne.n	800e276 <rcl_wait+0x36>
 800e320:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e324:	42b2      	cmp	r2, r6
 800e326:	eb73 0107 	sbcs.w	r1, r3, r7
 800e32a:	da03      	bge.n	800e334 <rcl_wait+0xf4>
 800e32c:	461f      	mov	r7, r3
 800e32e:	4616      	mov	r6, r2
 800e330:	2301      	movs	r3, #1
 800e332:	9307      	str	r3, [sp, #28]
 800e334:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e336:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800e338:	e7b9      	b.n	800e2ae <rcl_wait+0x6e>
 800e33a:	b121      	cbz	r1, 800e346 <rcl_wait+0x106>
 800e33c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e340:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e344:	e7a6      	b.n	800e294 <rcl_wait+0x54>
 800e346:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e34a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e34e:	9107      	str	r1, [sp, #28]
 800e350:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800e354:	ea51 0302 	orrs.w	r3, r1, r2
 800e358:	f040 80a9 	bne.w	800e4ae <rcl_wait+0x26e>
 800e35c:	ab0a      	add	r3, sp, #40	; 0x28
 800e35e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800e362:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 800e366:	9302      	str	r3, [sp, #8]
 800e368:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800e36c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800e36e:	f105 031c 	add.w	r3, r5, #28
 800e372:	9200      	str	r2, [sp, #0]
 800e374:	1d28      	adds	r0, r5, #4
 800e376:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800e37a:	9101      	str	r1, [sp, #4]
 800e37c:	f105 0110 	add.w	r1, r5, #16
 800e380:	f001 fd1a 	bl	800fdb8 <rmw_wait>
 800e384:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e386:	4680      	mov	r8, r0
 800e388:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e38a:	b30b      	cbz	r3, 800e3d0 <rcl_wait+0x190>
 800e38c:	2500      	movs	r5, #0
 800e38e:	462f      	mov	r7, r5
 800e390:	e004      	b.n	800e39c <rcl_wait+0x15c>
 800e392:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e394:	3501      	adds	r5, #1
 800e396:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e398:	42ab      	cmp	r3, r5
 800e39a:	d919      	bls.n	800e3d0 <rcl_wait+0x190>
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800e3a2:	00ae      	lsls	r6, r5, #2
 800e3a4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d0f3      	beq.n	800e394 <rcl_wait+0x154>
 800e3ac:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800e3b0:	f7ff f90a 	bl	800d5c8 <rcl_timer_is_ready>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f47f af5e 	bne.w	800e276 <rcl_wait+0x36>
 800e3ba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1e7      	bne.n	800e392 <rcl_wait+0x152>
 800e3c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e3c4:	3501      	adds	r5, #1
 800e3c6:	6921      	ldr	r1, [r4, #16]
 800e3c8:	518b      	str	r3, [r1, r6]
 800e3ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e3cc:	42ab      	cmp	r3, r5
 800e3ce:	d8e5      	bhi.n	800e39c <rcl_wait+0x15c>
 800e3d0:	f038 0002 	bics.w	r0, r8, #2
 800e3d4:	f040 8095 	bne.w	800e502 <rcl_wait+0x2c2>
 800e3d8:	6866      	ldr	r6, [r4, #4]
 800e3da:	b17e      	cbz	r6, 800e3fc <rcl_wait+0x1bc>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	e002      	b.n	800e3e6 <rcl_wait+0x1a6>
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	42b3      	cmp	r3, r6
 800e3e4:	d00a      	beq.n	800e3fc <rcl_wait+0x1bc>
 800e3e6:	6891      	ldr	r1, [r2, #8]
 800e3e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3ec:	2900      	cmp	r1, #0
 800e3ee:	d1f7      	bne.n	800e3e0 <rcl_wait+0x1a0>
 800e3f0:	6825      	ldr	r5, [r4, #0]
 800e3f2:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	42b3      	cmp	r3, r6
 800e3fa:	d1f4      	bne.n	800e3e6 <rcl_wait+0x1a6>
 800e3fc:	68e6      	ldr	r6, [r4, #12]
 800e3fe:	b17e      	cbz	r6, 800e420 <rcl_wait+0x1e0>
 800e400:	2300      	movs	r3, #0
 800e402:	e002      	b.n	800e40a <rcl_wait+0x1ca>
 800e404:	3301      	adds	r3, #1
 800e406:	42b3      	cmp	r3, r6
 800e408:	d00a      	beq.n	800e420 <rcl_wait+0x1e0>
 800e40a:	6951      	ldr	r1, [r2, #20]
 800e40c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e410:	2900      	cmp	r1, #0
 800e412:	d1f7      	bne.n	800e404 <rcl_wait+0x1c4>
 800e414:	68a5      	ldr	r5, [r4, #8]
 800e416:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 800e41a:	3301      	adds	r3, #1
 800e41c:	42b3      	cmp	r3, r6
 800e41e:	d1f4      	bne.n	800e40a <rcl_wait+0x1ca>
 800e420:	69e6      	ldr	r6, [r4, #28]
 800e422:	b17e      	cbz	r6, 800e444 <rcl_wait+0x204>
 800e424:	2300      	movs	r3, #0
 800e426:	e002      	b.n	800e42e <rcl_wait+0x1ee>
 800e428:	3301      	adds	r3, #1
 800e42a:	42b3      	cmp	r3, r6
 800e42c:	d00a      	beq.n	800e444 <rcl_wait+0x204>
 800e42e:	6a11      	ldr	r1, [r2, #32]
 800e430:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e434:	2900      	cmp	r1, #0
 800e436:	d1f7      	bne.n	800e428 <rcl_wait+0x1e8>
 800e438:	69a5      	ldr	r5, [r4, #24]
 800e43a:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 800e43e:	3301      	adds	r3, #1
 800e440:	42b3      	cmp	r3, r6
 800e442:	d1f4      	bne.n	800e42e <rcl_wait+0x1ee>
 800e444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e446:	b17e      	cbz	r6, 800e468 <rcl_wait+0x228>
 800e448:	2300      	movs	r3, #0
 800e44a:	e002      	b.n	800e452 <rcl_wait+0x212>
 800e44c:	3301      	adds	r3, #1
 800e44e:	42b3      	cmp	r3, r6
 800e450:	d00a      	beq.n	800e468 <rcl_wait+0x228>
 800e452:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e454:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e458:	2900      	cmp	r1, #0
 800e45a:	d1f7      	bne.n	800e44c <rcl_wait+0x20c>
 800e45c:	6a25      	ldr	r5, [r4, #32]
 800e45e:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 800e462:	3301      	adds	r3, #1
 800e464:	42b3      	cmp	r3, r6
 800e466:	d1f4      	bne.n	800e452 <rcl_wait+0x212>
 800e468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e46a:	b17e      	cbz	r6, 800e48c <rcl_wait+0x24c>
 800e46c:	2300      	movs	r3, #0
 800e46e:	e002      	b.n	800e476 <rcl_wait+0x236>
 800e470:	3301      	adds	r3, #1
 800e472:	42b3      	cmp	r3, r6
 800e474:	d00a      	beq.n	800e48c <rcl_wait+0x24c>
 800e476:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800e478:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e47c:	2900      	cmp	r1, #0
 800e47e:	d1f7      	bne.n	800e470 <rcl_wait+0x230>
 800e480:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e482:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 800e486:	3301      	adds	r3, #1
 800e488:	42b3      	cmp	r3, r6
 800e48a:	d1f4      	bne.n	800e476 <rcl_wait+0x236>
 800e48c:	f1b8 0f02 	cmp.w	r8, #2
 800e490:	f47f aef1 	bne.w	800e276 <rcl_wait+0x36>
 800e494:	9b07      	ldr	r3, [sp, #28]
 800e496:	2b00      	cmp	r3, #0
 800e498:	bf08      	it	eq
 800e49a:	2002      	moveq	r0, #2
 800e49c:	e6eb      	b.n	800e276 <rcl_wait+0x36>
 800e49e:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e4a2:	b00f      	add	sp, #60	; 0x3c
 800e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800e4ac:	9107      	str	r1, [sp, #28]
 800e4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4b2:	2a01      	cmp	r2, #1
 800e4b4:	f173 0300 	sbcs.w	r3, r3, #0
 800e4b8:	da03      	bge.n	800e4c2 <rcl_wait+0x282>
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f43f af52 	beq.w	800e366 <rcl_wait+0x126>
 800e4c2:	2e00      	cmp	r6, #0
 800e4c4:	f177 0300 	sbcs.w	r3, r7, #0
 800e4c8:	db1d      	blt.n	800e506 <rcl_wait+0x2c6>
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	a310      	add	r3, pc, #64	; (adr r3, 800e510 <rcl_wait+0x2d0>)
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f7f2 ff36 	bl	8001344 <__aeabi_ldivmod>
 800e4d8:	4680      	mov	r8, r0
 800e4da:	4689      	mov	r9, r1
 800e4dc:	4630      	mov	r0, r6
 800e4de:	4639      	mov	r1, r7
 800e4e0:	a30b      	add	r3, pc, #44	; (adr r3, 800e510 <rcl_wait+0x2d0>)
 800e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800e4ea:	f7f2 ff2b 	bl	8001344 <__aeabi_ldivmod>
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	ab0a      	add	r3, sp, #40	; 0x28
 800e4f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e4f8:	e735      	b.n	800e366 <rcl_wait+0x126>
 800e4fa:	200b      	movs	r0, #11
 800e4fc:	b00f      	add	sp, #60	; 0x3c
 800e4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e502:	2001      	movs	r0, #1
 800e504:	e6b7      	b.n	800e276 <rcl_wait+0x36>
 800e506:	2600      	movs	r6, #0
 800e508:	2700      	movs	r7, #0
 800e50a:	e7de      	b.n	800e4ca <rcl_wait+0x28a>
 800e50c:	f3af 8000 	nop.w
 800e510:	3b9aca00 	.word	0x3b9aca00
 800e514:	00000000 	.word	0x00000000

0800e518 <__default_zero_allocate>:
 800e518:	f006 bd3c 	b.w	8014f94 <calloc>

0800e51c <__default_reallocate>:
 800e51c:	f007 ba52 	b.w	80159c4 <realloc>

0800e520 <__default_deallocate>:
 800e520:	f006 be5c 	b.w	80151dc <free>

0800e524 <__default_allocate>:
 800e524:	f006 be52 	b.w	80151cc <malloc>

0800e528 <rcutils_get_zero_initialized_allocator>:
 800e528:	b470      	push	{r4, r5, r6}
 800e52a:	4d05      	ldr	r5, [pc, #20]	; (800e540 <rcutils_get_zero_initialized_allocator+0x18>)
 800e52c:	4606      	mov	r6, r0
 800e52e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e530:	4634      	mov	r4, r6
 800e532:	682d      	ldr	r5, [r5, #0]
 800e534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e536:	4630      	mov	r0, r6
 800e538:	6025      	str	r5, [r4, #0]
 800e53a:	bc70      	pop	{r4, r5, r6}
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	0801fb08 	.word	0x0801fb08

0800e544 <rcutils_set_default_allocator>:
 800e544:	b1a0      	cbz	r0, 800e570 <rcutils_set_default_allocator+0x2c>
 800e546:	6802      	ldr	r2, [r0, #0]
 800e548:	b19a      	cbz	r2, 800e572 <rcutils_set_default_allocator+0x2e>
 800e54a:	6841      	ldr	r1, [r0, #4]
 800e54c:	b199      	cbz	r1, 800e576 <rcutils_set_default_allocator+0x32>
 800e54e:	b470      	push	{r4, r5, r6}
 800e550:	68c4      	ldr	r4, [r0, #12]
 800e552:	b15c      	cbz	r4, 800e56c <rcutils_set_default_allocator+0x28>
 800e554:	6885      	ldr	r5, [r0, #8]
 800e556:	b185      	cbz	r5, 800e57a <rcutils_set_default_allocator+0x36>
 800e558:	4b09      	ldr	r3, [pc, #36]	; (800e580 <rcutils_set_default_allocator+0x3c>)
 800e55a:	2600      	movs	r6, #0
 800e55c:	2001      	movs	r0, #1
 800e55e:	601a      	str	r2, [r3, #0]
 800e560:	e9c3 1501 	strd	r1, r5, [r3, #4]
 800e564:	e9c3 4603 	strd	r4, r6, [r3, #12]
 800e568:	bc70      	pop	{r4, r5, r6}
 800e56a:	4770      	bx	lr
 800e56c:	4620      	mov	r0, r4
 800e56e:	e7fb      	b.n	800e568 <rcutils_set_default_allocator+0x24>
 800e570:	4770      	bx	lr
 800e572:	4610      	mov	r0, r2
 800e574:	4770      	bx	lr
 800e576:	4608      	mov	r0, r1
 800e578:	4770      	bx	lr
 800e57a:	4628      	mov	r0, r5
 800e57c:	e7f4      	b.n	800e568 <rcutils_set_default_allocator+0x24>
 800e57e:	bf00      	nop
 800e580:	20000104 	.word	0x20000104

0800e584 <rcutils_get_default_allocator>:
 800e584:	b470      	push	{r4, r5, r6}
 800e586:	4d05      	ldr	r5, [pc, #20]	; (800e59c <rcutils_get_default_allocator+0x18>)
 800e588:	4606      	mov	r6, r0
 800e58a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e58c:	4634      	mov	r4, r6
 800e58e:	682d      	ldr	r5, [r5, #0]
 800e590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e592:	4630      	mov	r0, r6
 800e594:	6025      	str	r5, [r4, #0]
 800e596:	bc70      	pop	{r4, r5, r6}
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	20000104 	.word	0x20000104

0800e5a0 <rcutils_allocator_is_valid>:
 800e5a0:	b158      	cbz	r0, 800e5ba <rcutils_allocator_is_valid+0x1a>
 800e5a2:	6803      	ldr	r3, [r0, #0]
 800e5a4:	b143      	cbz	r3, 800e5b8 <rcutils_allocator_is_valid+0x18>
 800e5a6:	6843      	ldr	r3, [r0, #4]
 800e5a8:	b133      	cbz	r3, 800e5b8 <rcutils_allocator_is_valid+0x18>
 800e5aa:	68c3      	ldr	r3, [r0, #12]
 800e5ac:	b123      	cbz	r3, 800e5b8 <rcutils_allocator_is_valid+0x18>
 800e5ae:	6880      	ldr	r0, [r0, #8]
 800e5b0:	3800      	subs	r0, #0
 800e5b2:	bf18      	it	ne
 800e5b4:	2001      	movne	r0, #1
 800e5b6:	4770      	bx	lr
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	4770      	bx	lr

0800e5bc <__rcutils_format_error_string>:
 800e5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c0:	460f      	mov	r7, r1
 800e5c2:	b087      	sub	sp, #28
 800e5c4:	4680      	mov	r8, r0
 800e5c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	f240 39ff 	movw	r9, #1023	; 0x3ff
 800e5d0:	f007 fd9a 	bl	8016108 <strnlen>
 800e5d4:	4606      	mov	r6, r0
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	4640      	mov	r0, r8
 800e5da:	454e      	cmp	r6, r9
 800e5dc:	f507 7b40 	add.w	fp, r7, #768	; 0x300
 800e5e0:	bf28      	it	cs
 800e5e2:	464e      	movcs	r6, r9
 800e5e4:	f5c6 6580 	rsb	r5, r6, #1024	; 0x400
 800e5e8:	4632      	mov	r2, r6
 800e5ea:	f007 f8e9 	bl	80157c0 <memmove>
 800e5ee:	eb08 0a06 	add.w	sl, r8, r6
 800e5f2:	2d05      	cmp	r5, #5
 800e5f4:	462c      	mov	r4, r5
 800e5f6:	f04f 0300 	mov.w	r3, #0
 800e5fa:	494e      	ldr	r1, [pc, #312]	; (800e734 <__rcutils_format_error_string+0x178>)
 800e5fc:	bf28      	it	cs
 800e5fe:	2405      	movcs	r4, #5
 800e600:	4650      	mov	r0, sl
 800e602:	f808 3006 	strb.w	r3, [r8, r6]
 800e606:	42a5      	cmp	r5, r4
 800e608:	bf98      	it	ls
 800e60a:	eba9 0406 	subls.w	r4, r9, r6
 800e60e:	f04f 0900 	mov.w	r9, #0
 800e612:	1b2d      	subs	r5, r5, r4
 800e614:	4622      	mov	r2, r4
 800e616:	f7f1 fe13 	bl	8000240 <memcpy>
 800e61a:	f80a 9004 	strb.w	r9, [sl, r4]
 800e61e:	4629      	mov	r1, r5
 800e620:	4658      	mov	r0, fp
 800e622:	f007 fd71 	bl	8016108 <strnlen>
 800e626:	4285      	cmp	r5, r0
 800e628:	4454      	add	r4, sl
 800e62a:	4606      	mov	r6, r0
 800e62c:	d96c      	bls.n	800e708 <__rcutils_format_error_string+0x14c>
 800e62e:	eba5 0800 	sub.w	r8, r5, r0
 800e632:	4659      	mov	r1, fp
 800e634:	4602      	mov	r2, r0
 800e636:	4620      	mov	r0, r4
 800e638:	f1b8 0f01 	cmp.w	r8, #1
 800e63c:	46c3      	mov	fp, r8
 800e63e:	bf28      	it	cs
 800e640:	f04f 0b01 	movcs.w	fp, #1
 800e644:	f007 f8bc 	bl	80157c0 <memmove>
 800e648:	19a3      	adds	r3, r4, r6
 800e64a:	f804 9006 	strb.w	r9, [r4, r6]
 800e64e:	45d8      	cmp	r8, fp
 800e650:	d965      	bls.n	800e71e <__rcutils_format_error_string+0x162>
 800e652:	eba8 080b 	sub.w	r8, r8, fp
 800e656:	2600      	movs	r6, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	465a      	mov	r2, fp
 800e65c:	4936      	ldr	r1, [pc, #216]	; (800e738 <__rcutils_format_error_string+0x17c>)
 800e65e:	eb03 090b 	add.w	r9, r3, fp
 800e662:	f7f1 fded 	bl	8000240 <memcpy>
 800e666:	f800 600b 	strb.w	r6, [r0, fp]
 800e66a:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 800e66e:	ea54 0305 	orrs.w	r3, r4, r5
 800e672:	d059      	beq.n	800e728 <__rcutils_format_error_string+0x16c>
 800e674:	466f      	mov	r7, sp
 800e676:	46ba      	mov	sl, r7
 800e678:	4620      	mov	r0, r4
 800e67a:	4629      	mov	r1, r5
 800e67c:	220a      	movs	r2, #10
 800e67e:	2300      	movs	r3, #0
 800e680:	f7f2 feb0 	bl	80013e4 <__aeabi_uldivmod>
 800e684:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800e688:	2300      	movs	r3, #0
 800e68a:	220a      	movs	r2, #10
 800e68c:	4620      	mov	r0, r4
 800e68e:	f80a 1b01 	strb.w	r1, [sl], #1
 800e692:	4629      	mov	r1, r5
 800e694:	3601      	adds	r6, #1
 800e696:	f7f2 fea5 	bl	80013e4 <__aeabi_uldivmod>
 800e69a:	462b      	mov	r3, r5
 800e69c:	4622      	mov	r2, r4
 800e69e:	460d      	mov	r5, r1
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	bf08      	it	eq
 800e6a6:	2a0a      	cmpeq	r2, #10
 800e6a8:	d2e6      	bcs.n	800e678 <__rcutils_format_error_string+0xbc>
 800e6aa:	ab06      	add	r3, sp, #24
 800e6ac:	2115      	movs	r1, #21
 800e6ae:	4638      	mov	r0, r7
 800e6b0:	441e      	add	r6, r3
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f806 3c18 	strb.w	r3, [r6, #-24]
 800e6b8:	f007 fd26 	bl	8016108 <strnlen>
 800e6bc:	2801      	cmp	r0, #1
 800e6be:	d90f      	bls.n	800e6e0 <__rcutils_format_error_string+0x124>
 800e6c0:	1e43      	subs	r3, r0, #1
 800e6c2:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800e6c6:	463a      	mov	r2, r7
 800e6c8:	443b      	add	r3, r7
 800e6ca:	4408      	add	r0, r1
 800e6cc:	7814      	ldrb	r4, [r2, #0]
 800e6ce:	7819      	ldrb	r1, [r3, #0]
 800e6d0:	f802 1b01 	strb.w	r1, [r2], #1
 800e6d4:	1a81      	subs	r1, r0, r2
 800e6d6:	f803 4901 	strb.w	r4, [r3], #-1
 800e6da:	1ac4      	subs	r4, r0, r3
 800e6dc:	428c      	cmp	r4, r1
 800e6de:	d3f5      	bcc.n	800e6cc <__rcutils_format_error_string+0x110>
 800e6e0:	4641      	mov	r1, r8
 800e6e2:	4638      	mov	r0, r7
 800e6e4:	f007 fd10 	bl	8016108 <strnlen>
 800e6e8:	4540      	cmp	r0, r8
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	4639      	mov	r1, r7
 800e6ee:	bf28      	it	cs
 800e6f0:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 800e6f4:	4648      	mov	r0, r9
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	f7f1 fda2 	bl	8000240 <memcpy>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f809 3004 	strb.w	r3, [r9, r4]
 800e702:	b007      	add	sp, #28
 800e704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e708:	3d01      	subs	r5, #1
 800e70a:	4659      	mov	r1, fp
 800e70c:	4620      	mov	r0, r4
 800e70e:	f04f 0801 	mov.w	r8, #1
 800e712:	462a      	mov	r2, r5
 800e714:	f007 f854 	bl	80157c0 <memmove>
 800e718:	1963      	adds	r3, r4, r5
 800e71a:	f804 9005 	strb.w	r9, [r4, r5]
 800e71e:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 800e722:	f04f 0801 	mov.w	r8, #1
 800e726:	e796      	b.n	800e656 <__rcutils_format_error_string+0x9a>
 800e728:	2330      	movs	r3, #48	; 0x30
 800e72a:	466f      	mov	r7, sp
 800e72c:	f8ad 3000 	strh.w	r3, [sp]
 800e730:	e7d6      	b.n	800e6e0 <__rcutils_format_error_string+0x124>
 800e732:	bf00      	nop
 800e734:	0801fb1c 	.word	0x0801fb1c
 800e738:	0801fb24 	.word	0x0801fb24

0800e73c <rcutils_get_error_string>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4b0e      	ldr	r3, [pc, #56]	; (800e778 <rcutils_get_error_string+0x3c>)
 800e740:	4604      	mov	r4, r0
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	b18b      	cbz	r3, 800e76a <rcutils_get_error_string+0x2e>
 800e746:	4d0d      	ldr	r5, [pc, #52]	; (800e77c <rcutils_get_error_string+0x40>)
 800e748:	782b      	ldrb	r3, [r5, #0]
 800e74a:	b13b      	cbz	r3, 800e75c <rcutils_get_error_string+0x20>
 800e74c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e750:	490b      	ldr	r1, [pc, #44]	; (800e780 <rcutils_get_error_string+0x44>)
 800e752:	4620      	mov	r0, r4
 800e754:	f7f1 fd74 	bl	8000240 <memcpy>
 800e758:	4620      	mov	r0, r4
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	4909      	ldr	r1, [pc, #36]	; (800e784 <rcutils_get_error_string+0x48>)
 800e75e:	4808      	ldr	r0, [pc, #32]	; (800e780 <rcutils_get_error_string+0x44>)
 800e760:	f7ff ff2c 	bl	800e5bc <__rcutils_format_error_string>
 800e764:	2301      	movs	r3, #1
 800e766:	702b      	strb	r3, [r5, #0]
 800e768:	e7f0      	b.n	800e74c <rcutils_get_error_string+0x10>
 800e76a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e76e:	4906      	ldr	r1, [pc, #24]	; (800e788 <rcutils_get_error_string+0x4c>)
 800e770:	f7f1 fd66 	bl	8000240 <memcpy>
 800e774:	4620      	mov	r0, r4
 800e776:	bd38      	pop	{r3, r4, r5, pc}
 800e778:	20009a08 	.word	0x20009a08
 800e77c:	20009a09 	.word	0x20009a09
 800e780:	2000a138 	.word	0x2000a138
 800e784:	2000a538 	.word	0x2000a538
 800e788:	0801f324 	.word	0x0801f324

0800e78c <rcutils_reset_error>:
 800e78c:	2100      	movs	r1, #0
 800e78e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e792:	4808      	ldr	r0, [pc, #32]	; (800e7b4 <rcutils_reset_error+0x28>)
 800e794:	b510      	push	{r4, lr}
 800e796:	460c      	mov	r4, r1
 800e798:	f007 f87e 	bl	8015898 <memset>
 800e79c:	4b06      	ldr	r3, [pc, #24]	; (800e7b8 <rcutils_reset_error+0x2c>)
 800e79e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e7a2:	4906      	ldr	r1, [pc, #24]	; (800e7bc <rcutils_reset_error+0x30>)
 800e7a4:	4806      	ldr	r0, [pc, #24]	; (800e7c0 <rcutils_reset_error+0x34>)
 800e7a6:	701c      	strb	r4, [r3, #0]
 800e7a8:	f7f1 fd4a 	bl	8000240 <memcpy>
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <rcutils_reset_error+0x38>)
 800e7ae:	701c      	strb	r4, [r3, #0]
 800e7b0:	bd10      	pop	{r4, pc}
 800e7b2:	bf00      	nop
 800e7b4:	2000a538 	.word	0x2000a538
 800e7b8:	20009a09 	.word	0x20009a09
 800e7bc:	0801eb24 	.word	0x0801eb24
 800e7c0:	2000a138 	.word	0x2000a138
 800e7c4:	20009a08 	.word	0x20009a08

0800e7c8 <rcutils_is_directory>:
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	4770      	bx	lr

0800e7cc <rcutils_join_path>:
 800e7cc:	b082      	sub	sp, #8
 800e7ce:	b530      	push	{r4, r5, lr}
 800e7d0:	b087      	sub	sp, #28
 800e7d2:	ac0a      	add	r4, sp, #40	; 0x28
 800e7d4:	e884 000c 	stmia.w	r4, {r2, r3}
 800e7d8:	b1a0      	cbz	r0, 800e804 <rcutils_join_path+0x38>
 800e7da:	b199      	cbz	r1, 800e804 <rcutils_join_path+0x38>
 800e7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7e2:	4d0b      	ldr	r5, [pc, #44]	; (800e810 <rcutils_join_path+0x44>)
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	ab0a      	add	r3, sp, #40	; 0x28
 800e7e8:	4c0a      	ldr	r4, [pc, #40]	; (800e814 <rcutils_join_path+0x48>)
 800e7ea:	9105      	str	r1, [sp, #20]
 800e7ec:	e9cd 0503 	strd	r0, r5, [sp, #12]
 800e7f0:	e9cd 2401 	strd	r2, r4, [sp, #4]
 800e7f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7f6:	f000 f821 	bl	800e83c <rcutils_format_string_limit>
 800e7fa:	b007      	add	sp, #28
 800e7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e800:	b002      	add	sp, #8
 800e802:	4770      	bx	lr
 800e804:	2000      	movs	r0, #0
 800e806:	b007      	add	sp, #28
 800e808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e80c:	b002      	add	sp, #8
 800e80e:	4770      	bx	lr
 800e810:	0801f934 	.word	0x0801f934
 800e814:	0801f8e0 	.word	0x0801f8e0

0800e818 <rcutils_to_native_path>:
 800e818:	b084      	sub	sp, #16
 800e81a:	b538      	push	{r3, r4, r5, lr}
 800e81c:	ad05      	add	r5, sp, #20
 800e81e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e822:	b120      	cbz	r0, 800e82e <rcutils_to_native_path+0x16>
 800e824:	4a04      	ldr	r2, [pc, #16]	; (800e838 <rcutils_to_native_path+0x20>)
 800e826:	462b      	mov	r3, r5
 800e828:	4611      	mov	r1, r2
 800e82a:	f000 f859 	bl	800e8e0 <rcutils_repl_str>
 800e82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e832:	b004      	add	sp, #16
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	0801f934 	.word	0x0801f934

0800e83c <rcutils_format_string_limit>:
 800e83c:	b40f      	push	{r0, r1, r2, r3}
 800e83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e840:	b083      	sub	sp, #12
 800e842:	ac08      	add	r4, sp, #32
 800e844:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e84a:	b326      	cbz	r6, 800e896 <rcutils_format_string_limit+0x5a>
 800e84c:	a808      	add	r0, sp, #32
 800e84e:	f7ff fea7 	bl	800e5a0 <rcutils_allocator_is_valid>
 800e852:	b300      	cbz	r0, 800e896 <rcutils_format_string_limit+0x5a>
 800e854:	2100      	movs	r1, #0
 800e856:	ab0f      	add	r3, sp, #60	; 0x3c
 800e858:	4632      	mov	r2, r6
 800e85a:	4608      	mov	r0, r1
 800e85c:	e9cd 3300 	strd	r3, r3, [sp]
 800e860:	f000 f912 	bl	800ea88 <rcutils_vsnprintf>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	4605      	mov	r5, r0
 800e868:	d015      	beq.n	800e896 <rcutils_format_string_limit+0x5a>
 800e86a:	1c47      	adds	r7, r0, #1
 800e86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e86e:	429f      	cmp	r7, r3
 800e870:	d901      	bls.n	800e876 <rcutils_format_string_limit+0x3a>
 800e872:	1e5d      	subs	r5, r3, #1
 800e874:	461f      	mov	r7, r3
 800e876:	9b08      	ldr	r3, [sp, #32]
 800e878:	4638      	mov	r0, r7
 800e87a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e87c:	4798      	blx	r3
 800e87e:	4604      	mov	r4, r0
 800e880:	b148      	cbz	r0, 800e896 <rcutils_format_string_limit+0x5a>
 800e882:	4632      	mov	r2, r6
 800e884:	4639      	mov	r1, r7
 800e886:	9b01      	ldr	r3, [sp, #4]
 800e888:	f000 f8fe 	bl	800ea88 <rcutils_vsnprintf>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	db09      	blt.n	800e8a4 <rcutils_format_string_limit+0x68>
 800e890:	2300      	movs	r3, #0
 800e892:	5563      	strb	r3, [r4, r5]
 800e894:	e000      	b.n	800e898 <rcutils_format_string_limit+0x5c>
 800e896:	2400      	movs	r4, #0
 800e898:	4620      	mov	r0, r4
 800e89a:	b003      	add	sp, #12
 800e89c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8a0:	b004      	add	sp, #16
 800e8a2:	4770      	bx	lr
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e8aa:	2400      	movs	r4, #0
 800e8ac:	4798      	blx	r3
 800e8ae:	e7f3      	b.n	800e898 <rcutils_format_string_limit+0x5c>

0800e8b0 <rcutils_get_env>:
 800e8b0:	b168      	cbz	r0, 800e8ce <rcutils_get_env+0x1e>
 800e8b2:	b510      	push	{r4, lr}
 800e8b4:	460c      	mov	r4, r1
 800e8b6:	b129      	cbz	r1, 800e8c4 <rcutils_get_env+0x14>
 800e8b8:	f006 fc0e 	bl	80150d8 <getenv>
 800e8bc:	b120      	cbz	r0, 800e8c8 <rcutils_get_env+0x18>
 800e8be:	6020      	str	r0, [r4, #0]
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	bd10      	pop	{r4, pc}
 800e8c4:	4803      	ldr	r0, [pc, #12]	; (800e8d4 <rcutils_get_env+0x24>)
 800e8c6:	bd10      	pop	{r4, pc}
 800e8c8:	4b03      	ldr	r3, [pc, #12]	; (800e8d8 <rcutils_get_env+0x28>)
 800e8ca:	6023      	str	r3, [r4, #0]
 800e8cc:	bd10      	pop	{r4, pc}
 800e8ce:	4803      	ldr	r0, [pc, #12]	; (800e8dc <rcutils_get_env+0x2c>)
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	0801fb44 	.word	0x0801fb44
 800e8d8:	080207f0 	.word	0x080207f0
 800e8dc:	0801fb28 	.word	0x0801fb28

0800e8e0 <rcutils_repl_str>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	ed2d 8b02 	vpush	{d8}
 800e8e8:	b087      	sub	sp, #28
 800e8ea:	2600      	movs	r6, #0
 800e8ec:	4680      	mov	r8, r0
 800e8ee:	468a      	mov	sl, r1
 800e8f0:	9001      	str	r0, [sp, #4]
 800e8f2:	4608      	mov	r0, r1
 800e8f4:	ee08 2a10 	vmov	s16, r2
 800e8f8:	4699      	mov	r9, r3
 800e8fa:	4637      	mov	r7, r6
 800e8fc:	f7f1 fec0 	bl	8000680 <strlen>
 800e900:	46b3      	mov	fp, r6
 800e902:	2510      	movs	r5, #16
 800e904:	9002      	str	r0, [sp, #8]
 800e906:	e01d      	b.n	800e944 <rcutils_repl_str+0x64>
 800e908:	f10b 0b01 	add.w	fp, fp, #1
 800e90c:	9b02      	ldr	r3, [sp, #8]
 800e90e:	455e      	cmp	r6, fp
 800e910:	eb04 0803 	add.w	r8, r4, r3
 800e914:	d210      	bcs.n	800e938 <rcutils_repl_str+0x58>
 800e916:	442e      	add	r6, r5
 800e918:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e91c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e924:	00b1      	lsls	r1, r6, #2
 800e926:	4798      	blx	r3
 800e928:	2800      	cmp	r0, #0
 800e92a:	d07c      	beq.n	800ea26 <rcutils_repl_str+0x146>
 800e92c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e930:	4607      	mov	r7, r0
 800e932:	bf28      	it	cs
 800e934:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800e938:	9b01      	ldr	r3, [sp, #4]
 800e93a:	1ae4      	subs	r4, r4, r3
 800e93c:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800e940:	f843 4c04 	str.w	r4, [r3, #-4]
 800e944:	4651      	mov	r1, sl
 800e946:	4640      	mov	r0, r8
 800e948:	f007 fd4e 	bl	80163e8 <strstr>
 800e94c:	4604      	mov	r4, r0
 800e94e:	4638      	mov	r0, r7
 800e950:	2c00      	cmp	r4, #0
 800e952:	d1d9      	bne.n	800e908 <rcutils_repl_str+0x28>
 800e954:	4640      	mov	r0, r8
 800e956:	f7f1 fe93 	bl	8000680 <strlen>
 800e95a:	9b01      	ldr	r3, [sp, #4]
 800e95c:	eba8 0803 	sub.w	r8, r8, r3
 800e960:	eb08 0500 	add.w	r5, r8, r0
 800e964:	9504      	str	r5, [sp, #16]
 800e966:	f1bb 0f00 	cmp.w	fp, #0
 800e96a:	d03b      	beq.n	800e9e4 <rcutils_repl_str+0x104>
 800e96c:	ee18 0a10 	vmov	r0, s16
 800e970:	f7f1 fe86 	bl	8000680 <strlen>
 800e974:	9a02      	ldr	r2, [sp, #8]
 800e976:	f8d9 3000 	ldr.w	r3, [r9]
 800e97a:	4606      	mov	r6, r0
 800e97c:	1a82      	subs	r2, r0, r2
 800e97e:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e982:	fb0b 5202 	mla	r2, fp, r2, r5
 800e986:	1c50      	adds	r0, r2, #1
 800e988:	9205      	str	r2, [sp, #20]
 800e98a:	4798      	blx	r3
 800e98c:	4682      	mov	sl, r0
 800e98e:	2800      	cmp	r0, #0
 800e990:	d049      	beq.n	800ea26 <rcutils_repl_str+0x146>
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	46b8      	mov	r8, r7
 800e996:	9901      	ldr	r1, [sp, #4]
 800e998:	f7f1 fc52 	bl	8000240 <memcpy>
 800e99c:	683d      	ldr	r5, [r7, #0]
 800e99e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800e9a2:	4455      	add	r5, sl
 800e9a4:	9303      	str	r3, [sp, #12]
 800e9a6:	4632      	mov	r2, r6
 800e9a8:	ee18 1a10 	vmov	r1, s16
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	4435      	add	r5, r6
 800e9b0:	f7f1 fc46 	bl	8000240 <memcpy>
 800e9b4:	9b02      	ldr	r3, [sp, #8]
 800e9b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	441a      	add	r2, r3
 800e9be:	9b01      	ldr	r3, [sp, #4]
 800e9c0:	1899      	adds	r1, r3, r2
 800e9c2:	9b03      	ldr	r3, [sp, #12]
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	d025      	beq.n	800ea14 <rcutils_repl_str+0x134>
 800e9c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9cc:	3401      	adds	r4, #1
 800e9ce:	1a9a      	subs	r2, r3, r2
 800e9d0:	4415      	add	r5, r2
 800e9d2:	f7f1 fc35 	bl	8000240 <memcpy>
 800e9d6:	455c      	cmp	r4, fp
 800e9d8:	d3e5      	bcc.n	800e9a6 <rcutils_repl_str+0xc6>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	9a05      	ldr	r2, [sp, #20]
 800e9de:	f80a 3002 	strb.w	r3, [sl, r2]
 800e9e2:	e00b      	b.n	800e9fc <rcutils_repl_str+0x11c>
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	f8d9 3000 	ldr.w	r3, [r9]
 800e9ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	4798      	blx	r3
 800e9f2:	4682      	mov	sl, r0
 800e9f4:	b110      	cbz	r0, 800e9fc <rcutils_repl_str+0x11c>
 800e9f6:	9901      	ldr	r1, [sp, #4]
 800e9f8:	f007 faea 	bl	8015fd0 <strcpy>
 800e9fc:	4638      	mov	r0, r7
 800e9fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea02:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ea06:	4798      	blx	r3
 800ea08:	4650      	mov	r0, sl
 800ea0a:	b007      	add	sp, #28
 800ea0c:	ecbd 8b02 	vpop	{d8}
 800ea10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea14:	9b04      	ldr	r3, [sp, #16]
 800ea16:	3401      	adds	r4, #1
 800ea18:	1a9a      	subs	r2, r3, r2
 800ea1a:	4415      	add	r5, r2
 800ea1c:	f7f1 fc10 	bl	8000240 <memcpy>
 800ea20:	455c      	cmp	r4, fp
 800ea22:	d3c0      	bcc.n	800e9a6 <rcutils_repl_str+0xc6>
 800ea24:	e7d9      	b.n	800e9da <rcutils_repl_str+0xfa>
 800ea26:	f04f 0a00 	mov.w	sl, #0
 800ea2a:	e7e7      	b.n	800e9fc <rcutils_repl_str+0x11c>

0800ea2c <rcutils_snprintf>:
 800ea2c:	b40c      	push	{r2, r3}
 800ea2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea30:	b083      	sub	sp, #12
 800ea32:	ab08      	add	r3, sp, #32
 800ea34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea38:	9301      	str	r3, [sp, #4]
 800ea3a:	b1e2      	cbz	r2, 800ea76 <rcutils_snprintf+0x4a>
 800ea3c:	fab0 f680 	clz	r6, r0
 800ea40:	fab1 f781 	clz	r7, r1
 800ea44:	ea50 0401 	orrs.w	r4, r0, r1
 800ea48:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800ea4c:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800ea50:	d008      	beq.n	800ea64 <rcutils_snprintf+0x38>
 800ea52:	b986      	cbnz	r6, 800ea76 <rcutils_snprintf+0x4a>
 800ea54:	b97f      	cbnz	r7, 800ea76 <rcutils_snprintf+0x4a>
 800ea56:	f00b fa27 	bl	8019ea8 <vsnprintf>
 800ea5a:	b003      	add	sp, #12
 800ea5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea60:	b002      	add	sp, #8
 800ea62:	4770      	bx	lr
 800ea64:	4621      	mov	r1, r4
 800ea66:	4620      	mov	r0, r4
 800ea68:	f00b fa1e 	bl	8019ea8 <vsnprintf>
 800ea6c:	b003      	add	sp, #12
 800ea6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea72:	b002      	add	sp, #8
 800ea74:	4770      	bx	lr
 800ea76:	f006 fac5 	bl	8015004 <__errno>
 800ea7a:	2216      	movs	r2, #22
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea82:	601a      	str	r2, [r3, #0]
 800ea84:	e7e9      	b.n	800ea5a <rcutils_snprintf+0x2e>
 800ea86:	bf00      	nop

0800ea88 <rcutils_vsnprintf>:
 800ea88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea8c:	b1b2      	cbz	r2, 800eabc <rcutils_vsnprintf+0x34>
 800ea8e:	fab0 f680 	clz	r6, r0
 800ea92:	fab1 f781 	clz	r7, r1
 800ea96:	ea50 0401 	orrs.w	r4, r0, r1
 800ea9a:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800ea9e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800eaa2:	d005      	beq.n	800eab0 <rcutils_vsnprintf+0x28>
 800eaa4:	b956      	cbnz	r6, 800eabc <rcutils_vsnprintf+0x34>
 800eaa6:	b94f      	cbnz	r7, 800eabc <rcutils_vsnprintf+0x34>
 800eaa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaac:	f00b b9fc 	b.w	8019ea8 <vsnprintf>
 800eab0:	4621      	mov	r1, r4
 800eab2:	4620      	mov	r0, r4
 800eab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eab8:	f00b b9f6 	b.w	8019ea8 <vsnprintf>
 800eabc:	f006 faa2 	bl	8015004 <__errno>
 800eac0:	2316      	movs	r3, #22
 800eac2:	6003      	str	r3, [r0, #0]
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eacc <rcutils_strdup>:
 800eacc:	b084      	sub	sp, #16
 800eace:	b570      	push	{r4, r5, r6, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	4605      	mov	r5, r0
 800ead4:	ac07      	add	r4, sp, #28
 800ead6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800eada:	b1b0      	cbz	r0, 800eb0a <rcutils_strdup+0x3e>
 800eadc:	f7f1 fdd0 	bl	8000680 <strlen>
 800eae0:	1c42      	adds	r2, r0, #1
 800eae2:	9b07      	ldr	r3, [sp, #28]
 800eae4:	4606      	mov	r6, r0
 800eae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eae8:	4610      	mov	r0, r2
 800eaea:	9201      	str	r2, [sp, #4]
 800eaec:	4798      	blx	r3
 800eaee:	4604      	mov	r4, r0
 800eaf0:	b128      	cbz	r0, 800eafe <rcutils_strdup+0x32>
 800eaf2:	9a01      	ldr	r2, [sp, #4]
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	f7f1 fba3 	bl	8000240 <memcpy>
 800eafa:	2300      	movs	r3, #0
 800eafc:	55a3      	strb	r3, [r4, r6]
 800eafe:	4620      	mov	r0, r4
 800eb00:	b002      	add	sp, #8
 800eb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb06:	b004      	add	sp, #16
 800eb08:	4770      	bx	lr
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	e7f7      	b.n	800eafe <rcutils_strdup+0x32>
 800eb0e:	bf00      	nop

0800eb10 <rcutils_strndup>:
 800eb10:	b082      	sub	sp, #8
 800eb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb14:	ac06      	add	r4, sp, #24
 800eb16:	4605      	mov	r5, r0
 800eb18:	e884 000c 	stmia.w	r4, {r2, r3}
 800eb1c:	b188      	cbz	r0, 800eb42 <rcutils_strndup+0x32>
 800eb1e:	1c4f      	adds	r7, r1, #1
 800eb20:	460e      	mov	r6, r1
 800eb22:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb24:	4638      	mov	r0, r7
 800eb26:	4790      	blx	r2
 800eb28:	4604      	mov	r4, r0
 800eb2a:	b128      	cbz	r0, 800eb38 <rcutils_strndup+0x28>
 800eb2c:	463a      	mov	r2, r7
 800eb2e:	4629      	mov	r1, r5
 800eb30:	f7f1 fb86 	bl	8000240 <memcpy>
 800eb34:	2300      	movs	r3, #0
 800eb36:	55a3      	strb	r3, [r4, r6]
 800eb38:	4620      	mov	r0, r4
 800eb3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb3e:	b002      	add	sp, #8
 800eb40:	4770      	bx	lr
 800eb42:	4604      	mov	r4, r0
 800eb44:	e7f8      	b.n	800eb38 <rcutils_strndup+0x28>
 800eb46:	bf00      	nop

0800eb48 <rcutils_get_zero_initialized_string_map>:
 800eb48:	4b01      	ldr	r3, [pc, #4]	; (800eb50 <rcutils_get_zero_initialized_string_map+0x8>)
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	6018      	str	r0, [r3, #0]
 800eb4e:	4770      	bx	lr
 800eb50:	20009a0c 	.word	0x20009a0c

0800eb54 <rcutils_string_map_reserve>:
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d061      	beq.n	800ec1c <rcutils_string_map_reserve+0xc8>
 800eb58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb5c:	6805      	ldr	r5, [r0, #0]
 800eb5e:	b083      	sub	sp, #12
 800eb60:	4606      	mov	r6, r0
 800eb62:	460c      	mov	r4, r1
 800eb64:	b12d      	cbz	r5, 800eb72 <rcutils_string_map_reserve+0x1e>
 800eb66:	68eb      	ldr	r3, [r5, #12]
 800eb68:	42a3      	cmp	r3, r4
 800eb6a:	d906      	bls.n	800eb7a <rcutils_string_map_reserve+0x26>
 800eb6c:	461c      	mov	r4, r3
 800eb6e:	2d00      	cmp	r5, #0
 800eb70:	d1f9      	bne.n	800eb66 <rcutils_string_map_reserve+0x12>
 800eb72:	201f      	movs	r0, #31
 800eb74:	b003      	add	sp, #12
 800eb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb7a:	68ab      	ldr	r3, [r5, #8]
 800eb7c:	42a3      	cmp	r3, r4
 800eb7e:	d049      	beq.n	800ec14 <rcutils_string_map_reserve+0xc0>
 800eb80:	6a2f      	ldr	r7, [r5, #32]
 800eb82:	2c00      	cmp	r4, #0
 800eb84:	d035      	beq.n	800ebf2 <rcutils_string_map_reserve+0x9e>
 800eb86:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800eb8a:	d245      	bcs.n	800ec18 <rcutils_string_map_reserve+0xc4>
 800eb8c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800eb90:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800eb94:	6828      	ldr	r0, [r5, #0]
 800eb96:	463a      	mov	r2, r7
 800eb98:	4641      	mov	r1, r8
 800eb9a:	47c8      	blx	r9
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	d03b      	beq.n	800ec18 <rcutils_string_map_reserve+0xc4>
 800eba0:	6833      	ldr	r3, [r6, #0]
 800eba2:	463a      	mov	r2, r7
 800eba4:	4641      	mov	r1, r8
 800eba6:	6018      	str	r0, [r3, #0]
 800eba8:	6858      	ldr	r0, [r3, #4]
 800ebaa:	47c8      	blx	r9
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d033      	beq.n	800ec18 <rcutils_string_map_reserve+0xc4>
 800ebb0:	6835      	ldr	r5, [r6, #0]
 800ebb2:	68ab      	ldr	r3, [r5, #8]
 800ebb4:	6068      	str	r0, [r5, #4]
 800ebb6:	42a3      	cmp	r3, r4
 800ebb8:	d227      	bcs.n	800ec0a <rcutils_string_map_reserve+0xb6>
 800ebba:	682a      	ldr	r2, [r5, #0]
 800ebbc:	eb00 0108 	add.w	r1, r0, r8
 800ebc0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ebc4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800ebc8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800ebcc:	428f      	cmp	r7, r1
 800ebce:	d203      	bcs.n	800ebd8 <rcutils_string_map_reserve+0x84>
 800ebd0:	eb02 0108 	add.w	r1, r2, r8
 800ebd4:	428e      	cmp	r6, r1
 800ebd6:	d323      	bcc.n	800ec20 <rcutils_string_map_reserve+0xcc>
 800ebd8:	1ae3      	subs	r3, r4, r3
 800ebda:	4638      	mov	r0, r7
 800ebdc:	2100      	movs	r1, #0
 800ebde:	009a      	lsls	r2, r3, #2
 800ebe0:	9201      	str	r2, [sp, #4]
 800ebe2:	f006 fe59 	bl	8015898 <memset>
 800ebe6:	9a01      	ldr	r2, [sp, #4]
 800ebe8:	4630      	mov	r0, r6
 800ebea:	2100      	movs	r1, #0
 800ebec:	f006 fe54 	bl	8015898 <memset>
 800ebf0:	e00b      	b.n	800ec0a <rcutils_string_map_reserve+0xb6>
 800ebf2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	6828      	ldr	r0, [r5, #0]
 800ebfa:	47c0      	blx	r8
 800ebfc:	6833      	ldr	r3, [r6, #0]
 800ebfe:	4639      	mov	r1, r7
 800ec00:	6858      	ldr	r0, [r3, #4]
 800ec02:	601c      	str	r4, [r3, #0]
 800ec04:	47c0      	blx	r8
 800ec06:	6835      	ldr	r5, [r6, #0]
 800ec08:	606c      	str	r4, [r5, #4]
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	60ac      	str	r4, [r5, #8]
 800ec0e:	b003      	add	sp, #12
 800ec10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec14:	2000      	movs	r0, #0
 800ec16:	e7ad      	b.n	800eb74 <rcutils_string_map_reserve+0x20>
 800ec18:	200a      	movs	r0, #10
 800ec1a:	e7ab      	b.n	800eb74 <rcutils_string_map_reserve+0x20>
 800ec1c:	200b      	movs	r0, #11
 800ec1e:	4770      	bx	lr
 800ec20:	1f13      	subs	r3, r2, #4
 800ec22:	f1ac 0c04 	sub.w	ip, ip, #4
 800ec26:	4498      	add	r8, r3
 800ec28:	4460      	add	r0, ip
 800ec2a:	4462      	add	r2, ip
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f842 3f04 	str.w	r3, [r2, #4]!
 800ec32:	4542      	cmp	r2, r8
 800ec34:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec38:	d1f9      	bne.n	800ec2e <rcutils_string_map_reserve+0xda>
 800ec3a:	e7e6      	b.n	800ec0a <rcutils_string_map_reserve+0xb6>

0800ec3c <rcutils_string_map_init>:
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec40:	ac06      	add	r4, sp, #24
 800ec42:	e884 000c 	stmia.w	r4, {r2, r3}
 800ec46:	b378      	cbz	r0, 800eca8 <rcutils_string_map_init+0x6c>
 800ec48:	6806      	ldr	r6, [r0, #0]
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	b12e      	cbz	r6, 800ec5a <rcutils_string_map_init+0x1e>
 800ec4e:	251e      	movs	r5, #30
 800ec50:	4628      	mov	r0, r5
 800ec52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec56:	b002      	add	sp, #8
 800ec58:	4770      	bx	lr
 800ec5a:	a806      	add	r0, sp, #24
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	f7ff fc9f 	bl	800e5a0 <rcutils_allocator_is_valid>
 800ec62:	b308      	cbz	r0, 800eca8 <rcutils_string_map_init+0x6c>
 800ec64:	9b06      	ldr	r3, [sp, #24]
 800ec66:	2024      	movs	r0, #36	; 0x24
 800ec68:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec6a:	4798      	blx	r3
 800ec6c:	6020      	str	r0, [r4, #0]
 800ec6e:	b308      	cbz	r0, 800ecb4 <rcutils_string_map_init+0x78>
 800ec70:	f10d 0c18 	add.w	ip, sp, #24
 800ec74:	f100 0710 	add.w	r7, r0, #16
 800ec78:	e9c0 6600 	strd	r6, r6, [r0]
 800ec7c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800ec80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec84:	f8dc c000 	ldr.w	ip, [ip]
 800ec88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f8c7 c000 	str.w	ip, [r7]
 800ec92:	f7ff ff5f 	bl	800eb54 <rcutils_string_map_reserve>
 800ec96:	4605      	mov	r5, r0
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d0d9      	beq.n	800ec50 <rcutils_string_map_init+0x14>
 800ec9c:	9b07      	ldr	r3, [sp, #28]
 800ec9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eca0:	6820      	ldr	r0, [r4, #0]
 800eca2:	4798      	blx	r3
 800eca4:	6026      	str	r6, [r4, #0]
 800eca6:	e7d3      	b.n	800ec50 <rcutils_string_map_init+0x14>
 800eca8:	250b      	movs	r5, #11
 800ecaa:	4628      	mov	r0, r5
 800ecac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ecb0:	b002      	add	sp, #8
 800ecb2:	4770      	bx	lr
 800ecb4:	250a      	movs	r5, #10
 800ecb6:	e7cb      	b.n	800ec50 <rcutils_string_map_init+0x14>

0800ecb8 <rcutils_string_map_fini>:
 800ecb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d039      	beq.n	800ed36 <rcutils_string_map_fini+0x7e>
 800ecc2:	6804      	ldr	r4, [r0, #0]
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	2c00      	cmp	r4, #0
 800ecc8:	d031      	beq.n	800ed2e <rcutils_string_map_fini+0x76>
 800ecca:	68a3      	ldr	r3, [r4, #8]
 800eccc:	b323      	cbz	r3, 800ed18 <rcutils_string_map_fini+0x60>
 800ecce:	2500      	movs	r5, #0
 800ecd0:	6822      	ldr	r2, [r4, #0]
 800ecd2:	46a8      	mov	r8, r5
 800ecd4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ecd8:	b1d8      	cbz	r0, 800ed12 <rcutils_string_map_fini+0x5a>
 800ecda:	6a21      	ldr	r1, [r4, #32]
 800ecdc:	6967      	ldr	r7, [r4, #20]
 800ecde:	9101      	str	r1, [sp, #4]
 800ece0:	47b8      	blx	r7
 800ece2:	9901      	ldr	r1, [sp, #4]
 800ece4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ece8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ecec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ecf0:	47b8      	blx	r7
 800ecf2:	68e3      	ldr	r3, [r4, #12]
 800ecf4:	6862      	ldr	r2, [r4, #4]
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ecfc:	3501      	adds	r5, #1
 800ecfe:	60e3      	str	r3, [r4, #12]
 800ed00:	6834      	ldr	r4, [r6, #0]
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	429d      	cmp	r5, r3
 800ed06:	d207      	bcs.n	800ed18 <rcutils_string_map_fini+0x60>
 800ed08:	6822      	ldr	r2, [r4, #0]
 800ed0a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d1e3      	bne.n	800ecda <rcutils_string_map_fini+0x22>
 800ed12:	3501      	adds	r5, #1
 800ed14:	429d      	cmp	r5, r3
 800ed16:	d3dd      	bcc.n	800ecd4 <rcutils_string_map_fini+0x1c>
 800ed18:	2100      	movs	r1, #0
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	f7ff ff1a 	bl	800eb54 <rcutils_string_map_reserve>
 800ed20:	4604      	mov	r4, r0
 800ed22:	b920      	cbnz	r0, 800ed2e <rcutils_string_map_fini+0x76>
 800ed24:	6830      	ldr	r0, [r6, #0]
 800ed26:	6943      	ldr	r3, [r0, #20]
 800ed28:	6a01      	ldr	r1, [r0, #32]
 800ed2a:	4798      	blx	r3
 800ed2c:	6034      	str	r4, [r6, #0]
 800ed2e:	4620      	mov	r0, r4
 800ed30:	b002      	add	sp, #8
 800ed32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed36:	240b      	movs	r4, #11
 800ed38:	4620      	mov	r0, r4
 800ed3a:	b002      	add	sp, #8
 800ed3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed40 <rcutils_string_map_getn>:
 800ed40:	b398      	cbz	r0, 800edaa <rcutils_string_map_getn+0x6a>
 800ed42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed46:	f8d0 9000 	ldr.w	r9, [r0]
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	f1b9 0f00 	cmp.w	r9, #0
 800ed50:	d020      	beq.n	800ed94 <rcutils_string_map_getn+0x54>
 800ed52:	fab1 f581 	clz	r5, r1
 800ed56:	460e      	mov	r6, r1
 800ed58:	096d      	lsrs	r5, r5, #5
 800ed5a:	b1d9      	cbz	r1, 800ed94 <rcutils_string_map_getn+0x54>
 800ed5c:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800ed60:	f8d9 7000 	ldr.w	r7, [r9]
 800ed64:	b1b4      	cbz	r4, 800ed94 <rcutils_string_map_getn+0x54>
 800ed66:	4690      	mov	r8, r2
 800ed68:	3f04      	subs	r7, #4
 800ed6a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ed6e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800ed72:	3501      	adds	r5, #1
 800ed74:	4608      	mov	r0, r1
 800ed76:	9101      	str	r1, [sp, #4]
 800ed78:	b151      	cbz	r1, 800ed90 <rcutils_string_map_getn+0x50>
 800ed7a:	f7f1 fc81 	bl	8000680 <strlen>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	9901      	ldr	r1, [sp, #4]
 800ed82:	4630      	mov	r0, r6
 800ed84:	4542      	cmp	r2, r8
 800ed86:	bf38      	it	cc
 800ed88:	4642      	movcc	r2, r8
 800ed8a:	f007 f97f 	bl	801608c <strncmp>
 800ed8e:	b128      	cbz	r0, 800ed9c <rcutils_string_map_getn+0x5c>
 800ed90:	42ac      	cmp	r4, r5
 800ed92:	d1ea      	bne.n	800ed6a <rcutils_string_map_getn+0x2a>
 800ed94:	2000      	movs	r0, #0
 800ed96:	b002      	add	sp, #8
 800ed98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eda0:	f853 000a 	ldr.w	r0, [r3, sl]
 800eda4:	b002      	add	sp, #8
 800eda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edaa:	4770      	bx	lr

0800edac <rcutils_system_time_now>:
 800edac:	b310      	cbz	r0, 800edf4 <rcutils_system_time_now+0x48>
 800edae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edb0:	b085      	sub	sp, #20
 800edb2:	4604      	mov	r4, r0
 800edb4:	2001      	movs	r0, #1
 800edb6:	4669      	mov	r1, sp
 800edb8:	f7f3 fe4e 	bl	8002a58 <clock_gettime>
 800edbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edc0:	2a00      	cmp	r2, #0
 800edc2:	f173 0100 	sbcs.w	r1, r3, #0
 800edc6:	db12      	blt.n	800edee <rcutils_system_time_now+0x42>
 800edc8:	ea52 0103 	orrs.w	r1, r2, r3
 800edcc:	9d02      	ldr	r5, [sp, #8]
 800edce:	d101      	bne.n	800edd4 <rcutils_system_time_now+0x28>
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	db0c      	blt.n	800edee <rcutils_system_time_now+0x42>
 800edd4:	4908      	ldr	r1, [pc, #32]	; (800edf8 <rcutils_system_time_now+0x4c>)
 800edd6:	2000      	movs	r0, #0
 800edd8:	fba2 6701 	umull	r6, r7, r2, r1
 800eddc:	1976      	adds	r6, r6, r5
 800edde:	fb01 7703 	mla	r7, r1, r3, r7
 800ede2:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 800ede6:	e9c4 6700 	strd	r6, r7, [r4]
 800edea:	b005      	add	sp, #20
 800edec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edee:	2002      	movs	r0, #2
 800edf0:	b005      	add	sp, #20
 800edf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf4:	200b      	movs	r0, #11
 800edf6:	4770      	bx	lr
 800edf8:	3b9aca00 	.word	0x3b9aca00

0800edfc <rcutils_steady_time_now>:
 800edfc:	b310      	cbz	r0, 800ee44 <rcutils_steady_time_now+0x48>
 800edfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee00:	b085      	sub	sp, #20
 800ee02:	4604      	mov	r4, r0
 800ee04:	2000      	movs	r0, #0
 800ee06:	4669      	mov	r1, sp
 800ee08:	f7f3 fe26 	bl	8002a58 <clock_gettime>
 800ee0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee10:	2a00      	cmp	r2, #0
 800ee12:	f173 0100 	sbcs.w	r1, r3, #0
 800ee16:	db12      	blt.n	800ee3e <rcutils_steady_time_now+0x42>
 800ee18:	ea52 0103 	orrs.w	r1, r2, r3
 800ee1c:	9d02      	ldr	r5, [sp, #8]
 800ee1e:	d101      	bne.n	800ee24 <rcutils_steady_time_now+0x28>
 800ee20:	2d00      	cmp	r5, #0
 800ee22:	db0c      	blt.n	800ee3e <rcutils_steady_time_now+0x42>
 800ee24:	4908      	ldr	r1, [pc, #32]	; (800ee48 <rcutils_steady_time_now+0x4c>)
 800ee26:	2000      	movs	r0, #0
 800ee28:	fba2 6701 	umull	r6, r7, r2, r1
 800ee2c:	1976      	adds	r6, r6, r5
 800ee2e:	fb01 7703 	mla	r7, r1, r3, r7
 800ee32:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 800ee36:	e9c4 6700 	strd	r6, r7, [r4]
 800ee3a:	b005      	add	sp, #20
 800ee3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee3e:	2002      	movs	r0, #2
 800ee40:	b005      	add	sp, #20
 800ee42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee44:	200b      	movs	r0, #11
 800ee46:	4770      	bx	lr
 800ee48:	3b9aca00 	.word	0x3b9aca00

0800ee4c <rmw_get_zero_initialized_context>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	4604      	mov	r4, r0
 800ee50:	2250      	movs	r2, #80	; 0x50
 800ee52:	2100      	movs	r1, #0
 800ee54:	f006 fd20 	bl	8015898 <memset>
 800ee58:	4620      	mov	r0, r4
 800ee5a:	bd10      	pop	{r4, pc}

0800ee5c <rmw_get_zero_initialized_init_options>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	4604      	mov	r4, r0
 800ee60:	2238      	movs	r2, #56	; 0x38
 800ee62:	2100      	movs	r1, #0
 800ee64:	f006 fd18 	bl	8015898 <memset>
 800ee68:	f104 0010 	add.w	r0, r4, #16
 800ee6c:	f001 fc1a 	bl	80106a4 <rmw_get_default_security_options>
 800ee70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee74:	4620      	mov	r0, r4
 800ee76:	60e3      	str	r3, [r4, #12]
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	bf00      	nop

0800ee7c <rmw_destroy_client>:
 800ee7c:	b368      	cbz	r0, 800eeda <rmw_destroy_client+0x5e>
 800ee7e:	b570      	push	{r4, r5, r6, lr}
 800ee80:	4604      	mov	r4, r0
 800ee82:	6800      	ldr	r0, [r0, #0]
 800ee84:	460e      	mov	r6, r1
 800ee86:	f001 fbfd 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800ee8a:	b908      	cbnz	r0, 800ee90 <rmw_destroy_client+0x14>
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	bd70      	pop	{r4, r5, r6, pc}
 800ee90:	6863      	ldr	r3, [r4, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d0fa      	beq.n	800ee8c <rmw_destroy_client+0x10>
 800ee96:	fab6 f586 	clz	r5, r6
 800ee9a:	096d      	lsrs	r5, r5, #5
 800ee9c:	2e00      	cmp	r6, #0
 800ee9e:	d0f5      	beq.n	800ee8c <rmw_destroy_client+0x10>
 800eea0:	6830      	ldr	r0, [r6, #0]
 800eea2:	f001 fbef 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d0f0      	beq.n	800ee8c <rmw_destroy_client+0x10>
 800eeaa:	6873      	ldr	r3, [r6, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d0ed      	beq.n	800ee8c <rmw_destroy_client+0x10>
 800eeb0:	6864      	ldr	r4, [r4, #4]
 800eeb2:	695a      	ldr	r2, [r3, #20]
 800eeb4:	6960      	ldr	r0, [r4, #20]
 800eeb6:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800eeba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eebe:	6819      	ldr	r1, [r3, #0]
 800eec0:	f002 f9b8 	bl	8011234 <uxr_buffer_delete_entity>
 800eec4:	4601      	mov	r1, r0
 800eec6:	6960      	ldr	r0, [r4, #20]
 800eec8:	f001 fa66 	bl	8010398 <run_xrce_session>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d0dd      	beq.n	800ee8c <rmw_destroy_client+0x10>
 800eed0:	4630      	mov	r0, r6
 800eed2:	f001 fa2d 	bl	8010330 <rmw_uxrce_fini_client_memory>
 800eed6:	4628      	mov	r0, r5
 800eed8:	bd70      	pop	{r4, r5, r6, pc}
 800eeda:	2001      	movs	r0, #1
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop

0800eee0 <rmw_get_implementation_identifier>:
 800eee0:	4b01      	ldr	r3, [pc, #4]	; (800eee8 <rmw_get_implementation_identifier+0x8>)
 800eee2:	6818      	ldr	r0, [r3, #0]
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	08020404 	.word	0x08020404

0800eeec <rmw_init_options_init>:
 800eeec:	b084      	sub	sp, #16
 800eeee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef2:	ad09      	add	r5, sp, #36	; 0x24
 800eef4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d03a      	beq.n	800ef72 <rmw_init_options_init+0x86>
 800eefc:	4604      	mov	r4, r0
 800eefe:	4628      	mov	r0, r5
 800ef00:	f7ff fb4e 	bl	800e5a0 <rcutils_allocator_is_valid>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d034      	beq.n	800ef72 <rmw_init_options_init+0x86>
 800ef08:	68a3      	ldr	r3, [r4, #8]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d131      	bne.n	800ef72 <rmw_init_options_init+0x86>
 800ef0e:	4b1b      	ldr	r3, [pc, #108]	; (800ef7c <rmw_init_options_init+0x90>)
 800ef10:	f04f 0800 	mov.w	r8, #0
 800ef14:	f04f 0900 	mov.w	r9, #0
 800ef18:	f104 0620 	add.w	r6, r4, #32
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4f18      	ldr	r7, [pc, #96]	; (800ef80 <rmw_init_options_init+0x94>)
 800ef20:	60a3      	str	r3, [r4, #8]
 800ef22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef24:	682d      	ldr	r5, [r5, #0]
 800ef26:	e9c4 8900 	strd	r8, r9, [r4]
 800ef2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef2e:	201c      	movs	r0, #28
 800ef30:	6035      	str	r5, [r6, #0]
 800ef32:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ef34:	61e7      	str	r7, [r4, #28]
 800ef36:	4798      	blx	r3
 800ef38:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <rmw_init_options_init+0x98>)
 800ef3a:	6360      	str	r0, [r4, #52]	; 0x34
 800ef3c:	7819      	ldrb	r1, [r3, #0]
 800ef3e:	685a      	ldr	r2, [r3, #4]
 800ef40:	7001      	strb	r1, [r0, #0]
 800ef42:	6042      	str	r2, [r0, #4]
 800ef44:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800ef48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ef4c:	e9c0 5102 	strd	r5, r1, [r0, #8]
 800ef50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef54:	f004 f902 	bl	801315c <uxr_nanos>
 800ef58:	f006 fd0e 	bl	8015978 <srand>
 800ef5c:	f006 fd14 	bl	8015988 <rand>
 800ef60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef62:	6198      	str	r0, [r3, #24]
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d0f9      	beq.n	800ef5c <rmw_init_options_init+0x70>
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef6e:	b004      	add	sp, #16
 800ef70:	4770      	bx	lr
 800ef72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef76:	200b      	movs	r0, #11
 800ef78:	b004      	add	sp, #16
 800ef7a:	4770      	bx	lr
 800ef7c:	08020404 	.word	0x08020404
 800ef80:	0801f934 	.word	0x0801f934
 800ef84:	2000a928 	.word	0x2000a928

0800ef88 <rmw_init_options_copy>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	b158      	cbz	r0, 800efa4 <rmw_init_options_copy+0x1c>
 800ef8c:	460d      	mov	r5, r1
 800ef8e:	b149      	cbz	r1, 800efa4 <rmw_init_options_copy+0x1c>
 800ef90:	4b20      	ldr	r3, [pc, #128]	; (800f014 <rmw_init_options_copy+0x8c>)
 800ef92:	4604      	mov	r4, r0
 800ef94:	6880      	ldr	r0, [r0, #8]
 800ef96:	6819      	ldr	r1, [r3, #0]
 800ef98:	f7f1 f9f6 	bl	8000388 <strcmp>
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	bba8      	cbnz	r0, 800f00c <rmw_init_options_copy+0x84>
 800efa0:	68ab      	ldr	r3, [r5, #8]
 800efa2:	b113      	cbz	r3, 800efaa <rmw_init_options_copy+0x22>
 800efa4:	260b      	movs	r6, #11
 800efa6:	4630      	mov	r0, r6
 800efa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efaa:	4623      	mov	r3, r4
 800efac:	462a      	mov	r2, r5
 800efae:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800efb2:	f8d3 c000 	ldr.w	ip, [r3]
 800efb6:	3310      	adds	r3, #16
 800efb8:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 800efbc:	3210      	adds	r2, #16
 800efbe:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800efc2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800efc6:	4573      	cmp	r3, lr
 800efc8:	f842 cc10 	str.w	ip, [r2, #-16]
 800efcc:	f842 7c0c 	str.w	r7, [r2, #-12]
 800efd0:	f842 0c08 	str.w	r0, [r2, #-8]
 800efd4:	f842 1c04 	str.w	r1, [r2, #-4]
 800efd8:	d1eb      	bne.n	800efb2 <rmw_init_options_copy+0x2a>
 800efda:	6819      	ldr	r1, [r3, #0]
 800efdc:	201c      	movs	r0, #28
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	6011      	str	r1, [r2, #0]
 800efe2:	6053      	str	r3, [r2, #4]
 800efe4:	f004 fecc 	bl	8013d80 <rmw_allocate>
 800efe8:	6368      	str	r0, [r5, #52]	; 0x34
 800efea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efec:	681c      	ldr	r4, [r3, #0]
 800efee:	6859      	ldr	r1, [r3, #4]
 800eff0:	689a      	ldr	r2, [r3, #8]
 800eff2:	68dd      	ldr	r5, [r3, #12]
 800eff4:	6004      	str	r4, [r0, #0]
 800eff6:	6041      	str	r1, [r0, #4]
 800eff8:	6082      	str	r2, [r0, #8]
 800effa:	60c5      	str	r5, [r0, #12]
 800effc:	691c      	ldr	r4, [r3, #16]
 800effe:	6959      	ldr	r1, [r3, #20]
 800f000:	699a      	ldr	r2, [r3, #24]
 800f002:	6104      	str	r4, [r0, #16]
 800f004:	6141      	str	r1, [r0, #20]
 800f006:	6182      	str	r2, [r0, #24]
 800f008:	4630      	mov	r0, r6
 800f00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f00c:	260c      	movs	r6, #12
 800f00e:	4630      	mov	r0, r6
 800f010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f012:	bf00      	nop
 800f014:	08020404 	.word	0x08020404

0800f018 <rmw_init_options_fini>:
 800f018:	b570      	push	{r4, r5, r6, lr}
 800f01a:	b08e      	sub	sp, #56	; 0x38
 800f01c:	b318      	cbz	r0, 800f066 <rmw_init_options_fini+0x4e>
 800f01e:	4604      	mov	r4, r0
 800f020:	3020      	adds	r0, #32
 800f022:	f7ff fabd 	bl	800e5a0 <rcutils_allocator_is_valid>
 800f026:	b1f0      	cbz	r0, 800f066 <rmw_init_options_fini+0x4e>
 800f028:	4b11      	ldr	r3, [pc, #68]	; (800f070 <rmw_init_options_fini+0x58>)
 800f02a:	68a0      	ldr	r0, [r4, #8]
 800f02c:	6819      	ldr	r1, [r3, #0]
 800f02e:	f7f1 f9ab 	bl	8000388 <strcmp>
 800f032:	4606      	mov	r6, r0
 800f034:	b998      	cbnz	r0, 800f05e <rmw_init_options_fini+0x46>
 800f036:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800f038:	466d      	mov	r5, sp
 800f03a:	f004 feb5 	bl	8013da8 <rmw_free>
 800f03e:	4668      	mov	r0, sp
 800f040:	f7ff ff0c 	bl	800ee5c <rmw_get_zero_initialized_init_options>
 800f044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f04a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f04e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f050:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f054:	e884 0003 	stmia.w	r4, {r0, r1}
 800f058:	4630      	mov	r0, r6
 800f05a:	b00e      	add	sp, #56	; 0x38
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
 800f05e:	260c      	movs	r6, #12
 800f060:	4630      	mov	r0, r6
 800f062:	b00e      	add	sp, #56	; 0x38
 800f064:	bd70      	pop	{r4, r5, r6, pc}
 800f066:	260b      	movs	r6, #11
 800f068:	4630      	mov	r0, r6
 800f06a:	b00e      	add	sp, #56	; 0x38
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	bf00      	nop
 800f070:	08020404 	.word	0x08020404

0800f074 <rmw_init>:
 800f074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f078:	b082      	sub	sp, #8
 800f07a:	2900      	cmp	r1, #0
 800f07c:	f000 80c5 	beq.w	800f20a <rmw_init+0x196>
 800f080:	4604      	mov	r4, r0
 800f082:	2800      	cmp	r0, #0
 800f084:	f000 80c1 	beq.w	800f20a <rmw_init+0x196>
 800f088:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f000 80bd 	beq.w	800f20a <rmw_init+0x196>
 800f090:	4b63      	ldr	r3, [pc, #396]	; (800f220 <rmw_init+0x1ac>)
 800f092:	460d      	mov	r5, r1
 800f094:	6880      	ldr	r0, [r0, #8]
 800f096:	f8d3 9000 	ldr.w	r9, [r3]
 800f09a:	4649      	mov	r1, r9
 800f09c:	f7f1 f974 	bl	8000388 <strcmp>
 800f0a0:	4680      	mov	r8, r0
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f040 80ac 	bne.w	800f200 <rmw_init+0x18c>
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	495e      	ldr	r1, [pc, #376]	; (800f224 <rmw_init+0x1b0>)
 800f0ac:	485e      	ldr	r0, [pc, #376]	; (800f228 <rmw_init+0x1b4>)
 800f0ae:	e9d4 6700 	ldrd	r6, r7, [r4]
 800f0b2:	f8c5 9008 	str.w	r9, [r5, #8]
 800f0b6:	e9c5 6700 	strd	r6, r7, [r5]
 800f0ba:	f001 f857 	bl	801016c <rmw_uxrce_init_session_memory>
 800f0be:	485b      	ldr	r0, [pc, #364]	; (800f22c <rmw_init+0x1b8>)
 800f0c0:	2204      	movs	r2, #4
 800f0c2:	495b      	ldr	r1, [pc, #364]	; (800f230 <rmw_init+0x1bc>)
 800f0c4:	f001 f890 	bl	80101e8 <rmw_uxrce_init_static_input_buffer_memory>
 800f0c8:	4857      	ldr	r0, [pc, #348]	; (800f228 <rmw_init+0x1b4>)
 800f0ca:	f004 ff4b 	bl	8013f64 <get_memory>
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	f000 80a0 	beq.w	800f214 <rmw_init+0x1a0>
 800f0d4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800f0d6:	68c6      	ldr	r6, [r0, #12]
 800f0d8:	6978      	ldr	r0, [r7, #20]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f106 0a10 	add.w	sl, r6, #16
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	7839      	ldrb	r1, [r7, #0]
 800f0e4:	9001      	str	r0, [sp, #4]
 800f0e6:	4650      	mov	r0, sl
 800f0e8:	693f      	ldr	r7, [r7, #16]
 800f0ea:	9700      	str	r7, [sp, #0]
 800f0ec:	f241 5788 	movw	r7, #5512	; 0x1588
 800f0f0:	f002 fa4c 	bl	801158c <uxr_set_custom_transport_callbacks>
 800f0f4:	f241 5390 	movw	r3, #5520	; 0x1590
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	4433      	add	r3, r6
 800f0fe:	4437      	add	r7, r6
 800f100:	2201      	movs	r2, #1
 800f102:	e9c7 0100 	strd	r0, r1, [r7]
 800f106:	e9c3 0100 	strd	r0, r1, [r3]
 800f10a:	494a      	ldr	r1, [pc, #296]	; (800f234 <rmw_init+0x1c0>)
 800f10c:	484a      	ldr	r0, [pc, #296]	; (800f238 <rmw_init+0x1c4>)
 800f10e:	e9c6 98da 	strd	r9, r8, [r6, #872]	; 0x368
 800f112:	64ae      	str	r6, [r5, #72]	; 0x48
 800f114:	f001 f80a 	bl	801012c <rmw_uxrce_init_node_memory>
 800f118:	2205      	movs	r2, #5
 800f11a:	4948      	ldr	r1, [pc, #288]	; (800f23c <rmw_init+0x1c8>)
 800f11c:	4848      	ldr	r0, [pc, #288]	; (800f240 <rmw_init+0x1cc>)
 800f11e:	f000 ffe5 	bl	80100ec <rmw_uxrce_init_subscription_memory>
 800f122:	220b      	movs	r2, #11
 800f124:	4947      	ldr	r1, [pc, #284]	; (800f244 <rmw_init+0x1d0>)
 800f126:	4848      	ldr	r0, [pc, #288]	; (800f248 <rmw_init+0x1d4>)
 800f128:	f000 ffc0 	bl	80100ac <rmw_uxrce_init_publisher_memory>
 800f12c:	2201      	movs	r2, #1
 800f12e:	4947      	ldr	r1, [pc, #284]	; (800f24c <rmw_init+0x1d8>)
 800f130:	4847      	ldr	r0, [pc, #284]	; (800f250 <rmw_init+0x1dc>)
 800f132:	f000 ff7b 	bl	801002c <rmw_uxrce_init_service_memory>
 800f136:	2201      	movs	r2, #1
 800f138:	4946      	ldr	r1, [pc, #280]	; (800f254 <rmw_init+0x1e0>)
 800f13a:	4847      	ldr	r0, [pc, #284]	; (800f258 <rmw_init+0x1e4>)
 800f13c:	f000 ff96 	bl	801006c <rmw_uxrce_init_client_memory>
 800f140:	2210      	movs	r2, #16
 800f142:	4946      	ldr	r1, [pc, #280]	; (800f25c <rmw_init+0x1e8>)
 800f144:	4846      	ldr	r0, [pc, #280]	; (800f260 <rmw_init+0x1ec>)
 800f146:	f001 f831 	bl	80101ac <rmw_uxrce_init_topic_memory>
 800f14a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f14c:	4642      	mov	r2, r8
 800f14e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f150:	f000 fe18 	bl	800fd84 <rmw_uxrce_transport_init>
 800f154:	4605      	mov	r5, r0
 800f156:	2800      	cmp	r0, #0
 800f158:	d153      	bne.n	800f202 <rmw_init+0x18e>
 800f15a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f15c:	f506 7428 	add.w	r4, r6, #672	; 0x2a0
 800f160:	f506 7122 	add.w	r1, r6, #648	; 0x288
 800f164:	699a      	ldr	r2, [r3, #24]
 800f166:	4620      	mov	r0, r4
 800f168:	f002 fe96 	bl	8011e98 <uxr_init_session>
 800f16c:	4632      	mov	r2, r6
 800f16e:	4620      	mov	r0, r4
 800f170:	493c      	ldr	r1, [pc, #240]	; (800f264 <rmw_init+0x1f0>)
 800f172:	f002 feb1 	bl	8011ed8 <uxr_set_topic_callback>
 800f176:	462a      	mov	r2, r5
 800f178:	4620      	mov	r0, r4
 800f17a:	493b      	ldr	r1, [pc, #236]	; (800f268 <rmw_init+0x1f4>)
 800f17c:	f002 fea8 	bl	8011ed0 <uxr_set_status_callback>
 800f180:	462a      	mov	r2, r5
 800f182:	4620      	mov	r0, r4
 800f184:	4939      	ldr	r1, [pc, #228]	; (800f26c <rmw_init+0x1f8>)
 800f186:	f002 feab 	bl	8011ee0 <uxr_set_request_callback>
 800f18a:	462a      	mov	r2, r5
 800f18c:	4620      	mov	r0, r4
 800f18e:	4938      	ldr	r1, [pc, #224]	; (800f270 <rmw_init+0x1fc>)
 800f190:	f002 feaa 	bl	8011ee8 <uxr_set_reply_callback>
 800f194:	f8b6 2298 	ldrh.w	r2, [r6, #664]	; 0x298
 800f198:	2304      	movs	r3, #4
 800f19a:	f506 7162 	add.w	r1, r6, #904	; 0x388
 800f19e:	0092      	lsls	r2, r2, #2
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f002 ff73 	bl	801208c <uxr_create_input_reliable_stream>
 800f1a6:	f8b6 2298 	ldrh.w	r2, [r6, #664]	; 0x298
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f606 3188 	addw	r1, r6, #2952	; 0xb88
 800f1b0:	0092      	lsls	r2, r2, #2
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f8c6 3374 	str.w	r3, [r6, #884]	; 0x374
 800f1b8:	2304      	movs	r3, #4
 800f1ba:	f002 ff3d 	bl	8012038 <uxr_create_output_reliable_stream>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f8c6 3378 	str.w	r3, [r6, #888]	; 0x378
 800f1c6:	f002 ff5b 	bl	8012080 <uxr_create_input_best_effort_stream>
 800f1ca:	f241 3188 	movw	r1, #5000	; 0x1388
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f8b6 2298 	ldrh.w	r2, [r6, #664]	; 0x298
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	4431      	add	r1, r6
 800f1d8:	f8c6 3380 	str.w	r3, [r6, #896]	; 0x380
 800f1dc:	f002 ff1a 	bl	8012014 <uxr_create_output_best_effort_stream>
 800f1e0:	f506 735e 	add.w	r3, r6, #888	; 0x378
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
 800f1ec:	f8c6 237c 	str.w	r2, [r6, #892]	; 0x37c
 800f1f0:	f002 fe7e 	bl	8011ef0 <uxr_create_session>
 800f1f4:	b928      	cbnz	r0, 800f202 <rmw_init+0x18e>
 800f1f6:	4650      	mov	r0, sl
 800f1f8:	2501      	movs	r5, #1
 800f1fa:	f002 fa05 	bl	8011608 <uxr_close_custom_transport>
 800f1fe:	e000      	b.n	800f202 <rmw_init+0x18e>
 800f200:	250c      	movs	r5, #12
 800f202:	4628      	mov	r0, r5
 800f204:	b002      	add	sp, #8
 800f206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20a:	250b      	movs	r5, #11
 800f20c:	4628      	mov	r0, r5
 800f20e:	b002      	add	sp, #8
 800f210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f214:	2501      	movs	r5, #1
 800f216:	4628      	mov	r0, r5
 800f218:	b002      	add	sp, #8
 800f21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f21e:	bf00      	nop
 800f220:	08020404 	.word	0x08020404
 800f224:	2000da30 	.word	0x2000da30
 800f228:	2000d998 	.word	0x2000d998
 800f22c:	2000a948 	.word	0x2000a948
 800f230:	2000b6b8 	.word	0x2000b6b8
 800f234:	2000d9a8 	.word	0x2000d9a8
 800f238:	2000d778 	.word	0x2000d778
 800f23c:	2000b350 	.word	0x2000b350
 800f240:	2000d9d4 	.word	0x2000d9d4
 800f244:	2000a968 	.word	0x2000a968
 800f248:	2000a958 	.word	0x2000a958
 800f24c:	2000d9e4 	.word	0x2000d9e4
 800f250:	2000d9c4 	.word	0x2000d9c4
 800f254:	2000b670 	.word	0x2000b670
 800f258:	2000b0e8 	.word	0x2000b0e8
 800f25c:	2000d788 	.word	0x2000d788
 800f260:	2000d988 	.word	0x2000d988
 800f264:	08013e11 	.word	0x08013e11
 800f268:	08013e09 	.word	0x08013e09
 800f26c:	08013e7d 	.word	0x08013e7d
 800f270:	08013ef5 	.word	0x08013ef5

0800f274 <rmw_context_fini>:
 800f274:	4b13      	ldr	r3, [pc, #76]	; (800f2c4 <rmw_context_fini+0x50>)
 800f276:	b570      	push	{r4, r5, r6, lr}
 800f278:	681c      	ldr	r4, [r3, #0]
 800f27a:	4605      	mov	r5, r0
 800f27c:	b1fc      	cbz	r4, 800f2be <rmw_context_fini+0x4a>
 800f27e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800f280:	2600      	movs	r6, #0
 800f282:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800f286:	695a      	ldr	r2, [r3, #20]
 800f288:	428a      	cmp	r2, r1
 800f28a:	d010      	beq.n	800f2ae <rmw_context_fini+0x3a>
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	d1f8      	bne.n	800f282 <rmw_context_fini+0xe>
 800f290:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800f294:	f002 fe78 	bl	8011f88 <uxr_delete_session>
 800f298:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f29a:	f000 ffc5 	bl	8010228 <rmw_uxrce_fini_session_memory>
 800f29e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f2a0:	3010      	adds	r0, #16
 800f2a2:	f002 f9b1 	bl	8011608 <uxr_close_custom_transport>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	64ab      	str	r3, [r5, #72]	; 0x48
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
 800f2ae:	6918      	ldr	r0, [r3, #16]
 800f2b0:	f000 f89c 	bl	800f3ec <rmw_destroy_node>
 800f2b4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800f2b6:	4606      	mov	r6, r0
 800f2b8:	2c00      	cmp	r4, #0
 800f2ba:	d1e2      	bne.n	800f282 <rmw_context_fini+0xe>
 800f2bc:	e7e8      	b.n	800f290 <rmw_context_fini+0x1c>
 800f2be:	4626      	mov	r6, r4
 800f2c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800f2c2:	e7e5      	b.n	800f290 <rmw_context_fini+0x1c>
 800f2c4:	2000d778 	.word	0x2000d778

0800f2c8 <create_node>:
 800f2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d069      	beq.n	800f3a6 <create_node+0xde>
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	4839      	ldr	r0, [pc, #228]	; (800f3bc <create_node+0xf4>)
 800f2d6:	460f      	mov	r7, r1
 800f2d8:	4690      	mov	r8, r2
 800f2da:	461c      	mov	r4, r3
 800f2dc:	f004 fe42 	bl	8013f64 <get_memory>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d060      	beq.n	800f3a6 <create_node+0xde>
 800f2e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f2e6:	68c6      	ldr	r6, [r0, #12]
 800f2e8:	6173      	str	r3, [r6, #20]
 800f2ea:	f004 fd6b 	bl	8013dc4 <rmw_node_allocate>
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d058      	beq.n	800f3a6 <create_node+0xde>
 800f2f4:	6130      	str	r0, [r6, #16]
 800f2f6:	f7ff fdf3 	bl	800eee0 <rmw_get_implementation_identifier>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	6066      	str	r6, [r4, #4]
 800f2fe:	4628      	mov	r0, r5
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	f7f1 f9bd 	bl	8000680 <strlen>
 800f306:	3001      	adds	r0, #1
 800f308:	f004 fd3a 	bl	8013d80 <rmw_allocate>
 800f30c:	4681      	mov	r9, r0
 800f30e:	60a0      	str	r0, [r4, #8]
 800f310:	2800      	cmp	r0, #0
 800f312:	d04d      	beq.n	800f3b0 <create_node+0xe8>
 800f314:	4628      	mov	r0, r5
 800f316:	f7f1 f9b3 	bl	8000680 <strlen>
 800f31a:	4602      	mov	r2, r0
 800f31c:	4629      	mov	r1, r5
 800f31e:	4648      	mov	r0, r9
 800f320:	3201      	adds	r2, #1
 800f322:	f7f0 ff8d 	bl	8000240 <memcpy>
 800f326:	4638      	mov	r0, r7
 800f328:	f7f1 f9aa 	bl	8000680 <strlen>
 800f32c:	3001      	adds	r0, #1
 800f32e:	f004 fd27 	bl	8013d80 <rmw_allocate>
 800f332:	4681      	mov	r9, r0
 800f334:	60e0      	str	r0, [r4, #12]
 800f336:	2800      	cmp	r0, #0
 800f338:	d03a      	beq.n	800f3b0 <create_node+0xe8>
 800f33a:	4638      	mov	r0, r7
 800f33c:	f8df a080 	ldr.w	sl, [pc, #128]	; 800f3c0 <create_node+0xf8>
 800f340:	f7f1 f99e 	bl	8000680 <strlen>
 800f344:	4602      	mov	r2, r0
 800f346:	4639      	mov	r1, r7
 800f348:	4648      	mov	r0, r9
 800f34a:	3201      	adds	r2, #1
 800f34c:	f7f0 ff78 	bl	8000240 <memcpy>
 800f350:	6972      	ldr	r2, [r6, #20]
 800f352:	f241 5388 	movw	r3, #5512	; 0x1588
 800f356:	2101      	movs	r1, #1
 800f358:	5ad0      	ldrh	r0, [r2, r3]
 800f35a:	1847      	adds	r7, r0, r1
 800f35c:	52d7      	strh	r7, [r2, r3]
 800f35e:	f002 f957 	bl	8011610 <uxr_object_id>
 800f362:	4629      	mov	r1, r5
 800f364:	61b0      	str	r0, [r6, #24]
 800f366:	4652      	mov	r2, sl
 800f368:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f36c:	4640      	mov	r0, r8
 800f36e:	f001 f831 	bl	80103d4 <build_participant_xml>
 800f372:	b1c0      	cbz	r0, 800f3a6 <create_node+0xde>
 800f374:	6970      	ldr	r0, [r6, #20]
 800f376:	2104      	movs	r1, #4
 800f378:	fa1f f388 	uxth.w	r3, r8
 800f37c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800f380:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f384:	e9cd a100 	strd	sl, r1, [sp]
 800f388:	6811      	ldr	r1, [r2, #0]
 800f38a:	69b2      	ldr	r2, [r6, #24]
 800f38c:	f001 ff9e 	bl	80112cc <uxr_buffer_create_participant_xml>
 800f390:	4601      	mov	r1, r0
 800f392:	6970      	ldr	r0, [r6, #20]
 800f394:	f001 f800 	bl	8010398 <run_xrce_session>
 800f398:	4603      	mov	r3, r0
 800f39a:	b928      	cbnz	r0, 800f3a8 <create_node+0xe0>
 800f39c:	4620      	mov	r0, r4
 800f39e:	461c      	mov	r4, r3
 800f3a0:	f000 ff48 	bl	8010234 <rmw_uxrce_fini_node_memory>
 800f3a4:	e000      	b.n	800f3a8 <create_node+0xe0>
 800f3a6:	2400      	movs	r4, #0
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	b002      	add	sp, #8
 800f3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	464c      	mov	r4, r9
 800f3b4:	f000 ff3e 	bl	8010234 <rmw_uxrce_fini_node_memory>
 800f3b8:	e7f6      	b.n	800f3a8 <create_node+0xe0>
 800f3ba:	bf00      	nop
 800f3bc:	2000d778 	.word	0x2000d778
 800f3c0:	2000b0f8 	.word	0x2000b0f8

0800f3c4 <rmw_create_node>:
 800f3c4:	b410      	push	{r4}
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	b161      	cbz	r1, 800f3e4 <rmw_create_node+0x20>
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	7823      	ldrb	r3, [r4, #0]
 800f3d0:	b143      	cbz	r3, 800f3e4 <rmw_create_node+0x20>
 800f3d2:	b139      	cbz	r1, 800f3e4 <rmw_create_node+0x20>
 800f3d4:	780b      	ldrb	r3, [r1, #0]
 800f3d6:	b12b      	cbz	r3, 800f3e4 <rmw_create_node+0x20>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3e0:	f7ff bf72 	b.w	800f2c8 <create_node>
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <rmw_destroy_node>:
 800f3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d058      	beq.n	800f4a4 <rmw_destroy_node+0xb8>
 800f3f2:	4607      	mov	r7, r0
 800f3f4:	6800      	ldr	r0, [r0, #0]
 800f3f6:	f001 f945 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d052      	beq.n	800f4a4 <rmw_destroy_node+0xb8>
 800f3fe:	687c      	ldr	r4, [r7, #4]
 800f400:	2c00      	cmp	r4, #0
 800f402:	d04f      	beq.n	800f4a4 <rmw_destroy_node+0xb8>
 800f404:	4b2e      	ldr	r3, [pc, #184]	; (800f4c0 <rmw_destroy_node+0xd4>)
 800f406:	681d      	ldr	r5, [r3, #0]
 800f408:	2d00      	cmp	r5, #0
 800f40a:	d056      	beq.n	800f4ba <rmw_destroy_node+0xce>
 800f40c:	2600      	movs	r6, #0
 800f40e:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
 800f412:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800f416:	4294      	cmp	r4, r2
 800f418:	d047      	beq.n	800f4aa <rmw_destroy_node+0xbe>
 800f41a:	2d00      	cmp	r5, #0
 800f41c:	d1f7      	bne.n	800f40e <rmw_destroy_node+0x22>
 800f41e:	4b29      	ldr	r3, [pc, #164]	; (800f4c4 <rmw_destroy_node+0xd8>)
 800f420:	681d      	ldr	r5, [r3, #0]
 800f422:	b15d      	cbz	r5, 800f43c <rmw_destroy_node+0x50>
 800f424:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
 800f428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f42a:	4294      	cmp	r4, r2
 800f42c:	d1f9      	bne.n	800f422 <rmw_destroy_node+0x36>
 800f42e:	6919      	ldr	r1, [r3, #16]
 800f430:	4638      	mov	r0, r7
 800f432:	f000 fc1b 	bl	800fc6c <rmw_destroy_subscription>
 800f436:	4606      	mov	r6, r0
 800f438:	2d00      	cmp	r5, #0
 800f43a:	d1f3      	bne.n	800f424 <rmw_destroy_node+0x38>
 800f43c:	4b22      	ldr	r3, [pc, #136]	; (800f4c8 <rmw_destroy_node+0xdc>)
 800f43e:	681d      	ldr	r5, [r3, #0]
 800f440:	b15d      	cbz	r5, 800f45a <rmw_destroy_node+0x6e>
 800f442:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
 800f446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f448:	4294      	cmp	r4, r2
 800f44a:	d1f9      	bne.n	800f440 <rmw_destroy_node+0x54>
 800f44c:	6919      	ldr	r1, [r3, #16]
 800f44e:	4638      	mov	r0, r7
 800f450:	f000 fada 	bl	800fa08 <rmw_destroy_service>
 800f454:	4606      	mov	r6, r0
 800f456:	2d00      	cmp	r5, #0
 800f458:	d1f3      	bne.n	800f442 <rmw_destroy_node+0x56>
 800f45a:	4b1c      	ldr	r3, [pc, #112]	; (800f4cc <rmw_destroy_node+0xe0>)
 800f45c:	681d      	ldr	r5, [r3, #0]
 800f45e:	b15d      	cbz	r5, 800f478 <rmw_destroy_node+0x8c>
 800f460:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
 800f464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f466:	4294      	cmp	r4, r2
 800f468:	d1f9      	bne.n	800f45e <rmw_destroy_node+0x72>
 800f46a:	6919      	ldr	r1, [r3, #16]
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7ff fd05 	bl	800ee7c <rmw_destroy_client>
 800f472:	4606      	mov	r6, r0
 800f474:	2d00      	cmp	r5, #0
 800f476:	d1f3      	bne.n	800f460 <rmw_destroy_node+0x74>
 800f478:	e9d4 0205 	ldrd	r0, r2, [r4, #20]
 800f47c:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800f480:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f484:	6819      	ldr	r1, [r3, #0]
 800f486:	f001 fed5 	bl	8011234 <uxr_buffer_delete_entity>
 800f48a:	4601      	mov	r1, r0
 800f48c:	6960      	ldr	r0, [r4, #20]
 800f48e:	f000 ff83 	bl	8010398 <run_xrce_session>
 800f492:	4603      	mov	r3, r0
 800f494:	4638      	mov	r0, r7
 800f496:	2b00      	cmp	r3, #0
 800f498:	bf08      	it	eq
 800f49a:	2601      	moveq	r6, #1
 800f49c:	f000 feca 	bl	8010234 <rmw_uxrce_fini_node_memory>
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4a4:	2601      	movs	r6, #1
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4aa:	6919      	ldr	r1, [r3, #16]
 800f4ac:	4638      	mov	r0, r7
 800f4ae:	f000 f97d 	bl	800f7ac <rmw_destroy_publisher>
 800f4b2:	4606      	mov	r6, r0
 800f4b4:	2d00      	cmp	r5, #0
 800f4b6:	d1aa      	bne.n	800f40e <rmw_destroy_node+0x22>
 800f4b8:	e7b1      	b.n	800f41e <rmw_destroy_node+0x32>
 800f4ba:	462e      	mov	r6, r5
 800f4bc:	e7af      	b.n	800f41e <rmw_destroy_node+0x32>
 800f4be:	bf00      	nop
 800f4c0:	2000a958 	.word	0x2000a958
 800f4c4:	2000d9d4 	.word	0x2000d9d4
 800f4c8:	2000d9c4 	.word	0x2000d9c4
 800f4cc:	2000b0e8 	.word	0x2000b0e8

0800f4d0 <rmw_node_get_graph_guard_condition>:
 800f4d0:	6843      	ldr	r3, [r0, #4]
 800f4d2:	6958      	ldr	r0, [r3, #20]
 800f4d4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop

0800f4dc <flush_session>:
 800f4dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f4e0:	f002 be88 	b.w	80121f4 <uxr_run_session_until_confirm_delivery>

0800f4e4 <rmw_publish>:
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d055      	beq.n	800f594 <rmw_publish+0xb0>
 800f4e8:	b570      	push	{r4, r5, r6, lr}
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	b08c      	sub	sp, #48	; 0x30
 800f4ee:	2900      	cmp	r1, #0
 800f4f0:	d04d      	beq.n	800f58e <rmw_publish+0xaa>
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	6800      	ldr	r0, [r0, #0]
 800f4f6:	f001 f8c5 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d047      	beq.n	800f58e <rmw_publish+0xaa>
 800f4fe:	6866      	ldr	r6, [r4, #4]
 800f500:	2e00      	cmp	r6, #0
 800f502:	d044      	beq.n	800f58e <rmw_publish+0xaa>
 800f504:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800f506:	4628      	mov	r0, r5
 800f508:	6923      	ldr	r3, [r4, #16]
 800f50a:	4798      	blx	r3
 800f50c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800f50e:	9003      	str	r0, [sp, #12]
 800f510:	b113      	cbz	r3, 800f518 <rmw_publish+0x34>
 800f512:	a803      	add	r0, sp, #12
 800f514:	4798      	blx	r3
 800f516:	9803      	ldr	r0, [sp, #12]
 800f518:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800f51c:	695a      	ldr	r2, [r3, #20]
 800f51e:	ab04      	add	r3, sp, #16
 800f520:	9000      	str	r0, [sp, #0]
 800f522:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800f526:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
 800f52a:	69b2      	ldr	r2, [r6, #24]
 800f52c:	f003 fea0 	bl	8013270 <uxr_prepare_output_stream>
 800f530:	b1e0      	cbz	r0, 800f56c <rmw_publish+0x88>
 800f532:	68a3      	ldr	r3, [r4, #8]
 800f534:	4628      	mov	r0, r5
 800f536:	a904      	add	r1, sp, #16
 800f538:	4798      	blx	r3
 800f53a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800f53c:	4604      	mov	r4, r0
 800f53e:	b10b      	cbz	r3, 800f544 <rmw_publish+0x60>
 800f540:	a804      	add	r0, sp, #16
 800f542:	4798      	blx	r3
 800f544:	f896 309a 	ldrb.w	r3, [r6, #154]	; 0x9a
 800f548:	2b01      	cmp	r3, #1
 800f54a:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800f54e:	d023      	beq.n	800f598 <rmw_publish+0xb4>
 800f550:	6958      	ldr	r0, [r3, #20]
 800f552:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f556:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f55a:	f002 fe4b 	bl	80121f4 <uxr_run_session_until_confirm_delivery>
 800f55e:	4020      	ands	r0, r4
 800f560:	b2c4      	uxtb	r4, r0
 800f562:	f084 0001 	eor.w	r0, r4, #1
 800f566:	b2c0      	uxtb	r0, r0
 800f568:	b00c      	add	sp, #48	; 0x30
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	f8d6 209c 	ldr.w	r2, [r6, #156]	; 0x9c
 800f570:	ab04      	add	r3, sp, #16
 800f572:	490c      	ldr	r1, [pc, #48]	; (800f5a4 <rmw_publish+0xc0>)
 800f574:	6950      	ldr	r0, [r2, #20]
 800f576:	9a03      	ldr	r2, [sp, #12]
 800f578:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f57c:	e9cd 2100 	strd	r2, r1, [sp]
 800f580:	69b2      	ldr	r2, [r6, #24]
 800f582:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
 800f586:	f003 fea3 	bl	80132d0 <uxr_prepare_output_stream_fragmented>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d1d1      	bne.n	800f532 <rmw_publish+0x4e>
 800f58e:	2001      	movs	r0, #1
 800f590:	b00c      	add	sp, #48	; 0x30
 800f592:	bd70      	pop	{r4, r5, r6, pc}
 800f594:	2001      	movs	r0, #1
 800f596:	4770      	bx	lr
 800f598:	6958      	ldr	r0, [r3, #20]
 800f59a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f59e:	f002 fd91 	bl	80120c4 <uxr_flash_output_streams>
 800f5a2:	e7de      	b.n	800f562 <rmw_publish+0x7e>
 800f5a4:	0800f4dd 	.word	0x0800f4dd

0800f5a8 <rmw_create_publisher>:
 800f5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ac:	b088      	sub	sp, #32
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f000 80ee 	beq.w	800f790 <rmw_create_publisher+0x1e8>
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	2900      	cmp	r1, #0
 800f5b8:	f000 80ea 	beq.w	800f790 <rmw_create_publisher+0x1e8>
 800f5bc:	4615      	mov	r5, r2
 800f5be:	4604      	mov	r4, r0
 800f5c0:	6800      	ldr	r0, [r0, #0]
 800f5c2:	461e      	mov	r6, r3
 800f5c4:	f001 f85e 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f5c8:	2d00      	cmp	r5, #0
 800f5ca:	f000 80e1 	beq.w	800f790 <rmw_create_publisher+0x1e8>
 800f5ce:	f080 0001 	eor.w	r0, r0, #1
 800f5d2:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f5d6:	f040 80db 	bne.w	800f790 <rmw_create_publisher+0x1e8>
 800f5da:	782b      	ldrb	r3, [r5, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 80d7 	beq.w	800f790 <rmw_create_publisher+0x1e8>
 800f5e2:	fab6 f986 	clz	r9, r6
 800f5e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800f5ea:	2e00      	cmp	r6, #0
 800f5ec:	f000 80d0 	beq.w	800f790 <rmw_create_publisher+0x1e8>
 800f5f0:	2014      	movs	r0, #20
 800f5f2:	f004 fbc5 	bl	8013d80 <rmw_allocate>
 800f5f6:	f8c0 9004 	str.w	r9, [r0, #4]
 800f5fa:	4680      	mov	r8, r0
 800f5fc:	f7ff fc70 	bl	800eee0 <rmw_get_implementation_identifier>
 800f600:	4603      	mov	r3, r0
 800f602:	4628      	mov	r0, r5
 800f604:	f8c8 3000 	str.w	r3, [r8]
 800f608:	f7f1 f83a 	bl	8000680 <strlen>
 800f60c:	3001      	adds	r0, #1
 800f60e:	f004 fbb7 	bl	8013d80 <rmw_allocate>
 800f612:	f8c8 0008 	str.w	r0, [r8, #8]
 800f616:	2800      	cmp	r0, #0
 800f618:	f000 80b1 	beq.w	800f77e <rmw_create_publisher+0x1d6>
 800f61c:	4629      	mov	r1, r5
 800f61e:	f006 fcd7 	bl	8015fd0 <strcpy>
 800f622:	485e      	ldr	r0, [pc, #376]	; (800f79c <rmw_create_publisher+0x1f4>)
 800f624:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f628:	f004 fc9c 	bl	8013f64 <get_memory>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	f000 80a6 	beq.w	800f77e <rmw_create_publisher+0x1d6>
 800f632:	68c4      	ldr	r4, [r0, #12]
 800f634:	f04f 0a00 	mov.w	sl, #0
 800f638:	f8c4 8010 	str.w	r8, [r4, #16]
 800f63c:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
 800f640:	f7ff fc4e 	bl	800eee0 <rmw_get_implementation_identifier>
 800f644:	4603      	mov	r3, r0
 800f646:	4631      	mov	r1, r6
 800f648:	2250      	movs	r2, #80	; 0x50
 800f64a:	61e3      	str	r3, [r4, #28]
 800f64c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f650:	f7f0 fdf6 	bl	8000240 <memcpy>
 800f654:	7a33      	ldrb	r3, [r6, #8]
 800f656:	4638      	mov	r0, r7
 800f658:	4951      	ldr	r1, [pc, #324]	; (800f7a0 <rmw_create_publisher+0x1f8>)
 800f65a:	2b02      	cmp	r3, #2
 800f65c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f660:	bf0c      	ite	eq
 800f662:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800f666:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800f66a:	e9c4 aa0f 	strd	sl, sl, [r4, #60]	; 0x3c
 800f66e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800f672:	f001 f983 	bl	801097c <get_message_typesupport_handle>
 800f676:	2800      	cmp	r0, #0
 800f678:	f000 8081 	beq.w	800f77e <rmw_create_publisher+0x1d6>
 800f67c:	6842      	ldr	r2, [r0, #4]
 800f67e:	63a2      	str	r2, [r4, #56]	; 0x38
 800f680:	2a00      	cmp	r2, #0
 800f682:	d07c      	beq.n	800f77e <rmw_create_publisher+0x1d6>
 800f684:	6967      	ldr	r7, [r4, #20]
 800f686:	4633      	mov	r3, r6
 800f688:	4629      	mov	r1, r5
 800f68a:	4648      	mov	r0, r9
 800f68c:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
 800f690:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 800f694:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
 800f698:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
 800f69c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800f6a0:	6227      	str	r7, [r4, #32]
 800f6a2:	f004 fc9d 	bl	8013fe0 <create_topic>
 800f6a6:	6460      	str	r0, [r4, #68]	; 0x44
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d068      	beq.n	800f77e <rmw_create_publisher+0x1d6>
 800f6ac:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800f6b0:	f241 538c 	movw	r3, #5516	; 0x158c
 800f6b4:	2103      	movs	r1, #3
 800f6b6:	5ad0      	ldrh	r0, [r2, r3]
 800f6b8:	1c47      	adds	r7, r0, #1
 800f6ba:	52d7      	strh	r7, [r2, r3]
 800f6bc:	f001 ffa8 	bl	8011610 <uxr_object_id>
 800f6c0:	4623      	mov	r3, r4
 800f6c2:	4f38      	ldr	r7, [pc, #224]	; (800f7a4 <rmw_create_publisher+0x1fc>)
 800f6c4:	a903      	add	r1, sp, #12
 800f6c6:	2214      	movs	r2, #20
 800f6c8:	f843 0f14 	str.w	r0, [r3, #20]!
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f000 fe99 	bl	8010404 <generate_name>
 800f6d2:	a803      	add	r0, sp, #12
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f6da:	f000 fe8b 	bl	80103f4 <build_publisher_xml>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d04d      	beq.n	800f77e <rmw_create_publisher+0x1d6>
 800f6e2:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800f6e6:	f04f 0a04 	mov.w	sl, #4
 800f6ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f6ee:	6950      	ldr	r0, [r2, #20]
 800f6f0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f6f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f6f8:	9700      	str	r7, [sp, #0]
 800f6fa:	f8cd a004 	str.w	sl, [sp, #4]
 800f6fe:	6819      	ldr	r1, [r3, #0]
 800f700:	6962      	ldr	r2, [r4, #20]
 800f702:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800f706:	f001 fe29 	bl	801135c <uxr_buffer_create_publisher_xml>
 800f70a:	4601      	mov	r1, r0
 800f70c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f710:	f000 fe42 	bl	8010398 <run_xrce_session>
 800f714:	b378      	cbz	r0, 800f776 <rmw_create_publisher+0x1ce>
 800f716:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800f71a:	f241 538e 	movw	r3, #5518	; 0x158e
 800f71e:	2105      	movs	r1, #5
 800f720:	f8c8 4004 	str.w	r4, [r8, #4]
 800f724:	5ad0      	ldrh	r0, [r2, r3]
 800f726:	f100 0c01 	add.w	ip, r0, #1
 800f72a:	f822 c003 	strh.w	ip, [r2, r3]
 800f72e:	f001 ff6f 	bl	8011610 <uxr_object_id>
 800f732:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f736:	61a0      	str	r0, [r4, #24]
 800f738:	4632      	mov	r2, r6
 800f73a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f73c:	4628      	mov	r0, r5
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	463b      	mov	r3, r7
 800f742:	f000 ff03 	bl	801054c <build_datawriter_xml>
 800f746:	b1d0      	cbz	r0, 800f77e <rmw_create_publisher+0x1d6>
 800f748:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800f74c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f750:	6950      	ldr	r0, [r2, #20]
 800f752:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f756:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f75a:	f8cd a004 	str.w	sl, [sp, #4]
 800f75e:	9700      	str	r7, [sp, #0]
 800f760:	6819      	ldr	r1, [r3, #0]
 800f762:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800f766:	f001 fe41 	bl	80113ec <uxr_buffer_create_datawriter_xml>
 800f76a:	4601      	mov	r1, r0
 800f76c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f770:	f000 fe12 	bl	8010398 <run_xrce_session>
 800f774:	b970      	cbnz	r0, 800f794 <rmw_create_publisher+0x1ec>
 800f776:	4621      	mov	r1, r4
 800f778:	4808      	ldr	r0, [pc, #32]	; (800f79c <rmw_create_publisher+0x1f4>)
 800f77a:	f004 fc03 	bl	8013f84 <put_memory>
 800f77e:	4640      	mov	r0, r8
 800f780:	f04f 0800 	mov.w	r8, #0
 800f784:	f000 fd7a 	bl	801027c <rmw_uxrce_fini_publisher_memory>
 800f788:	4640      	mov	r0, r8
 800f78a:	b008      	add	sp, #32
 800f78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f790:	f04f 0800 	mov.w	r8, #0
 800f794:	4640      	mov	r0, r8
 800f796:	b008      	add	sp, #32
 800f798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79c:	2000a958 	.word	0x2000a958
 800f7a0:	0801f7c4 	.word	0x0801f7c4
 800f7a4:	2000b0f8 	.word	0x2000b0f8

0800f7a8 <rmw_publisher_get_actual_qos>:
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	4770      	bx	lr

0800f7ac <rmw_destroy_publisher>:
 800f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ae:	b128      	cbz	r0, 800f7bc <rmw_destroy_publisher+0x10>
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	6800      	ldr	r0, [r0, #0]
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	f000 ff65 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f7ba:	b910      	cbnz	r0, 800f7c2 <rmw_destroy_publisher+0x16>
 800f7bc:	2401      	movs	r4, #1
 800f7be:	4620      	mov	r0, r4
 800f7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c2:	6863      	ldr	r3, [r4, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d0f9      	beq.n	800f7bc <rmw_destroy_publisher+0x10>
 800f7c8:	2d00      	cmp	r5, #0
 800f7ca:	d0f7      	beq.n	800f7bc <rmw_destroy_publisher+0x10>
 800f7cc:	6828      	ldr	r0, [r5, #0]
 800f7ce:	f000 ff59 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d0f2      	beq.n	800f7bc <rmw_destroy_publisher+0x10>
 800f7d6:	686c      	ldr	r4, [r5, #4]
 800f7d8:	2c00      	cmp	r4, #0
 800f7da:	d0ef      	beq.n	800f7bc <rmw_destroy_publisher+0x10>
 800f7dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f7de:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
 800f7e2:	f004 fc4f 	bl	8014084 <destroy_topic>
 800f7e6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800f7ea:	69a2      	ldr	r2, [r4, #24]
 800f7ec:	6958      	ldr	r0, [r3, #20]
 800f7ee:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800f7f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f7f6:	6819      	ldr	r1, [r3, #0]
 800f7f8:	f001 fd1c 	bl	8011234 <uxr_buffer_delete_entity>
 800f7fc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800f800:	6962      	ldr	r2, [r4, #20]
 800f802:	4604      	mov	r4, r0
 800f804:	6958      	ldr	r0, [r3, #20]
 800f806:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800f80a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f80e:	6819      	ldr	r1, [r3, #0]
 800f810:	f001 fd10 	bl	8011234 <uxr_buffer_delete_entity>
 800f814:	4606      	mov	r6, r0
 800f816:	4621      	mov	r1, r4
 800f818:	6978      	ldr	r0, [r7, #20]
 800f81a:	f000 fdbd 	bl	8010398 <run_xrce_session>
 800f81e:	4631      	mov	r1, r6
 800f820:	4604      	mov	r4, r0
 800f822:	6978      	ldr	r0, [r7, #20]
 800f824:	f000 fdb8 	bl	8010398 <run_xrce_session>
 800f828:	4603      	mov	r3, r0
 800f82a:	4628      	mov	r0, r5
 800f82c:	401c      	ands	r4, r3
 800f82e:	f084 0401 	eor.w	r4, r4, #1
 800f832:	b2e4      	uxtb	r4, r4
 800f834:	f000 fd22 	bl	801027c <rmw_uxrce_fini_publisher_memory>
 800f838:	e7c1      	b.n	800f7be <rmw_destroy_publisher+0x12>
 800f83a:	bf00      	nop

0800f83c <rmw_take_request>:
 800f83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f840:	4605      	mov	r5, r0
 800f842:	b089      	sub	sp, #36	; 0x24
 800f844:	460c      	mov	r4, r1
 800f846:	4690      	mov	r8, r2
 800f848:	461f      	mov	r7, r3
 800f84a:	b10b      	cbz	r3, 800f850 <rmw_take_request+0x14>
 800f84c:	2300      	movs	r3, #0
 800f84e:	703b      	strb	r3, [r7, #0]
 800f850:	6828      	ldr	r0, [r5, #0]
 800f852:	f000 ff17 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f856:	2800      	cmp	r0, #0
 800f858:	d03e      	beq.n	800f8d8 <rmw_take_request+0x9c>
 800f85a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f85e:	4648      	mov	r0, r9
 800f860:	f000 fd8a 	bl	8010378 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f864:	4606      	mov	r6, r0
 800f866:	2800      	cmp	r0, #0
 800f868:	d03a      	beq.n	800f8e0 <rmw_take_request+0xa4>
 800f86a:	68c5      	ldr	r5, [r0, #12]
 800f86c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 800f870:	f8d5 182c 	ldr.w	r1, [r5, #2092]	; 0x82c
 800f874:	f895 3827 	ldrb.w	r3, [r5, #2087]	; 0x827
 800f878:	e9c4 1208 	strd	r1, r2, [r4, #32]
 800f87c:	7423      	strb	r3, [r4, #16]
 800f87e:	f8b5 2824 	ldrh.w	r2, [r5, #2084]	; 0x824
 800f882:	f895 3826 	ldrb.w	r3, [r5, #2086]	; 0x826
 800f886:	f8a4 2011 	strh.w	r2, [r4, #17]
 800f88a:	74e3      	strb	r3, [r4, #19]
 800f88c:	f8d5 1818 	ldr.w	r1, [r5, #2072]	; 0x818
 800f890:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 800f894:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
 800f898:	6161      	str	r1, [r4, #20]
 800f89a:	61a2      	str	r2, [r4, #24]
 800f89c:	61e3      	str	r3, [r4, #28]
 800f89e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	4798      	blx	r3
 800f8a6:	6844      	ldr	r4, [r0, #4]
 800f8a8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 800f8ac:	f105 0110 	add.w	r1, r5, #16
 800f8b0:	4668      	mov	r0, sp
 800f8b2:	f7fb f9d9 	bl	800ac68 <ucdr_init_buffer>
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	4641      	mov	r1, r8
 800f8ba:	4668      	mov	r0, sp
 800f8bc:	4798      	blx	r3
 800f8be:	4631      	mov	r1, r6
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	4809      	ldr	r0, [pc, #36]	; (800f8e8 <rmw_take_request+0xac>)
 800f8c4:	f004 fb5e 	bl	8013f84 <put_memory>
 800f8c8:	b107      	cbz	r7, 800f8cc <rmw_take_request+0x90>
 800f8ca:	703c      	strb	r4, [r7, #0]
 800f8cc:	f084 0001 	eor.w	r0, r4, #1
 800f8d0:	b2c0      	uxtb	r0, r0
 800f8d2:	b009      	add	sp, #36	; 0x24
 800f8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d8:	200c      	movs	r0, #12
 800f8da:	b009      	add	sp, #36	; 0x24
 800f8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8e0:	2001      	movs	r0, #1
 800f8e2:	b009      	add	sp, #36	; 0x24
 800f8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8e8:	2000a948 	.word	0x2000a948

0800f8ec <rmw_send_response>:
 800f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	b091      	sub	sp, #68	; 0x44
 800f8f2:	6800      	ldr	r0, [r0, #0]
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	4616      	mov	r6, r2
 800f8f8:	f000 fec4 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d03b      	beq.n	800f978 <rmw_send_response+0x8c>
 800f900:	4621      	mov	r1, r4
 800f902:	4622      	mov	r2, r4
 800f904:	686d      	ldr	r5, [r5, #4]
 800f906:	ab02      	add	r3, sp, #8
 800f908:	f831 cf01 	ldrh.w	ip, [r1, #1]!
 800f90c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f910:	788f      	ldrb	r7, [r1, #2]
 800f912:	f8ad c014 	strh.w	ip, [sp, #20]
 800f916:	f88d 7016 	strb.w	r7, [sp, #22]
 800f91a:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800f91e:	7827      	ldrb	r7, [r4, #0]
 800f920:	6924      	ldr	r4, [r4, #16]
 800f922:	6851      	ldr	r1, [r2, #4]
 800f924:	9407      	str	r4, [sp, #28]
 800f926:	6892      	ldr	r2, [r2, #8]
 800f928:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800f92a:	f8cd c018 	str.w	ip, [sp, #24]
 800f92e:	f88d 7017 	strb.w	r7, [sp, #23]
 800f932:	c307      	stmia	r3!, {r0, r1, r2}
 800f934:	68e3      	ldr	r3, [r4, #12]
 800f936:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800f938:	4798      	blx	r3
 800f93a:	4603      	mov	r3, r0
 800f93c:	4630      	mov	r0, r6
 800f93e:	685f      	ldr	r7, [r3, #4]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	4798      	blx	r3
 800f944:	6961      	ldr	r1, [r4, #20]
 800f946:	f100 0218 	add.w	r2, r0, #24
 800f94a:	ab08      	add	r3, sp, #32
 800f94c:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800f950:	9200      	str	r2, [sp, #0]
 800f952:	696a      	ldr	r2, [r5, #20]
 800f954:	f8d5 103d 	ldr.w	r1, [r5, #61]	; 0x3d
 800f958:	f003 fc8a 	bl	8013270 <uxr_prepare_output_stream>
 800f95c:	a902      	add	r1, sp, #8
 800f95e:	4604      	mov	r4, r0
 800f960:	a808      	add	r0, sp, #32
 800f962:	f004 f879 	bl	8013a58 <uxr_serialize_SampleIdentity>
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	a908      	add	r1, sp, #32
 800f96a:	4630      	mov	r0, r6
 800f96c:	4798      	blx	r3
 800f96e:	fab4 f084 	clz	r0, r4
 800f972:	0940      	lsrs	r0, r0, #5
 800f974:	b011      	add	sp, #68	; 0x44
 800f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f978:	200c      	movs	r0, #12
 800f97a:	b011      	add	sp, #68	; 0x44
 800f97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f97e:	bf00      	nop

0800f980 <rmw_take_response>:
 800f980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f984:	4605      	mov	r5, r0
 800f986:	b089      	sub	sp, #36	; 0x24
 800f988:	4688      	mov	r8, r1
 800f98a:	4617      	mov	r7, r2
 800f98c:	461c      	mov	r4, r3
 800f98e:	b10b      	cbz	r3, 800f994 <rmw_take_response+0x14>
 800f990:	2300      	movs	r3, #0
 800f992:	7023      	strb	r3, [r4, #0]
 800f994:	6828      	ldr	r0, [r5, #0]
 800f996:	f000 fe75 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800f99a:	b350      	cbz	r0, 800f9f2 <rmw_take_response+0x72>
 800f99c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f9a0:	4648      	mov	r0, r9
 800f9a2:	f000 fce9 	bl	8010378 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	b338      	cbz	r0, 800f9fa <rmw_take_response+0x7a>
 800f9aa:	68c5      	ldr	r5, [r0, #12]
 800f9ac:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800f9b0:	f605 0218 	addw	r2, r5, #2072	; 0x818
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f9ba:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800f9be:	4798      	blx	r3
 800f9c0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 800f9c4:	f105 0110 	add.w	r1, r5, #16
 800f9c8:	6845      	ldr	r5, [r0, #4]
 800f9ca:	4668      	mov	r0, sp
 800f9cc:	f7fb f94c 	bl	800ac68 <ucdr_init_buffer>
 800f9d0:	68eb      	ldr	r3, [r5, #12]
 800f9d2:	4639      	mov	r1, r7
 800f9d4:	4668      	mov	r0, sp
 800f9d6:	4798      	blx	r3
 800f9d8:	4631      	mov	r1, r6
 800f9da:	4605      	mov	r5, r0
 800f9dc:	4809      	ldr	r0, [pc, #36]	; (800fa04 <rmw_take_response+0x84>)
 800f9de:	f004 fad1 	bl	8013f84 <put_memory>
 800f9e2:	b104      	cbz	r4, 800f9e6 <rmw_take_response+0x66>
 800f9e4:	7025      	strb	r5, [r4, #0]
 800f9e6:	f085 0001 	eor.w	r0, r5, #1
 800f9ea:	b2c0      	uxtb	r0, r0
 800f9ec:	b009      	add	sp, #36	; 0x24
 800f9ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9f2:	200c      	movs	r0, #12
 800f9f4:	b009      	add	sp, #36	; 0x24
 800f9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9fa:	2001      	movs	r0, #1
 800f9fc:	b009      	add	sp, #36	; 0x24
 800f9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa02:	bf00      	nop
 800fa04:	2000a948 	.word	0x2000a948

0800fa08 <rmw_destroy_service>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	b128      	cbz	r0, 800fa18 <rmw_destroy_service+0x10>
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	6800      	ldr	r0, [r0, #0]
 800fa10:	460d      	mov	r5, r1
 800fa12:	f000 fe37 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800fa16:	b910      	cbnz	r0, 800fa1e <rmw_destroy_service+0x16>
 800fa18:	2401      	movs	r4, #1
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	6863      	ldr	r3, [r4, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d0f9      	beq.n	800fa18 <rmw_destroy_service+0x10>
 800fa24:	2d00      	cmp	r5, #0
 800fa26:	d0f7      	beq.n	800fa18 <rmw_destroy_service+0x10>
 800fa28:	6828      	ldr	r0, [r5, #0]
 800fa2a:	f000 fe2b 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d0f2      	beq.n	800fa18 <rmw_destroy_service+0x10>
 800fa32:	686b      	ldr	r3, [r5, #4]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0ef      	beq.n	800fa18 <rmw_destroy_service+0x10>
 800fa38:	6864      	ldr	r4, [r4, #4]
 800fa3a:	695a      	ldr	r2, [r3, #20]
 800fa3c:	6960      	ldr	r0, [r4, #20]
 800fa3e:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800fa42:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fa46:	6819      	ldr	r1, [r3, #0]
 800fa48:	f001 fbf4 	bl	8011234 <uxr_buffer_delete_entity>
 800fa4c:	4601      	mov	r1, r0
 800fa4e:	6960      	ldr	r0, [r4, #20]
 800fa50:	f000 fca2 	bl	8010398 <run_xrce_session>
 800fa54:	4604      	mov	r4, r0
 800fa56:	4628      	mov	r0, r5
 800fa58:	f084 0401 	eor.w	r4, r4, #1
 800fa5c:	b2e4      	uxtb	r4, r4
 800fa5e:	f000 fc49 	bl	80102f4 <rmw_uxrce_fini_service_memory>
 800fa62:	e7da      	b.n	800fa1a <rmw_destroy_service+0x12>

0800fa64 <rmw_create_subscription>:
 800fa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa68:	b08b      	sub	sp, #44	; 0x2c
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f000 80e5 	beq.w	800fc3a <rmw_create_subscription+0x1d6>
 800fa70:	460e      	mov	r6, r1
 800fa72:	2900      	cmp	r1, #0
 800fa74:	f000 80e1 	beq.w	800fc3a <rmw_create_subscription+0x1d6>
 800fa78:	4604      	mov	r4, r0
 800fa7a:	6800      	ldr	r0, [r0, #0]
 800fa7c:	4617      	mov	r7, r2
 800fa7e:	4698      	mov	r8, r3
 800fa80:	f000 fe00 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800fa84:	f080 0001 	eor.w	r0, r0, #1
 800fa88:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fa8c:	f040 80d5 	bne.w	800fc3a <rmw_create_subscription+0x1d6>
 800fa90:	2f00      	cmp	r7, #0
 800fa92:	f000 80d2 	beq.w	800fc3a <rmw_create_subscription+0x1d6>
 800fa96:	783b      	ldrb	r3, [r7, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 80ce 	beq.w	800fc3a <rmw_create_subscription+0x1d6>
 800fa9e:	fab8 f988 	clz	r9, r8
 800faa2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800faa6:	f1b8 0f00 	cmp.w	r8, #0
 800faaa:	f000 80c6 	beq.w	800fc3a <rmw_create_subscription+0x1d6>
 800faae:	2018      	movs	r0, #24
 800fab0:	f004 f966 	bl	8013d80 <rmw_allocate>
 800fab4:	f8c0 9004 	str.w	r9, [r0, #4]
 800fab8:	4605      	mov	r5, r0
 800faba:	f7ff fa11 	bl	800eee0 <rmw_get_implementation_identifier>
 800fabe:	4603      	mov	r3, r0
 800fac0:	4638      	mov	r0, r7
 800fac2:	602b      	str	r3, [r5, #0]
 800fac4:	f7f0 fddc 	bl	8000680 <strlen>
 800fac8:	3001      	adds	r0, #1
 800faca:	f004 f959 	bl	8013d80 <rmw_allocate>
 800face:	60a8      	str	r0, [r5, #8]
 800fad0:	2800      	cmp	r0, #0
 800fad2:	f000 80bb 	beq.w	800fc4c <rmw_create_subscription+0x1e8>
 800fad6:	4639      	mov	r1, r7
 800fad8:	f006 fa7a 	bl	8015fd0 <strcpy>
 800fadc:	485f      	ldr	r0, [pc, #380]	; (800fc5c <rmw_create_subscription+0x1f8>)
 800fade:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fae2:	f004 fa3f 	bl	8013f64 <get_memory>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	f000 80b0 	beq.w	800fc4c <rmw_create_subscription+0x1e8>
 800faec:	68c4      	ldr	r4, [r0, #12]
 800faee:	6125      	str	r5, [r4, #16]
 800faf0:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
 800faf4:	f7ff f9f4 	bl	800eee0 <rmw_get_implementation_identifier>
 800faf8:	4603      	mov	r3, r0
 800fafa:	4641      	mov	r1, r8
 800fafc:	2250      	movs	r2, #80	; 0x50
 800fafe:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800fb02:	61e3      	str	r3, [r4, #28]
 800fb04:	f7f0 fb9c 	bl	8000240 <memcpy>
 800fb08:	4630      	mov	r0, r6
 800fb0a:	4955      	ldr	r1, [pc, #340]	; (800fc60 <rmw_create_subscription+0x1fc>)
 800fb0c:	f000 ff36 	bl	801097c <get_message_typesupport_handle>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	f000 809b 	beq.w	800fc4c <rmw_create_subscription+0x1e8>
 800fb16:	6842      	ldr	r2, [r0, #4]
 800fb18:	63a2      	str	r2, [r4, #56]	; 0x38
 800fb1a:	2a00      	cmp	r2, #0
 800fb1c:	f000 8096 	beq.w	800fc4c <rmw_create_subscription+0x1e8>
 800fb20:	2600      	movs	r6, #0
 800fb22:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800fb26:	4643      	mov	r3, r8
 800fb28:	4639      	mov	r1, r7
 800fb2a:	4648      	mov	r0, r9
 800fb2c:	6266      	str	r6, [r4, #36]	; 0x24
 800fb2e:	62a6      	str	r6, [r4, #40]	; 0x28
 800fb30:	62e6      	str	r6, [r4, #44]	; 0x2c
 800fb32:	6326      	str	r6, [r4, #48]	; 0x30
 800fb34:	6366      	str	r6, [r4, #52]	; 0x34
 800fb36:	f8c4 c020 	str.w	ip, [r4, #32]
 800fb3a:	f004 fa51 	bl	8013fe0 <create_topic>
 800fb3e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800fb40:	2800      	cmp	r0, #0
 800fb42:	f000 8083 	beq.w	800fc4c <rmw_create_subscription+0x1e8>
 800fb46:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800fb4a:	f241 5390 	movw	r3, #5520	; 0x1590
 800fb4e:	2104      	movs	r1, #4
 800fb50:	f8df a110 	ldr.w	sl, [pc, #272]	; 800fc64 <rmw_create_subscription+0x200>
 800fb54:	5ad0      	ldrh	r0, [r2, r3]
 800fb56:	f100 0c01 	add.w	ip, r0, #1
 800fb5a:	f822 c003 	strh.w	ip, [r2, r3]
 800fb5e:	f001 fd57 	bl	8011610 <uxr_object_id>
 800fb62:	4623      	mov	r3, r4
 800fb64:	a905      	add	r1, sp, #20
 800fb66:	2214      	movs	r2, #20
 800fb68:	f843 0f14 	str.w	r0, [r3, #20]!
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 fc49 	bl	8010404 <generate_name>
 800fb72:	a805      	add	r0, sp, #20
 800fb74:	4651      	mov	r1, sl
 800fb76:	f44f 7216 	mov.w	r2, #600	; 0x258
 800fb7a:	f000 fc3f 	bl	80103fc <build_subscriber_xml>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d064      	beq.n	800fc4c <rmw_create_subscription+0x1e8>
 800fb82:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fb86:	f04f 0b04 	mov.w	fp, #4
 800fb8a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800fb8e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fb92:	e9cd ab00 	strd	sl, fp, [sp]
 800fb96:	6819      	ldr	r1, [r3, #0]
 800fb98:	6962      	ldr	r2, [r4, #20]
 800fb9a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fb9e:	f001 fc01 	bl	80113a4 <uxr_buffer_create_subscriber_xml>
 800fba2:	4601      	mov	r1, r0
 800fba4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fba8:	f000 fbf6 	bl	8010398 <run_xrce_session>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d049      	beq.n	800fc44 <rmw_create_subscription+0x1e0>
 800fbb0:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800fbb4:	f241 5392 	movw	r3, #5522	; 0x1592
 800fbb8:	2106      	movs	r1, #6
 800fbba:	5ad0      	ldrh	r0, [r2, r3]
 800fbbc:	f100 0c01 	add.w	ip, r0, #1
 800fbc0:	f822 c003 	strh.w	ip, [r2, r3]
 800fbc4:	f001 fd24 	bl	8011610 <uxr_object_id>
 800fbc8:	f44f 7316 	mov.w	r3, #600	; 0x258
 800fbcc:	61a0      	str	r0, [r4, #24]
 800fbce:	4642      	mov	r2, r8
 800fbd0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	4653      	mov	r3, sl
 800fbd8:	f000 fd06 	bl	80105e8 <build_datareader_xml>
 800fbdc:	b3b0      	cbz	r0, 800fc4c <rmw_create_subscription+0x1e8>
 800fbde:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fbe2:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800fbe6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fbea:	e9cd ab00 	strd	sl, fp, [sp]
 800fbee:	6819      	ldr	r1, [r3, #0]
 800fbf0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800fbf4:	f001 fc1e 	bl	8011434 <uxr_buffer_create_datareader_xml>
 800fbf8:	4601      	mov	r1, r0
 800fbfa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fbfe:	f000 fbcb 	bl	8010398 <run_xrce_session>
 800fc02:	b1f8      	cbz	r0, 800fc44 <rmw_create_subscription+0x1e0>
 800fc04:	606c      	str	r4, [r5, #4]
 800fc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc0a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fc0e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fc18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc1c:	bf0c      	ite	eq
 800fc1e:	f8d0 30e0 	ldreq.w	r3, [r0, #224]	; 0xe0
 800fc22:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 800fc26:	e9cd 2603 	strd	r2, r6, [sp, #12]
 800fc2a:	aa03      	add	r2, sp, #12
 800fc2c:	9302      	str	r3, [sp, #8]
 800fc2e:	9200      	str	r2, [sp, #0]
 800fc30:	69a2      	ldr	r2, [r4, #24]
 800fc32:	6809      	ldr	r1, [r1, #0]
 800fc34:	f001 fd1e 	bl	8011674 <uxr_buffer_request_data>
 800fc38:	e000      	b.n	800fc3c <rmw_create_subscription+0x1d8>
 800fc3a:	2500      	movs	r5, #0
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	b00b      	add	sp, #44	; 0x2c
 800fc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc44:	4621      	mov	r1, r4
 800fc46:	4805      	ldr	r0, [pc, #20]	; (800fc5c <rmw_create_subscription+0x1f8>)
 800fc48:	f004 f99c 	bl	8013f84 <put_memory>
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	2500      	movs	r5, #0
 800fc50:	f000 fb32 	bl	80102b8 <rmw_uxrce_fini_subscription_memory>
 800fc54:	4628      	mov	r0, r5
 800fc56:	b00b      	add	sp, #44	; 0x2c
 800fc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5c:	2000d9d4 	.word	0x2000d9d4
 800fc60:	0801f7c4 	.word	0x0801f7c4
 800fc64:	2000b0f8 	.word	0x2000b0f8

0800fc68 <rmw_subscription_get_actual_qos>:
 800fc68:	2000      	movs	r0, #0
 800fc6a:	4770      	bx	lr

0800fc6c <rmw_destroy_subscription>:
 800fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6e:	b128      	cbz	r0, 800fc7c <rmw_destroy_subscription+0x10>
 800fc70:	4604      	mov	r4, r0
 800fc72:	6800      	ldr	r0, [r0, #0]
 800fc74:	460d      	mov	r5, r1
 800fc76:	f000 fd05 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800fc7a:	b910      	cbnz	r0, 800fc82 <rmw_destroy_subscription+0x16>
 800fc7c:	2401      	movs	r4, #1
 800fc7e:	4620      	mov	r0, r4
 800fc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc82:	6863      	ldr	r3, [r4, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d0f9      	beq.n	800fc7c <rmw_destroy_subscription+0x10>
 800fc88:	2d00      	cmp	r5, #0
 800fc8a:	d0f7      	beq.n	800fc7c <rmw_destroy_subscription+0x10>
 800fc8c:	6828      	ldr	r0, [r5, #0]
 800fc8e:	f000 fcf9 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d0f2      	beq.n	800fc7c <rmw_destroy_subscription+0x10>
 800fc96:	686c      	ldr	r4, [r5, #4]
 800fc98:	2c00      	cmp	r4, #0
 800fc9a:	d0ef      	beq.n	800fc7c <rmw_destroy_subscription+0x10>
 800fc9c:	e9d4 070f 	ldrd	r0, r7, [r4, #60]	; 0x3c
 800fca0:	f004 f9f0 	bl	8014084 <destroy_topic>
 800fca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fca6:	69a2      	ldr	r2, [r4, #24]
 800fca8:	6958      	ldr	r0, [r3, #20]
 800fcaa:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800fcae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fcb2:	6819      	ldr	r1, [r3, #0]
 800fcb4:	f001 fabe 	bl	8011234 <uxr_buffer_delete_entity>
 800fcb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcba:	6962      	ldr	r2, [r4, #20]
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	6958      	ldr	r0, [r3, #20]
 800fcc0:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800fcc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fcc8:	6819      	ldr	r1, [r3, #0]
 800fcca:	f001 fab3 	bl	8011234 <uxr_buffer_delete_entity>
 800fcce:	4606      	mov	r6, r0
 800fcd0:	4621      	mov	r1, r4
 800fcd2:	6978      	ldr	r0, [r7, #20]
 800fcd4:	f000 fb60 	bl	8010398 <run_xrce_session>
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4604      	mov	r4, r0
 800fcdc:	6978      	ldr	r0, [r7, #20]
 800fcde:	f000 fb5b 	bl	8010398 <run_xrce_session>
 800fce2:	4603      	mov	r3, r0
 800fce4:	4628      	mov	r0, r5
 800fce6:	401c      	ands	r4, r3
 800fce8:	f084 0401 	eor.w	r4, r4, #1
 800fcec:	b2e4      	uxtb	r4, r4
 800fcee:	f000 fae3 	bl	80102b8 <rmw_uxrce_fini_subscription_memory>
 800fcf2:	e7c4      	b.n	800fc7e <rmw_destroy_subscription+0x12>

0800fcf4 <rmw_take_with_info>:
 800fcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	b089      	sub	sp, #36	; 0x24
 800fcfa:	460f      	mov	r7, r1
 800fcfc:	4614      	mov	r4, r2
 800fcfe:	b10a      	cbz	r2, 800fd04 <rmw_take_with_info+0x10>
 800fd00:	2300      	movs	r3, #0
 800fd02:	7013      	strb	r3, [r2, #0]
 800fd04:	6828      	ldr	r0, [r5, #0]
 800fd06:	f000 fcbd 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 800fd0a:	b910      	cbnz	r0, 800fd12 <rmw_take_with_info+0x1e>
 800fd0c:	2001      	movs	r0, #1
 800fd0e:	b009      	add	sp, #36	; 0x24
 800fd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd12:	686d      	ldr	r5, [r5, #4]
 800fd14:	4628      	mov	r0, r5
 800fd16:	f000 fb2f 	bl	8010378 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	d0f5      	beq.n	800fd0c <rmw_take_with_info+0x18>
 800fd20:	68c1      	ldr	r1, [r0, #12]
 800fd22:	4668      	mov	r0, sp
 800fd24:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800fd28:	3110      	adds	r1, #16
 800fd2a:	f7fa ff9d 	bl	800ac68 <ucdr_init_buffer>
 800fd2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800fd30:	4639      	mov	r1, r7
 800fd32:	4668      	mov	r0, sp
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	4798      	blx	r3
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	4804      	ldr	r0, [pc, #16]	; (800fd50 <rmw_take_with_info+0x5c>)
 800fd3e:	f004 f921 	bl	8013f84 <put_memory>
 800fd42:	b104      	cbz	r4, 800fd46 <rmw_take_with_info+0x52>
 800fd44:	7025      	strb	r5, [r4, #0]
 800fd46:	f085 0001 	eor.w	r0, r5, #1
 800fd4a:	b2c0      	uxtb	r0, r0
 800fd4c:	b009      	add	sp, #36	; 0x24
 800fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd50:	2000a948 	.word	0x2000a948

0800fd54 <rmw_uros_set_custom_transport>:
 800fd54:	b4f0      	push	{r4, r5, r6, r7}
 800fd56:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800fd5a:	b16a      	cbz	r2, 800fd78 <rmw_uros_set_custom_transport+0x24>
 800fd5c:	b163      	cbz	r3, 800fd78 <rmw_uros_set_custom_transport+0x24>
 800fd5e:	b15e      	cbz	r6, 800fd78 <rmw_uros_set_custom_transport+0x24>
 800fd60:	b157      	cbz	r7, 800fd78 <rmw_uros_set_custom_transport+0x24>
 800fd62:	4c07      	ldr	r4, [pc, #28]	; (800fd80 <rmw_uros_set_custom_transport+0x2c>)
 800fd64:	4605      	mov	r5, r0
 800fd66:	2000      	movs	r0, #0
 800fd68:	7025      	strb	r5, [r4, #0]
 800fd6a:	6167      	str	r7, [r4, #20]
 800fd6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fd70:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800fd74:	bcf0      	pop	{r4, r5, r6, r7}
 800fd76:	4770      	bx	lr
 800fd78:	200b      	movs	r0, #11
 800fd7a:	bcf0      	pop	{r4, r5, r6, r7}
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	2000a928 	.word	0x2000a928

0800fd84 <rmw_uxrce_transport_init>:
 800fd84:	b508      	push	{r3, lr}
 800fd86:	b148      	cbz	r0, 800fd9c <rmw_uxrce_transport_init+0x18>
 800fd88:	f100 0210 	add.w	r2, r0, #16
 800fd8c:	6849      	ldr	r1, [r1, #4]
 800fd8e:	4610      	mov	r0, r2
 800fd90:	f001 fc08 	bl	80115a4 <uxr_init_custom_transport>
 800fd94:	f080 0001 	eor.w	r0, r0, #1
 800fd98:	b2c0      	uxtb	r0, r0
 800fd9a:	bd08      	pop	{r3, pc}
 800fd9c:	4b04      	ldr	r3, [pc, #16]	; (800fdb0 <rmw_uxrce_transport_init+0x2c>)
 800fd9e:	4610      	mov	r0, r2
 800fda0:	6859      	ldr	r1, [r3, #4]
 800fda2:	f001 fbff 	bl	80115a4 <uxr_init_custom_transport>
 800fda6:	f080 0001 	eor.w	r0, r0, #1
 800fdaa:	b2c0      	uxtb	r0, r0
 800fdac:	bd08      	pop	{r3, pc}
 800fdae:	bf00      	nop
 800fdb0:	2000a928 	.word	0x2000a928
 800fdb4:	00000000 	.word	0x00000000

0800fdb8 <rmw_wait>:
 800fdb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdbc:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	4614      	mov	r4, r2
 800fdc6:	461d      	mov	r5, r3
 800fdc8:	f1bc 0f00 	cmp.w	ip, #0
 800fdcc:	f000 80ef 	beq.w	800ffae <rmw_wait+0x1f6>
 800fdd0:	e9dc 0100 	ldrd	r0, r1, [ip]
 800fdd4:	a38e      	add	r3, pc, #568	; (adr r3, 8010010 <rmw_wait+0x258>)
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	428b      	cmp	r3, r1
 800fddc:	bf08      	it	eq
 800fdde:	4282      	cmpeq	r2, r0
 800fde0:	f080 809c 	bcs.w	800ff1c <rmw_wait+0x164>
 800fde4:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800fde8:	f04f 0900 	mov.w	r9, #0
 800fdec:	4b86      	ldr	r3, [pc, #536]	; (8010008 <rmw_wait+0x250>)
 800fdee:	f8d3 b000 	ldr.w	fp, [r3]
 800fdf2:	f1bb 0f00 	cmp.w	fp, #0
 800fdf6:	d026      	beq.n	800fe46 <rmw_wait+0x8e>
 800fdf8:	465b      	mov	r3, fp
 800fdfa:	f04f 0a00 	mov.w	sl, #0
 800fdfe:	f10a 0a01 	add.w	sl, sl, #1
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	fa5f fa8a 	uxtb.w	sl, sl
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d1f8      	bne.n	800fdfe <rmw_wait+0x46>
 800fe0c:	4640      	mov	r0, r8
 800fe0e:	4649      	mov	r1, r9
 800fe10:	f7f1 fa52 	bl	80012b8 <__aeabi_ul2f>
 800fe14:	ee07 aa90 	vmov	s15, sl
 800fe18:	ee07 0a10 	vmov	s14, r0
 800fe1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe20:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800fe24:	ee17 0a90 	vmov	r0, s15
 800fe28:	f7f1 faf6 	bl	8001418 <__aeabi_f2ulz>
 800fe2c:	4680      	mov	r8, r0
 800fe2e:	f8db 000c 	ldr.w	r0, [fp, #12]
 800fe32:	4641      	mov	r1, r8
 800fe34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe38:	f002 f9b8 	bl	80121ac <uxr_run_session_until_data>
 800fe3c:	f8db b008 	ldr.w	fp, [fp, #8]
 800fe40:	f1bb 0f00 	cmp.w	fp, #0
 800fe44:	d1f3      	bne.n	800fe2e <rmw_wait+0x76>
 800fe46:	2c00      	cmp	r4, #0
 800fe48:	f000 80b6 	beq.w	800ffb8 <rmw_wait+0x200>
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f000 80be 	beq.w	800ffd0 <rmw_wait+0x218>
 800fe54:	f04f 0800 	mov.w	r8, #0
 800fe58:	46c1      	mov	r9, r8
 800fe5a:	6863      	ldr	r3, [r4, #4]
 800fe5c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fe60:	f000 fa8a 	bl	8010378 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d046      	beq.n	800fef6 <rmw_wait+0x13e>
 800fe68:	f108 0801 	add.w	r8, r8, #1
 800fe6c:	6823      	ldr	r3, [r4, #0]
 800fe6e:	f04f 0901 	mov.w	r9, #1
 800fe72:	4543      	cmp	r3, r8
 800fe74:	d8f1      	bhi.n	800fe5a <rmw_wait+0xa2>
 800fe76:	f04f 0901 	mov.w	r9, #1
 800fe7a:	b185      	cbz	r5, 800fe9e <rmw_wait+0xe6>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b173      	cbz	r3, 800fe9e <rmw_wait+0xe6>
 800fe80:	2400      	movs	r4, #0
 800fe82:	686b      	ldr	r3, [r5, #4]
 800fe84:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fe88:	f000 fa76 	bl	8010378 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	f000 8081 	beq.w	800ff94 <rmw_wait+0x1dc>
 800fe92:	3401      	adds	r4, #1
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	f04f 0901 	mov.w	r9, #1
 800fe9a:	42a3      	cmp	r3, r4
 800fe9c:	d8f1      	bhi.n	800fe82 <rmw_wait+0xca>
 800fe9e:	b176      	cbz	r6, 800febe <rmw_wait+0x106>
 800fea0:	6833      	ldr	r3, [r6, #0]
 800fea2:	b163      	cbz	r3, 800febe <rmw_wait+0x106>
 800fea4:	2400      	movs	r4, #0
 800fea6:	6873      	ldr	r3, [r6, #4]
 800fea8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800feac:	f000 fa64 	bl	8010378 <rmw_uxrce_find_static_input_buffer_by_owner>
 800feb0:	b360      	cbz	r0, 800ff0c <rmw_wait+0x154>
 800feb2:	3401      	adds	r4, #1
 800feb4:	6833      	ldr	r3, [r6, #0]
 800feb6:	f04f 0901 	mov.w	r9, #1
 800feba:	42a3      	cmp	r3, r4
 800febc:	d8f3      	bhi.n	800fea6 <rmw_wait+0xee>
 800febe:	b1a7      	cbz	r7, 800feea <rmw_wait+0x132>
 800fec0:	683c      	ldr	r4, [r7, #0]
 800fec2:	b194      	cbz	r4, 800feea <rmw_wait+0x132>
 800fec4:	2300      	movs	r3, #0
 800fec6:	461d      	mov	r5, r3
 800fec8:	e004      	b.n	800fed4 <rmw_wait+0x11c>
 800feca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800fece:	3301      	adds	r3, #1
 800fed0:	42a3      	cmp	r3, r4
 800fed2:	d20a      	bcs.n	800feea <rmw_wait+0x132>
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800feda:	780a      	ldrb	r2, [r1, #0]
 800fedc:	2a00      	cmp	r2, #0
 800fede:	d0f4      	beq.n	800feca <rmw_wait+0x112>
 800fee0:	3301      	adds	r3, #1
 800fee2:	4691      	mov	r9, r2
 800fee4:	700d      	strb	r5, [r1, #0]
 800fee6:	42a3      	cmp	r3, r4
 800fee8:	d3f4      	bcc.n	800fed4 <rmw_wait+0x11c>
 800feea:	f1b9 0f00 	cmp.w	r9, #0
 800feee:	d05b      	beq.n	800ffa8 <rmw_wait+0x1f0>
 800fef0:	2000      	movs	r0, #0
 800fef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800fefa:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 800fefe:	f108 0801 	add.w	r8, r8, #1
 800ff02:	4543      	cmp	r3, r8
 800ff04:	d8a9      	bhi.n	800fe5a <rmw_wait+0xa2>
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	d1b8      	bne.n	800fe7c <rmw_wait+0xc4>
 800ff0a:	e7c8      	b.n	800fe9e <rmw_wait+0xe6>
 800ff0c:	e9d6 3200 	ldrd	r3, r2, [r6]
 800ff10:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ff14:	3401      	adds	r4, #1
 800ff16:	42a3      	cmp	r3, r4
 800ff18:	d8c5      	bhi.n	800fea6 <rmw_wait+0xee>
 800ff1a:	e7d0      	b.n	800febe <rmw_wait+0x106>
 800ff1c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800ff20:	4a3a      	ldr	r2, [pc, #232]	; (801000c <rmw_wait+0x254>)
 800ff22:	ea4f 1b40 	mov.w	fp, r0, lsl #5
 800ff26:	2300      	movs	r3, #0
 800ff28:	ea4a 6ad0 	orr.w	sl, sl, r0, lsr #27
 800ff2c:	ebbb 0b00 	subs.w	fp, fp, r0
 800ff30:	eb6a 0a01 	sbc.w	sl, sl, r1
 800ff34:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 800ff38:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800ff3c:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 800ff40:	eb1e 0b00 	adds.w	fp, lr, r0
 800ff44:	eb4a 0a01 	adc.w	sl, sl, r1
 800ff48:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 800ff4c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ff50:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 800ff54:	468b      	mov	fp, r1
 800ff56:	e9dc 0102 	ldrd	r0, r1, [ip, #8]
 800ff5a:	f7f1 fa43 	bl	80013e4 <__aeabi_uldivmod>
 800ff5e:	468e      	mov	lr, r1
 800ff60:	ea6f 010a 	mvn.w	r1, sl
 800ff64:	4684      	mov	ip, r0
 800ff66:	ea6f 000b 	mvn.w	r0, fp
 800ff6a:	458e      	cmp	lr, r1
 800ff6c:	bf08      	it	eq
 800ff6e:	4584      	cmpeq	ip, r0
 800ff70:	f4bf af38 	bcs.w	800fde4 <rmw_wait+0x2c>
 800ff74:	eb1b 080c 	adds.w	r8, fp, ip
 800ff78:	f04f 0100 	mov.w	r1, #0
 800ff7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ff80:	eb4a 090e 	adc.w	r9, sl, lr
 800ff84:	4549      	cmp	r1, r9
 800ff86:	bf08      	it	eq
 800ff88:	4540      	cmpeq	r0, r8
 800ff8a:	f4bf af2f 	bcs.w	800fdec <rmw_wait+0x34>
 800ff8e:	4680      	mov	r8, r0
 800ff90:	4689      	mov	r9, r1
 800ff92:	e72b      	b.n	800fdec <rmw_wait+0x34>
 800ff94:	e9d5 3200 	ldrd	r3, r2, [r5]
 800ff98:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ff9c:	3401      	adds	r4, #1
 800ff9e:	42a3      	cmp	r3, r4
 800ffa0:	f63f af6f 	bhi.w	800fe82 <rmw_wait+0xca>
 800ffa4:	e77b      	b.n	800fe9e <rmw_wait+0xe6>
 800ffa6:	b9cf      	cbnz	r7, 800ffdc <rmw_wait+0x224>
 800ffa8:	2002      	movs	r0, #2
 800ffaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ffb2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800ffb6:	e719      	b.n	800fdec <rmw_wait+0x34>
 800ffb8:	b11d      	cbz	r5, 800ffc2 <rmw_wait+0x20a>
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	b1a3      	cbz	r3, 800ffe8 <rmw_wait+0x230>
 800ffbe:	46a1      	mov	r9, r4
 800ffc0:	e75e      	b.n	800fe80 <rmw_wait+0xc8>
 800ffc2:	2e00      	cmp	r6, #0
 800ffc4:	d0ef      	beq.n	800ffa6 <rmw_wait+0x1ee>
 800ffc6:	6833      	ldr	r3, [r6, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d0ec      	beq.n	800ffa6 <rmw_wait+0x1ee>
 800ffcc:	46a9      	mov	r9, r5
 800ffce:	e769      	b.n	800fea4 <rmw_wait+0xec>
 800ffd0:	2d00      	cmp	r5, #0
 800ffd2:	d0f6      	beq.n	800ffc2 <rmw_wait+0x20a>
 800ffd4:	682a      	ldr	r2, [r5, #0]
 800ffd6:	b172      	cbz	r2, 800fff6 <rmw_wait+0x23e>
 800ffd8:	4699      	mov	r9, r3
 800ffda:	e751      	b.n	800fe80 <rmw_wait+0xc8>
 800ffdc:	683c      	ldr	r4, [r7, #0]
 800ffde:	2c00      	cmp	r4, #0
 800ffe0:	d0e2      	beq.n	800ffa8 <rmw_wait+0x1f0>
 800ffe2:	f04f 0900 	mov.w	r9, #0
 800ffe6:	e76d      	b.n	800fec4 <rmw_wait+0x10c>
 800ffe8:	2e00      	cmp	r6, #0
 800ffea:	d0dc      	beq.n	800ffa6 <rmw_wait+0x1ee>
 800ffec:	6833      	ldr	r3, [r6, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d0d9      	beq.n	800ffa6 <rmw_wait+0x1ee>
 800fff2:	46a1      	mov	r9, r4
 800fff4:	e756      	b.n	800fea4 <rmw_wait+0xec>
 800fff6:	2e00      	cmp	r6, #0
 800fff8:	d0d5      	beq.n	800ffa6 <rmw_wait+0x1ee>
 800fffa:	6833      	ldr	r3, [r6, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d0d2      	beq.n	800ffa6 <rmw_wait+0x1ee>
 8010000:	4691      	mov	r9, r2
 8010002:	e74f      	b.n	800fea4 <rmw_wait+0xec>
 8010004:	f3af 8000 	nop.w
 8010008:	2000d998 	.word	0x2000d998
 801000c:	000f4240 	.word	0x000f4240
 8010010:	4bc6a7ee 	.word	0x4bc6a7ee
 8010014:	00418937 	.word	0x00418937

08010018 <rmw_create_wait_set>:
 8010018:	200c      	movs	r0, #12
 801001a:	f003 beb1 	b.w	8013d80 <rmw_allocate>
 801001e:	bf00      	nop

08010020 <rmw_destroy_wait_set>:
 8010020:	b508      	push	{r3, lr}
 8010022:	f003 fec1 	bl	8013da8 <rmw_free>
 8010026:	2000      	movs	r0, #0
 8010028:	bd08      	pop	{r3, pc}
 801002a:	bf00      	nop

0801002c <rmw_uxrce_init_service_memory>:
 801002c:	b1ea      	cbz	r2, 801006a <rmw_uxrce_init_service_memory+0x3e>
 801002e:	7a03      	ldrb	r3, [r0, #8]
 8010030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010034:	4606      	mov	r6, r0
 8010036:	b9b3      	cbnz	r3, 8010066 <rmw_uxrce_init_service_memory+0x3a>
 8010038:	460f      	mov	r7, r1
 801003a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801003e:	4698      	mov	r8, r3
 8010040:	2101      	movs	r1, #1
 8010042:	6003      	str	r3, [r0, #0]
 8010044:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
 8010048:	6043      	str	r3, [r0, #4]
 801004a:	463c      	mov	r4, r7
 801004c:	2348      	movs	r3, #72	; 0x48
 801004e:	7201      	strb	r1, [r0, #8]
 8010050:	60c3      	str	r3, [r0, #12]
 8010052:	4621      	mov	r1, r4
 8010054:	4630      	mov	r0, r6
 8010056:	f003 ff95 	bl	8013f84 <put_memory>
 801005a:	60e4      	str	r4, [r4, #12]
 801005c:	3448      	adds	r4, #72	; 0x48
 801005e:	f887 8000 	strb.w	r8, [r7]
 8010062:	42a5      	cmp	r5, r4
 8010064:	d1f5      	bne.n	8010052 <rmw_uxrce_init_service_memory+0x26>
 8010066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006a:	4770      	bx	lr

0801006c <rmw_uxrce_init_client_memory>:
 801006c:	b1ea      	cbz	r2, 80100aa <rmw_uxrce_init_client_memory+0x3e>
 801006e:	7a03      	ldrb	r3, [r0, #8]
 8010070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010074:	4606      	mov	r6, r0
 8010076:	b9b3      	cbnz	r3, 80100a6 <rmw_uxrce_init_client_memory+0x3a>
 8010078:	460f      	mov	r7, r1
 801007a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801007e:	4698      	mov	r8, r3
 8010080:	2101      	movs	r1, #1
 8010082:	6003      	str	r3, [r0, #0]
 8010084:	eb07 0582 	add.w	r5, r7, r2, lsl #2
 8010088:	6043      	str	r3, [r0, #4]
 801008a:	463c      	mov	r4, r7
 801008c:	2344      	movs	r3, #68	; 0x44
 801008e:	7201      	strb	r1, [r0, #8]
 8010090:	60c3      	str	r3, [r0, #12]
 8010092:	4621      	mov	r1, r4
 8010094:	4630      	mov	r0, r6
 8010096:	f003 ff75 	bl	8013f84 <put_memory>
 801009a:	60e4      	str	r4, [r4, #12]
 801009c:	3444      	adds	r4, #68	; 0x44
 801009e:	f887 8000 	strb.w	r8, [r7]
 80100a2:	42a5      	cmp	r5, r4
 80100a4:	d1f5      	bne.n	8010092 <rmw_uxrce_init_client_memory+0x26>
 80100a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100aa:	4770      	bx	lr

080100ac <rmw_uxrce_init_publisher_memory>:
 80100ac:	b1ea      	cbz	r2, 80100ea <rmw_uxrce_init_publisher_memory+0x3e>
 80100ae:	7a03      	ldrb	r3, [r0, #8]
 80100b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b4:	4606      	mov	r6, r0
 80100b6:	b9b3      	cbnz	r3, 80100e6 <rmw_uxrce_init_publisher_memory+0x3a>
 80100b8:	460f      	mov	r7, r1
 80100ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80100be:	4698      	mov	r8, r3
 80100c0:	2101      	movs	r1, #1
 80100c2:	6003      	str	r3, [r0, #0]
 80100c4:	eb07 1542 	add.w	r5, r7, r2, lsl #5
 80100c8:	6043      	str	r3, [r0, #4]
 80100ca:	463c      	mov	r4, r7
 80100cc:	23a0      	movs	r3, #160	; 0xa0
 80100ce:	7201      	strb	r1, [r0, #8]
 80100d0:	60c3      	str	r3, [r0, #12]
 80100d2:	4621      	mov	r1, r4
 80100d4:	4630      	mov	r0, r6
 80100d6:	f003 ff55 	bl	8013f84 <put_memory>
 80100da:	60e4      	str	r4, [r4, #12]
 80100dc:	34a0      	adds	r4, #160	; 0xa0
 80100de:	f887 8000 	strb.w	r8, [r7]
 80100e2:	42a5      	cmp	r5, r4
 80100e4:	d1f5      	bne.n	80100d2 <rmw_uxrce_init_publisher_memory+0x26>
 80100e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ea:	4770      	bx	lr

080100ec <rmw_uxrce_init_subscription_memory>:
 80100ec:	b1ea      	cbz	r2, 801012a <rmw_uxrce_init_subscription_memory+0x3e>
 80100ee:	7a03      	ldrb	r3, [r0, #8]
 80100f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f4:	4606      	mov	r6, r0
 80100f6:	b9b3      	cbnz	r3, 8010126 <rmw_uxrce_init_subscription_memory+0x3a>
 80100f8:	460f      	mov	r7, r1
 80100fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80100fe:	4698      	mov	r8, r3
 8010100:	2101      	movs	r1, #1
 8010102:	6003      	str	r3, [r0, #0]
 8010104:	eb07 1542 	add.w	r5, r7, r2, lsl #5
 8010108:	6043      	str	r3, [r0, #4]
 801010a:	463c      	mov	r4, r7
 801010c:	23a0      	movs	r3, #160	; 0xa0
 801010e:	7201      	strb	r1, [r0, #8]
 8010110:	60c3      	str	r3, [r0, #12]
 8010112:	4621      	mov	r1, r4
 8010114:	4630      	mov	r0, r6
 8010116:	f003 ff35 	bl	8013f84 <put_memory>
 801011a:	60e4      	str	r4, [r4, #12]
 801011c:	34a0      	adds	r4, #160	; 0xa0
 801011e:	f887 8000 	strb.w	r8, [r7]
 8010122:	42a5      	cmp	r5, r4
 8010124:	d1f5      	bne.n	8010112 <rmw_uxrce_init_subscription_memory+0x26>
 8010126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012a:	4770      	bx	lr

0801012c <rmw_uxrce_init_node_memory>:
 801012c:	b1ea      	cbz	r2, 801016a <rmw_uxrce_init_node_memory+0x3e>
 801012e:	7a03      	ldrb	r3, [r0, #8]
 8010130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010134:	4606      	mov	r6, r0
 8010136:	b9b3      	cbnz	r3, 8010166 <rmw_uxrce_init_node_memory+0x3a>
 8010138:	460f      	mov	r7, r1
 801013a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801013e:	4698      	mov	r8, r3
 8010140:	2101      	movs	r1, #1
 8010142:	6003      	str	r3, [r0, #0]
 8010144:	eb07 0582 	add.w	r5, r7, r2, lsl #2
 8010148:	6043      	str	r3, [r0, #4]
 801014a:	463c      	mov	r4, r7
 801014c:	231c      	movs	r3, #28
 801014e:	7201      	strb	r1, [r0, #8]
 8010150:	60c3      	str	r3, [r0, #12]
 8010152:	4621      	mov	r1, r4
 8010154:	4630      	mov	r0, r6
 8010156:	f003 ff15 	bl	8013f84 <put_memory>
 801015a:	60e4      	str	r4, [r4, #12]
 801015c:	341c      	adds	r4, #28
 801015e:	f887 8000 	strb.w	r8, [r7]
 8010162:	42a5      	cmp	r5, r4
 8010164:	d1f5      	bne.n	8010152 <rmw_uxrce_init_node_memory+0x26>
 8010166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801016a:	4770      	bx	lr

0801016c <rmw_uxrce_init_session_memory>:
 801016c:	b1ea      	cbz	r2, 80101aa <rmw_uxrce_init_session_memory+0x3e>
 801016e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010172:	7a03      	ldrb	r3, [r0, #8]
 8010174:	4605      	mov	r5, r0
 8010176:	b9b3      	cbnz	r3, 80101a6 <rmw_uxrce_init_session_memory+0x3a>
 8010178:	460f      	mov	r7, r1
 801017a:	f241 5198 	movw	r1, #5528	; 0x1598
 801017e:	2001      	movs	r0, #1
 8010180:	4699      	mov	r9, r3
 8010182:	fb01 7602 	mla	r6, r1, r2, r7
 8010186:	4688      	mov	r8, r1
 8010188:	463c      	mov	r4, r7
 801018a:	602b      	str	r3, [r5, #0]
 801018c:	606b      	str	r3, [r5, #4]
 801018e:	60e9      	str	r1, [r5, #12]
 8010190:	7228      	strb	r0, [r5, #8]
 8010192:	4621      	mov	r1, r4
 8010194:	4628      	mov	r0, r5
 8010196:	f003 fef5 	bl	8013f84 <put_memory>
 801019a:	60e4      	str	r4, [r4, #12]
 801019c:	4444      	add	r4, r8
 801019e:	f887 9000 	strb.w	r9, [r7]
 80101a2:	42a6      	cmp	r6, r4
 80101a4:	d1f5      	bne.n	8010192 <rmw_uxrce_init_session_memory+0x26>
 80101a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101aa:	4770      	bx	lr

080101ac <rmw_uxrce_init_topic_memory>:
 80101ac:	b1da      	cbz	r2, 80101e6 <rmw_uxrce_init_topic_memory+0x3a>
 80101ae:	7a03      	ldrb	r3, [r0, #8]
 80101b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101b4:	4605      	mov	r5, r0
 80101b6:	b9a3      	cbnz	r3, 80101e2 <rmw_uxrce_init_topic_memory+0x36>
 80101b8:	460f      	mov	r7, r1
 80101ba:	eb01 1642 	add.w	r6, r1, r2, lsl #5
 80101be:	4698      	mov	r8, r3
 80101c0:	2101      	movs	r1, #1
 80101c2:	2220      	movs	r2, #32
 80101c4:	463c      	mov	r4, r7
 80101c6:	6003      	str	r3, [r0, #0]
 80101c8:	6043      	str	r3, [r0, #4]
 80101ca:	7201      	strb	r1, [r0, #8]
 80101cc:	60c2      	str	r2, [r0, #12]
 80101ce:	4621      	mov	r1, r4
 80101d0:	4628      	mov	r0, r5
 80101d2:	f003 fed7 	bl	8013f84 <put_memory>
 80101d6:	60e4      	str	r4, [r4, #12]
 80101d8:	3420      	adds	r4, #32
 80101da:	f887 8000 	strb.w	r8, [r7]
 80101de:	42a6      	cmp	r6, r4
 80101e0:	d1f5      	bne.n	80101ce <rmw_uxrce_init_topic_memory+0x22>
 80101e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e6:	4770      	bx	lr

080101e8 <rmw_uxrce_init_static_input_buffer_memory>:
 80101e8:	b1ea      	cbz	r2, 8010226 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80101ea:	7a03      	ldrb	r3, [r0, #8]
 80101ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f0:	4605      	mov	r5, r0
 80101f2:	b9b3      	cbnz	r3, 8010222 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80101f4:	460f      	mov	r7, r1
 80101f6:	f44f 6103 	mov.w	r1, #2096	; 0x830
 80101fa:	6003      	str	r3, [r0, #0]
 80101fc:	4698      	mov	r8, r3
 80101fe:	2001      	movs	r0, #1
 8010200:	fb01 7602 	mla	r6, r1, r2, r7
 8010204:	463c      	mov	r4, r7
 8010206:	606b      	str	r3, [r5, #4]
 8010208:	60e9      	str	r1, [r5, #12]
 801020a:	7228      	strb	r0, [r5, #8]
 801020c:	4621      	mov	r1, r4
 801020e:	4628      	mov	r0, r5
 8010210:	f003 feb8 	bl	8013f84 <put_memory>
 8010214:	60e4      	str	r4, [r4, #12]
 8010216:	f504 6403 	add.w	r4, r4, #2096	; 0x830
 801021a:	f887 8000 	strb.w	r8, [r7]
 801021e:	42a6      	cmp	r6, r4
 8010220:	d1f4      	bne.n	801020c <rmw_uxrce_init_static_input_buffer_memory+0x24>
 8010222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010226:	4770      	bx	lr

08010228 <rmw_uxrce_fini_session_memory>:
 8010228:	4601      	mov	r1, r0
 801022a:	4801      	ldr	r0, [pc, #4]	; (8010230 <rmw_uxrce_fini_session_memory+0x8>)
 801022c:	f003 beaa 	b.w	8013f84 <put_memory>
 8010230:	2000d998 	.word	0x2000d998

08010234 <rmw_uxrce_fini_node_memory>:
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	4604      	mov	r4, r0
 8010238:	6800      	ldr	r0, [r0, #0]
 801023a:	f000 fa23 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 801023e:	b1c8      	cbz	r0, 8010274 <rmw_uxrce_fini_node_memory+0x40>
 8010240:	68e0      	ldr	r0, [r4, #12]
 8010242:	b108      	cbz	r0, 8010248 <rmw_uxrce_fini_node_memory+0x14>
 8010244:	f003 fdb0 	bl	8013da8 <rmw_free>
 8010248:	68a0      	ldr	r0, [r4, #8]
 801024a:	b108      	cbz	r0, 8010250 <rmw_uxrce_fini_node_memory+0x1c>
 801024c:	f003 fdac 	bl	8013da8 <rmw_free>
 8010250:	6823      	ldr	r3, [r4, #0]
 8010252:	b10b      	cbz	r3, 8010258 <rmw_uxrce_fini_node_memory+0x24>
 8010254:	2300      	movs	r3, #0
 8010256:	6023      	str	r3, [r4, #0]
 8010258:	6861      	ldr	r1, [r4, #4]
 801025a:	b131      	cbz	r1, 801026a <rmw_uxrce_fini_node_memory+0x36>
 801025c:	2500      	movs	r5, #0
 801025e:	4806      	ldr	r0, [pc, #24]	; (8010278 <rmw_uxrce_fini_node_memory+0x44>)
 8010260:	e9c1 5504 	strd	r5, r5, [r1, #16]
 8010264:	f003 fe8e 	bl	8013f84 <put_memory>
 8010268:	6065      	str	r5, [r4, #4]
 801026a:	4620      	mov	r0, r4
 801026c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010270:	f003 bdbc 	b.w	8013dec <rmw_node_free>
 8010274:	bd38      	pop	{r3, r4, r5, pc}
 8010276:	bf00      	nop
 8010278:	2000d778 	.word	0x2000d778

0801027c <rmw_uxrce_fini_publisher_memory>:
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4604      	mov	r4, r0
 8010280:	6800      	ldr	r0, [r0, #0]
 8010282:	f000 f9ff 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 8010286:	b1a0      	cbz	r0, 80102b2 <rmw_uxrce_fini_publisher_memory+0x36>
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	b10b      	cbz	r3, 8010290 <rmw_uxrce_fini_publisher_memory+0x14>
 801028c:	2300      	movs	r3, #0
 801028e:	6023      	str	r3, [r4, #0]
 8010290:	68a0      	ldr	r0, [r4, #8]
 8010292:	b108      	cbz	r0, 8010298 <rmw_uxrce_fini_publisher_memory+0x1c>
 8010294:	f003 fd88 	bl	8013da8 <rmw_free>
 8010298:	6861      	ldr	r1, [r4, #4]
 801029a:	b129      	cbz	r1, 80102a8 <rmw_uxrce_fini_publisher_memory+0x2c>
 801029c:	2500      	movs	r5, #0
 801029e:	4805      	ldr	r0, [pc, #20]	; (80102b4 <rmw_uxrce_fini_publisher_memory+0x38>)
 80102a0:	610d      	str	r5, [r1, #16]
 80102a2:	f003 fe6f 	bl	8013f84 <put_memory>
 80102a6:	6065      	str	r5, [r4, #4]
 80102a8:	4620      	mov	r0, r4
 80102aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ae:	f003 bd7b 	b.w	8013da8 <rmw_free>
 80102b2:	bd38      	pop	{r3, r4, r5, pc}
 80102b4:	2000a958 	.word	0x2000a958

080102b8 <rmw_uxrce_fini_subscription_memory>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	4604      	mov	r4, r0
 80102bc:	6800      	ldr	r0, [r0, #0]
 80102be:	f000 f9e1 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 80102c2:	b1a0      	cbz	r0, 80102ee <rmw_uxrce_fini_subscription_memory+0x36>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	b10b      	cbz	r3, 80102cc <rmw_uxrce_fini_subscription_memory+0x14>
 80102c8:	2300      	movs	r3, #0
 80102ca:	6023      	str	r3, [r4, #0]
 80102cc:	68a0      	ldr	r0, [r4, #8]
 80102ce:	b108      	cbz	r0, 80102d4 <rmw_uxrce_fini_subscription_memory+0x1c>
 80102d0:	f003 fd6a 	bl	8013da8 <rmw_free>
 80102d4:	6861      	ldr	r1, [r4, #4]
 80102d6:	b129      	cbz	r1, 80102e4 <rmw_uxrce_fini_subscription_memory+0x2c>
 80102d8:	2500      	movs	r5, #0
 80102da:	4805      	ldr	r0, [pc, #20]	; (80102f0 <rmw_uxrce_fini_subscription_memory+0x38>)
 80102dc:	610d      	str	r5, [r1, #16]
 80102de:	f003 fe51 	bl	8013f84 <put_memory>
 80102e2:	6065      	str	r5, [r4, #4]
 80102e4:	4620      	mov	r0, r4
 80102e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ea:	f003 bd5d 	b.w	8013da8 <rmw_free>
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	2000d9d4 	.word	0x2000d9d4

080102f4 <rmw_uxrce_fini_service_memory>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	4604      	mov	r4, r0
 80102f8:	6800      	ldr	r0, [r0, #0]
 80102fa:	f000 f9c3 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 80102fe:	b1a0      	cbz	r0, 801032a <rmw_uxrce_fini_service_memory+0x36>
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	b10b      	cbz	r3, 8010308 <rmw_uxrce_fini_service_memory+0x14>
 8010304:	2300      	movs	r3, #0
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	68a0      	ldr	r0, [r4, #8]
 801030a:	b108      	cbz	r0, 8010310 <rmw_uxrce_fini_service_memory+0x1c>
 801030c:	f003 fd4c 	bl	8013da8 <rmw_free>
 8010310:	6861      	ldr	r1, [r4, #4]
 8010312:	b129      	cbz	r1, 8010320 <rmw_uxrce_fini_service_memory+0x2c>
 8010314:	2500      	movs	r5, #0
 8010316:	4805      	ldr	r0, [pc, #20]	; (801032c <rmw_uxrce_fini_service_memory+0x38>)
 8010318:	610d      	str	r5, [r1, #16]
 801031a:	f003 fe33 	bl	8013f84 <put_memory>
 801031e:	6065      	str	r5, [r4, #4]
 8010320:	4620      	mov	r0, r4
 8010322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010326:	f003 bd3f 	b.w	8013da8 <rmw_free>
 801032a:	bd38      	pop	{r3, r4, r5, pc}
 801032c:	2000d9c4 	.word	0x2000d9c4

08010330 <rmw_uxrce_fini_client_memory>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	4604      	mov	r4, r0
 8010334:	6800      	ldr	r0, [r0, #0]
 8010336:	f000 f9a5 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 801033a:	b1a0      	cbz	r0, 8010366 <rmw_uxrce_fini_client_memory+0x36>
 801033c:	6823      	ldr	r3, [r4, #0]
 801033e:	b10b      	cbz	r3, 8010344 <rmw_uxrce_fini_client_memory+0x14>
 8010340:	2300      	movs	r3, #0
 8010342:	6023      	str	r3, [r4, #0]
 8010344:	68a0      	ldr	r0, [r4, #8]
 8010346:	b108      	cbz	r0, 801034c <rmw_uxrce_fini_client_memory+0x1c>
 8010348:	f003 fd2e 	bl	8013da8 <rmw_free>
 801034c:	6861      	ldr	r1, [r4, #4]
 801034e:	b129      	cbz	r1, 801035c <rmw_uxrce_fini_client_memory+0x2c>
 8010350:	2500      	movs	r5, #0
 8010352:	4805      	ldr	r0, [pc, #20]	; (8010368 <rmw_uxrce_fini_client_memory+0x38>)
 8010354:	610d      	str	r5, [r1, #16]
 8010356:	f003 fe15 	bl	8013f84 <put_memory>
 801035a:	6065      	str	r5, [r4, #4]
 801035c:	4620      	mov	r0, r4
 801035e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010362:	f003 bd21 	b.w	8013da8 <rmw_free>
 8010366:	bd38      	pop	{r3, r4, r5, pc}
 8010368:	2000b0e8 	.word	0x2000b0e8

0801036c <rmw_uxrce_fini_topic_memory>:
 801036c:	4601      	mov	r1, r0
 801036e:	4801      	ldr	r0, [pc, #4]	; (8010374 <rmw_uxrce_fini_topic_memory+0x8>)
 8010370:	f003 be08 	b.w	8013f84 <put_memory>
 8010374:	2000d988 	.word	0x2000d988

08010378 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010378:	4b06      	ldr	r3, [pc, #24]	; (8010394 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	b913      	cbnz	r3, 8010384 <rmw_uxrce_find_static_input_buffer_by_owner+0xc>
 801037e:	e006      	b.n	801038e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	b123      	cbz	r3, 801038e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010384:	68da      	ldr	r2, [r3, #12]
 8010386:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 801038a:	4282      	cmp	r2, r0
 801038c:	d1f8      	bne.n	8010380 <rmw_uxrce_find_static_input_buffer_by_owner+0x8>
 801038e:	4618      	mov	r0, r3
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	2000a948 	.word	0x2000a948

08010398 <run_xrce_session>:
 8010398:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801039c:	b510      	push	{r4, lr}
 801039e:	789c      	ldrb	r4, [r3, #2]
 80103a0:	b086      	sub	sp, #24
 80103a2:	2c01      	cmp	r4, #1
 80103a4:	f8ad 100e 	strh.w	r1, [sp, #14]
 80103a8:	d00d      	beq.n	80103c6 <run_xrce_session+0x2e>
 80103aa:	2101      	movs	r1, #1
 80103ac:	f10d 0317 	add.w	r3, sp, #23
 80103b0:	f10d 020e 	add.w	r2, sp, #14
 80103b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103b8:	9100      	str	r1, [sp, #0]
 80103ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80103be:	f001 ff35 	bl	801222c <uxr_run_session_until_all_status>
 80103c2:	b006      	add	sp, #24
 80103c4:	bd10      	pop	{r4, pc}
 80103c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103ca:	f001 fe7b 	bl	80120c4 <uxr_flash_output_streams>
 80103ce:	4620      	mov	r0, r4
 80103d0:	b006      	add	sp, #24
 80103d2:	bd10      	pop	{r4, pc}

080103d4 <build_participant_xml>:
 80103d4:	b510      	push	{r4, lr}
 80103d6:	461c      	mov	r4, r3
 80103d8:	4610      	mov	r0, r2
 80103da:	460b      	mov	r3, r1
 80103dc:	4a04      	ldr	r2, [pc, #16]	; (80103f0 <build_participant_xml+0x1c>)
 80103de:	4621      	mov	r1, r4
 80103e0:	f005 fcfa 	bl	8015dd8 <snprintf>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	da02      	bge.n	80103ee <build_participant_xml+0x1a>
 80103e8:	4284      	cmp	r4, r0
 80103ea:	bfd8      	it	le
 80103ec:	2000      	movle	r0, #0
 80103ee:	bd10      	pop	{r4, pc}
 80103f0:	0801fb98 	.word	0x0801fb98

080103f4 <build_publisher_xml>:
 80103f4:	2300      	movs	r3, #0
 80103f6:	2001      	movs	r0, #1
 80103f8:	700b      	strb	r3, [r1, #0]
 80103fa:	4770      	bx	lr

080103fc <build_subscriber_xml>:
 80103fc:	2300      	movs	r3, #0
 80103fe:	2001      	movs	r0, #1
 8010400:	700b      	strb	r3, [r1, #0]
 8010402:	4770      	bx	lr

08010404 <generate_name>:
 8010404:	4603      	mov	r3, r0
 8010406:	4608      	mov	r0, r1
 8010408:	b530      	push	{r4, r5, lr}
 801040a:	4614      	mov	r4, r2
 801040c:	789d      	ldrb	r5, [r3, #2]
 801040e:	b083      	sub	sp, #12
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	4a06      	ldr	r2, [pc, #24]	; (801042c <generate_name+0x28>)
 8010414:	4621      	mov	r1, r4
 8010416:	9500      	str	r5, [sp, #0]
 8010418:	f005 fcde 	bl	8015dd8 <snprintf>
 801041c:	2800      	cmp	r0, #0
 801041e:	da02      	bge.n	8010426 <generate_name+0x22>
 8010420:	4284      	cmp	r4, r0
 8010422:	bfd8      	it	le
 8010424:	2000      	movle	r0, #0
 8010426:	b003      	add	sp, #12
 8010428:	bd30      	pop	{r4, r5, pc}
 801042a:	bf00      	nop
 801042c:	0801fbdc 	.word	0x0801fbdc

08010430 <generate_type_name>:
 8010430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010432:	4605      	mov	r5, r0
 8010434:	6840      	ldr	r0, [r0, #4]
 8010436:	460f      	mov	r7, r1
 8010438:	4616      	mov	r6, r2
 801043a:	f7f0 f921 	bl	8000680 <strlen>
 801043e:	682b      	ldr	r3, [r5, #0]
 8010440:	4604      	mov	r4, r0
 8010442:	b11b      	cbz	r3, 801044c <generate_type_name+0x1c>
 8010444:	4618      	mov	r0, r3
 8010446:	f7f0 f91b 	bl	8000680 <strlen>
 801044a:	4603      	mov	r3, r0
 801044c:	3408      	adds	r4, #8
 801044e:	2200      	movs	r2, #0
 8010450:	441c      	add	r4, r3
 8010452:	703a      	strb	r2, [r7, #0]
 8010454:	42b4      	cmp	r4, r6
 8010456:	d227      	bcs.n	80104a8 <generate_type_name+0x78>
 8010458:	6829      	ldr	r1, [r5, #0]
 801045a:	b341      	cbz	r1, 80104ae <generate_type_name+0x7e>
 801045c:	4e15      	ldr	r6, [pc, #84]	; (80104b4 <generate_type_name+0x84>)
 801045e:	4638      	mov	r0, r7
 8010460:	f005 fd20 	bl	8015ea4 <stpcpy>
 8010464:	8832      	ldrh	r2, [r6, #0]
 8010466:	78b3      	ldrb	r3, [r6, #2]
 8010468:	8002      	strh	r2, [r0, #0]
 801046a:	7083      	strb	r3, [r0, #2]
 801046c:	4638      	mov	r0, r7
 801046e:	f7f0 f907 	bl	8000680 <strlen>
 8010472:	4a11      	ldr	r2, [pc, #68]	; (80104b8 <generate_type_name+0x88>)
 8010474:	4603      	mov	r3, r0
 8010476:	f8b6 c000 	ldrh.w	ip, [r6]
 801047a:	6810      	ldr	r0, [r2, #0]
 801047c:	f04f 0e5f 	mov.w	lr, #95	; 0x5f
 8010480:	1d1a      	adds	r2, r3, #4
 8010482:	78b1      	ldrb	r1, [r6, #2]
 8010484:	50f8      	str	r0, [r7, r3]
 8010486:	1cde      	adds	r6, r3, #3
 8010488:	1d98      	adds	r0, r3, #6
 801048a:	18bb      	adds	r3, r7, r2
 801048c:	f807 e006 	strb.w	lr, [r7, r6]
 8010490:	4438      	add	r0, r7
 8010492:	f827 c002 	strh.w	ip, [r7, r2]
 8010496:	7099      	strb	r1, [r3, #2]
 8010498:	6869      	ldr	r1, [r5, #4]
 801049a:	f005 fd03 	bl	8015ea4 <stpcpy>
 801049e:	4b07      	ldr	r3, [pc, #28]	; (80104bc <generate_type_name+0x8c>)
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	8003      	strh	r3, [r0, #0]
 80104a4:	4620      	mov	r0, r4
 80104a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a8:	4614      	mov	r4, r2
 80104aa:	4620      	mov	r0, r4
 80104ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ae:	4e01      	ldr	r6, [pc, #4]	; (80104b4 <generate_type_name+0x84>)
 80104b0:	e7dc      	b.n	801046c <generate_type_name+0x3c>
 80104b2:	bf00      	nop
 80104b4:	0801fb60 	.word	0x0801fb60
 80104b8:	0801fb64 	.word	0x0801fb64
 80104bc:	0801fb68 	.word	0x0801fb68

080104c0 <build_topic_xml>:
 80104c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104c2:	b09d      	sub	sp, #116	; 0x74
 80104c4:	460c      	mov	r4, r1
 80104c6:	4615      	mov	r5, r2
 80104c8:	461f      	mov	r7, r3
 80104ca:	4606      	mov	r6, r0
 80104cc:	f7f0 f8d8 	bl	8000680 <strlen>
 80104d0:	2864      	cmp	r0, #100	; 0x64
 80104d2:	d902      	bls.n	80104da <build_topic_xml+0x1a>
 80104d4:	2000      	movs	r0, #0
 80104d6:	b01d      	add	sp, #116	; 0x74
 80104d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104da:	4620      	mov	r0, r4
 80104dc:	2280      	movs	r2, #128	; 0x80
 80104de:	4916      	ldr	r1, [pc, #88]	; (8010538 <build_topic_xml+0x78>)
 80104e0:	f7ff ffa6 	bl	8010430 <generate_type_name>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d0f5      	beq.n	80104d4 <build_topic_xml+0x14>
 80104e8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80104ec:	ac02      	add	r4, sp, #8
 80104ee:	b9d3      	cbnz	r3, 8010526 <build_topic_xml+0x66>
 80104f0:	4b12      	ldr	r3, [pc, #72]	; (801053c <build_topic_xml+0x7c>)
 80104f2:	2168      	movs	r1, #104	; 0x68
 80104f4:	4620      	mov	r0, r4
 80104f6:	4a12      	ldr	r2, [pc, #72]	; (8010540 <build_topic_xml+0x80>)
 80104f8:	9600      	str	r6, [sp, #0]
 80104fa:	f005 fc6d 	bl	8015dd8 <snprintf>
 80104fe:	2800      	cmp	r0, #0
 8010500:	da02      	bge.n	8010508 <build_topic_xml+0x48>
 8010502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010504:	4283      	cmp	r3, r0
 8010506:	dde5      	ble.n	80104d4 <build_topic_xml+0x14>
 8010508:	490b      	ldr	r1, [pc, #44]	; (8010538 <build_topic_xml+0x78>)
 801050a:	4623      	mov	r3, r4
 801050c:	4638      	mov	r0, r7
 801050e:	4a0d      	ldr	r2, [pc, #52]	; (8010544 <build_topic_xml+0x84>)
 8010510:	9100      	str	r1, [sp, #0]
 8010512:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010514:	f005 fc60 	bl	8015dd8 <snprintf>
 8010518:	2800      	cmp	r0, #0
 801051a:	dadc      	bge.n	80104d6 <build_topic_xml+0x16>
 801051c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801051e:	4298      	cmp	r0, r3
 8010520:	bfa8      	it	ge
 8010522:	2000      	movge	r0, #0
 8010524:	e7d7      	b.n	80104d6 <build_topic_xml+0x16>
 8010526:	4633      	mov	r3, r6
 8010528:	4a07      	ldr	r2, [pc, #28]	; (8010548 <build_topic_xml+0x88>)
 801052a:	2168      	movs	r1, #104	; 0x68
 801052c:	4620      	mov	r0, r4
 801052e:	f005 fc53 	bl	8015dd8 <snprintf>
 8010532:	2800      	cmp	r0, #0
 8010534:	dbe5      	blt.n	8010502 <build_topic_xml+0x42>
 8010536:	e7e7      	b.n	8010508 <build_topic_xml+0x48>
 8010538:	20009a10 	.word	0x20009a10
 801053c:	0801fe58 	.word	0x0801fe58
 8010540:	0801f8f0 	.word	0x0801f8f0
 8010544:	0801fbe4 	.word	0x0801fbe4
 8010548:	0801f8e4 	.word	0x0801f8e4

0801054c <build_datawriter_xml>:
 801054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054e:	4605      	mov	r5, r0
 8010550:	b09d      	sub	sp, #116	; 0x74
 8010552:	4614      	mov	r4, r2
 8010554:	4608      	mov	r0, r1
 8010556:	2280      	movs	r2, #128	; 0x80
 8010558:	491c      	ldr	r1, [pc, #112]	; (80105cc <build_datawriter_xml+0x80>)
 801055a:	461e      	mov	r6, r3
 801055c:	f7ff ff68 	bl	8010430 <generate_type_name>
 8010560:	b198      	cbz	r0, 801058a <build_datawriter_xml+0x3e>
 8010562:	2200      	movs	r2, #0
 8010564:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010568:	af02      	add	r7, sp, #8
 801056a:	f88d 2008 	strb.w	r2, [sp, #8]
 801056e:	b973      	cbnz	r3, 801058e <build_datawriter_xml+0x42>
 8010570:	4b17      	ldr	r3, [pc, #92]	; (80105d0 <build_datawriter_xml+0x84>)
 8010572:	2168      	movs	r1, #104	; 0x68
 8010574:	4638      	mov	r0, r7
 8010576:	4a17      	ldr	r2, [pc, #92]	; (80105d4 <build_datawriter_xml+0x88>)
 8010578:	9500      	str	r5, [sp, #0]
 801057a:	f005 fc2d 	bl	8015dd8 <snprintf>
 801057e:	2800      	cmp	r0, #0
 8010580:	da0d      	bge.n	801059e <build_datawriter_xml+0x52>
 8010582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010584:	4298      	cmp	r0, r3
 8010586:	db0a      	blt.n	801059e <build_datawriter_xml+0x52>
 8010588:	2000      	movs	r0, #0
 801058a:	b01d      	add	sp, #116	; 0x74
 801058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801058e:	462b      	mov	r3, r5
 8010590:	4a11      	ldr	r2, [pc, #68]	; (80105d8 <build_datawriter_xml+0x8c>)
 8010592:	2168      	movs	r1, #104	; 0x68
 8010594:	4638      	mov	r0, r7
 8010596:	f005 fc1f 	bl	8015dd8 <snprintf>
 801059a:	2800      	cmp	r0, #0
 801059c:	dbf1      	blt.n	8010582 <build_datawriter_xml+0x36>
 801059e:	7a25      	ldrb	r5, [r4, #8]
 80105a0:	4630      	mov	r0, r6
 80105a2:	4a0e      	ldr	r2, [pc, #56]	; (80105dc <build_datawriter_xml+0x90>)
 80105a4:	4b0e      	ldr	r3, [pc, #56]	; (80105e0 <build_datawriter_xml+0x94>)
 80105a6:	4c09      	ldr	r4, [pc, #36]	; (80105cc <build_datawriter_xml+0x80>)
 80105a8:	2d02      	cmp	r5, #2
 80105aa:	bf18      	it	ne
 80105ac:	4613      	movne	r3, r2
 80105ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 80105b0:	4a0c      	ldr	r2, [pc, #48]	; (80105e4 <build_datawriter_xml+0x98>)
 80105b2:	9700      	str	r7, [sp, #0]
 80105b4:	9401      	str	r4, [sp, #4]
 80105b6:	f005 fc0f 	bl	8015dd8 <snprintf>
 80105ba:	2800      	cmp	r0, #0
 80105bc:	dae5      	bge.n	801058a <build_datawriter_xml+0x3e>
 80105be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105c0:	4298      	cmp	r0, r3
 80105c2:	bfa8      	it	ge
 80105c4:	2000      	movge	r0, #0
 80105c6:	b01d      	add	sp, #116	; 0x74
 80105c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ca:	bf00      	nop
 80105cc:	20009a90 	.word	0x20009a90
 80105d0:	0801fe58 	.word	0x0801fe58
 80105d4:	0801f8f0 	.word	0x0801f8f0
 80105d8:	0801f8e4 	.word	0x0801f8e4
 80105dc:	0801fb8c 	.word	0x0801fb8c
 80105e0:	0801fb80 	.word	0x0801fb80
 80105e4:	0801fc28 	.word	0x0801fc28

080105e8 <build_datareader_xml>:
 80105e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ea:	4605      	mov	r5, r0
 80105ec:	b09d      	sub	sp, #116	; 0x74
 80105ee:	4614      	mov	r4, r2
 80105f0:	4608      	mov	r0, r1
 80105f2:	2280      	movs	r2, #128	; 0x80
 80105f4:	491c      	ldr	r1, [pc, #112]	; (8010668 <build_datareader_xml+0x80>)
 80105f6:	461e      	mov	r6, r3
 80105f8:	f7ff ff1a 	bl	8010430 <generate_type_name>
 80105fc:	b198      	cbz	r0, 8010626 <build_datareader_xml+0x3e>
 80105fe:	2200      	movs	r2, #0
 8010600:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010604:	af02      	add	r7, sp, #8
 8010606:	f88d 2008 	strb.w	r2, [sp, #8]
 801060a:	b973      	cbnz	r3, 801062a <build_datareader_xml+0x42>
 801060c:	4b17      	ldr	r3, [pc, #92]	; (801066c <build_datareader_xml+0x84>)
 801060e:	2168      	movs	r1, #104	; 0x68
 8010610:	4638      	mov	r0, r7
 8010612:	4a17      	ldr	r2, [pc, #92]	; (8010670 <build_datareader_xml+0x88>)
 8010614:	9500      	str	r5, [sp, #0]
 8010616:	f005 fbdf 	bl	8015dd8 <snprintf>
 801061a:	2800      	cmp	r0, #0
 801061c:	da0d      	bge.n	801063a <build_datareader_xml+0x52>
 801061e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010620:	4298      	cmp	r0, r3
 8010622:	db0a      	blt.n	801063a <build_datareader_xml+0x52>
 8010624:	2000      	movs	r0, #0
 8010626:	b01d      	add	sp, #116	; 0x74
 8010628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062a:	462b      	mov	r3, r5
 801062c:	4a11      	ldr	r2, [pc, #68]	; (8010674 <build_datareader_xml+0x8c>)
 801062e:	2168      	movs	r1, #104	; 0x68
 8010630:	4638      	mov	r0, r7
 8010632:	f005 fbd1 	bl	8015dd8 <snprintf>
 8010636:	2800      	cmp	r0, #0
 8010638:	dbf1      	blt.n	801061e <build_datareader_xml+0x36>
 801063a:	7a25      	ldrb	r5, [r4, #8]
 801063c:	4630      	mov	r0, r6
 801063e:	4a0e      	ldr	r2, [pc, #56]	; (8010678 <build_datareader_xml+0x90>)
 8010640:	4b0e      	ldr	r3, [pc, #56]	; (801067c <build_datareader_xml+0x94>)
 8010642:	4c09      	ldr	r4, [pc, #36]	; (8010668 <build_datareader_xml+0x80>)
 8010644:	2d02      	cmp	r5, #2
 8010646:	bf18      	it	ne
 8010648:	4613      	movne	r3, r2
 801064a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801064c:	4a0c      	ldr	r2, [pc, #48]	; (8010680 <build_datareader_xml+0x98>)
 801064e:	9700      	str	r7, [sp, #0]
 8010650:	9401      	str	r4, [sp, #4]
 8010652:	f005 fbc1 	bl	8015dd8 <snprintf>
 8010656:	2800      	cmp	r0, #0
 8010658:	dae5      	bge.n	8010626 <build_datareader_xml+0x3e>
 801065a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801065c:	4298      	cmp	r0, r3
 801065e:	bfa8      	it	ge
 8010660:	2000      	movge	r0, #0
 8010662:	b01d      	add	sp, #116	; 0x74
 8010664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010666:	bf00      	nop
 8010668:	20009a90 	.word	0x20009a90
 801066c:	0801fe58 	.word	0x0801fe58
 8010670:	0801f8f0 	.word	0x0801f8f0
 8010674:	0801f8e4 	.word	0x0801f8e4
 8010678:	0801fb8c 	.word	0x0801fb8c
 801067c:	0801fb80 	.word	0x0801fb80
 8010680:	0801fd40 	.word	0x0801fd40

08010684 <is_uxrce_rmw_identifier_valid>:
 8010684:	b510      	push	{r4, lr}
 8010686:	4604      	mov	r4, r0
 8010688:	b140      	cbz	r0, 801069c <is_uxrce_rmw_identifier_valid+0x18>
 801068a:	f7fe fc29 	bl	800eee0 <rmw_get_implementation_identifier>
 801068e:	4601      	mov	r1, r0
 8010690:	4620      	mov	r0, r4
 8010692:	f7ef fe79 	bl	8000388 <strcmp>
 8010696:	fab0 f080 	clz	r0, r0
 801069a:	0940      	lsrs	r0, r0, #5
 801069c:	bd10      	pop	{r4, pc}
 801069e:	bf00      	nop

080106a0 <rmw_get_default_publisher_options>:
 80106a0:	2000      	movs	r0, #0
 80106a2:	4770      	bx	lr

080106a4 <rmw_get_default_security_options>:
 80106a4:	2200      	movs	r2, #0
 80106a6:	7002      	strb	r2, [r0, #0]
 80106a8:	6042      	str	r2, [r0, #4]
 80106aa:	4770      	bx	lr

080106ac <rmw_get_default_subscription_options>:
 80106ac:	2200      	movs	r2, #0
 80106ae:	6002      	str	r2, [r0, #0]
 80106b0:	7102      	strb	r2, [r0, #4]
 80106b2:	4770      	bx	lr

080106b4 <rmw_get_zero_initialized_message_info>:
 80106b4:	b470      	push	{r4, r5, r6}
 80106b6:	4606      	mov	r6, r0
 80106b8:	4d06      	ldr	r5, [pc, #24]	; (80106d4 <rmw_get_zero_initialized_message_info+0x20>)
 80106ba:	4634      	mov	r4, r6
 80106bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80106c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80106cc:	4630      	mov	r0, r6
 80106ce:	bc70      	pop	{r4, r5, r6}
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	0801f728 	.word	0x0801f728

080106d8 <rmw_validate_full_topic_name>:
 80106d8:	2800      	cmp	r0, #0
 80106da:	d064      	beq.n	80107a6 <rmw_validate_full_topic_name+0xce>
 80106dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e0:	460d      	mov	r5, r1
 80106e2:	2900      	cmp	r1, #0
 80106e4:	d061      	beq.n	80107aa <rmw_validate_full_topic_name+0xd2>
 80106e6:	4616      	mov	r6, r2
 80106e8:	4604      	mov	r4, r0
 80106ea:	f7ef ffc9 	bl	8000680 <strlen>
 80106ee:	b148      	cbz	r0, 8010704 <rmw_validate_full_topic_name+0x2c>
 80106f0:	7823      	ldrb	r3, [r4, #0]
 80106f2:	2b2f      	cmp	r3, #47	; 0x2f
 80106f4:	d00d      	beq.n	8010712 <rmw_validate_full_topic_name+0x3a>
 80106f6:	2302      	movs	r3, #2
 80106f8:	602b      	str	r3, [r5, #0]
 80106fa:	b13e      	cbz	r6, 801070c <rmw_validate_full_topic_name+0x34>
 80106fc:	2000      	movs	r0, #0
 80106fe:	6030      	str	r0, [r6, #0]
 8010700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010704:	2301      	movs	r3, #1
 8010706:	602b      	str	r3, [r5, #0]
 8010708:	2e00      	cmp	r6, #0
 801070a:	d1f7      	bne.n	80106fc <rmw_validate_full_topic_name+0x24>
 801070c:	2000      	movs	r0, #0
 801070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010712:	1e47      	subs	r7, r0, #1
 8010714:	5de3      	ldrb	r3, [r4, r7]
 8010716:	2b2f      	cmp	r3, #47	; 0x2f
 8010718:	d049      	beq.n	80107ae <rmw_validate_full_topic_name+0xd6>
 801071a:	1e62      	subs	r2, r4, #1
 801071c:	f1c4 0e01 	rsb	lr, r4, #1
 8010720:	eb02 0900 	add.w	r9, r2, r0
 8010724:	eb0e 0802 	add.w	r8, lr, r2
 8010728:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801072c:	f023 0120 	bic.w	r1, r3, #32
 8010730:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8010734:	3941      	subs	r1, #65	; 0x41
 8010736:	2919      	cmp	r1, #25
 8010738:	d910      	bls.n	801075c <rmw_validate_full_topic_name+0x84>
 801073a:	f1bc 0f0a 	cmp.w	ip, #10
 801073e:	d90d      	bls.n	801075c <rmw_validate_full_topic_name+0x84>
 8010740:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8010744:	fab3 f383 	clz	r3, r3
 8010748:	095b      	lsrs	r3, r3, #5
 801074a:	b93b      	cbnz	r3, 801075c <rmw_validate_full_topic_name+0x84>
 801074c:	2204      	movs	r2, #4
 801074e:	602a      	str	r2, [r5, #0]
 8010750:	2e00      	cmp	r6, #0
 8010752:	d0db      	beq.n	801070c <rmw_validate_full_topic_name+0x34>
 8010754:	4618      	mov	r0, r3
 8010756:	f8c6 8000 	str.w	r8, [r6]
 801075a:	e7d1      	b.n	8010700 <rmw_validate_full_topic_name+0x28>
 801075c:	454a      	cmp	r2, r9
 801075e:	d1e1      	bne.n	8010724 <rmw_validate_full_topic_name+0x4c>
 8010760:	2200      	movs	r2, #0
 8010762:	f107 0801 	add.w	r8, r7, #1
 8010766:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80107e4 <rmw_validate_full_topic_name+0x10c>
 801076a:	e004      	b.n	8010776 <rmw_validate_full_topic_name+0x9e>
 801076c:	4288      	cmp	r0, r1
 801076e:	f104 0401 	add.w	r4, r4, #1
 8010772:	461a      	mov	r2, r3
 8010774:	d924      	bls.n	80107c0 <rmw_validate_full_topic_name+0xe8>
 8010776:	4297      	cmp	r7, r2
 8010778:	f102 0301 	add.w	r3, r2, #1
 801077c:	d01d      	beq.n	80107ba <rmw_validate_full_topic_name+0xe2>
 801077e:	f894 c000 	ldrb.w	ip, [r4]
 8010782:	4619      	mov	r1, r3
 8010784:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 8010788:	d1f0      	bne.n	801076c <rmw_validate_full_topic_name+0x94>
 801078a:	7862      	ldrb	r2, [r4, #1]
 801078c:	2a2f      	cmp	r2, #47	; 0x2f
 801078e:	d024      	beq.n	80107da <rmw_validate_full_topic_name+0x102>
 8010790:	f812 200e 	ldrb.w	r2, [r2, lr]
 8010794:	0752      	lsls	r2, r2, #29
 8010796:	d5e9      	bpl.n	801076c <rmw_validate_full_topic_name+0x94>
 8010798:	2206      	movs	r2, #6
 801079a:	602a      	str	r2, [r5, #0]
 801079c:	2e00      	cmp	r6, #0
 801079e:	d0b5      	beq.n	801070c <rmw_validate_full_topic_name+0x34>
 80107a0:	2000      	movs	r0, #0
 80107a2:	6033      	str	r3, [r6, #0]
 80107a4:	e7ac      	b.n	8010700 <rmw_validate_full_topic_name+0x28>
 80107a6:	200b      	movs	r0, #11
 80107a8:	4770      	bx	lr
 80107aa:	200b      	movs	r0, #11
 80107ac:	e7a8      	b.n	8010700 <rmw_validate_full_topic_name+0x28>
 80107ae:	2303      	movs	r3, #3
 80107b0:	602b      	str	r3, [r5, #0]
 80107b2:	2e00      	cmp	r6, #0
 80107b4:	d0aa      	beq.n	801070c <rmw_validate_full_topic_name+0x34>
 80107b6:	6037      	str	r7, [r6, #0]
 80107b8:	e7a8      	b.n	801070c <rmw_validate_full_topic_name+0x34>
 80107ba:	4641      	mov	r1, r8
 80107bc:	1c7b      	adds	r3, r7, #1
 80107be:	e7d5      	b.n	801076c <rmw_validate_full_topic_name+0x94>
 80107c0:	28f7      	cmp	r0, #247	; 0xf7
 80107c2:	d802      	bhi.n	80107ca <rmw_validate_full_topic_name+0xf2>
 80107c4:	2000      	movs	r0, #0
 80107c6:	6028      	str	r0, [r5, #0]
 80107c8:	e79a      	b.n	8010700 <rmw_validate_full_topic_name+0x28>
 80107ca:	2307      	movs	r3, #7
 80107cc:	602b      	str	r3, [r5, #0]
 80107ce:	2e00      	cmp	r6, #0
 80107d0:	d09c      	beq.n	801070c <rmw_validate_full_topic_name+0x34>
 80107d2:	23f6      	movs	r3, #246	; 0xf6
 80107d4:	2000      	movs	r0, #0
 80107d6:	6033      	str	r3, [r6, #0]
 80107d8:	e792      	b.n	8010700 <rmw_validate_full_topic_name+0x28>
 80107da:	2205      	movs	r2, #5
 80107dc:	602a      	str	r2, [r5, #0]
 80107de:	2e00      	cmp	r6, #0
 80107e0:	d1de      	bne.n	80107a0 <rmw_validate_full_topic_name+0xc8>
 80107e2:	e793      	b.n	801070c <rmw_validate_full_topic_name+0x34>
 80107e4:	0802041d 	.word	0x0802041d

080107e8 <rmw_validate_namespace_with_size>:
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d041      	beq.n	8010870 <rmw_validate_namespace_with_size+0x88>
 80107ec:	b5e0      	push	{r5, r6, r7, lr}
 80107ee:	4615      	mov	r5, r2
 80107f0:	b0c2      	sub	sp, #264	; 0x108
 80107f2:	b35a      	cbz	r2, 801084c <rmw_validate_namespace_with_size+0x64>
 80107f4:	2901      	cmp	r1, #1
 80107f6:	460e      	mov	r6, r1
 80107f8:	461f      	mov	r7, r3
 80107fa:	d102      	bne.n	8010802 <rmw_validate_namespace_with_size+0x1a>
 80107fc:	7802      	ldrb	r2, [r0, #0]
 80107fe:	2a2f      	cmp	r2, #47	; 0x2f
 8010800:	d019      	beq.n	8010836 <rmw_validate_namespace_with_size+0x4e>
 8010802:	aa01      	add	r2, sp, #4
 8010804:	4669      	mov	r1, sp
 8010806:	f7ff ff67 	bl	80106d8 <rmw_validate_full_topic_name>
 801080a:	b980      	cbnz	r0, 801082e <rmw_validate_namespace_with_size+0x46>
 801080c:	9b00      	ldr	r3, [sp, #0]
 801080e:	b183      	cbz	r3, 8010832 <rmw_validate_namespace_with_size+0x4a>
 8010810:	2b07      	cmp	r3, #7
 8010812:	d00e      	beq.n	8010832 <rmw_validate_namespace_with_size+0x4a>
 8010814:	1e59      	subs	r1, r3, #1
 8010816:	2905      	cmp	r1, #5
 8010818:	d82c      	bhi.n	8010874 <rmw_validate_namespace_with_size+0x8c>
 801081a:	e8df f001 	tbb	[pc, r1]
 801081e:	201d      	.short	0x201d
 8010820:	1a032623 	.word	0x1a032623
 8010824:	2305      	movs	r3, #5
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	b10f      	cbz	r7, 801082e <rmw_validate_namespace_with_size+0x46>
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	603b      	str	r3, [r7, #0]
 801082e:	b042      	add	sp, #264	; 0x108
 8010830:	bde0      	pop	{r5, r6, r7, pc}
 8010832:	2ef5      	cmp	r6, #245	; 0xf5
 8010834:	d803      	bhi.n	801083e <rmw_validate_namespace_with_size+0x56>
 8010836:	2000      	movs	r0, #0
 8010838:	6028      	str	r0, [r5, #0]
 801083a:	b042      	add	sp, #264	; 0x108
 801083c:	bde0      	pop	{r5, r6, r7, pc}
 801083e:	2307      	movs	r3, #7
 8010840:	602b      	str	r3, [r5, #0]
 8010842:	2f00      	cmp	r7, #0
 8010844:	d0f3      	beq.n	801082e <rmw_validate_namespace_with_size+0x46>
 8010846:	23f4      	movs	r3, #244	; 0xf4
 8010848:	603b      	str	r3, [r7, #0]
 801084a:	e7f0      	b.n	801082e <rmw_validate_namespace_with_size+0x46>
 801084c:	200b      	movs	r0, #11
 801084e:	b042      	add	sp, #264	; 0x108
 8010850:	bde0      	pop	{r5, r6, r7, pc}
 8010852:	2306      	movs	r3, #6
 8010854:	602b      	str	r3, [r5, #0]
 8010856:	e7e7      	b.n	8010828 <rmw_validate_namespace_with_size+0x40>
 8010858:	2301      	movs	r3, #1
 801085a:	602b      	str	r3, [r5, #0]
 801085c:	e7e4      	b.n	8010828 <rmw_validate_namespace_with_size+0x40>
 801085e:	2302      	movs	r3, #2
 8010860:	602b      	str	r3, [r5, #0]
 8010862:	e7e1      	b.n	8010828 <rmw_validate_namespace_with_size+0x40>
 8010864:	2303      	movs	r3, #3
 8010866:	602b      	str	r3, [r5, #0]
 8010868:	e7de      	b.n	8010828 <rmw_validate_namespace_with_size+0x40>
 801086a:	2304      	movs	r3, #4
 801086c:	602b      	str	r3, [r5, #0]
 801086e:	e7db      	b.n	8010828 <rmw_validate_namespace_with_size+0x40>
 8010870:	200b      	movs	r0, #11
 8010872:	4770      	bx	lr
 8010874:	4a03      	ldr	r2, [pc, #12]	; (8010884 <rmw_validate_namespace_with_size+0x9c>)
 8010876:	f44f 7180 	mov.w	r1, #256	; 0x100
 801087a:	a802      	add	r0, sp, #8
 801087c:	f7fe f8d6 	bl	800ea2c <rcutils_snprintf>
 8010880:	2001      	movs	r0, #1
 8010882:	e7d4      	b.n	801082e <rmw_validate_namespace_with_size+0x46>
 8010884:	0801fe5c 	.word	0x0801fe5c

08010888 <rmw_validate_namespace>:
 8010888:	b168      	cbz	r0, 80108a6 <rmw_validate_namespace+0x1e>
 801088a:	b570      	push	{r4, r5, r6, lr}
 801088c:	460d      	mov	r5, r1
 801088e:	4616      	mov	r6, r2
 8010890:	4604      	mov	r4, r0
 8010892:	f7ef fef5 	bl	8000680 <strlen>
 8010896:	4633      	mov	r3, r6
 8010898:	4601      	mov	r1, r0
 801089a:	462a      	mov	r2, r5
 801089c:	4620      	mov	r0, r4
 801089e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108a2:	f7ff bfa1 	b.w	80107e8 <rmw_validate_namespace_with_size>
 80108a6:	200b      	movs	r0, #11
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop

080108ac <rmw_namespace_validation_result_string>:
 80108ac:	2807      	cmp	r0, #7
 80108ae:	d803      	bhi.n	80108b8 <rmw_namespace_validation_result_string+0xc>
 80108b0:	4b02      	ldr	r3, [pc, #8]	; (80108bc <rmw_namespace_validation_result_string+0x10>)
 80108b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80108b6:	4770      	bx	lr
 80108b8:	4801      	ldr	r0, [pc, #4]	; (80108c0 <rmw_namespace_validation_result_string+0x14>)
 80108ba:	4770      	bx	lr
 80108bc:	08020054 	.word	0x08020054
 80108c0:	0801feac 	.word	0x0801feac

080108c4 <rmw_validate_node_name>:
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d039      	beq.n	801093c <rmw_validate_node_name+0x78>
 80108c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108cc:	460f      	mov	r7, r1
 80108ce:	b3b9      	cbz	r1, 8010940 <rmw_validate_node_name+0x7c>
 80108d0:	4615      	mov	r5, r2
 80108d2:	4604      	mov	r4, r0
 80108d4:	f7ef fed4 	bl	8000680 <strlen>
 80108d8:	b308      	cbz	r0, 801091e <rmw_validate_node_name+0x5a>
 80108da:	1e63      	subs	r3, r4, #1
 80108dc:	f1c4 0e01 	rsb	lr, r4, #1
 80108e0:	eb03 0c00 	add.w	ip, r3, r0
 80108e4:	eb0e 0803 	add.w	r8, lr, r3
 80108e8:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80108ec:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80108f0:	f026 0220 	bic.w	r2, r6, #32
 80108f4:	2909      	cmp	r1, #9
 80108f6:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 80108fa:	d903      	bls.n	8010904 <rmw_validate_node_name+0x40>
 80108fc:	2a19      	cmp	r2, #25
 80108fe:	d901      	bls.n	8010904 <rmw_validate_node_name+0x40>
 8010900:	2e5f      	cmp	r6, #95	; 0x5f
 8010902:	d113      	bne.n	801092c <rmw_validate_node_name+0x68>
 8010904:	459c      	cmp	ip, r3
 8010906:	d1ed      	bne.n	80108e4 <rmw_validate_node_name+0x20>
 8010908:	7822      	ldrb	r2, [r4, #0]
 801090a:	4b15      	ldr	r3, [pc, #84]	; (8010960 <rmw_validate_node_name+0x9c>)
 801090c:	5cd3      	ldrb	r3, [r2, r3]
 801090e:	f013 0304 	ands.w	r3, r3, #4
 8010912:	d11f      	bne.n	8010954 <rmw_validate_node_name+0x90>
 8010914:	28ff      	cmp	r0, #255	; 0xff
 8010916:	d815      	bhi.n	8010944 <rmw_validate_node_name+0x80>
 8010918:	4618      	mov	r0, r3
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	e00c      	b.n	8010938 <rmw_validate_node_name+0x74>
 801091e:	2301      	movs	r3, #1
 8010920:	603b      	str	r3, [r7, #0]
 8010922:	b145      	cbz	r5, 8010936 <rmw_validate_node_name+0x72>
 8010924:	2000      	movs	r0, #0
 8010926:	6028      	str	r0, [r5, #0]
 8010928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801092c:	2302      	movs	r3, #2
 801092e:	603b      	str	r3, [r7, #0]
 8010930:	b10d      	cbz	r5, 8010936 <rmw_validate_node_name+0x72>
 8010932:	f8c5 8000 	str.w	r8, [r5]
 8010936:	2000      	movs	r0, #0
 8010938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801093c:	200b      	movs	r0, #11
 801093e:	4770      	bx	lr
 8010940:	200b      	movs	r0, #11
 8010942:	e7f9      	b.n	8010938 <rmw_validate_node_name+0x74>
 8010944:	2204      	movs	r2, #4
 8010946:	603a      	str	r2, [r7, #0]
 8010948:	2d00      	cmp	r5, #0
 801094a:	d0f4      	beq.n	8010936 <rmw_validate_node_name+0x72>
 801094c:	22fe      	movs	r2, #254	; 0xfe
 801094e:	4618      	mov	r0, r3
 8010950:	602a      	str	r2, [r5, #0]
 8010952:	e7f1      	b.n	8010938 <rmw_validate_node_name+0x74>
 8010954:	2303      	movs	r3, #3
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	2d00      	cmp	r5, #0
 801095a:	d1e3      	bne.n	8010924 <rmw_validate_node_name+0x60>
 801095c:	e7eb      	b.n	8010936 <rmw_validate_node_name+0x72>
 801095e:	bf00      	nop
 8010960:	0802041d 	.word	0x0802041d

08010964 <rmw_node_name_validation_result_string>:
 8010964:	2804      	cmp	r0, #4
 8010966:	d803      	bhi.n	8010970 <rmw_node_name_validation_result_string+0xc>
 8010968:	4b02      	ldr	r3, [pc, #8]	; (8010974 <rmw_node_name_validation_result_string+0x10>)
 801096a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801096e:	4770      	bx	lr
 8010970:	4801      	ldr	r0, [pc, #4]	; (8010978 <rmw_node_name_validation_result_string+0x14>)
 8010972:	4770      	bx	lr
 8010974:	08020160 	.word	0x08020160
 8010978:	08020074 	.word	0x08020074

0801097c <get_message_typesupport_handle>:
 801097c:	6883      	ldr	r3, [r0, #8]
 801097e:	4718      	bx	r3

08010980 <get_message_typesupport_handle_function>:
 8010980:	b510      	push	{r4, lr}
 8010982:	4604      	mov	r4, r0
 8010984:	6800      	ldr	r0, [r0, #0]
 8010986:	f7ef fcff 	bl	8000388 <strcmp>
 801098a:	2800      	cmp	r0, #0
 801098c:	bf0c      	ite	eq
 801098e:	4620      	moveq	r0, r4
 8010990:	2000      	movne	r0, #0
 8010992:	bd10      	pop	{r4, pc}

08010994 <_Header__max_serialized_size>:
 8010994:	b500      	push	{lr}
 8010996:	b083      	sub	sp, #12
 8010998:	2301      	movs	r3, #1
 801099a:	2100      	movs	r1, #0
 801099c:	f10d 0007 	add.w	r0, sp, #7
 80109a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80109a4:	f000 f924 	bl	8010bf0 <max_serialized_size_builtin_interfaces__msg__Time>
 80109a8:	b003      	add	sp, #12
 80109aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80109ae:	bf00      	nop

080109b0 <get_serialized_size_std_msgs__msg__Header>:
 80109b0:	b570      	push	{r4, r5, r6, lr}
 80109b2:	4605      	mov	r5, r0
 80109b4:	b170      	cbz	r0, 80109d4 <get_serialized_size_std_msgs__msg__Header+0x24>
 80109b6:	460c      	mov	r4, r1
 80109b8:	f000 f896 	bl	8010ae8 <get_serialized_size_builtin_interfaces__msg__Time>
 80109bc:	2104      	movs	r1, #4
 80109be:	1826      	adds	r6, r4, r0
 80109c0:	f1c4 0405 	rsb	r4, r4, #5
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7fa f953 	bl	800ac70 <ucdr_alignment>
 80109ca:	68e9      	ldr	r1, [r5, #12]
 80109cc:	440c      	add	r4, r1
 80109ce:	4404      	add	r4, r0
 80109d0:	19a0      	adds	r0, r4, r6
 80109d2:	bd70      	pop	{r4, r5, r6, pc}
 80109d4:	4b04      	ldr	r3, [pc, #16]	; (80109e8 <get_serialized_size_std_msgs__msg__Header+0x38>)
 80109d6:	221b      	movs	r2, #27
 80109d8:	2101      	movs	r1, #1
 80109da:	4804      	ldr	r0, [pc, #16]	; (80109ec <get_serialized_size_std_msgs__msg__Header+0x3c>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	f004 fb6a 	bl	80150b8 <fwrite>
 80109e4:	4628      	mov	r0, r5
 80109e6:	bd70      	pop	{r4, r5, r6, pc}
 80109e8:	20000208 	.word	0x20000208
 80109ec:	0801f7a8 	.word	0x0801f7a8

080109f0 <_Header__cdr_deserialize>:
 80109f0:	b538      	push	{r3, r4, r5, lr}
 80109f2:	460c      	mov	r4, r1
 80109f4:	b1a9      	cbz	r1, 8010a22 <_Header__cdr_deserialize+0x32>
 80109f6:	4605      	mov	r5, r0
 80109f8:	f000 f90e 	bl	8010c18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80109fc:	4603      	mov	r3, r0
 80109fe:	4621      	mov	r1, r4
 8010a00:	4628      	mov	r0, r5
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	4798      	blx	r3
 8010a08:	4628      	mov	r0, r5
 8010a0a:	6922      	ldr	r2, [r4, #16]
 8010a0c:	68a1      	ldr	r1, [r4, #8]
 8010a0e:	f000 fc09 	bl	8011224 <ucdr_deserialize_string>
 8010a12:	4605      	mov	r5, r0
 8010a14:	b118      	cbz	r0, 8010a1e <_Header__cdr_deserialize+0x2e>
 8010a16:	68a0      	ldr	r0, [r4, #8]
 8010a18:	f7ef fe32 	bl	8000680 <strlen>
 8010a1c:	60e0      	str	r0, [r4, #12]
 8010a1e:	4628      	mov	r0, r5
 8010a20:	bd38      	pop	{r3, r4, r5, pc}
 8010a22:	4b05      	ldr	r3, [pc, #20]	; (8010a38 <_Header__cdr_deserialize+0x48>)
 8010a24:	4625      	mov	r5, r4
 8010a26:	221b      	movs	r2, #27
 8010a28:	2101      	movs	r1, #1
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4803      	ldr	r0, [pc, #12]	; (8010a3c <_Header__cdr_deserialize+0x4c>)
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	f004 fb42 	bl	80150b8 <fwrite>
 8010a34:	4628      	mov	r0, r5
 8010a36:	bd38      	pop	{r3, r4, r5, pc}
 8010a38:	20000208 	.word	0x20000208
 8010a3c:	0801f7a8 	.word	0x0801f7a8

08010a40 <_Header__cdr_serialize>:
 8010a40:	b538      	push	{r3, r4, r5, lr}
 8010a42:	4604      	mov	r4, r0
 8010a44:	b1a0      	cbz	r0, 8010a70 <_Header__cdr_serialize+0x30>
 8010a46:	460d      	mov	r5, r1
 8010a48:	f000 f8e6 	bl	8010c18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	4620      	mov	r0, r4
 8010a50:	4629      	mov	r1, r5
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	4798      	blx	r3
 8010a58:	4628      	mov	r0, r5
 8010a5a:	68a1      	ldr	r1, [r4, #8]
 8010a5c:	f000 fbd2 	bl	8011204 <ucdr_serialize_string>
 8010a60:	4605      	mov	r5, r0
 8010a62:	b118      	cbz	r0, 8010a6c <_Header__cdr_serialize+0x2c>
 8010a64:	68a0      	ldr	r0, [r4, #8]
 8010a66:	f7ef fe0b 	bl	8000680 <strlen>
 8010a6a:	60e0      	str	r0, [r4, #12]
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <_Header__cdr_serialize+0x48>)
 8010a72:	4625      	mov	r5, r4
 8010a74:	221b      	movs	r2, #27
 8010a76:	2101      	movs	r1, #1
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4804      	ldr	r0, [pc, #16]	; (8010a8c <_Header__cdr_serialize+0x4c>)
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	f004 fb1b 	bl	80150b8 <fwrite>
 8010a82:	4628      	mov	r0, r5
 8010a84:	bd38      	pop	{r3, r4, r5, pc}
 8010a86:	bf00      	nop
 8010a88:	20000208 	.word	0x20000208
 8010a8c:	0801f7a8 	.word	0x0801f7a8

08010a90 <_Header__get_serialized_size>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	4604      	mov	r4, r0
 8010a94:	b158      	cbz	r0, 8010aae <_Header__get_serialized_size+0x1e>
 8010a96:	2100      	movs	r1, #0
 8010a98:	f000 f826 	bl	8010ae8 <get_serialized_size_builtin_interfaces__msg__Time>
 8010a9c:	2104      	movs	r1, #4
 8010a9e:	4605      	mov	r5, r0
 8010aa0:	f7fa f8e6 	bl	800ac70 <ucdr_alignment>
 8010aa4:	68e2      	ldr	r2, [r4, #12]
 8010aa6:	3205      	adds	r2, #5
 8010aa8:	1953      	adds	r3, r2, r5
 8010aaa:	4418      	add	r0, r3
 8010aac:	bd38      	pop	{r3, r4, r5, pc}
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <_Header__get_serialized_size+0x34>)
 8010ab0:	221b      	movs	r2, #27
 8010ab2:	2101      	movs	r1, #1
 8010ab4:	4804      	ldr	r0, [pc, #16]	; (8010ac8 <_Header__get_serialized_size+0x38>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	f004 fafd 	bl	80150b8 <fwrite>
 8010abe:	4620      	mov	r0, r4
 8010ac0:	bd38      	pop	{r3, r4, r5, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20000208 	.word	0x20000208
 8010ac8:	0801f7a8 	.word	0x0801f7a8

08010acc <max_serialized_size_std_msgs__msg__Header>:
 8010acc:	2301      	movs	r3, #1
 8010ace:	b510      	push	{r4, lr}
 8010ad0:	7003      	strb	r3, [r0, #0]
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	f000 f88c 	bl	8010bf0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	7023      	strb	r3, [r4, #0]
 8010adc:	bd10      	pop	{r4, pc}
 8010ade:	bf00      	nop

08010ae0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010ae0:	4800      	ldr	r0, [pc, #0]	; (8010ae4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8010ae2:	4770      	bx	lr
 8010ae4:	20000118 	.word	0x20000118

08010ae8 <get_serialized_size_builtin_interfaces__msg__Time>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	b178      	cbz	r0, 8010b0c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010aec:	460d      	mov	r5, r1
 8010aee:	2104      	movs	r1, #4
 8010af0:	1d2c      	adds	r4, r5, #4
 8010af2:	4628      	mov	r0, r5
 8010af4:	f7fa f8bc 	bl	800ac70 <ucdr_alignment>
 8010af8:	f1c5 0504 	rsb	r5, r5, #4
 8010afc:	4404      	add	r4, r0
 8010afe:	2104      	movs	r1, #4
 8010b00:	4620      	mov	r0, r4
 8010b02:	f7fa f8b5 	bl	800ac70 <ucdr_alignment>
 8010b06:	4428      	add	r0, r5
 8010b08:	4420      	add	r0, r4
 8010b0a:	bd38      	pop	{r3, r4, r5, pc}
 8010b0c:	4b05      	ldr	r3, [pc, #20]	; (8010b24 <get_serialized_size_builtin_interfaces__msg__Time+0x3c>)
 8010b0e:	4604      	mov	r4, r0
 8010b10:	221b      	movs	r2, #27
 8010b12:	2101      	movs	r1, #1
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4804      	ldr	r0, [pc, #16]	; (8010b28 <get_serialized_size_builtin_interfaces__msg__Time+0x40>)
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	f004 facd 	bl	80150b8 <fwrite>
 8010b1e:	4620      	mov	r0, r4
 8010b20:	bd38      	pop	{r3, r4, r5, pc}
 8010b22:	bf00      	nop
 8010b24:	20000208 	.word	0x20000208
 8010b28:	0801f7a8 	.word	0x0801f7a8

08010b2c <_Time__cdr_serialize>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	4604      	mov	r4, r0
 8010b30:	b150      	cbz	r0, 8010b48 <_Time__cdr_serialize+0x1c>
 8010b32:	460d      	mov	r5, r1
 8010b34:	6801      	ldr	r1, [r0, #0]
 8010b36:	4628      	mov	r0, r5
 8010b38:	f7f9 fed2 	bl	800a8e0 <ucdr_serialize_int32_t>
 8010b3c:	6861      	ldr	r1, [r4, #4]
 8010b3e:	4628      	mov	r0, r5
 8010b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b44:	f7f9 bde0 	b.w	800a708 <ucdr_serialize_uint32_t>
 8010b48:	4b04      	ldr	r3, [pc, #16]	; (8010b5c <_Time__cdr_serialize+0x30>)
 8010b4a:	221b      	movs	r2, #27
 8010b4c:	2101      	movs	r1, #1
 8010b4e:	4804      	ldr	r0, [pc, #16]	; (8010b60 <_Time__cdr_serialize+0x34>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	f004 fab0 	bl	80150b8 <fwrite>
 8010b58:	4620      	mov	r0, r4
 8010b5a:	bd38      	pop	{r3, r4, r5, pc}
 8010b5c:	20000208 	.word	0x20000208
 8010b60:	0801f7a8 	.word	0x0801f7a8

08010b64 <_Time__cdr_deserialize>:
 8010b64:	b538      	push	{r3, r4, r5, lr}
 8010b66:	460c      	mov	r4, r1
 8010b68:	b141      	cbz	r1, 8010b7c <_Time__cdr_deserialize+0x18>
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	f7f9 feea 	bl	800a944 <ucdr_deserialize_int32_t>
 8010b70:	1d21      	adds	r1, r4, #4
 8010b72:	4628      	mov	r0, r5
 8010b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b78:	f7f9 be28 	b.w	800a7cc <ucdr_deserialize_uint32_t>
 8010b7c:	4b04      	ldr	r3, [pc, #16]	; (8010b90 <_Time__cdr_deserialize+0x2c>)
 8010b7e:	221b      	movs	r2, #27
 8010b80:	2101      	movs	r1, #1
 8010b82:	4804      	ldr	r0, [pc, #16]	; (8010b94 <_Time__cdr_deserialize+0x30>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	f004 fa96 	bl	80150b8 <fwrite>
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	20000208 	.word	0x20000208
 8010b94:	0801f7a8 	.word	0x0801f7a8

08010b98 <_Time__max_serialized_size>:
 8010b98:	b510      	push	{r4, lr}
 8010b9a:	2104      	movs	r1, #4
 8010b9c:	2000      	movs	r0, #0
 8010b9e:	f7fa f867 	bl	800ac70 <ucdr_alignment>
 8010ba2:	2104      	movs	r1, #4
 8010ba4:	1844      	adds	r4, r0, r1
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f7fa f862 	bl	800ac70 <ucdr_alignment>
 8010bac:	3004      	adds	r0, #4
 8010bae:	4420      	add	r0, r4
 8010bb0:	bd10      	pop	{r4, pc}
 8010bb2:	bf00      	nop

08010bb4 <_Time__get_serialized_size>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	b158      	cbz	r0, 8010bd0 <_Time__get_serialized_size+0x1c>
 8010bb8:	2104      	movs	r1, #4
 8010bba:	2000      	movs	r0, #0
 8010bbc:	f7fa f858 	bl	800ac70 <ucdr_alignment>
 8010bc0:	2104      	movs	r1, #4
 8010bc2:	1844      	adds	r4, r0, r1
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f7fa f853 	bl	800ac70 <ucdr_alignment>
 8010bca:	3004      	adds	r0, #4
 8010bcc:	4420      	add	r0, r4
 8010bce:	bd10      	pop	{r4, pc}
 8010bd0:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <_Time__get_serialized_size+0x34>)
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	221b      	movs	r2, #27
 8010bd6:	2101      	movs	r1, #1
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4804      	ldr	r0, [pc, #16]	; (8010bec <_Time__get_serialized_size+0x38>)
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	f004 fa6b 	bl	80150b8 <fwrite>
 8010be2:	4620      	mov	r0, r4
 8010be4:	bd10      	pop	{r4, pc}
 8010be6:	bf00      	nop
 8010be8:	20000208 	.word	0x20000208
 8010bec:	0801f7a8 	.word	0x0801f7a8

08010bf0 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010bf0:	b538      	push	{r3, r4, r5, lr}
 8010bf2:	460c      	mov	r4, r1
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	2104      	movs	r1, #4
 8010bf8:	1d25      	adds	r5, r4, #4
 8010bfa:	7003      	strb	r3, [r0, #0]
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f1c4 0404 	rsb	r4, r4, #4
 8010c02:	f7fa f835 	bl	800ac70 <ucdr_alignment>
 8010c06:	4405      	add	r5, r0
 8010c08:	2104      	movs	r1, #4
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	f7fa f830 	bl	800ac70 <ucdr_alignment>
 8010c10:	4420      	add	r0, r4
 8010c12:	4428      	add	r0, r5
 8010c14:	bd38      	pop	{r3, r4, r5, pc}
 8010c16:	bf00      	nop

08010c18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010c18:	4800      	ldr	r0, [pc, #0]	; (8010c1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010c1a:	4770      	bx	lr
 8010c1c:	20000140 	.word	0x20000140

08010c20 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	b160      	cbz	r0, 8010c3e <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1e>
 8010c24:	460d      	mov	r5, r1
 8010c26:	f003 fa55 	bl	80140d4 <get_serialized_size_geometry_msgs__msg__Pose>
 8010c2a:	2108      	movs	r1, #8
 8010c2c:	182c      	adds	r4, r5, r0
 8010c2e:	f5c5 7590 	rsb	r5, r5, #288	; 0x120
 8010c32:	4620      	mov	r0, r4
 8010c34:	f7fa f81c 	bl	800ac70 <ucdr_alignment>
 8010c38:	4428      	add	r0, r5
 8010c3a:	4420      	add	r0, r4
 8010c3c:	bd38      	pop	{r3, r4, r5, pc}
 8010c3e:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x34>)
 8010c40:	4604      	mov	r4, r0
 8010c42:	221b      	movs	r2, #27
 8010c44:	2101      	movs	r1, #1
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4803      	ldr	r0, [pc, #12]	; (8010c58 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x38>)
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	f004 fa34 	bl	80150b8 <fwrite>
 8010c50:	4620      	mov	r0, r4
 8010c52:	bd38      	pop	{r3, r4, r5, pc}
 8010c54:	20000208 	.word	0x20000208
 8010c58:	0801f7a8 	.word	0x0801f7a8

08010c5c <_PoseWithCovariance__cdr_deserialize>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	460c      	mov	r4, r1
 8010c60:	b181      	cbz	r1, 8010c84 <_PoseWithCovariance__cdr_deserialize+0x28>
 8010c62:	4605      	mov	r5, r0
 8010c64:	f003 fae0 	bl	8014228 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	4621      	mov	r1, r4
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	4798      	blx	r3
 8010c74:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8010c78:	4628      	mov	r0, r5
 8010c7a:	2224      	movs	r2, #36	; 0x24
 8010c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c80:	f000 ba6c 	b.w	801115c <ucdr_deserialize_array_double>
 8010c84:	4b04      	ldr	r3, [pc, #16]	; (8010c98 <_PoseWithCovariance__cdr_deserialize+0x3c>)
 8010c86:	221b      	movs	r2, #27
 8010c88:	2101      	movs	r1, #1
 8010c8a:	4804      	ldr	r0, [pc, #16]	; (8010c9c <_PoseWithCovariance__cdr_deserialize+0x40>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	f004 fa12 	bl	80150b8 <fwrite>
 8010c94:	4620      	mov	r0, r4
 8010c96:	bd38      	pop	{r3, r4, r5, pc}
 8010c98:	20000208 	.word	0x20000208
 8010c9c:	0801f7a8 	.word	0x0801f7a8

08010ca0 <_PoseWithCovariance__cdr_serialize>:
 8010ca0:	b538      	push	{r3, r4, r5, lr}
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	b180      	cbz	r0, 8010cc8 <_PoseWithCovariance__cdr_serialize+0x28>
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	f003 fabe 	bl	8014228 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8010cac:	4603      	mov	r3, r0
 8010cae:	4620      	mov	r0, r4
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	4798      	blx	r3
 8010cb8:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	2224      	movs	r2, #36	; 0x24
 8010cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cc4:	f000 b9f6 	b.w	80110b4 <ucdr_serialize_array_double>
 8010cc8:	4b04      	ldr	r3, [pc, #16]	; (8010cdc <_PoseWithCovariance__cdr_serialize+0x3c>)
 8010cca:	221b      	movs	r2, #27
 8010ccc:	2101      	movs	r1, #1
 8010cce:	4804      	ldr	r0, [pc, #16]	; (8010ce0 <_PoseWithCovariance__cdr_serialize+0x40>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	f004 f9f0 	bl	80150b8 <fwrite>
 8010cd8:	4620      	mov	r0, r4
 8010cda:	bd38      	pop	{r3, r4, r5, pc}
 8010cdc:	20000208 	.word	0x20000208
 8010ce0:	0801f7a8 	.word	0x0801f7a8

08010ce4 <_PoseWithCovariance__max_serialized_size>:
 8010ce4:	b510      	push	{r4, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	2301      	movs	r3, #1
 8010cea:	2100      	movs	r1, #0
 8010cec:	f10d 0007 	add.w	r0, sp, #7
 8010cf0:	f88d 3007 	strb.w	r3, [sp, #7]
 8010cf4:	f003 fa8a 	bl	801420c <max_serialized_size_geometry_msgs__msg__Pose>
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	2108      	movs	r1, #8
 8010cfc:	f7f9 ffb8 	bl	800ac70 <ucdr_alignment>
 8010d00:	4420      	add	r0, r4
 8010d02:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8010d06:	b002      	add	sp, #8
 8010d08:	bd10      	pop	{r4, pc}
 8010d0a:	bf00      	nop

08010d0c <_PoseWithCovariance__get_serialized_size>:
 8010d0c:	b510      	push	{r4, lr}
 8010d0e:	b150      	cbz	r0, 8010d26 <_PoseWithCovariance__get_serialized_size+0x1a>
 8010d10:	2100      	movs	r1, #0
 8010d12:	f003 f9df 	bl	80140d4 <get_serialized_size_geometry_msgs__msg__Pose>
 8010d16:	4604      	mov	r4, r0
 8010d18:	2108      	movs	r1, #8
 8010d1a:	f7f9 ffa9 	bl	800ac70 <ucdr_alignment>
 8010d1e:	4420      	add	r0, r4
 8010d20:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8010d24:	bd10      	pop	{r4, pc}
 8010d26:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <_PoseWithCovariance__get_serialized_size+0x30>)
 8010d28:	4604      	mov	r4, r0
 8010d2a:	221b      	movs	r2, #27
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4803      	ldr	r0, [pc, #12]	; (8010d40 <_PoseWithCovariance__get_serialized_size+0x34>)
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	f004 f9c0 	bl	80150b8 <fwrite>
 8010d38:	4620      	mov	r0, r4
 8010d3a:	bd10      	pop	{r4, pc}
 8010d3c:	20000208 	.word	0x20000208
 8010d40:	0801f7a8 	.word	0x0801f7a8

08010d44 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8010d44:	b538      	push	{r3, r4, r5, lr}
 8010d46:	2301      	movs	r3, #1
 8010d48:	460c      	mov	r4, r1
 8010d4a:	7003      	strb	r3, [r0, #0]
 8010d4c:	f003 fa5e 	bl	801420c <max_serialized_size_geometry_msgs__msg__Pose>
 8010d50:	1825      	adds	r5, r4, r0
 8010d52:	f5c4 7490 	rsb	r4, r4, #288	; 0x120
 8010d56:	2108      	movs	r1, #8
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f7f9 ff89 	bl	800ac70 <ucdr_alignment>
 8010d5e:	4420      	add	r0, r4
 8010d60:	4428      	add	r0, r5
 8010d62:	bd38      	pop	{r3, r4, r5, pc}

08010d64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8010d64:	4800      	ldr	r0, [pc, #0]	; (8010d68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 8010d66:	4770      	bx	lr
 8010d68:	20000168 	.word	0x20000168

08010d6c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	b160      	cbz	r0, 8010d8a <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1e>
 8010d70:	460d      	mov	r5, r1
 8010d72:	f7f9 fa59 	bl	800a228 <get_serialized_size_geometry_msgs__msg__Twist>
 8010d76:	2108      	movs	r1, #8
 8010d78:	182c      	adds	r4, r5, r0
 8010d7a:	f5c5 7590 	rsb	r5, r5, #288	; 0x120
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f7f9 ff76 	bl	800ac70 <ucdr_alignment>
 8010d84:	4428      	add	r0, r5
 8010d86:	4420      	add	r0, r4
 8010d88:	bd38      	pop	{r3, r4, r5, pc}
 8010d8a:	4b05      	ldr	r3, [pc, #20]	; (8010da0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x34>)
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	221b      	movs	r2, #27
 8010d90:	2101      	movs	r1, #1
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4803      	ldr	r0, [pc, #12]	; (8010da4 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x38>)
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	f004 f98e 	bl	80150b8 <fwrite>
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	bd38      	pop	{r3, r4, r5, pc}
 8010da0:	20000208 	.word	0x20000208
 8010da4:	0801f7a8 	.word	0x0801f7a8

08010da8 <_TwistWithCovariance__cdr_deserialize>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	460c      	mov	r4, r1
 8010dac:	b181      	cbz	r1, 8010dd0 <_TwistWithCovariance__cdr_deserialize+0x28>
 8010dae:	4605      	mov	r5, r0
 8010db0:	f7f9 fae4 	bl	800a37c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8010db4:	4603      	mov	r3, r0
 8010db6:	4621      	mov	r1, r4
 8010db8:	4628      	mov	r0, r5
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	4798      	blx	r3
 8010dc0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	2224      	movs	r2, #36	; 0x24
 8010dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dcc:	f000 b9c6 	b.w	801115c <ucdr_deserialize_array_double>
 8010dd0:	4b04      	ldr	r3, [pc, #16]	; (8010de4 <_TwistWithCovariance__cdr_deserialize+0x3c>)
 8010dd2:	221b      	movs	r2, #27
 8010dd4:	2101      	movs	r1, #1
 8010dd6:	4804      	ldr	r0, [pc, #16]	; (8010de8 <_TwistWithCovariance__cdr_deserialize+0x40>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	f004 f96c 	bl	80150b8 <fwrite>
 8010de0:	4620      	mov	r0, r4
 8010de2:	bd38      	pop	{r3, r4, r5, pc}
 8010de4:	20000208 	.word	0x20000208
 8010de8:	0801f7a8 	.word	0x0801f7a8

08010dec <_TwistWithCovariance__cdr_serialize>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	4604      	mov	r4, r0
 8010df0:	b180      	cbz	r0, 8010e14 <_TwistWithCovariance__cdr_serialize+0x28>
 8010df2:	460d      	mov	r5, r1
 8010df4:	f7f9 fac2 	bl	800a37c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	4798      	blx	r3
 8010e04:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010e08:	4628      	mov	r0, r5
 8010e0a:	2224      	movs	r2, #36	; 0x24
 8010e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e10:	f000 b950 	b.w	80110b4 <ucdr_serialize_array_double>
 8010e14:	4b04      	ldr	r3, [pc, #16]	; (8010e28 <_TwistWithCovariance__cdr_serialize+0x3c>)
 8010e16:	221b      	movs	r2, #27
 8010e18:	2101      	movs	r1, #1
 8010e1a:	4804      	ldr	r0, [pc, #16]	; (8010e2c <_TwistWithCovariance__cdr_serialize+0x40>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	f004 f94a 	bl	80150b8 <fwrite>
 8010e24:	4620      	mov	r0, r4
 8010e26:	bd38      	pop	{r3, r4, r5, pc}
 8010e28:	20000208 	.word	0x20000208
 8010e2c:	0801f7a8 	.word	0x0801f7a8

08010e30 <_TwistWithCovariance__max_serialized_size>:
 8010e30:	b510      	push	{r4, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	2301      	movs	r3, #1
 8010e36:	2100      	movs	r1, #0
 8010e38:	f10d 0007 	add.w	r0, sp, #7
 8010e3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010e40:	f7f9 fa8e 	bl	800a360 <max_serialized_size_geometry_msgs__msg__Twist>
 8010e44:	4604      	mov	r4, r0
 8010e46:	2108      	movs	r1, #8
 8010e48:	f7f9 ff12 	bl	800ac70 <ucdr_alignment>
 8010e4c:	4420      	add	r0, r4
 8010e4e:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8010e52:	b002      	add	sp, #8
 8010e54:	bd10      	pop	{r4, pc}
 8010e56:	bf00      	nop

08010e58 <_TwistWithCovariance__get_serialized_size>:
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	b150      	cbz	r0, 8010e72 <_TwistWithCovariance__get_serialized_size+0x1a>
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	f7f9 f9e3 	bl	800a228 <get_serialized_size_geometry_msgs__msg__Twist>
 8010e62:	4604      	mov	r4, r0
 8010e64:	2108      	movs	r1, #8
 8010e66:	f7f9 ff03 	bl	800ac70 <ucdr_alignment>
 8010e6a:	4420      	add	r0, r4
 8010e6c:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8010e70:	bd10      	pop	{r4, pc}
 8010e72:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <_TwistWithCovariance__get_serialized_size+0x30>)
 8010e74:	4604      	mov	r4, r0
 8010e76:	221b      	movs	r2, #27
 8010e78:	2101      	movs	r1, #1
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4803      	ldr	r0, [pc, #12]	; (8010e8c <_TwistWithCovariance__get_serialized_size+0x34>)
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	f004 f91a 	bl	80150b8 <fwrite>
 8010e84:	4620      	mov	r0, r4
 8010e86:	bd10      	pop	{r4, pc}
 8010e88:	20000208 	.word	0x20000208
 8010e8c:	0801f7a8 	.word	0x0801f7a8

08010e90 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8010e90:	b538      	push	{r3, r4, r5, lr}
 8010e92:	2301      	movs	r3, #1
 8010e94:	460c      	mov	r4, r1
 8010e96:	7003      	strb	r3, [r0, #0]
 8010e98:	f7f9 fa62 	bl	800a360 <max_serialized_size_geometry_msgs__msg__Twist>
 8010e9c:	1825      	adds	r5, r4, r0
 8010e9e:	f5c4 7490 	rsb	r4, r4, #288	; 0x120
 8010ea2:	2108      	movs	r1, #8
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f7f9 fee3 	bl	800ac70 <ucdr_alignment>
 8010eaa:	4420      	add	r0, r4
 8010eac:	4428      	add	r0, r5
 8010eae:	bd38      	pop	{r3, r4, r5, pc}

08010eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8010eb0:	4800      	ldr	r0, [pc, #0]	; (8010eb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 8010eb2:	4770      	bx	lr
 8010eb4:	20000190 	.word	0x20000190

08010eb8 <ucdr_serialize_endian_array_char>:
 8010eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	461e      	mov	r6, r3
 8010ec0:	4690      	mov	r8, r2
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	f7f9 fe7e 	bl	800abc4 <ucdr_check_buffer_available_for>
 8010ec8:	b9e0      	cbnz	r0, 8010f04 <ucdr_serialize_endian_array_char+0x4c>
 8010eca:	4637      	mov	r7, r6
 8010ecc:	e00b      	b.n	8010ee6 <ucdr_serialize_endian_array_char+0x2e>
 8010ece:	4441      	add	r1, r8
 8010ed0:	68a0      	ldr	r0, [r4, #8]
 8010ed2:	462a      	mov	r2, r5
 8010ed4:	1b7f      	subs	r7, r7, r5
 8010ed6:	f7ef f9b3 	bl	8000240 <memcpy>
 8010eda:	68a3      	ldr	r3, [r4, #8]
 8010edc:	6920      	ldr	r0, [r4, #16]
 8010ede:	442b      	add	r3, r5
 8010ee0:	4428      	add	r0, r5
 8010ee2:	60a3      	str	r3, [r4, #8]
 8010ee4:	6120      	str	r0, [r4, #16]
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	2201      	movs	r2, #1
 8010eea:	4620      	mov	r0, r4
 8010eec:	f7f9 fef4 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 8010ef0:	1bf1      	subs	r1, r6, r7
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d1ea      	bne.n	8010ece <ucdr_serialize_endian_array_char+0x16>
 8010ef8:	2301      	movs	r3, #1
 8010efa:	7da0      	ldrb	r0, [r4, #22]
 8010efc:	7563      	strb	r3, [r4, #21]
 8010efe:	4058      	eors	r0, r3
 8010f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f04:	4632      	mov	r2, r6
 8010f06:	4641      	mov	r1, r8
 8010f08:	68a0      	ldr	r0, [r4, #8]
 8010f0a:	f7ef f999 	bl	8000240 <memcpy>
 8010f0e:	68a2      	ldr	r2, [r4, #8]
 8010f10:	6923      	ldr	r3, [r4, #16]
 8010f12:	4432      	add	r2, r6
 8010f14:	4433      	add	r3, r6
 8010f16:	60a2      	str	r2, [r4, #8]
 8010f18:	6123      	str	r3, [r4, #16]
 8010f1a:	e7ed      	b.n	8010ef8 <ucdr_serialize_endian_array_char+0x40>

08010f1c <ucdr_deserialize_endian_array_char>:
 8010f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f20:	4619      	mov	r1, r3
 8010f22:	461e      	mov	r6, r3
 8010f24:	4690      	mov	r8, r2
 8010f26:	4604      	mov	r4, r0
 8010f28:	f7f9 fe4c 	bl	800abc4 <ucdr_check_buffer_available_for>
 8010f2c:	b9e8      	cbnz	r0, 8010f6a <ucdr_deserialize_endian_array_char+0x4e>
 8010f2e:	4637      	mov	r7, r6
 8010f30:	e00c      	b.n	8010f4c <ucdr_deserialize_endian_array_char+0x30>
 8010f32:	eb08 0003 	add.w	r0, r8, r3
 8010f36:	68a1      	ldr	r1, [r4, #8]
 8010f38:	462a      	mov	r2, r5
 8010f3a:	1b7f      	subs	r7, r7, r5
 8010f3c:	f7ef f980 	bl	8000240 <memcpy>
 8010f40:	68a3      	ldr	r3, [r4, #8]
 8010f42:	6920      	ldr	r0, [r4, #16]
 8010f44:	442b      	add	r3, r5
 8010f46:	4428      	add	r0, r5
 8010f48:	60a3      	str	r3, [r4, #8]
 8010f4a:	6120      	str	r0, [r4, #16]
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	4639      	mov	r1, r7
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7f9 fec1 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 8010f56:	1bf3      	subs	r3, r6, r7
 8010f58:	4605      	mov	r5, r0
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d1e9      	bne.n	8010f32 <ucdr_deserialize_endian_array_char+0x16>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	7da0      	ldrb	r0, [r4, #22]
 8010f62:	7563      	strb	r3, [r4, #21]
 8010f64:	4058      	eors	r0, r3
 8010f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f6a:	4632      	mov	r2, r6
 8010f6c:	4640      	mov	r0, r8
 8010f6e:	68a1      	ldr	r1, [r4, #8]
 8010f70:	f7ef f966 	bl	8000240 <memcpy>
 8010f74:	68a2      	ldr	r2, [r4, #8]
 8010f76:	6923      	ldr	r3, [r4, #16]
 8010f78:	4432      	add	r2, r6
 8010f7a:	4433      	add	r3, r6
 8010f7c:	60a2      	str	r2, [r4, #8]
 8010f7e:	6123      	str	r3, [r4, #16]
 8010f80:	e7ed      	b.n	8010f5e <ucdr_deserialize_endian_array_char+0x42>
 8010f82:	bf00      	nop

08010f84 <ucdr_serialize_array_uint8_t>:
 8010f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f88:	4688      	mov	r8, r1
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4616      	mov	r6, r2
 8010f8e:	4604      	mov	r4, r0
 8010f90:	f7f9 fe18 	bl	800abc4 <ucdr_check_buffer_available_for>
 8010f94:	b9e0      	cbnz	r0, 8010fd0 <ucdr_serialize_array_uint8_t+0x4c>
 8010f96:	4637      	mov	r7, r6
 8010f98:	e00b      	b.n	8010fb2 <ucdr_serialize_array_uint8_t+0x2e>
 8010f9a:	4441      	add	r1, r8
 8010f9c:	68a0      	ldr	r0, [r4, #8]
 8010f9e:	462a      	mov	r2, r5
 8010fa0:	1b7f      	subs	r7, r7, r5
 8010fa2:	f7ef f94d 	bl	8000240 <memcpy>
 8010fa6:	68a3      	ldr	r3, [r4, #8]
 8010fa8:	6920      	ldr	r0, [r4, #16]
 8010faa:	442b      	add	r3, r5
 8010fac:	4428      	add	r0, r5
 8010fae:	60a3      	str	r3, [r4, #8]
 8010fb0:	6120      	str	r0, [r4, #16]
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f7f9 fe8e 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 8010fbc:	1bf1      	subs	r1, r6, r7
 8010fbe:	4605      	mov	r5, r0
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d1ea      	bne.n	8010f9a <ucdr_serialize_array_uint8_t+0x16>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	7da0      	ldrb	r0, [r4, #22]
 8010fc8:	7563      	strb	r3, [r4, #21]
 8010fca:	4058      	eors	r0, r3
 8010fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd0:	4632      	mov	r2, r6
 8010fd2:	4641      	mov	r1, r8
 8010fd4:	68a0      	ldr	r0, [r4, #8]
 8010fd6:	f7ef f933 	bl	8000240 <memcpy>
 8010fda:	68a3      	ldr	r3, [r4, #8]
 8010fdc:	6922      	ldr	r2, [r4, #16]
 8010fde:	4433      	add	r3, r6
 8010fe0:	4432      	add	r2, r6
 8010fe2:	60a3      	str	r3, [r4, #8]
 8010fe4:	6122      	str	r2, [r4, #16]
 8010fe6:	e7ed      	b.n	8010fc4 <ucdr_serialize_array_uint8_t+0x40>

08010fe8 <ucdr_serialize_endian_array_uint8_t>:
 8010fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fec:	4619      	mov	r1, r3
 8010fee:	461e      	mov	r6, r3
 8010ff0:	4690      	mov	r8, r2
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	f7f9 fde6 	bl	800abc4 <ucdr_check_buffer_available_for>
 8010ff8:	b9e0      	cbnz	r0, 8011034 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010ffa:	4637      	mov	r7, r6
 8010ffc:	e00b      	b.n	8011016 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8010ffe:	4441      	add	r1, r8
 8011000:	68a0      	ldr	r0, [r4, #8]
 8011002:	462a      	mov	r2, r5
 8011004:	1b7f      	subs	r7, r7, r5
 8011006:	f7ef f91b 	bl	8000240 <memcpy>
 801100a:	68a3      	ldr	r3, [r4, #8]
 801100c:	6920      	ldr	r0, [r4, #16]
 801100e:	442b      	add	r3, r5
 8011010:	4428      	add	r0, r5
 8011012:	60a3      	str	r3, [r4, #8]
 8011014:	6120      	str	r0, [r4, #16]
 8011016:	4639      	mov	r1, r7
 8011018:	2201      	movs	r2, #1
 801101a:	4620      	mov	r0, r4
 801101c:	f7f9 fe5c 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 8011020:	1bf1      	subs	r1, r6, r7
 8011022:	4605      	mov	r5, r0
 8011024:	2800      	cmp	r0, #0
 8011026:	d1ea      	bne.n	8010ffe <ucdr_serialize_endian_array_uint8_t+0x16>
 8011028:	2301      	movs	r3, #1
 801102a:	7da0      	ldrb	r0, [r4, #22]
 801102c:	7563      	strb	r3, [r4, #21]
 801102e:	4058      	eors	r0, r3
 8011030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011034:	4632      	mov	r2, r6
 8011036:	4641      	mov	r1, r8
 8011038:	68a0      	ldr	r0, [r4, #8]
 801103a:	f7ef f901 	bl	8000240 <memcpy>
 801103e:	68a2      	ldr	r2, [r4, #8]
 8011040:	6923      	ldr	r3, [r4, #16]
 8011042:	4432      	add	r2, r6
 8011044:	4433      	add	r3, r6
 8011046:	60a2      	str	r2, [r4, #8]
 8011048:	6123      	str	r3, [r4, #16]
 801104a:	e7ed      	b.n	8011028 <ucdr_serialize_endian_array_uint8_t+0x40>

0801104c <ucdr_deserialize_array_uint8_t>:
 801104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011050:	4688      	mov	r8, r1
 8011052:	4611      	mov	r1, r2
 8011054:	4616      	mov	r6, r2
 8011056:	4604      	mov	r4, r0
 8011058:	f7f9 fdb4 	bl	800abc4 <ucdr_check_buffer_available_for>
 801105c:	b9e8      	cbnz	r0, 801109a <ucdr_deserialize_array_uint8_t+0x4e>
 801105e:	4637      	mov	r7, r6
 8011060:	e00c      	b.n	801107c <ucdr_deserialize_array_uint8_t+0x30>
 8011062:	eb08 0003 	add.w	r0, r8, r3
 8011066:	68a1      	ldr	r1, [r4, #8]
 8011068:	462a      	mov	r2, r5
 801106a:	1b7f      	subs	r7, r7, r5
 801106c:	f7ef f8e8 	bl	8000240 <memcpy>
 8011070:	68a3      	ldr	r3, [r4, #8]
 8011072:	6920      	ldr	r0, [r4, #16]
 8011074:	442b      	add	r3, r5
 8011076:	4428      	add	r0, r5
 8011078:	60a3      	str	r3, [r4, #8]
 801107a:	6120      	str	r0, [r4, #16]
 801107c:	2201      	movs	r2, #1
 801107e:	4639      	mov	r1, r7
 8011080:	4620      	mov	r0, r4
 8011082:	f7f9 fe29 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 8011086:	1bf3      	subs	r3, r6, r7
 8011088:	4605      	mov	r5, r0
 801108a:	2800      	cmp	r0, #0
 801108c:	d1e9      	bne.n	8011062 <ucdr_deserialize_array_uint8_t+0x16>
 801108e:	2301      	movs	r3, #1
 8011090:	7da0      	ldrb	r0, [r4, #22]
 8011092:	7563      	strb	r3, [r4, #21]
 8011094:	4058      	eors	r0, r3
 8011096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109a:	4632      	mov	r2, r6
 801109c:	4640      	mov	r0, r8
 801109e:	68a1      	ldr	r1, [r4, #8]
 80110a0:	f7ef f8ce 	bl	8000240 <memcpy>
 80110a4:	68a3      	ldr	r3, [r4, #8]
 80110a6:	6922      	ldr	r2, [r4, #16]
 80110a8:	4433      	add	r3, r6
 80110aa:	4432      	add	r2, r6
 80110ac:	60a3      	str	r3, [r4, #8]
 80110ae:	6122      	str	r2, [r4, #16]
 80110b0:	e7ed      	b.n	801108e <ucdr_deserialize_array_uint8_t+0x42>
 80110b2:	bf00      	nop

080110b4 <ucdr_serialize_array_double>:
 80110b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b8:	4604      	mov	r4, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	2108      	movs	r1, #8
 80110be:	4616      	mov	r6, r2
 80110c0:	f7f9 fdde 	bl	800ac80 <ucdr_buffer_alignment>
 80110c4:	68a2      	ldr	r2, [r4, #8]
 80110c6:	6923      	ldr	r3, [r4, #16]
 80110c8:	7d21      	ldrb	r1, [r4, #20]
 80110ca:	4402      	add	r2, r0
 80110cc:	4418      	add	r0, r3
 80110ce:	2901      	cmp	r1, #1
 80110d0:	60a2      	str	r2, [r4, #8]
 80110d2:	6120      	str	r0, [r4, #16]
 80110d4:	d010      	beq.n	80110f8 <ucdr_serialize_array_double+0x44>
 80110d6:	b156      	cbz	r6, 80110ee <ucdr_serialize_array_double+0x3a>
 80110d8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 80110dc:	e000      	b.n	80110e0 <ucdr_serialize_array_double+0x2c>
 80110de:	7d21      	ldrb	r1, [r4, #20]
 80110e0:	4620      	mov	r0, r4
 80110e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80110e6:	f7f9 fca7 	bl	800aa38 <ucdr_serialize_endian_double>
 80110ea:	42ae      	cmp	r6, r5
 80110ec:	d1f7      	bne.n	80110de <ucdr_serialize_array_double+0x2a>
 80110ee:	7da0      	ldrb	r0, [r4, #22]
 80110f0:	f080 0001 	eor.w	r0, r0, #1
 80110f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110f8:	00f7      	lsls	r7, r6, #3
 80110fa:	4620      	mov	r0, r4
 80110fc:	4639      	mov	r1, r7
 80110fe:	f7f9 fd61 	bl	800abc4 <ucdr_check_buffer_available_for>
 8011102:	b9f8      	cbnz	r0, 8011144 <ucdr_serialize_array_double+0x90>
 8011104:	46b8      	mov	r8, r7
 8011106:	e00c      	b.n	8011122 <ucdr_serialize_array_double+0x6e>
 8011108:	4632      	mov	r2, r6
 801110a:	4429      	add	r1, r5
 801110c:	68a0      	ldr	r0, [r4, #8]
 801110e:	eba8 0806 	sub.w	r8, r8, r6
 8011112:	f7ef f895 	bl	8000240 <memcpy>
 8011116:	68a3      	ldr	r3, [r4, #8]
 8011118:	6922      	ldr	r2, [r4, #16]
 801111a:	4433      	add	r3, r6
 801111c:	4432      	add	r2, r6
 801111e:	60a3      	str	r3, [r4, #8]
 8011120:	6122      	str	r2, [r4, #16]
 8011122:	4641      	mov	r1, r8
 8011124:	2208      	movs	r2, #8
 8011126:	4620      	mov	r0, r4
 8011128:	f7f9 fdd6 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 801112c:	eba7 0108 	sub.w	r1, r7, r8
 8011130:	4606      	mov	r6, r0
 8011132:	2800      	cmp	r0, #0
 8011134:	d1e8      	bne.n	8011108 <ucdr_serialize_array_double+0x54>
 8011136:	2308      	movs	r3, #8
 8011138:	7da0      	ldrb	r0, [r4, #22]
 801113a:	7563      	strb	r3, [r4, #21]
 801113c:	f080 0001 	eor.w	r0, r0, #1
 8011140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011144:	463a      	mov	r2, r7
 8011146:	4629      	mov	r1, r5
 8011148:	68a0      	ldr	r0, [r4, #8]
 801114a:	f7ef f879 	bl	8000240 <memcpy>
 801114e:	68a2      	ldr	r2, [r4, #8]
 8011150:	6923      	ldr	r3, [r4, #16]
 8011152:	443a      	add	r2, r7
 8011154:	443b      	add	r3, r7
 8011156:	60a2      	str	r2, [r4, #8]
 8011158:	6123      	str	r3, [r4, #16]
 801115a:	e7ec      	b.n	8011136 <ucdr_serialize_array_double+0x82>

0801115c <ucdr_deserialize_array_double>:
 801115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011160:	4605      	mov	r5, r0
 8011162:	460c      	mov	r4, r1
 8011164:	2108      	movs	r1, #8
 8011166:	4616      	mov	r6, r2
 8011168:	f7f9 fd8a 	bl	800ac80 <ucdr_buffer_alignment>
 801116c:	68aa      	ldr	r2, [r5, #8]
 801116e:	692b      	ldr	r3, [r5, #16]
 8011170:	7d29      	ldrb	r1, [r5, #20]
 8011172:	4402      	add	r2, r0
 8011174:	4418      	add	r0, r3
 8011176:	2901      	cmp	r1, #1
 8011178:	60aa      	str	r2, [r5, #8]
 801117a:	6128      	str	r0, [r5, #16]
 801117c:	d010      	beq.n	80111a0 <ucdr_deserialize_array_double+0x44>
 801117e:	b156      	cbz	r6, 8011196 <ucdr_deserialize_array_double+0x3a>
 8011180:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8011184:	e000      	b.n	8011188 <ucdr_deserialize_array_double+0x2c>
 8011186:	7d29      	ldrb	r1, [r5, #20]
 8011188:	4622      	mov	r2, r4
 801118a:	3408      	adds	r4, #8
 801118c:	4628      	mov	r0, r5
 801118e:	f7f9 fcdb 	bl	800ab48 <ucdr_deserialize_endian_double>
 8011192:	42a6      	cmp	r6, r4
 8011194:	d1f7      	bne.n	8011186 <ucdr_deserialize_array_double+0x2a>
 8011196:	7da8      	ldrb	r0, [r5, #22]
 8011198:	f080 0001 	eor.w	r0, r0, #1
 801119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a0:	00f7      	lsls	r7, r6, #3
 80111a2:	4628      	mov	r0, r5
 80111a4:	4639      	mov	r1, r7
 80111a6:	f7f9 fd0d 	bl	800abc4 <ucdr_check_buffer_available_for>
 80111aa:	b9f8      	cbnz	r0, 80111ec <ucdr_deserialize_array_double+0x90>
 80111ac:	46b8      	mov	r8, r7
 80111ae:	e00c      	b.n	80111ca <ucdr_deserialize_array_double+0x6e>
 80111b0:	18e0      	adds	r0, r4, r3
 80111b2:	4632      	mov	r2, r6
 80111b4:	68a9      	ldr	r1, [r5, #8]
 80111b6:	eba8 0806 	sub.w	r8, r8, r6
 80111ba:	f7ef f841 	bl	8000240 <memcpy>
 80111be:	68ab      	ldr	r3, [r5, #8]
 80111c0:	692a      	ldr	r2, [r5, #16]
 80111c2:	4433      	add	r3, r6
 80111c4:	4432      	add	r2, r6
 80111c6:	60ab      	str	r3, [r5, #8]
 80111c8:	612a      	str	r2, [r5, #16]
 80111ca:	2208      	movs	r2, #8
 80111cc:	4641      	mov	r1, r8
 80111ce:	4628      	mov	r0, r5
 80111d0:	f7f9 fd82 	bl	800acd8 <ucdr_check_final_buffer_behavior_array>
 80111d4:	eba7 0308 	sub.w	r3, r7, r8
 80111d8:	4606      	mov	r6, r0
 80111da:	2800      	cmp	r0, #0
 80111dc:	d1e8      	bne.n	80111b0 <ucdr_deserialize_array_double+0x54>
 80111de:	2308      	movs	r3, #8
 80111e0:	7da8      	ldrb	r0, [r5, #22]
 80111e2:	756b      	strb	r3, [r5, #21]
 80111e4:	f080 0001 	eor.w	r0, r0, #1
 80111e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ec:	463a      	mov	r2, r7
 80111ee:	4620      	mov	r0, r4
 80111f0:	68a9      	ldr	r1, [r5, #8]
 80111f2:	f7ef f825 	bl	8000240 <memcpy>
 80111f6:	68aa      	ldr	r2, [r5, #8]
 80111f8:	692b      	ldr	r3, [r5, #16]
 80111fa:	443a      	add	r2, r7
 80111fc:	443b      	add	r3, r7
 80111fe:	60aa      	str	r2, [r5, #8]
 8011200:	612b      	str	r3, [r5, #16]
 8011202:	e7ec      	b.n	80111de <ucdr_deserialize_array_double+0x82>

08011204 <ucdr_serialize_string>:
 8011204:	b510      	push	{r4, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	4604      	mov	r4, r0
 801120a:	4608      	mov	r0, r1
 801120c:	9101      	str	r1, [sp, #4]
 801120e:	f7ef fa37 	bl	8000680 <strlen>
 8011212:	4602      	mov	r2, r0
 8011214:	9901      	ldr	r1, [sp, #4]
 8011216:	4620      	mov	r0, r4
 8011218:	3201      	adds	r2, #1
 801121a:	b002      	add	sp, #8
 801121c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011220:	f003 b8ea 	b.w	80143f8 <ucdr_serialize_sequence_char>

08011224 <ucdr_deserialize_string>:
 8011224:	b500      	push	{lr}
 8011226:	b083      	sub	sp, #12
 8011228:	ab01      	add	r3, sp, #4
 801122a:	f003 f8f7 	bl	801441c <ucdr_deserialize_sequence_char>
 801122e:	b003      	add	sp, #12
 8011230:	f85d fb04 	ldr.w	pc, [sp], #4

08011234 <uxr_buffer_delete_entity>:
 8011234:	b530      	push	{r4, r5, lr}
 8011236:	2403      	movs	r4, #3
 8011238:	b08f      	sub	sp, #60	; 0x3c
 801123a:	2500      	movs	r5, #0
 801123c:	9202      	str	r2, [sp, #8]
 801123e:	ab06      	add	r3, sp, #24
 8011240:	9400      	str	r4, [sp, #0]
 8011242:	2204      	movs	r2, #4
 8011244:	9501      	str	r5, [sp, #4]
 8011246:	4604      	mov	r4, r0
 8011248:	9103      	str	r1, [sp, #12]
 801124a:	f001 f847 	bl	80122dc <uxr_prepare_stream_to_write_submessage>
 801124e:	b918      	cbnz	r0, 8011258 <uxr_buffer_delete_entity+0x24>
 8011250:	4604      	mov	r4, r0
 8011252:	4620      	mov	r0, r4
 8011254:	b00f      	add	sp, #60	; 0x3c
 8011256:	bd30      	pop	{r4, r5, pc}
 8011258:	9902      	ldr	r1, [sp, #8]
 801125a:	aa05      	add	r2, sp, #20
 801125c:	4620      	mov	r0, r4
 801125e:	f001 f973 	bl	8012548 <uxr_init_base_object_request>
 8011262:	4604      	mov	r4, r0
 8011264:	a905      	add	r1, sp, #20
 8011266:	a806      	add	r0, sp, #24
 8011268:	f002 faf0 	bl	801384c <uxr_serialize_DELETE_Payload>
 801126c:	4620      	mov	r0, r4
 801126e:	b00f      	add	sp, #60	; 0x3c
 8011270:	bd30      	pop	{r4, r5, pc}
 8011272:	bf00      	nop

08011274 <uxr_common_create_entity>:
 8011274:	b510      	push	{r4, lr}
 8011276:	b08c      	sub	sp, #48	; 0x30
 8011278:	4604      	mov	r4, r0
 801127a:	9103      	str	r1, [sp, #12]
 801127c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8011280:	9202      	str	r2, [sp, #8]
 8011282:	2901      	cmp	r1, #1
 8011284:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8011288:	f04f 0101 	mov.w	r1, #1
 801128c:	bf0c      	ite	eq
 801128e:	f003 0201 	andeq.w	r2, r3, #1
 8011292:	2200      	movne	r2, #0
 8011294:	330e      	adds	r3, #14
 8011296:	9001      	str	r0, [sp, #4]
 8011298:	9100      	str	r1, [sp, #0]
 801129a:	4620      	mov	r0, r4
 801129c:	441a      	add	r2, r3
 801129e:	9903      	ldr	r1, [sp, #12]
 80112a0:	ab04      	add	r3, sp, #16
 80112a2:	b292      	uxth	r2, r2
 80112a4:	f001 f81a 	bl	80122dc <uxr_prepare_stream_to_write_submessage>
 80112a8:	b918      	cbnz	r0, 80112b2 <uxr_common_create_entity+0x3e>
 80112aa:	4604      	mov	r4, r0
 80112ac:	4620      	mov	r0, r4
 80112ae:	b00c      	add	sp, #48	; 0x30
 80112b0:	bd10      	pop	{r4, pc}
 80112b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80112b4:	4620      	mov	r0, r4
 80112b6:	9902      	ldr	r1, [sp, #8]
 80112b8:	f001 f946 	bl	8012548 <uxr_init_base_object_request>
 80112bc:	4604      	mov	r4, r0
 80112be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80112c0:	a804      	add	r0, sp, #16
 80112c2:	f002 fa2b 	bl	801371c <uxr_serialize_CREATE_Payload>
 80112c6:	4620      	mov	r0, r4
 80112c8:	b00c      	add	sp, #48	; 0x30
 80112ca:	bd10      	pop	{r4, pc}

080112cc <uxr_buffer_create_participant_xml>:
 80112cc:	b570      	push	{r4, r5, r6, lr}
 80112ce:	b092      	sub	sp, #72	; 0x48
 80112d0:	2601      	movs	r6, #1
 80112d2:	4604      	mov	r4, r0
 80112d4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80112d6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80112da:	2302      	movs	r3, #2
 80112dc:	4628      	mov	r0, r5
 80112de:	9105      	str	r1, [sp, #20]
 80112e0:	9202      	str	r2, [sp, #8]
 80112e2:	950b      	str	r5, [sp, #44]	; 0x2c
 80112e4:	ad08      	add	r5, sp, #32
 80112e6:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
 80112ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80112ee:	e9cd 1203 	strd	r1, r2, [sp, #12]
 80112f2:	f7ef f9c5 	bl	8000680 <strlen>
 80112f6:	1c43      	adds	r3, r0, #1
 80112f8:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 80112fc:	4620      	mov	r0, r4
 80112fe:	9a02      	ldr	r2, [sp, #8]
 8011300:	b29b      	uxth	r3, r3
 8011302:	9903      	ldr	r1, [sp, #12]
 8011304:	9600      	str	r6, [sp, #0]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	f7ff ffb4 	bl	8011274 <uxr_common_create_entity>
 801130c:	b012      	add	sp, #72	; 0x48
 801130e:	bd70      	pop	{r4, r5, r6, pc}

08011310 <uxr_buffer_create_topic_xml>:
 8011310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011314:	b092      	sub	sp, #72	; 0x48
 8011316:	2602      	movs	r6, #2
 8011318:	4604      	mov	r4, r0
 801131a:	4618      	mov	r0, r3
 801131c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801131e:	af08      	add	r7, sp, #32
 8011320:	9105      	str	r1, [sp, #20]
 8011322:	a90e      	add	r1, sp, #56	; 0x38
 8011324:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8011328:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
 801132c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011330:	f000 f990 	bl	8011654 <uxr_object_id_to_raw>
 8011334:	4628      	mov	r0, r5
 8011336:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 801133a:	950b      	str	r5, [sp, #44]	; 0x2c
 801133c:	f7ef f9a0 	bl	8000680 <strlen>
 8011340:	4603      	mov	r3, r0
 8011342:	4620      	mov	r0, r4
 8011344:	3301      	adds	r3, #1
 8011346:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801134a:	b29b      	uxth	r3, r3
 801134c:	e9cd 8700 	strd	r8, r7, [sp]
 8011350:	f7ff ff90 	bl	8011274 <uxr_common_create_entity>
 8011354:	b012      	add	sp, #72	; 0x48
 8011356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801135a:	bf00      	nop

0801135c <uxr_buffer_create_publisher_xml>:
 801135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801135e:	b093      	sub	sp, #76	; 0x4c
 8011360:	2703      	movs	r7, #3
 8011362:	4604      	mov	r4, r0
 8011364:	4618      	mov	r0, r3
 8011366:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011368:	ae08      	add	r6, sp, #32
 801136a:	9105      	str	r1, [sp, #20]
 801136c:	a90e      	add	r1, sp, #56	; 0x38
 801136e:	9204      	str	r2, [sp, #16]
 8011370:	9303      	str	r3, [sp, #12]
 8011372:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8011376:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 801137a:	f000 f96b 	bl	8011654 <uxr_object_id_to_raw>
 801137e:	2302      	movs	r3, #2
 8011380:	4628      	mov	r0, r5
 8011382:	950b      	str	r5, [sp, #44]	; 0x2c
 8011384:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011388:	f7ef f97a 	bl	8000680 <strlen>
 801138c:	4603      	mov	r3, r0
 801138e:	4620      	mov	r0, r4
 8011390:	3301      	adds	r3, #1
 8011392:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011396:	b29b      	uxth	r3, r3
 8011398:	e9cd 7600 	strd	r7, r6, [sp]
 801139c:	f7ff ff6a 	bl	8011274 <uxr_common_create_entity>
 80113a0:	b013      	add	sp, #76	; 0x4c
 80113a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113a4 <uxr_buffer_create_subscriber_xml>:
 80113a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113a6:	b093      	sub	sp, #76	; 0x4c
 80113a8:	2704      	movs	r7, #4
 80113aa:	4604      	mov	r4, r0
 80113ac:	4618      	mov	r0, r3
 80113ae:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80113b0:	ae08      	add	r6, sp, #32
 80113b2:	9105      	str	r1, [sp, #20]
 80113b4:	a90e      	add	r1, sp, #56	; 0x38
 80113b6:	9204      	str	r2, [sp, #16]
 80113b8:	9303      	str	r3, [sp, #12]
 80113ba:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80113be:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 80113c2:	f000 f947 	bl	8011654 <uxr_object_id_to_raw>
 80113c6:	2302      	movs	r3, #2
 80113c8:	4628      	mov	r0, r5
 80113ca:	950b      	str	r5, [sp, #44]	; 0x2c
 80113cc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80113d0:	f7ef f956 	bl	8000680 <strlen>
 80113d4:	4603      	mov	r3, r0
 80113d6:	4620      	mov	r0, r4
 80113d8:	3301      	adds	r3, #1
 80113da:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	e9cd 7600 	strd	r7, r6, [sp]
 80113e4:	f7ff ff46 	bl	8011274 <uxr_common_create_entity>
 80113e8:	b013      	add	sp, #76	; 0x4c
 80113ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113ec <uxr_buffer_create_datawriter_xml>:
 80113ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ee:	b093      	sub	sp, #76	; 0x4c
 80113f0:	2705      	movs	r7, #5
 80113f2:	4604      	mov	r4, r0
 80113f4:	4618      	mov	r0, r3
 80113f6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80113f8:	ae08      	add	r6, sp, #32
 80113fa:	9105      	str	r1, [sp, #20]
 80113fc:	a90e      	add	r1, sp, #56	; 0x38
 80113fe:	9204      	str	r2, [sp, #16]
 8011400:	9303      	str	r3, [sp, #12]
 8011402:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8011406:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 801140a:	f000 f923 	bl	8011654 <uxr_object_id_to_raw>
 801140e:	2302      	movs	r3, #2
 8011410:	4628      	mov	r0, r5
 8011412:	950b      	str	r5, [sp, #44]	; 0x2c
 8011414:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011418:	f7ef f932 	bl	8000680 <strlen>
 801141c:	4603      	mov	r3, r0
 801141e:	4620      	mov	r0, r4
 8011420:	3301      	adds	r3, #1
 8011422:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011426:	b29b      	uxth	r3, r3
 8011428:	e9cd 7600 	strd	r7, r6, [sp]
 801142c:	f7ff ff22 	bl	8011274 <uxr_common_create_entity>
 8011430:	b013      	add	sp, #76	; 0x4c
 8011432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011434 <uxr_buffer_create_datareader_xml>:
 8011434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011436:	b093      	sub	sp, #76	; 0x4c
 8011438:	2706      	movs	r7, #6
 801143a:	4604      	mov	r4, r0
 801143c:	4618      	mov	r0, r3
 801143e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011440:	ae08      	add	r6, sp, #32
 8011442:	9105      	str	r1, [sp, #20]
 8011444:	a90e      	add	r1, sp, #56	; 0x38
 8011446:	9204      	str	r2, [sp, #16]
 8011448:	9303      	str	r3, [sp, #12]
 801144a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801144e:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8011452:	f000 f8ff 	bl	8011654 <uxr_object_id_to_raw>
 8011456:	2302      	movs	r3, #2
 8011458:	4628      	mov	r0, r5
 801145a:	950b      	str	r5, [sp, #44]	; 0x2c
 801145c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011460:	f7ef f90e 	bl	8000680 <strlen>
 8011464:	4603      	mov	r3, r0
 8011466:	4620      	mov	r0, r4
 8011468:	3301      	adds	r3, #1
 801146a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801146e:	b29b      	uxth	r3, r3
 8011470:	e9cd 7600 	strd	r7, r6, [sp]
 8011474:	f7ff fefe 	bl	8011274 <uxr_common_create_entity>
 8011478:	b013      	add	sp, #76	; 0x4c
 801147a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801147c <get_custom_error>:
 801147c:	4b01      	ldr	r3, [pc, #4]	; (8011484 <get_custom_error+0x8>)
 801147e:	7818      	ldrb	r0, [r3, #0]
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	20009b10 	.word	0x20009b10

08011488 <recv_custom_msg>:
 8011488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148c:	b089      	sub	sp, #36	; 0x24
 801148e:	4604      	mov	r4, r0
 8011490:	461d      	mov	r5, r3
 8011492:	f04f 0800 	mov.w	r8, #0
 8011496:	f10d 091f 	add.w	r9, sp, #31
 801149a:	f44f 7b00 	mov.w	fp, #512	; 0x200
 801149e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8011530 <recv_custom_msg+0xa8>
 80114a2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80114a6:	f001 fe3d 	bl	8013124 <uxr_millis>
 80114aa:	f894 7200 	ldrb.w	r7, [r4, #512]	; 0x200
 80114ae:	4606      	mov	r6, r0
 80114b0:	462b      	mov	r3, r5
 80114b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114b6:	4621      	mov	r1, r4
 80114b8:	4620      	mov	r0, r4
 80114ba:	f88d 801e 	strb.w	r8, [sp, #30]
 80114be:	b9e7      	cbnz	r7, 80114fa <recv_custom_msg+0x72>
 80114c0:	f8cd 9000 	str.w	r9, [sp]
 80114c4:	f8d4 7274 	ldr.w	r7, [r4, #628]	; 0x274
 80114c8:	47b8      	blx	r7
 80114ca:	4607      	mov	r7, r0
 80114cc:	b157      	cbz	r7, 80114e4 <recv_custom_msg+0x5c>
 80114ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80114d2:	b31b      	cbz	r3, 801151c <recv_custom_msg+0x94>
 80114d4:	4b16      	ldr	r3, [pc, #88]	; (8011530 <recv_custom_msg+0xa8>)
 80114d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80114da:	701a      	strb	r2, [r3, #0]
 80114dc:	f001 fe22 	bl	8013124 <uxr_millis>
 80114e0:	2000      	movs	r0, #0
 80114e2:	e022      	b.n	801152a <recv_custom_msg+0xa2>
 80114e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80114e8:	f88a 3000 	strb.w	r3, [sl]
 80114ec:	f001 fe1a 	bl	8013124 <uxr_millis>
 80114f0:	1b80      	subs	r0, r0, r6
 80114f2:	1a2d      	subs	r5, r5, r0
 80114f4:	2d00      	cmp	r5, #0
 80114f6:	dcd6      	bgt.n	80114a6 <recv_custom_msg+0x1e>
 80114f8:	e7f2      	b.n	80114e0 <recv_custom_msg+0x58>
 80114fa:	f10d 011e 	add.w	r1, sp, #30
 80114fe:	f8cd b000 	str.w	fp, [sp]
 8011502:	4623      	mov	r3, r4
 8011504:	4622      	mov	r2, r4
 8011506:	9101      	str	r1, [sp, #4]
 8011508:	f204 2002 	addw	r0, r4, #514	; 0x202
 801150c:	e9cd 5902 	strd	r5, r9, [sp, #8]
 8011510:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8011514:	f001 fa34 	bl	8012980 <uxr_read_framed_msg>
 8011518:	4607      	mov	r7, r0
 801151a:	e7d7      	b.n	80114cc <recv_custom_msg+0x44>
 801151c:	9b05      	ldr	r3, [sp, #20]
 801151e:	601f      	str	r7, [r3, #0]
 8011520:	9b04      	ldr	r3, [sp, #16]
 8011522:	601c      	str	r4, [r3, #0]
 8011524:	f001 fdfe 	bl	8013124 <uxr_millis>
 8011528:	2001      	movs	r0, #1
 801152a:	b009      	add	sp, #36	; 0x24
 801152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011530:	20009b10 	.word	0x20009b10

08011534 <send_custom_msg>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	f890 6200 	ldrb.w	r6, [r0, #512]	; 0x200
 801153a:	b086      	sub	sp, #24
 801153c:	4605      	mov	r5, r0
 801153e:	4614      	mov	r4, r2
 8011540:	b99e      	cbnz	r6, 801156a <send_custom_msg+0x36>
 8011542:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8011546:	f10d 0317 	add.w	r3, sp, #23
 801154a:	47a8      	blx	r5
 801154c:	1b04      	subs	r4, r0, r4
 801154e:	fab4 f484 	clz	r4, r4
 8011552:	0964      	lsrs	r4, r4, #5
 8011554:	2800      	cmp	r0, #0
 8011556:	bf14      	ite	ne
 8011558:	4620      	movne	r0, r4
 801155a:	2000      	moveq	r0, #0
 801155c:	b918      	cbnz	r0, 8011566 <send_custom_msg+0x32>
 801155e:	4b0a      	ldr	r3, [pc, #40]	; (8011588 <send_custom_msg+0x54>)
 8011560:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011564:	701a      	strb	r2, [r3, #0]
 8011566:	b006      	add	sp, #24
 8011568:	bd70      	pop	{r4, r5, r6, pc}
 801156a:	f10d 0217 	add.w	r2, sp, #23
 801156e:	460b      	mov	r3, r1
 8011570:	2100      	movs	r1, #0
 8011572:	9400      	str	r4, [sp, #0]
 8011574:	9202      	str	r2, [sp, #8]
 8011576:	4602      	mov	r2, r0
 8011578:	9101      	str	r1, [sp, #4]
 801157a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801157e:	f8d5 1270 	ldr.w	r1, [r5, #624]	; 0x270
 8011582:	f001 f817 	bl	80125b4 <uxr_write_framed_msg>
 8011586:	e7e1      	b.n	801154c <send_custom_msg+0x18>
 8011588:	20009b10 	.word	0x20009b10

0801158c <uxr_set_custom_transport_callbacks>:
 801158c:	b430      	push	{r4, r5}
 801158e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8011592:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8011596:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801159a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801159e:	bc30      	pop	{r4, r5}
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop

080115a4 <uxr_init_custom_transport>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80115aa:	b1f3      	cbz	r3, 80115ea <uxr_init_custom_transport+0x46>
 80115ac:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80115b0:	4604      	mov	r4, r0
 80115b2:	b1d2      	cbz	r2, 80115ea <uxr_init_custom_transport+0x46>
 80115b4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80115b8:	b1ba      	cbz	r2, 80115ea <uxr_init_custom_transport+0x46>
 80115ba:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80115be:	b1a2      	cbz	r2, 80115ea <uxr_init_custom_transport+0x46>
 80115c0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80115c4:	4798      	blx	r3
 80115c6:	4605      	mov	r5, r0
 80115c8:	b178      	cbz	r0, 80115ea <uxr_init_custom_transport+0x46>
 80115ca:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80115ce:	b97b      	cbnz	r3, 80115f0 <uxr_init_custom_transport+0x4c>
 80115d0:	480a      	ldr	r0, [pc, #40]	; (80115fc <uxr_init_custom_transport+0x58>)
 80115d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115d6:	490a      	ldr	r1, [pc, #40]	; (8011600 <uxr_init_custom_transport+0x5c>)
 80115d8:	4a0a      	ldr	r2, [pc, #40]	; (8011604 <uxr_init_custom_transport+0x60>)
 80115da:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80115de:	e9c4 409e 	strd	r4, r0, [r4, #632]	; 0x278
 80115e2:	e9c4 12a0 	strd	r1, r2, [r4, #640]	; 0x280
 80115e6:	4628      	mov	r0, r5
 80115e8:	bd38      	pop	{r3, r4, r5, pc}
 80115ea:	2500      	movs	r5, #0
 80115ec:	4628      	mov	r0, r5
 80115ee:	bd38      	pop	{r3, r4, r5, pc}
 80115f0:	2100      	movs	r1, #0
 80115f2:	f204 2002 	addw	r0, r4, #514	; 0x202
 80115f6:	f000 ffd7 	bl	80125a8 <uxr_init_framing_io>
 80115fa:	e7e9      	b.n	80115d0 <uxr_init_custom_transport+0x2c>
 80115fc:	08011535 	.word	0x08011535
 8011600:	08011489 	.word	0x08011489
 8011604:	0801147d 	.word	0x0801147d

08011608 <uxr_close_custom_transport>:
 8011608:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801160c:	4718      	bx	r3
 801160e:	bf00      	nop

08011610 <uxr_object_id>:
 8011610:	b082      	sub	sp, #8
 8011612:	2300      	movs	r3, #0
 8011614:	f88d 1006 	strb.w	r1, [sp, #6]
 8011618:	f360 030f 	bfi	r3, r0, #0, #16
 801161c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011620:	f362 431f 	bfi	r3, r2, #16, #16
 8011624:	4618      	mov	r0, r3
 8011626:	b002      	add	sp, #8
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop

0801162c <uxr_object_id_from_raw>:
 801162c:	7843      	ldrb	r3, [r0, #1]
 801162e:	b082      	sub	sp, #8
 8011630:	7800      	ldrb	r0, [r0, #0]
 8011632:	2200      	movs	r2, #0
 8011634:	0919      	lsrs	r1, r3, #4
 8011636:	f003 030f 	and.w	r3, r3, #15
 801163a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801163e:	f88d 3006 	strb.w	r3, [sp, #6]
 8011642:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011646:	f361 020f 	bfi	r2, r1, #0, #16
 801164a:	f363 421f 	bfi	r2, r3, #16, #16
 801164e:	4610      	mov	r0, r2
 8011650:	b002      	add	sp, #8
 8011652:	4770      	bx	lr

08011654 <uxr_object_id_to_raw>:
 8011654:	4602      	mov	r2, r0
 8011656:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801165a:	b410      	push	{r4}
 801165c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011660:	b083      	sub	sp, #12
 8011662:	f3c2 140b 	ubfx	r4, r2, #4, #12
 8011666:	7048      	strb	r0, [r1, #1]
 8011668:	700c      	strb	r4, [r1, #0]
 801166a:	b003      	add	sp, #12
 801166c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop

08011674 <uxr_buffer_request_data>:
 8011674:	b530      	push	{r4, r5, lr}
 8011676:	b095      	sub	sp, #84	; 0x54
 8011678:	4604      	mov	r4, r0
 801167a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801167c:	9105      	str	r1, [sp, #20]
 801167e:	2100      	movs	r1, #0
 8011680:	2d00      	cmp	r5, #0
 8011682:	9204      	str	r2, [sp, #16]
 8011684:	9303      	str	r3, [sp, #12]
 8011686:	bf14      	ite	ne
 8011688:	2201      	movne	r2, #1
 801168a:	460a      	moveq	r2, r1
 801168c:	f88d 301c 	strb.w	r3, [sp, #28]
 8011690:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8011694:	f88d 101d 	strb.w	r1, [sp, #29]
 8011698:	f88d 101e 	strb.w	r1, [sp, #30]
 801169c:	d021      	beq.n	80116e2 <uxr_buffer_request_data+0x6e>
 801169e:	6869      	ldr	r1, [r5, #4]
 80116a0:	2210      	movs	r2, #16
 80116a2:	682b      	ldr	r3, [r5, #0]
 80116a4:	f8cd 102a 	str.w	r1, [sp, #42]	; 0x2a
 80116a8:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80116ac:	2000      	movs	r0, #0
 80116ae:	2108      	movs	r1, #8
 80116b0:	ab0c      	add	r3, sp, #48	; 0x30
 80116b2:	e9cd 1000 	strd	r1, r0, [sp]
 80116b6:	4620      	mov	r0, r4
 80116b8:	9905      	ldr	r1, [sp, #20]
 80116ba:	f000 fe0f 	bl	80122dc <uxr_prepare_stream_to_write_submessage>
 80116be:	b918      	cbnz	r0, 80116c8 <uxr_buffer_request_data+0x54>
 80116c0:	4604      	mov	r4, r0
 80116c2:	4620      	mov	r0, r4
 80116c4:	b015      	add	sp, #84	; 0x54
 80116c6:	bd30      	pop	{r4, r5, pc}
 80116c8:	9904      	ldr	r1, [sp, #16]
 80116ca:	aa06      	add	r2, sp, #24
 80116cc:	4620      	mov	r0, r4
 80116ce:	f000 ff3b 	bl	8012548 <uxr_init_base_object_request>
 80116d2:	4604      	mov	r4, r0
 80116d4:	a906      	add	r1, sp, #24
 80116d6:	a80c      	add	r0, sp, #48	; 0x30
 80116d8:	f002 f916 	bl	8013908 <uxr_serialize_READ_DATA_Payload>
 80116dc:	4620      	mov	r0, r4
 80116de:	b015      	add	sp, #84	; 0x54
 80116e0:	bd30      	pop	{r4, r5, pc}
 80116e2:	2208      	movs	r2, #8
 80116e4:	e7e2      	b.n	80116ac <uxr_buffer_request_data+0x38>
 80116e6:	bf00      	nop

080116e8 <read_submessage_format>:
 80116e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116ec:	b095      	sub	sp, #84	; 0x54
 80116ee:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 80116f2:	b113      	cbz	r3, 80116fa <read_submessage_format+0x12>
 80116f4:	b015      	add	sp, #84	; 0x54
 80116f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116fa:	460c      	mov	r4, r1
 80116fc:	4690      	mov	r8, r2
 80116fe:	461d      	mov	r5, r3
 8011700:	4606      	mov	r6, r0
 8011702:	a80c      	add	r0, sp, #48	; 0x30
 8011704:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011708:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 801170c:	1a52      	subs	r2, r2, r1
 801170e:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8011712:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 8011716:	f7f9 faa7 	bl	800ac68 <ucdr_init_buffer>
 801171a:	a80c      	add	r0, sp, #48	; 0x30
 801171c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011720:	f7f9 fa78 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 8011724:	69e3      	ldr	r3, [r4, #28]
 8011726:	b17b      	cbz	r3, 8011748 <read_submessage_format+0x60>
 8011728:	2f07      	cmp	r7, #7
 801172a:	751d      	strb	r5, [r3, #20]
 801172c:	d03a      	beq.n	80117a4 <read_submessage_format+0xbc>
 801172e:	2f08      	cmp	r7, #8
 8011730:	d029      	beq.n	8011786 <read_submessage_format+0x9e>
 8011732:	2f06      	cmp	r7, #6
 8011734:	d00e      	beq.n	8011754 <read_submessage_format+0x6c>
 8011736:	2201      	movs	r2, #1
 8011738:	751a      	strb	r2, [r3, #20]
 801173a:	4641      	mov	r1, r8
 801173c:	4620      	mov	r0, r4
 801173e:	f7f9 fae9 	bl	800ad14 <ucdr_advance_buffer>
 8011742:	b015      	add	sp, #84	; 0x54
 8011744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011748:	2f07      	cmp	r7, #7
 801174a:	d02b      	beq.n	80117a4 <read_submessage_format+0xbc>
 801174c:	2f08      	cmp	r7, #8
 801174e:	d01a      	beq.n	8011786 <read_submessage_format+0x9e>
 8011750:	2f06      	cmp	r7, #6
 8011752:	d1f2      	bne.n	801173a <read_submessage_format+0x52>
 8011754:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 8011758:	b195      	cbz	r5, 8011780 <read_submessage_format+0x98>
 801175a:	2106      	movs	r1, #6
 801175c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8011760:	464a      	mov	r2, r9
 8011762:	4630      	mov	r0, r6
 8011764:	f88d 1016 	strb.w	r1, [sp, #22]
 8011768:	a90c      	add	r1, sp, #48	; 0x30
 801176a:	9302      	str	r3, [sp, #8]
 801176c:	9100      	str	r1, [sp, #0]
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	9905      	ldr	r1, [sp, #20]
 8011772:	f8cd 8004 	str.w	r8, [sp, #4]
 8011776:	47a8      	blx	r5
 8011778:	2201      	movs	r2, #1
 801177a:	69e3      	ldr	r3, [r4, #28]
 801177c:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1d8      	bne.n	8011736 <read_submessage_format+0x4e>
 8011784:	e7d9      	b.n	801173a <read_submessage_format+0x52>
 8011786:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 801178a:	2a00      	cmp	r2, #0
 801178c:	d0f8      	beq.n	8011780 <read_submessage_format+0x98>
 801178e:	a80c      	add	r0, sp, #48	; 0x30
 8011790:	a906      	add	r1, sp, #24
 8011792:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011794:	f002 f986 	bl	8013aa4 <uxr_deserialize_SampleIdentity>
 8011798:	2800      	cmp	r0, #0
 801179a:	d13c      	bne.n	8011816 <read_submessage_format+0x12e>
 801179c:	69e3      	ldr	r3, [r4, #28]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1c9      	bne.n	8011736 <read_submessage_format+0x4e>
 80117a2:	e7ca      	b.n	801173a <read_submessage_format+0x52>
 80117a4:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 80117a8:	b132      	cbz	r2, 80117b8 <read_submessage_format+0xd0>
 80117aa:	a906      	add	r1, sp, #24
 80117ac:	a80c      	add	r0, sp, #48	; 0x30
 80117ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80117b0:	f001 ff5e 	bl	8013670 <uxr_deserialize_BaseObjectRequest>
 80117b4:	b930      	cbnz	r0, 80117c4 <read_submessage_format+0xdc>
 80117b6:	69e3      	ldr	r3, [r4, #28]
 80117b8:	68a2      	ldr	r2, [r4, #8]
 80117ba:	4442      	add	r2, r8
 80117bc:	60a2      	str	r2, [r4, #8]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1b9      	bne.n	8011736 <read_submessage_format+0x4e>
 80117c2:	e7ba      	b.n	801173a <read_submessage_format+0x52>
 80117c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80117c6:	a80c      	add	r0, sp, #48	; 0x30
 80117c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80117ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117cc:	1aed      	subs	r5, r5, r3
 80117ce:	1a52      	subs	r2, r2, r1
 80117d0:	4445      	add	r5, r8
 80117d2:	f7f9 fa49 	bl	800ac68 <ucdr_init_buffer>
 80117d6:	a80c      	add	r0, sp, #48	; 0x30
 80117d8:	b2ad      	uxth	r5, r5
 80117da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80117de:	f7f9 fa19 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 80117e2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80117e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80117ea:	2107      	movs	r1, #7
 80117ec:	f8d6 70b0 	ldr.w	r7, [r6, #176]	; 0xb0
 80117f0:	464a      	mov	r2, r9
 80117f2:	f88d 1016 	strb.w	r1, [sp, #22]
 80117f6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80117fa:	a90c      	add	r1, sp, #48	; 0x30
 80117fc:	9501      	str	r5, [sp, #4]
 80117fe:	b29b      	uxth	r3, r3
 8011800:	9702      	str	r7, [sp, #8]
 8011802:	9100      	str	r1, [sp, #0]
 8011804:	4630      	mov	r0, r6
 8011806:	9905      	ldr	r1, [sp, #20]
 8011808:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 801180c:	47a8      	blx	r5
 801180e:	2301      	movs	r3, #1
 8011810:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8011814:	e7cf      	b.n	80117b6 <read_submessage_format+0xce>
 8011816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011818:	a80c      	add	r0, sp, #48	; 0x30
 801181a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801181c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801181e:	1aed      	subs	r5, r5, r3
 8011820:	1a52      	subs	r2, r2, r1
 8011822:	4445      	add	r5, r8
 8011824:	f7f9 fa20 	bl	800ac68 <ucdr_init_buffer>
 8011828:	a80c      	add	r0, sp, #48	; 0x30
 801182a:	b2ad      	uxth	r5, r5
 801182c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011830:	f7f9 f9f0 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 8011834:	2208      	movs	r2, #8
 8011836:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 801183a:	a90c      	add	r1, sp, #48	; 0x30
 801183c:	f88d 2016 	strb.w	r2, [sp, #22]
 8011840:	ab06      	add	r3, sp, #24
 8011842:	9100      	str	r1, [sp, #0]
 8011844:	464a      	mov	r2, r9
 8011846:	9501      	str	r5, [sp, #4]
 8011848:	4630      	mov	r0, r6
 801184a:	9702      	str	r7, [sp, #8]
 801184c:	9905      	ldr	r1, [sp, #20]
 801184e:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 8011852:	47a8      	blx	r5
 8011854:	2301      	movs	r3, #1
 8011856:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801185a:	e79f      	b.n	801179c <read_submessage_format+0xb4>

0801185c <on_get_fragmentation_info>:
 801185c:	b500      	push	{lr}
 801185e:	b08b      	sub	sp, #44	; 0x2c
 8011860:	4601      	mov	r1, r0
 8011862:	2204      	movs	r2, #4
 8011864:	a802      	add	r0, sp, #8
 8011866:	f7f9 f9ff 	bl	800ac68 <ucdr_init_buffer>
 801186a:	f10d 0305 	add.w	r3, sp, #5
 801186e:	a802      	add	r0, sp, #8
 8011870:	f10d 0206 	add.w	r2, sp, #6
 8011874:	a901      	add	r1, sp, #4
 8011876:	f001 fc29 	bl	80130cc <uxr_read_submessage_header>
 801187a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801187e:	2b0d      	cmp	r3, #13
 8011880:	d003      	beq.n	801188a <on_get_fragmentation_info+0x2e>
 8011882:	2000      	movs	r0, #0
 8011884:	b00b      	add	sp, #44	; 0x2c
 8011886:	f85d fb04 	ldr.w	pc, [sp], #4
 801188a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801188e:	f013 0f02 	tst.w	r3, #2
 8011892:	bf14      	ite	ne
 8011894:	2002      	movne	r0, #2
 8011896:	2001      	moveq	r0, #1
 8011898:	b00b      	add	sp, #44	; 0x2c
 801189a:	f85d fb04 	ldr.w	pc, [sp], #4
 801189e:	bf00      	nop

080118a0 <write_submessage_acknack.isra.0>:
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	b092      	sub	sp, #72	; 0x48
 80118a4:	4605      	mov	r5, r0
 80118a6:	460e      	mov	r6, r1
 80118a8:	4614      	mov	r4, r2
 80118aa:	f000 fe45 	bl	8012538 <uxr_session_header_offset>
 80118ae:	4603      	mov	r3, r0
 80118b0:	a905      	add	r1, sp, #20
 80118b2:	a80a      	add	r0, sp, #40	; 0x28
 80118b4:	9300      	str	r3, [sp, #0]
 80118b6:	2211      	movs	r2, #17
 80118b8:	2300      	movs	r3, #0
 80118ba:	f7f9 f9c3 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 80118be:	2218      	movs	r2, #24
 80118c0:	2300      	movs	r3, #0
 80118c2:	a80a      	add	r0, sp, #40	; 0x28
 80118c4:	fb02 5404 	mla	r4, r2, r4, r5
 80118c8:	210a      	movs	r1, #10
 80118ca:	2205      	movs	r2, #5
 80118cc:	3450      	adds	r4, #80	; 0x50
 80118ce:	f001 fbe3 	bl	8013098 <uxr_buffer_submessage_header>
 80118d2:	a903      	add	r1, sp, #12
 80118d4:	4620      	mov	r0, r4
 80118d6:	f002 ff69 	bl	80147ac <uxr_compute_acknack>
 80118da:	4603      	mov	r3, r0
 80118dc:	a903      	add	r1, sp, #12
 80118de:	a80a      	add	r0, sp, #40	; 0x28
 80118e0:	ba5b      	rev16	r3, r3
 80118e2:	f88d 6010 	strb.w	r6, [sp, #16]
 80118e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80118ea:	f002 f833 	bl	8013954 <uxr_serialize_ACKNACK_Payload>
 80118ee:	2200      	movs	r2, #0
 80118f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118f2:	4628      	mov	r0, r5
 80118f4:	4611      	mov	r1, r2
 80118f6:	f000 fdc9 	bl	801248c <uxr_stamp_session_header>
 80118fa:	a80a      	add	r0, sp, #40	; 0x28
 80118fc:	f7f9 f9e4 	bl	800acc8 <ucdr_buffer_length>
 8011900:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011902:	4602      	mov	r2, r0
 8011904:	a905      	add	r1, sp, #20
 8011906:	e9d3 0400 	ldrd	r0, r4, [r3]
 801190a:	47a0      	blx	r4
 801190c:	b012      	add	sp, #72	; 0x48
 801190e:	bd70      	pop	{r4, r5, r6, pc}

08011910 <read_submessage_list>:
 8011910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011914:	4604      	mov	r4, r0
 8011916:	b09b      	sub	sp, #108	; 0x6c
 8011918:	460d      	mov	r5, r1
 801191a:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8011c20 <read_submessage_list+0x310>
 801191e:	920d      	str	r2, [sp, #52]	; 0x34
 8011920:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
 8011924:	aa10      	add	r2, sp, #64	; 0x40
 8011926:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 801192a:	4628      	mov	r0, r5
 801192c:	f001 fbce 	bl	80130cc <uxr_read_submessage_header>
 8011930:	2800      	cmp	r0, #0
 8011932:	f000 810a 	beq.w	8011b4a <read_submessage_list+0x23a>
 8011936:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801193a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 801193e:	3b04      	subs	r3, #4
 8011940:	2b0b      	cmp	r3, #11
 8011942:	d8ed      	bhi.n	8011920 <read_submessage_list+0x10>
 8011944:	a101      	add	r1, pc, #4	; (adr r1, 801194c <read_submessage_list+0x3c>)
 8011946:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801194a:	bf00      	nop
 801194c:	08011b3b 	.word	0x08011b3b
 8011950:	08011b2f 	.word	0x08011b2f
 8011954:	08011921 	.word	0x08011921
 8011958:	08011921 	.word	0x08011921
 801195c:	08011921 	.word	0x08011921
 8011960:	08011a8f 	.word	0x08011a8f
 8011964:	08011a1f 	.word	0x08011a1f
 8011968:	080119dd 	.word	0x080119dd
 801196c:	08011921 	.word	0x08011921
 8011970:	08011921 	.word	0x08011921
 8011974:	08011921 	.word	0x08011921
 8011978:	0801197d 	.word	0x0801197d
 801197c:	a914      	add	r1, sp, #80	; 0x50
 801197e:	4628      	mov	r0, r5
 8011980:	f002 f83c 	bl	80139fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011984:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8011988:	f1b8 0f00 	cmp.w	r8, #0
 801198c:	f000 810d 	beq.w	8011baa <read_submessage_list+0x29a>
 8011990:	f001 fbe4 	bl	801315c <uxr_nanos>
 8011994:	2700      	movs	r7, #0
 8011996:	460b      	mov	r3, r1
 8011998:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801199a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801199c:	f04f 0b00 	mov.w	fp, #0
 80119a0:	4602      	mov	r2, r0
 80119a2:	4620      	mov	r0, r4
 80119a4:	fbc9 6701 	smlal	r6, r7, r9, r1
 80119a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80119aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80119ae:	460e      	mov	r6, r1
 80119b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80119b2:	2700      	movs	r7, #0
 80119b4:	468a      	mov	sl, r1
 80119b6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80119b8:	fbc9 6701 	smlal	r6, r7, r9, r1
 80119bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80119be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80119c2:	fbc9 ab01 	smlal	sl, fp, r9, r1
 80119c6:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 80119ca:	e9cd ab00 	strd	sl, fp, [sp]
 80119ce:	9606      	str	r6, [sp, #24]
 80119d0:	47c0      	blx	r8
 80119d2:	f04f 0301 	mov.w	r3, #1
 80119d6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80119da:	e7a1      	b.n	8011920 <read_submessage_list+0x10>
 80119dc:	a914      	add	r1, sp, #80	; 0x50
 80119de:	4628      	mov	r0, r5
 80119e0:	f001 fff8 	bl	80139d4 <uxr_deserialize_HEARTBEAT_Payload>
 80119e4:	2100      	movs	r1, #0
 80119e6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80119ea:	f001 fa49 	bl	8012e80 <uxr_stream_id_from_raw>
 80119ee:	4603      	mov	r3, r0
 80119f0:	f104 0008 	add.w	r0, r4, #8
 80119f4:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80119f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80119fa:	4631      	mov	r1, r6
 80119fc:	f001 fb2a 	bl	8013054 <uxr_get_input_reliable_stream>
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d08d      	beq.n	8011920 <read_submessage_list+0x10>
 8011a04:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8011a08:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8011a0c:	f002 fec2 	bl	8014794 <uxr_process_heartbeat>
 8011a10:	4632      	mov	r2, r6
 8011a12:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8011a16:	4620      	mov	r0, r4
 8011a18:	f7ff ff42 	bl	80118a0 <write_submessage_acknack.isra.0>
 8011a1c:	e780      	b.n	8011920 <read_submessage_list+0x10>
 8011a1e:	a914      	add	r1, sp, #80	; 0x50
 8011a20:	4628      	mov	r0, r5
 8011a22:	f001 ffaf 	bl	8013984 <uxr_deserialize_ACKNACK_Payload>
 8011a26:	2100      	movs	r1, #0
 8011a28:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8011a2c:	f001 fa28 	bl	8012e80 <uxr_stream_id_from_raw>
 8011a30:	4603      	mov	r3, r0
 8011a32:	f104 0008 	add.w	r0, r4, #8
 8011a36:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8011a3c:	f001 faf4 	bl	8013028 <uxr_get_output_reliable_stream>
 8011a40:	4606      	mov	r6, r0
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f43f af6c 	beq.w	8011920 <read_submessage_list+0x10>
 8011a48:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8011a4c:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8011a50:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 8011a54:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8011a58:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011a5c:	b289      	uxth	r1, r1
 8011a5e:	f003 fa1b 	bl	8014e98 <uxr_process_acknack>
 8011a62:	4630      	mov	r0, r6
 8011a64:	f003 f9dc 	bl	8014e20 <uxr_begin_output_nack_buffer_it>
 8011a68:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8011a6c:	e005      	b.n	8011a7a <read_submessage_list+0x16a>
 8011a6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011a72:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011a74:	e9d3 0700 	ldrd	r0, r7, [r3]
 8011a78:	47b8      	blx	r7
 8011a7a:	f10d 0342 	add.w	r3, sp, #66	; 0x42
 8011a7e:	aa13      	add	r2, sp, #76	; 0x4c
 8011a80:	4641      	mov	r1, r8
 8011a82:	4630      	mov	r0, r6
 8011a84:	f003 f9ce 	bl	8014e24 <uxr_next_reliable_nack_buffer_to_send>
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	d1f0      	bne.n	8011a6e <read_submessage_list+0x15e>
 8011a8c:	e748      	b.n	8011920 <read_submessage_list+0x10>
 8011a8e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8011a92:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8011a96:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8011aa0:	4641      	mov	r1, r8
 8011aa2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8011aa6:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
 8011aaa:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8011aae:	f89d 703f 	ldrb.w	r7, [sp, #63]	; 0x3f
 8011ab2:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8011ab6:	3e04      	subs	r6, #4
 8011ab8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8011abc:	f001 fdd8 	bl	8013670 <uxr_deserialize_BaseObjectRequest>
 8011ac0:	4640      	mov	r0, r8
 8011ac2:	a913      	add	r1, sp, #76	; 0x4c
 8011ac4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8011ac8:	f007 070e 	and.w	r7, r7, #14
 8011acc:	f000 fd5a 	bl	8012584 <uxr_parse_base_object_request>
 8011ad0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011ad2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8011ad6:	b2b6      	uxth	r6, r6
 8011ad8:	f8bd 8042 	ldrh.w	r8, [sp, #66]	; 0x42
 8011adc:	9114      	str	r1, [sp, #80]	; 0x50
 8011ade:	f1ba 0f00 	cmp.w	sl, #0
 8011ae2:	d006      	beq.n	8011af2 <read_submessage_list+0x1e2>
 8011ae4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8011ae8:	2300      	movs	r3, #0
 8011aea:	4642      	mov	r2, r8
 8011aec:	9000      	str	r0, [sp, #0]
 8011aee:	4620      	mov	r0, r4
 8011af0:	47d0      	blx	sl
 8011af2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011af4:	b168      	cbz	r0, 8011b12 <read_submessage_list+0x202>
 8011af6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011af8:	2300      	movs	r3, #0
 8011afa:	3902      	subs	r1, #2
 8011afc:	e002      	b.n	8011b04 <read_submessage_list+0x1f4>
 8011afe:	3301      	adds	r3, #1
 8011b00:	4283      	cmp	r3, r0
 8011b02:	d006      	beq.n	8011b12 <read_submessage_list+0x202>
 8011b04:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8011b08:	4542      	cmp	r2, r8
 8011b0a:	d1f8      	bne.n	8011afe <read_submessage_list+0x1ee>
 8011b0c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8011b0e:	2100      	movs	r1, #0
 8011b10:	54d1      	strb	r1, [r2, r3]
 8011b12:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8011b16:	4632      	mov	r2, r6
 8011b18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011b1a:	463b      	mov	r3, r7
 8011b1c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011b1e:	9102      	str	r1, [sp, #8]
 8011b20:	4629      	mov	r1, r5
 8011b22:	9001      	str	r0, [sp, #4]
 8011b24:	4620      	mov	r0, r4
 8011b26:	9600      	str	r6, [sp, #0]
 8011b28:	f7ff fdde 	bl	80116e8 <read_submessage_format>
 8011b2c:	e6f8      	b.n	8011920 <read_submessage_list+0x10>
 8011b2e:	b97a      	cbnz	r2, 8011b50 <read_submessage_list+0x240>
 8011b30:	4629      	mov	r1, r5
 8011b32:	4620      	mov	r0, r4
 8011b34:	f000 fc78 	bl	8012428 <uxr_read_delete_session_status>
 8011b38:	e6f2      	b.n	8011920 <read_submessage_list+0x10>
 8011b3a:	2a00      	cmp	r2, #0
 8011b3c:	f47f aef0 	bne.w	8011920 <read_submessage_list+0x10>
 8011b40:	4629      	mov	r1, r5
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 fc62 	bl	801240c <uxr_read_create_session_status>
 8011b48:	e6ea      	b.n	8011920 <read_submessage_list+0x10>
 8011b4a:	b01b      	add	sp, #108	; 0x6c
 8011b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b50:	a914      	add	r1, sp, #80	; 0x50
 8011b52:	4628      	mov	r0, r5
 8011b54:	f001 feba 	bl	80138cc <uxr_deserialize_STATUS_Payload>
 8011b58:	a912      	add	r1, sp, #72	; 0x48
 8011b5a:	aa11      	add	r2, sp, #68	; 0x44
 8011b5c:	a814      	add	r0, sp, #80	; 0x50
 8011b5e:	f000 fd11 	bl	8012584 <uxr_parse_base_object_request>
 8011b62:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b64:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8011b68:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 8011b6c:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8011b70:	9113      	str	r1, [sp, #76]	; 0x4c
 8011b72:	b136      	cbz	r6, 8011b82 <read_submessage_list+0x272>
 8011b74:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8011b78:	4643      	mov	r3, r8
 8011b7a:	463a      	mov	r2, r7
 8011b7c:	9000      	str	r0, [sp, #0]
 8011b7e:	4620      	mov	r0, r4
 8011b80:	47b0      	blx	r6
 8011b82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f43f aecb 	beq.w	8011920 <read_submessage_list+0x10>
 8011b8a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	3802      	subs	r0, #2
 8011b90:	e003      	b.n	8011b9a <read_submessage_list+0x28a>
 8011b92:	3101      	adds	r1, #1
 8011b94:	4299      	cmp	r1, r3
 8011b96:	f43f aec3 	beq.w	8011920 <read_submessage_list+0x10>
 8011b9a:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8011b9e:	42ba      	cmp	r2, r7
 8011ba0:	d1f7      	bne.n	8011b92 <read_submessage_list+0x282>
 8011ba2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011ba4:	f803 8001 	strb.w	r8, [r3, r1]
 8011ba8:	e6ba      	b.n	8011920 <read_submessage_list+0x10>
 8011baa:	f001 fad7 	bl	801315c <uxr_nanos>
 8011bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011bb0:	2700      	movs	r7, #0
 8011bb2:	f04f 0b00 	mov.w	fp, #0
 8011bb6:	4692      	mov	sl, r2
 8011bb8:	e9dd 3618 	ldrd	r3, r6, [sp, #96]	; 0x60
 8011bbc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011bc0:	fbc9 6703 	smlal	r6, r7, r9, r3
 8011bc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bc6:	1830      	adds	r0, r6, r0
 8011bc8:	f04f 0b00 	mov.w	fp, #0
 8011bcc:	469a      	mov	sl, r3
 8011bce:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011bd0:	eb47 0101 	adc.w	r1, r7, r1
 8011bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011bd6:	fbc9 ab06 	smlal	sl, fp, r9, r6
 8011bda:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8011bde:	fbc9 7803 	smlal	r7, r8, r9, r3
 8011be2:	eb17 020a 	adds.w	r2, r7, sl
 8011be6:	eb48 030b 	adc.w	r3, r8, fp
 8011bea:	1a82      	subs	r2, r0, r2
 8011bec:	eb61 0303 	sbc.w	r3, r1, r3
 8011bf0:	9208      	str	r2, [sp, #32]
 8011bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8011bf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	f173 0100 	sbcs.w	r1, r3, #0
 8011bfe:	da05      	bge.n	8011c0c <read_submessage_list+0x2fc>
 8011c00:	1c53      	adds	r3, r2, #1
 8011c02:	9308      	str	r3, [sp, #32]
 8011c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c06:	f143 0300 	adc.w	r3, r3, #0
 8011c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c10:	0843      	lsrs	r3, r0, #1
 8011c12:	104a      	asrs	r2, r1, #1
 8011c14:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8011c18:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8011c1c:	e6d9      	b.n	80119d2 <read_submessage_list+0xc2>
 8011c1e:	bf00      	nop
 8011c20:	3b9aca00 	.word	0x3b9aca00

08011c24 <read_message>:
 8011c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c28:	b090      	sub	sp, #64	; 0x40
 8011c2a:	4606      	mov	r6, r0
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	f10d 0316 	add.w	r3, sp, #22
 8011c32:	aa05      	add	r2, sp, #20
 8011c34:	f000 fc40 	bl	80124b8 <uxr_read_session_header>
 8011c38:	b910      	cbnz	r0, 8011c40 <read_message+0x1c>
 8011c3a:	b010      	add	sp, #64	; 0x40
 8011c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c40:	2100      	movs	r1, #0
 8011c42:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8011c46:	f001 f91b 	bl	8012e80 <uxr_stream_id_from_raw>
 8011c4a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011c4e:	f8bd 9016 	ldrh.w	r9, [sp, #22]
 8011c52:	fa5f f880 	uxtb.w	r8, r0
 8011c56:	2f01      	cmp	r7, #1
 8011c58:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011c5c:	9007      	str	r0, [sp, #28]
 8011c5e:	d041      	beq.n	8011ce4 <read_message+0xc0>
 8011c60:	2f02      	cmp	r7, #2
 8011c62:	d00b      	beq.n	8011c7c <read_message+0x58>
 8011c64:	2f00      	cmp	r7, #0
 8011c66:	d1e8      	bne.n	8011c3a <read_message+0x16>
 8011c68:	4639      	mov	r1, r7
 8011c6a:	4638      	mov	r0, r7
 8011c6c:	f001 f908 	bl	8012e80 <uxr_stream_id_from_raw>
 8011c70:	4629      	mov	r1, r5
 8011c72:	4602      	mov	r2, r0
 8011c74:	4630      	mov	r0, r6
 8011c76:	f7ff fe4b 	bl	8011910 <read_submessage_list>
 8011c7a:	e7de      	b.n	8011c3a <read_message+0x16>
 8011c7c:	4621      	mov	r1, r4
 8011c7e:	f106 0008 	add.w	r0, r6, #8
 8011c82:	f001 f9e7 	bl	8013054 <uxr_get_input_reliable_stream>
 8011c86:	4682      	mov	sl, r0
 8011c88:	b330      	cbz	r0, 8011cd8 <read_message+0xb4>
 8011c8a:	68aa      	ldr	r2, [r5, #8]
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	9203      	str	r2, [sp, #12]
 8011c90:	f7f9 f81e 	bl	800acd0 <ucdr_buffer_remaining>
 8011c94:	4603      	mov	r3, r0
 8011c96:	f10d 0015 	add.w	r0, sp, #21
 8011c9a:	9a03      	ldr	r2, [sp, #12]
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	9000      	str	r0, [sp, #0]
 8011ca0:	4650      	mov	r0, sl
 8011ca2:	f002 fc73 	bl	801458c <uxr_receive_reliable_message>
 8011ca6:	b1b8      	cbz	r0, 8011cd8 <read_message+0xb4>
 8011ca8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8011cac:	b393      	cbz	r3, 8011d14 <read_message+0xf0>
 8011cae:	2502      	movs	r5, #2
 8011cb0:	e008      	b.n	8011cc4 <read_message+0xa0>
 8011cb2:	f88d 801c 	strb.w	r8, [sp, #28]
 8011cb6:	f88d 401d 	strb.w	r4, [sp, #29]
 8011cba:	f88d 501e 	strb.w	r5, [sp, #30]
 8011cbe:	9a07      	ldr	r2, [sp, #28]
 8011cc0:	f7ff fe26 	bl	8011910 <read_submessage_list>
 8011cc4:	a908      	add	r1, sp, #32
 8011cc6:	2204      	movs	r2, #4
 8011cc8:	4650      	mov	r0, sl
 8011cca:	f002 fce3 	bl	8014694 <uxr_next_input_reliable_buffer_available>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	a908      	add	r1, sp, #32
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d1ec      	bne.n	8011cb2 <read_message+0x8e>
 8011cd8:	4622      	mov	r2, r4
 8011cda:	4641      	mov	r1, r8
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f7ff fddf 	bl	80118a0 <write_submessage_acknack.isra.0>
 8011ce2:	e7aa      	b.n	8011c3a <read_message+0x16>
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	f106 0008 	add.w	r0, r6, #8
 8011cea:	f001 f9a9 	bl	8013040 <uxr_get_input_best_effort_stream>
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d0a3      	beq.n	8011c3a <read_message+0x16>
 8011cf2:	4649      	mov	r1, r9
 8011cf4:	f002 fbc6 	bl	8014484 <uxr_receive_best_effort_message>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d09e      	beq.n	8011c3a <read_message+0x16>
 8011cfc:	f88d 801c 	strb.w	r8, [sp, #28]
 8011d00:	4629      	mov	r1, r5
 8011d02:	f88d 401d 	strb.w	r4, [sp, #29]
 8011d06:	4630      	mov	r0, r6
 8011d08:	f88d 701e 	strb.w	r7, [sp, #30]
 8011d0c:	9a07      	ldr	r2, [sp, #28]
 8011d0e:	f7ff fdff 	bl	8011910 <read_submessage_list>
 8011d12:	e792      	b.n	8011c3a <read_message+0x16>
 8011d14:	f88d 801c 	strb.w	r8, [sp, #28]
 8011d18:	4629      	mov	r1, r5
 8011d1a:	f88d 401d 	strb.w	r4, [sp, #29]
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f88d 701e 	strb.w	r7, [sp, #30]
 8011d24:	9a07      	ldr	r2, [sp, #28]
 8011d26:	f7ff fdf3 	bl	8011910 <read_submessage_list>
 8011d2a:	e7c0      	b.n	8011cae <read_message+0x8a>

08011d2c <listen_message_reliably>:
 8011d2c:	1e0b      	subs	r3, r1, #0
 8011d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d32:	bfb8      	it	lt
 8011d34:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011d38:	b095      	sub	sp, #84	; 0x54
 8011d3a:	4683      	mov	fp, r0
 8011d3c:	9303      	str	r3, [sp, #12]
 8011d3e:	f001 f9f1 	bl	8013124 <uxr_millis>
 8011d42:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8011d46:	4607      	mov	r7, r0
 8011d48:	4688      	mov	r8, r1
 8011d4a:	2a00      	cmp	r2, #0
 8011d4c:	f000 8094 	beq.w	8011e78 <listen_message_reliably+0x14c>
 8011d50:	2600      	movs	r6, #0
 8011d52:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011d56:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	e00d      	b.n	8011d7a <listen_message_reliably+0x4e>
 8011d5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011d62:	3601      	adds	r6, #1
 8011d64:	454a      	cmp	r2, r9
 8011d66:	b2f0      	uxtb	r0, r6
 8011d68:	eb73 010a 	sbcs.w	r1, r3, sl
 8011d6c:	da01      	bge.n	8011d72 <listen_message_reliably+0x46>
 8011d6e:	4691      	mov	r9, r2
 8011d70:	469a      	mov	sl, r3
 8011d72:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8011d76:	4283      	cmp	r3, r0
 8011d78:	d95c      	bls.n	8011e34 <listen_message_reliably+0x108>
 8011d7a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011d7e:	2201      	movs	r2, #1
 8011d80:	2102      	movs	r1, #2
 8011d82:	00e4      	lsls	r4, r4, #3
 8011d84:	f001 f852 	bl	8012e2c <uxr_stream_id>
 8011d88:	4601      	mov	r1, r0
 8011d8a:	f104 0520 	add.w	r5, r4, #32
 8011d8e:	4643      	mov	r3, r8
 8011d90:	463a      	mov	r2, r7
 8011d92:	9104      	str	r1, [sp, #16]
 8011d94:	445d      	add	r5, fp
 8011d96:	4628      	mov	r0, r5
 8011d98:	f002 ffe4 	bl	8014d64 <uxr_update_output_stream_heartbeat_timestamp>
 8011d9c:	eb0b 0304 	add.w	r3, fp, r4
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d0dc      	beq.n	8011d5e <listen_message_reliably+0x32>
 8011da4:	f89d 5011 	ldrb.w	r5, [sp, #17]
 8011da8:	4658      	mov	r0, fp
 8011daa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8011dae:	445c      	add	r4, fp
 8011db0:	3501      	adds	r5, #1
 8011db2:	3601      	adds	r6, #1
 8011db4:	9302      	str	r3, [sp, #8]
 8011db6:	f000 fbbf 	bl	8012538 <uxr_session_header_offset>
 8011dba:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	2211      	movs	r2, #17
 8011dc2:	a907      	add	r1, sp, #28
 8011dc4:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8011dc8:	9000      	str	r0, [sp, #0]
 8011dca:	a80c      	add	r0, sp, #48	; 0x30
 8011dcc:	f7f8 ff3a 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	2205      	movs	r2, #5
 8011dd4:	210b      	movs	r1, #11
 8011dd6:	a80c      	add	r0, sp, #48	; 0x30
 8011dd8:	f001 f95e 	bl	8013098 <uxr_buffer_submessage_header>
 8011ddc:	2101      	movs	r1, #1
 8011dde:	8968      	ldrh	r0, [r5, #10]
 8011de0:	f003 f8b8 	bl	8014f54 <uxr_seq_num_add>
 8011de4:	892a      	ldrh	r2, [r5, #8]
 8011de6:	4603      	mov	r3, r0
 8011de8:	9d02      	ldr	r5, [sp, #8]
 8011dea:	a905      	add	r1, sp, #20
 8011dec:	a80c      	add	r0, sp, #48	; 0x30
 8011dee:	f88d 5018 	strb.w	r5, [sp, #24]
 8011df2:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011df6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011dfa:	f001 fdd7 	bl	80139ac <uxr_serialize_HEARTBEAT_Payload>
 8011dfe:	2200      	movs	r2, #0
 8011e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e02:	4658      	mov	r0, fp
 8011e04:	4611      	mov	r1, r2
 8011e06:	f000 fb41 	bl	801248c <uxr_stamp_session_header>
 8011e0a:	a80c      	add	r0, sp, #48	; 0x30
 8011e0c:	f7f8 ff5c 	bl	800acc8 <ucdr_buffer_length>
 8011e10:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8011e14:	4602      	mov	r2, r0
 8011e16:	a907      	add	r1, sp, #28
 8011e18:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011e1c:	47a8      	blx	r5
 8011e1e:	b2f0      	uxtb	r0, r6
 8011e20:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011e24:	454a      	cmp	r2, r9
 8011e26:	eb73 010a 	sbcs.w	r1, r3, sl
 8011e2a:	dba0      	blt.n	8011d6e <listen_message_reliably+0x42>
 8011e2c:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8011e30:	4283      	cmp	r3, r0
 8011e32:	d8a2      	bhi.n	8011d7a <listen_message_reliably+0x4e>
 8011e34:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8011e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e3c:	45a2      	cmp	sl, r4
 8011e3e:	bf08      	it	eq
 8011e40:	4599      	cmpeq	r9, r3
 8011e42:	d019      	beq.n	8011e78 <listen_message_reliably+0x14c>
 8011e44:	eba9 0307 	sub.w	r3, r9, r7
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	9d03      	ldr	r5, [sp, #12]
 8011e4c:	f8db 0070 	ldr.w	r0, [fp, #112]	; 0x70
 8011e50:	aa07      	add	r2, sp, #28
 8011e52:	bf08      	it	eq
 8011e54:	2301      	moveq	r3, #1
 8011e56:	a905      	add	r1, sp, #20
 8011e58:	6884      	ldr	r4, [r0, #8]
 8011e5a:	429d      	cmp	r5, r3
 8011e5c:	6800      	ldr	r0, [r0, #0]
 8011e5e:	bfa8      	it	ge
 8011e60:	461d      	movge	r5, r3
 8011e62:	462b      	mov	r3, r5
 8011e64:	47a0      	blx	r4
 8011e66:	b948      	cbnz	r0, 8011e7c <listen_message_reliably+0x150>
 8011e68:	9b03      	ldr	r3, [sp, #12]
 8011e6a:	1b5b      	subs	r3, r3, r5
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	9303      	str	r3, [sp, #12]
 8011e70:	f73f af65 	bgt.w	8011d3e <listen_message_reliably+0x12>
 8011e74:	4604      	mov	r4, r0
 8011e76:	e00b      	b.n	8011e90 <listen_message_reliably+0x164>
 8011e78:	9b03      	ldr	r3, [sp, #12]
 8011e7a:	e7e5      	b.n	8011e48 <listen_message_reliably+0x11c>
 8011e7c:	9905      	ldr	r1, [sp, #20]
 8011e7e:	4604      	mov	r4, r0
 8011e80:	9a07      	ldr	r2, [sp, #28]
 8011e82:	a80c      	add	r0, sp, #48	; 0x30
 8011e84:	f7f8 fef0 	bl	800ac68 <ucdr_init_buffer>
 8011e88:	a90c      	add	r1, sp, #48	; 0x30
 8011e8a:	4658      	mov	r0, fp
 8011e8c:	f7ff feca 	bl	8011c24 <read_message>
 8011e90:	4620      	mov	r0, r4
 8011e92:	b015      	add	sp, #84	; 0x54
 8011e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e98 <uxr_init_session>:
 8011e98:	b5d0      	push	{r4, r6, r7, lr}
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	2600      	movs	r6, #0
 8011e9e:	2700      	movs	r7, #0
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8011ea6:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8011eaa:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8011eae:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8011eb2:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8011eb6:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8011eba:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8011ebe:	2181      	movs	r1, #129	; 0x81
 8011ec0:	f000 fa50 	bl	8012364 <uxr_init_session_info>
 8011ec4:	f104 0008 	add.w	r0, r4, #8
 8011ec8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8011ecc:	f001 b804 	b.w	8012ed8 <uxr_init_stream_storage>

08011ed0 <uxr_set_status_callback>:
 8011ed0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop

08011ed8 <uxr_set_topic_callback>:
 8011ed8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop

08011ee0 <uxr_set_request_callback>:
 8011ee0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop

08011ee8 <uxr_set_reply_callback>:
 8011ee8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop

08011ef0 <uxr_create_session>:
 8011ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	b09d      	sub	sp, #116	; 0x74
 8011ef6:	3008      	adds	r0, #8
 8011ef8:	260a      	movs	r6, #10
 8011efa:	f000 fff7 	bl	8012eec <uxr_reset_stream_storage>
 8011efe:	4620      	mov	r0, r4
 8011f00:	f000 fb1a 	bl	8012538 <uxr_session_header_offset>
 8011f04:	4603      	mov	r3, r0
 8011f06:	a905      	add	r1, sp, #20
 8011f08:	a80c      	add	r0, sp, #48	; 0x30
 8011f0a:	221c      	movs	r2, #28
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	2300      	movs	r3, #0
 8011f10:	f7f8 fe98 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8011f14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011f16:	4620      	mov	r0, r4
 8011f18:	a90c      	add	r1, sp, #48	; 0x30
 8011f1a:	8a1a      	ldrh	r2, [r3, #16]
 8011f1c:	3a04      	subs	r2, #4
 8011f1e:	b292      	uxth	r2, r2
 8011f20:	f000 fa32 	bl	8012388 <uxr_buffer_create_session>
 8011f24:	4620      	mov	r0, r4
 8011f26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f28:	f000 fa9c 	bl	8012464 <uxr_stamp_create_session_header>
 8011f2c:	a80c      	add	r0, sp, #48	; 0x30
 8011f2e:	f7f8 fecb 	bl	800acc8 <ucdr_buffer_length>
 8011f32:	23ff      	movs	r3, #255	; 0xff
 8011f34:	4605      	mov	r5, r0
 8011f36:	7163      	strb	r3, [r4, #5]
 8011f38:	e004      	b.n	8011f44 <uxr_create_session+0x54>
 8011f3a:	3e01      	subs	r6, #1
 8011f3c:	7960      	ldrb	r0, [r4, #5]
 8011f3e:	d01d      	beq.n	8011f7c <uxr_create_session+0x8c>
 8011f40:	28ff      	cmp	r0, #255	; 0xff
 8011f42:	d11b      	bne.n	8011f7c <uxr_create_session+0x8c>
 8011f44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011f46:	462a      	mov	r2, r5
 8011f48:	a905      	add	r1, sp, #20
 8011f4a:	e9d3 0700 	ldrd	r0, r7, [r3]
 8011f4e:	47b8      	blx	r7
 8011f50:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011f56:	aa04      	add	r2, sp, #16
 8011f58:	6887      	ldr	r7, [r0, #8]
 8011f5a:	a903      	add	r1, sp, #12
 8011f5c:	6800      	ldr	r0, [r0, #0]
 8011f5e:	47b8      	blx	r7
 8011f60:	2800      	cmp	r0, #0
 8011f62:	d0ea      	beq.n	8011f3a <uxr_create_session+0x4a>
 8011f64:	9a04      	ldr	r2, [sp, #16]
 8011f66:	a814      	add	r0, sp, #80	; 0x50
 8011f68:	9903      	ldr	r1, [sp, #12]
 8011f6a:	f7f8 fe7d 	bl	800ac68 <ucdr_init_buffer>
 8011f6e:	4620      	mov	r0, r4
 8011f70:	a914      	add	r1, sp, #80	; 0x50
 8011f72:	f7ff fe57 	bl	8011c24 <read_message>
 8011f76:	3e01      	subs	r6, #1
 8011f78:	7960      	ldrb	r0, [r4, #5]
 8011f7a:	d1e1      	bne.n	8011f40 <uxr_create_session+0x50>
 8011f7c:	fab0 f080 	clz	r0, r0
 8011f80:	0940      	lsrs	r0, r0, #5
 8011f82:	b01d      	add	sp, #116	; 0x74
 8011f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f86:	bf00      	nop

08011f88 <uxr_delete_session>:
 8011f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f8a:	b099      	sub	sp, #100	; 0x64
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	f000 fad3 	bl	8012538 <uxr_session_header_offset>
 8011f92:	4602      	mov	r2, r0
 8011f94:	2300      	movs	r3, #0
 8011f96:	a904      	add	r1, sp, #16
 8011f98:	a808      	add	r0, sp, #32
 8011f9a:	9200      	str	r2, [sp, #0]
 8011f9c:	2210      	movs	r2, #16
 8011f9e:	260a      	movs	r6, #10
 8011fa0:	f7f8 fe50 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8011fa4:	a908      	add	r1, sp, #32
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 fa14 	bl	80123d4 <uxr_buffer_delete_session>
 8011fac:	2200      	movs	r2, #0
 8011fae:	9b08      	ldr	r3, [sp, #32]
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	f000 fa6a 	bl	801248c <uxr_stamp_session_header>
 8011fb8:	a808      	add	r0, sp, #32
 8011fba:	f7f8 fe85 	bl	800acc8 <ucdr_buffer_length>
 8011fbe:	23ff      	movs	r3, #255	; 0xff
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	7163      	strb	r3, [r4, #5]
 8011fc4:	e004      	b.n	8011fd0 <uxr_delete_session+0x48>
 8011fc6:	3e01      	subs	r6, #1
 8011fc8:	7960      	ldrb	r0, [r4, #5]
 8011fca:	d01d      	beq.n	8012008 <uxr_delete_session+0x80>
 8011fcc:	28ff      	cmp	r0, #255	; 0xff
 8011fce:	d11b      	bne.n	8012008 <uxr_delete_session+0x80>
 8011fd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011fd2:	462a      	mov	r2, r5
 8011fd4:	a904      	add	r1, sp, #16
 8011fd6:	e9d3 0700 	ldrd	r0, r7, [r3]
 8011fda:	47b8      	blx	r7
 8011fdc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011fe2:	aa03      	add	r2, sp, #12
 8011fe4:	6887      	ldr	r7, [r0, #8]
 8011fe6:	a902      	add	r1, sp, #8
 8011fe8:	6800      	ldr	r0, [r0, #0]
 8011fea:	47b8      	blx	r7
 8011fec:	2800      	cmp	r0, #0
 8011fee:	d0ea      	beq.n	8011fc6 <uxr_delete_session+0x3e>
 8011ff0:	9a03      	ldr	r2, [sp, #12]
 8011ff2:	a810      	add	r0, sp, #64	; 0x40
 8011ff4:	9902      	ldr	r1, [sp, #8]
 8011ff6:	f7f8 fe37 	bl	800ac68 <ucdr_init_buffer>
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	a910      	add	r1, sp, #64	; 0x40
 8011ffe:	f7ff fe11 	bl	8011c24 <read_message>
 8012002:	3e01      	subs	r6, #1
 8012004:	7960      	ldrb	r0, [r4, #5]
 8012006:	d1e1      	bne.n	8011fcc <uxr_delete_session+0x44>
 8012008:	fab0 f080 	clz	r0, r0
 801200c:	0940      	lsrs	r0, r0, #5
 801200e:	b019      	add	sp, #100	; 0x64
 8012010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012012:	bf00      	nop

08012014 <uxr_create_output_best_effort_stream>:
 8012014:	b510      	push	{r4, lr}
 8012016:	4604      	mov	r4, r0
 8012018:	b084      	sub	sp, #16
 801201a:	e9cd 2100 	strd	r2, r1, [sp]
 801201e:	f000 fa8b 	bl	8012538 <uxr_session_header_offset>
 8012022:	4603      	mov	r3, r0
 8012024:	f104 0008 	add.w	r0, r4, #8
 8012028:	e9dd 2100 	ldrd	r2, r1, [sp]
 801202c:	b004      	add	sp, #16
 801202e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012032:	f000 bf97 	b.w	8012f64 <uxr_add_output_best_effort_buffer>
 8012036:	bf00      	nop

08012038 <uxr_create_output_reliable_stream>:
 8012038:	b530      	push	{r4, r5, lr}
 801203a:	b089      	sub	sp, #36	; 0x24
 801203c:	4604      	mov	r4, r0
 801203e:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012042:	9303      	str	r3, [sp, #12]
 8012044:	f000 fa78 	bl	8012538 <uxr_session_header_offset>
 8012048:	4605      	mov	r5, r0
 801204a:	9905      	ldr	r1, [sp, #20]
 801204c:	f104 0008 	add.w	r0, r4, #8
 8012050:	9500      	str	r5, [sp, #0]
 8012052:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012056:	f000 ff97 	bl	8012f88 <uxr_add_output_reliable_buffer>
 801205a:	2200      	movs	r2, #0
 801205c:	b2c5      	uxtb	r5, r0
 801205e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012062:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012066:	0e03      	lsrs	r3, r0, #24
 8012068:	f365 0207 	bfi	r2, r5, #0, #8
 801206c:	f364 220f 	bfi	r2, r4, #8, #8
 8012070:	f361 4217 	bfi	r2, r1, #16, #8
 8012074:	f363 621f 	bfi	r2, r3, #24, #8
 8012078:	4610      	mov	r0, r2
 801207a:	b009      	add	sp, #36	; 0x24
 801207c:	bd30      	pop	{r4, r5, pc}
 801207e:	bf00      	nop

08012080 <uxr_create_input_best_effort_stream>:
 8012080:	b082      	sub	sp, #8
 8012082:	3008      	adds	r0, #8
 8012084:	b002      	add	sp, #8
 8012086:	f000 bf99 	b.w	8012fbc <uxr_add_input_best_effort_buffer>
 801208a:	bf00      	nop

0801208c <uxr_create_input_reliable_stream>:
 801208c:	b530      	push	{r4, r5, lr}
 801208e:	4c0c      	ldr	r4, [pc, #48]	; (80120c0 <uxr_create_input_reliable_stream+0x34>)
 8012090:	b085      	sub	sp, #20
 8012092:	3008      	adds	r0, #8
 8012094:	9400      	str	r4, [sp, #0]
 8012096:	f000 ffa7 	bl	8012fe8 <uxr_add_input_reliable_buffer>
 801209a:	2200      	movs	r2, #0
 801209c:	b2c5      	uxtb	r5, r0
 801209e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80120a2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80120a6:	0e03      	lsrs	r3, r0, #24
 80120a8:	f365 0207 	bfi	r2, r5, #0, #8
 80120ac:	f364 220f 	bfi	r2, r4, #8, #8
 80120b0:	f361 4217 	bfi	r2, r1, #16, #8
 80120b4:	f363 621f 	bfi	r2, r3, #24, #8
 80120b8:	4610      	mov	r0, r2
 80120ba:	b005      	add	sp, #20
 80120bc:	bd30      	pop	{r4, r5, pc}
 80120be:	bf00      	nop
 80120c0:	0801185d 	.word	0x0801185d

080120c4 <uxr_flash_output_streams>:
 80120c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c8:	7e03      	ldrb	r3, [r0, #24]
 80120ca:	b084      	sub	sp, #16
 80120cc:	4604      	mov	r4, r0
 80120ce:	b1fb      	cbz	r3, 8012110 <uxr_flash_output_streams+0x4c>
 80120d0:	f04f 0900 	mov.w	r9, #0
 80120d4:	f10d 0802 	add.w	r8, sp, #2
 80120d8:	af03      	add	r7, sp, #12
 80120da:	ae02      	add	r6, sp, #8
 80120dc:	4648      	mov	r0, r9
 80120de:	2201      	movs	r2, #1
 80120e0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80120e4:	4611      	mov	r1, r2
 80120e6:	3508      	adds	r5, #8
 80120e8:	f000 fea0 	bl	8012e2c <uxr_stream_id>
 80120ec:	4684      	mov	ip, r0
 80120ee:	4643      	mov	r3, r8
 80120f0:	4628      	mov	r0, r5
 80120f2:	463a      	mov	r2, r7
 80120f4:	4631      	mov	r1, r6
 80120f6:	f8cd c004 	str.w	ip, [sp, #4]
 80120fa:	f002 fbe1 	bl	80148c0 <uxr_prepare_best_effort_buffer_to_send>
 80120fe:	2800      	cmp	r0, #0
 8012100:	d13d      	bne.n	801217e <uxr_flash_output_streams+0xba>
 8012102:	f109 0901 	add.w	r9, r9, #1
 8012106:	7e23      	ldrb	r3, [r4, #24]
 8012108:	fa5f f089 	uxtb.w	r0, r9
 801210c:	4283      	cmp	r3, r0
 801210e:	d8e6      	bhi.n	80120de <uxr_flash_output_streams+0x1a>
 8012110:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012114:	b383      	cbz	r3, 8012178 <uxr_flash_output_streams+0xb4>
 8012116:	f04f 0900 	mov.w	r9, #0
 801211a:	f10d 0802 	add.w	r8, sp, #2
 801211e:	af03      	add	r7, sp, #12
 8012120:	ae02      	add	r6, sp, #8
 8012122:	4648      	mov	r0, r9
 8012124:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012128:	2201      	movs	r2, #1
 801212a:	2102      	movs	r1, #2
 801212c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012130:	f000 fe7c 	bl	8012e2c <uxr_stream_id>
 8012134:	9001      	str	r0, [sp, #4]
 8012136:	3520      	adds	r5, #32
 8012138:	e00c      	b.n	8012154 <uxr_flash_output_streams+0x90>
 801213a:	9b02      	ldr	r3, [sp, #8]
 801213c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012140:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012144:	f000 f9a2 	bl	801248c <uxr_stamp_session_header>
 8012148:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801214a:	9a03      	ldr	r2, [sp, #12]
 801214c:	9902      	ldr	r1, [sp, #8]
 801214e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012152:	47d0      	blx	sl
 8012154:	4643      	mov	r3, r8
 8012156:	463a      	mov	r2, r7
 8012158:	4631      	mov	r1, r6
 801215a:	4628      	mov	r0, r5
 801215c:	f002 fdbc 	bl	8014cd8 <uxr_prepare_next_reliable_buffer_to_send>
 8012160:	4603      	mov	r3, r0
 8012162:	4620      	mov	r0, r4
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1e8      	bne.n	801213a <uxr_flash_output_streams+0x76>
 8012168:	f109 0901 	add.w	r9, r9, #1
 801216c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012170:	fa5f f089 	uxtb.w	r0, r9
 8012174:	4283      	cmp	r3, r0
 8012176:	d8d5      	bhi.n	8012124 <uxr_flash_output_streams+0x60>
 8012178:	b004      	add	sp, #16
 801217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801217e:	9b02      	ldr	r3, [sp, #8]
 8012180:	4620      	mov	r0, r4
 8012182:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012186:	f109 0901 	add.w	r9, r9, #1
 801218a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801218e:	f000 f97d 	bl	801248c <uxr_stamp_session_header>
 8012192:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012194:	9a03      	ldr	r2, [sp, #12]
 8012196:	9902      	ldr	r1, [sp, #8]
 8012198:	e9d3 0500 	ldrd	r0, r5, [r3]
 801219c:	47a8      	blx	r5
 801219e:	7e23      	ldrb	r3, [r4, #24]
 80121a0:	fa5f f089 	uxtb.w	r0, r9
 80121a4:	4283      	cmp	r3, r0
 80121a6:	d89a      	bhi.n	80120de <uxr_flash_output_streams+0x1a>
 80121a8:	e7b2      	b.n	8012110 <uxr_flash_output_streams+0x4c>
 80121aa:	bf00      	nop

080121ac <uxr_run_session_until_data>:
 80121ac:	b570      	push	{r4, r5, r6, lr}
 80121ae:	4604      	mov	r4, r0
 80121b0:	460d      	mov	r5, r1
 80121b2:	f000 ffb7 	bl	8013124 <uxr_millis>
 80121b6:	4606      	mov	r6, r0
 80121b8:	4620      	mov	r0, r4
 80121ba:	f7ff ff83 	bl	80120c4 <uxr_flash_output_streams>
 80121be:	2300      	movs	r3, #0
 80121c0:	429d      	cmp	r5, r3
 80121c2:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80121c6:	dd12      	ble.n	80121ee <uxr_run_session_until_data+0x42>
 80121c8:	4629      	mov	r1, r5
 80121ca:	e005      	b.n	80121d8 <uxr_run_session_until_data+0x2c>
 80121cc:	f000 ffaa 	bl	8013124 <uxr_millis>
 80121d0:	1b83      	subs	r3, r0, r6
 80121d2:	1ae9      	subs	r1, r5, r3
 80121d4:	2900      	cmp	r1, #0
 80121d6:	dd07      	ble.n	80121e8 <uxr_run_session_until_data+0x3c>
 80121d8:	4620      	mov	r0, r4
 80121da:	f7ff fda7 	bl	8011d2c <listen_message_reliably>
 80121de:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d0f2      	beq.n	80121cc <uxr_run_session_until_data+0x20>
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
 80121e8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
 80121ee:	4618      	mov	r0, r3
 80121f0:	bd70      	pop	{r4, r5, r6, pc}
 80121f2:	bf00      	nop

080121f4 <uxr_run_session_until_confirm_delivery>:
 80121f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f6:	4605      	mov	r5, r0
 80121f8:	460e      	mov	r6, r1
 80121fa:	2400      	movs	r4, #0
 80121fc:	f7ff ff62 	bl	80120c4 <uxr_flash_output_streams>
 8012200:	f105 0708 	add.w	r7, r5, #8
 8012204:	e005      	b.n	8012212 <uxr_run_session_until_confirm_delivery+0x1e>
 8012206:	b964      	cbnz	r4, 8012222 <uxr_run_session_until_confirm_delivery+0x2e>
 8012208:	f7ff fd90 	bl	8011d2c <listen_message_reliably>
 801220c:	f080 0001 	eor.w	r0, r0, #1
 8012210:	b2c4      	uxtb	r4, r0
 8012212:	4638      	mov	r0, r7
 8012214:	f000 ff2a 	bl	801306c <uxr_output_streams_confirmed>
 8012218:	4603      	mov	r3, r0
 801221a:	4631      	mov	r1, r6
 801221c:	4628      	mov	r0, r5
 801221e:	2b00      	cmp	r3, #0
 8012220:	d0f1      	beq.n	8012206 <uxr_run_session_until_confirm_delivery+0x12>
 8012222:	4638      	mov	r0, r7
 8012224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012228:	f000 bf20 	b.w	801306c <uxr_output_streams_confirmed>

0801222c <uxr_run_session_until_all_status>:
 801222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012230:	b083      	sub	sp, #12
 8012232:	468a      	mov	sl, r1
 8012234:	4693      	mov	fp, r2
 8012236:	4680      	mov	r8, r0
 8012238:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801223c:	9301      	str	r3, [sp, #4]
 801223e:	f7ff ff41 	bl	80120c4 <uxr_flash_output_streams>
 8012242:	f1b9 0f00 	cmp.w	r9, #0
 8012246:	d004      	beq.n	8012252 <uxr_run_session_until_all_status+0x26>
 8012248:	464a      	mov	r2, r9
 801224a:	21ff      	movs	r1, #255	; 0xff
 801224c:	9801      	ldr	r0, [sp, #4]
 801224e:	f003 fb23 	bl	8015898 <memset>
 8012252:	9b01      	ldr	r3, [sp, #4]
 8012254:	f8c8 b074 	str.w	fp, [r8, #116]	; 0x74
 8012258:	1e5f      	subs	r7, r3, #1
 801225a:	e9c8 391e 	strd	r3, r9, [r8, #120]	; 0x78
 801225e:	4651      	mov	r1, sl
 8012260:	4640      	mov	r0, r8
 8012262:	f7ff fd63 	bl	8011d2c <listen_message_reliably>
 8012266:	f080 0001 	eor.w	r0, r0, #1
 801226a:	b2c0      	uxtb	r0, r0
 801226c:	f1b9 0f00 	cmp.w	r9, #0
 8012270:	d02d      	beq.n	80122ce <uxr_run_session_until_all_status+0xa2>
 8012272:	463e      	mov	r6, r7
 8012274:	2400      	movs	r4, #0
 8012276:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801227a:	2bff      	cmp	r3, #255	; 0xff
 801227c:	d017      	beq.n	80122ae <uxr_run_session_until_all_status+0x82>
 801227e:	3401      	adds	r4, #1
 8012280:	45a1      	cmp	r9, r4
 8012282:	d8f8      	bhi.n	8012276 <uxr_run_session_until_all_status+0x4a>
 8012284:	2300      	movs	r3, #0
 8012286:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
 801228a:	e000      	b.n	801228e <uxr_run_session_until_all_status+0x62>
 801228c:	b160      	cbz	r0, 80122a8 <uxr_run_session_until_all_status+0x7c>
 801228e:	463b      	mov	r3, r7
 8012290:	9a01      	ldr	r2, [sp, #4]
 8012292:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8012296:	3302      	adds	r3, #2
 8012298:	2801      	cmp	r0, #1
 801229a:	eba3 0302 	sub.w	r3, r3, r2
 801229e:	bf8c      	ite	hi
 80122a0:	2000      	movhi	r0, #0
 80122a2:	2001      	movls	r0, #1
 80122a4:	4599      	cmp	r9, r3
 80122a6:	d8f1      	bhi.n	801228c <uxr_run_session_until_all_status+0x60>
 80122a8:	b003      	add	sp, #12
 80122aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ae:	f83b 5014 	ldrh.w	r5, [fp, r4, lsl #1]
 80122b2:	3401      	adds	r4, #1
 80122b4:	fab5 f585 	clz	r5, r5
 80122b8:	454c      	cmp	r4, r9
 80122ba:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80122be:	d201      	bcs.n	80122c4 <uxr_run_session_until_all_status+0x98>
 80122c0:	2d00      	cmp	r5, #0
 80122c2:	d1d8      	bne.n	8012276 <uxr_run_session_until_all_status+0x4a>
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d1dd      	bne.n	8012284 <uxr_run_session_until_all_status+0x58>
 80122c8:	2d00      	cmp	r5, #0
 80122ca:	d0c8      	beq.n	801225e <uxr_run_session_until_all_status+0x32>
 80122cc:	e7da      	b.n	8012284 <uxr_run_session_until_all_status+0x58>
 80122ce:	2001      	movs	r0, #1
 80122d0:	f8c8 907c 	str.w	r9, [r8, #124]	; 0x7c
 80122d4:	b003      	add	sp, #12
 80122d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122da:	bf00      	nop

080122dc <uxr_prepare_stream_to_write_submessage>:
 80122dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	4682      	mov	sl, r0
 80122e4:	4610      	mov	r0, r2
 80122e6:	4615      	mov	r5, r2
 80122e8:	461e      	mov	r6, r3
 80122ea:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80122ee:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80122f2:	f105 0904 	add.w	r9, r5, #4
 80122f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80122fa:	9101      	str	r1, [sp, #4]
 80122fc:	f000 ff0c 	bl	8013118 <uxr_submessage_padding>
 8012300:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012304:	4481      	add	r9, r0
 8012306:	2b01      	cmp	r3, #1
 8012308:	d01d      	beq.n	8012346 <uxr_prepare_stream_to_write_submessage+0x6a>
 801230a:	2b02      	cmp	r3, #2
 801230c:	d116      	bne.n	801233c <uxr_prepare_stream_to_write_submessage+0x60>
 801230e:	4621      	mov	r1, r4
 8012310:	f10a 0008 	add.w	r0, sl, #8
 8012314:	f000 fe88 	bl	8013028 <uxr_get_output_reliable_stream>
 8012318:	4604      	mov	r4, r0
 801231a:	b158      	cbz	r0, 8012334 <uxr_prepare_stream_to_write_submessage+0x58>
 801231c:	4649      	mov	r1, r9
 801231e:	4632      	mov	r2, r6
 8012320:	f002 fb74 	bl	8014a0c <uxr_prepare_reliable_buffer_to_write>
 8012324:	4604      	mov	r4, r0
 8012326:	b12c      	cbz	r4, 8012334 <uxr_prepare_stream_to_write_submessage+0x58>
 8012328:	4643      	mov	r3, r8
 801232a:	b2aa      	uxth	r2, r5
 801232c:	4639      	mov	r1, r7
 801232e:	4630      	mov	r0, r6
 8012330:	f000 feb2 	bl	8013098 <uxr_buffer_submessage_header>
 8012334:	4620      	mov	r0, r4
 8012336:	b002      	add	sp, #8
 8012338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801233c:	2400      	movs	r4, #0
 801233e:	4620      	mov	r0, r4
 8012340:	b002      	add	sp, #8
 8012342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012346:	4621      	mov	r1, r4
 8012348:	f10a 0008 	add.w	r0, sl, #8
 801234c:	f000 fe64 	bl	8013018 <uxr_get_output_best_effort_stream>
 8012350:	4604      	mov	r4, r0
 8012352:	2800      	cmp	r0, #0
 8012354:	d0ee      	beq.n	8012334 <uxr_prepare_stream_to_write_submessage+0x58>
 8012356:	4649      	mov	r1, r9
 8012358:	4632      	mov	r2, r6
 801235a:	f002 fa91 	bl	8014880 <uxr_prepare_best_effort_buffer_to_write>
 801235e:	4604      	mov	r4, r0
 8012360:	e7e1      	b.n	8012326 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012362:	bf00      	nop

08012364 <uxr_init_session_info>:
 8012364:	b430      	push	{r4, r5}
 8012366:	23ff      	movs	r3, #255	; 0xff
 8012368:	0e15      	lsrs	r5, r2, #24
 801236a:	2409      	movs	r4, #9
 801236c:	7102      	strb	r2, [r0, #4]
 801236e:	7001      	strb	r1, [r0, #0]
 8012370:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8012374:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012378:	7045      	strb	r5, [r0, #1]
 801237a:	80c4      	strh	r4, [r0, #6]
 801237c:	7081      	strb	r1, [r0, #2]
 801237e:	70c2      	strb	r2, [r0, #3]
 8012380:	7143      	strb	r3, [r0, #5]
 8012382:	bc30      	pop	{r4, r5}
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop

08012388 <uxr_buffer_create_session>:
 8012388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238a:	4604      	mov	r4, r0
 801238c:	b089      	sub	sp, #36	; 0x24
 801238e:	2701      	movs	r7, #1
 8012390:	4e0f      	ldr	r6, [pc, #60]	; (80123d0 <uxr_buffer_create_session+0x48>)
 8012392:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012396:	2300      	movs	r3, #0
 8012398:	80c7      	strh	r7, [r0, #6]
 801239a:	460d      	mov	r5, r1
 801239c:	7822      	ldrb	r2, [r4, #0]
 801239e:	4608      	mov	r0, r1
 80123a0:	f8d4 1001 	ldr.w	r1, [r4, #1]
 80123a4:	f88d 200c 	strb.w	r2, [sp, #12]
 80123a8:	6832      	ldr	r2, [r6, #0]
 80123aa:	88b4      	ldrh	r4, [r6, #4]
 80123ac:	9102      	str	r1, [sp, #8]
 80123ae:	4619      	mov	r1, r3
 80123b0:	9200      	str	r2, [sp, #0]
 80123b2:	2210      	movs	r2, #16
 80123b4:	f88d 300d 	strb.w	r3, [sp, #13]
 80123b8:	f8ad 7004 	strh.w	r7, [sp, #4]
 80123bc:	f8ad 4006 	strh.w	r4, [sp, #6]
 80123c0:	f000 fe6a 	bl	8013098 <uxr_buffer_submessage_header>
 80123c4:	4669      	mov	r1, sp
 80123c6:	4628      	mov	r0, r5
 80123c8:	f001 f9a6 	bl	8013718 <uxr_serialize_CREATE_CLIENT_Payload>
 80123cc:	b009      	add	sp, #36	; 0x24
 80123ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123d0:	0801f758 	.word	0x0801f758

080123d4 <uxr_buffer_delete_session>:
 80123d4:	4a0c      	ldr	r2, [pc, #48]	; (8012408 <uxr_buffer_delete_session+0x34>)
 80123d6:	2302      	movs	r3, #2
 80123d8:	b530      	push	{r4, r5, lr}
 80123da:	460c      	mov	r4, r1
 80123dc:	b083      	sub	sp, #12
 80123de:	8911      	ldrh	r1, [r2, #8]
 80123e0:	f44f 7500 	mov.w	r5, #512	; 0x200
 80123e4:	2204      	movs	r2, #4
 80123e6:	80c3      	strh	r3, [r0, #6]
 80123e8:	f8ad 1006 	strh.w	r1, [sp, #6]
 80123ec:	2300      	movs	r3, #0
 80123ee:	4620      	mov	r0, r4
 80123f0:	2103      	movs	r1, #3
 80123f2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80123f6:	f000 fe4f 	bl	8013098 <uxr_buffer_submessage_header>
 80123fa:	a901      	add	r1, sp, #4
 80123fc:	4620      	mov	r0, r4
 80123fe:	f001 fa25 	bl	801384c <uxr_serialize_DELETE_Payload>
 8012402:	b003      	add	sp, #12
 8012404:	bd30      	pop	{r4, r5, pc}
 8012406:	bf00      	nop
 8012408:	0801f758 	.word	0x0801f758

0801240c <uxr_read_create_session_status>:
 801240c:	b510      	push	{r4, lr}
 801240e:	460b      	mov	r3, r1
 8012410:	b088      	sub	sp, #32
 8012412:	4604      	mov	r4, r0
 8012414:	a901      	add	r1, sp, #4
 8012416:	4618      	mov	r0, r3
 8012418:	f001 fa28 	bl	801386c <uxr_deserialize_STATUS_AGENT_Payload>
 801241c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012420:	7163      	strb	r3, [r4, #5]
 8012422:	b008      	add	sp, #32
 8012424:	bd10      	pop	{r4, pc}
 8012426:	bf00      	nop

08012428 <uxr_read_delete_session_status>:
 8012428:	b510      	push	{r4, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	4604      	mov	r4, r0
 801242e:	4608      	mov	r0, r1
 8012430:	a902      	add	r1, sp, #8
 8012432:	f001 fa4b 	bl	80138cc <uxr_deserialize_STATUS_Payload>
 8012436:	88e3      	ldrh	r3, [r4, #6]
 8012438:	2b02      	cmp	r3, #2
 801243a:	d001      	beq.n	8012440 <uxr_read_delete_session_status+0x18>
 801243c:	b004      	add	sp, #16
 801243e:	bd10      	pop	{r4, pc}
 8012440:	f10d 000a 	add.w	r0, sp, #10
 8012444:	f7ff f8f2 	bl	801162c <uxr_object_id_from_raw>
 8012448:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801244c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012450:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012454:	b29b      	uxth	r3, r3
 8012456:	2b02      	cmp	r3, #2
 8012458:	d1f0      	bne.n	801243c <uxr_read_delete_session_status+0x14>
 801245a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801245e:	7163      	strb	r3, [r4, #5]
 8012460:	e7ec      	b.n	801243c <uxr_read_delete_session_status+0x14>
 8012462:	bf00      	nop

08012464 <uxr_stamp_create_session_header>:
 8012464:	b510      	push	{r4, lr}
 8012466:	2208      	movs	r2, #8
 8012468:	b08a      	sub	sp, #40	; 0x28
 801246a:	4604      	mov	r4, r0
 801246c:	eb0d 0002 	add.w	r0, sp, r2
 8012470:	f7f8 fbfa 	bl	800ac68 <ucdr_init_buffer>
 8012474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012478:	2300      	movs	r3, #0
 801247a:	a802      	add	r0, sp, #8
 801247c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8012480:	9400      	str	r4, [sp, #0]
 8012482:	461a      	mov	r2, r3
 8012484:	f000 ffe2 	bl	801344c <uxr_serialize_message_header>
 8012488:	b00a      	add	sp, #40	; 0x28
 801248a:	bd10      	pop	{r4, pc}

0801248c <uxr_stamp_session_header>:
 801248c:	b570      	push	{r4, r5, r6, lr}
 801248e:	b08c      	sub	sp, #48	; 0x30
 8012490:	4604      	mov	r4, r0
 8012492:	4615      	mov	r5, r2
 8012494:	460e      	mov	r6, r1
 8012496:	a804      	add	r0, sp, #16
 8012498:	4619      	mov	r1, r3
 801249a:	2208      	movs	r2, #8
 801249c:	9503      	str	r5, [sp, #12]
 801249e:	f7f8 fbe3 	bl	800ac68 <ucdr_init_buffer>
 80124a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124a6:	4632      	mov	r2, r6
 80124a8:	9b03      	ldr	r3, [sp, #12]
 80124aa:	a804      	add	r0, sp, #16
 80124ac:	9400      	str	r4, [sp, #0]
 80124ae:	f000 ffcd 	bl	801344c <uxr_serialize_message_header>
 80124b2:	b00c      	add	sp, #48	; 0x30
 80124b4:	bd70      	pop	{r4, r5, r6, pc}
 80124b6:	bf00      	nop

080124b8 <uxr_read_session_header>:
 80124b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124bc:	4607      	mov	r7, r0
 80124be:	b084      	sub	sp, #16
 80124c0:	4608      	mov	r0, r1
 80124c2:	460c      	mov	r4, r1
 80124c4:	4615      	mov	r5, r2
 80124c6:	461e      	mov	r6, r3
 80124c8:	f7f8 fc02 	bl	800acd0 <ucdr_buffer_remaining>
 80124cc:	2808      	cmp	r0, #8
 80124ce:	d803      	bhi.n	80124d8 <uxr_read_session_header+0x20>
 80124d0:	2000      	movs	r0, #0
 80124d2:	b004      	add	sp, #16
 80124d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d8:	f10d 080c 	add.w	r8, sp, #12
 80124dc:	4633      	mov	r3, r6
 80124de:	462a      	mov	r2, r5
 80124e0:	4620      	mov	r0, r4
 80124e2:	f10d 010b 	add.w	r1, sp, #11
 80124e6:	f8cd 8000 	str.w	r8, [sp]
 80124ea:	f000 ffcd 	bl	8013488 <uxr_deserialize_message_header>
 80124ee:	783a      	ldrb	r2, [r7, #0]
 80124f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d1eb      	bne.n	80124d0 <uxr_read_session_header+0x18>
 80124f8:	061b      	lsls	r3, r3, #24
 80124fa:	d41b      	bmi.n	8012534 <uxr_read_session_header+0x7c>
 80124fc:	f898 2000 	ldrb.w	r2, [r8]
 8012500:	787b      	ldrb	r3, [r7, #1]
 8012502:	429a      	cmp	r2, r3
 8012504:	d003      	beq.n	801250e <uxr_read_session_header+0x56>
 8012506:	2001      	movs	r0, #1
 8012508:	f080 0001 	eor.w	r0, r0, #1
 801250c:	e7e1      	b.n	80124d2 <uxr_read_session_header+0x1a>
 801250e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012512:	1cb8      	adds	r0, r7, #2
 8012514:	78bb      	ldrb	r3, [r7, #2]
 8012516:	429a      	cmp	r2, r3
 8012518:	d1f5      	bne.n	8012506 <uxr_read_session_header+0x4e>
 801251a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801251e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012522:	429a      	cmp	r2, r3
 8012524:	d1ef      	bne.n	8012506 <uxr_read_session_header+0x4e>
 8012526:	7843      	ldrb	r3, [r0, #1]
 8012528:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801252c:	429a      	cmp	r2, r3
 801252e:	d1ea      	bne.n	8012506 <uxr_read_session_header+0x4e>
 8012530:	2000      	movs	r0, #0
 8012532:	e7e9      	b.n	8012508 <uxr_read_session_header+0x50>
 8012534:	2001      	movs	r0, #1
 8012536:	e7cc      	b.n	80124d2 <uxr_read_session_header+0x1a>

08012538 <uxr_session_header_offset>:
 8012538:	f990 3000 	ldrsb.w	r3, [r0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	bfac      	ite	ge
 8012540:	2008      	movge	r0, #8
 8012542:	2004      	movlt	r0, #4
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop

08012548 <uxr_init_base_object_request>:
 8012548:	b530      	push	{r4, r5, lr}
 801254a:	b083      	sub	sp, #12
 801254c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8012550:	9101      	str	r1, [sp, #4]
 8012552:	88c3      	ldrh	r3, [r0, #6]
 8012554:	f1a3 010a 	sub.w	r1, r3, #10
 8012558:	b289      	uxth	r1, r1
 801255a:	42a1      	cmp	r1, r4
 801255c:	d80e      	bhi.n	801257c <uxr_init_base_object_request+0x34>
 801255e:	3301      	adds	r3, #1
 8012560:	b29c      	uxth	r4, r3
 8012562:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8012566:	b2db      	uxtb	r3, r3
 8012568:	80c4      	strh	r4, [r0, #6]
 801256a:	1c91      	adds	r1, r2, #2
 801256c:	9801      	ldr	r0, [sp, #4]
 801256e:	7015      	strb	r5, [r2, #0]
 8012570:	7053      	strb	r3, [r2, #1]
 8012572:	f7ff f86f 	bl	8011654 <uxr_object_id_to_raw>
 8012576:	4620      	mov	r0, r4
 8012578:	b003      	add	sp, #12
 801257a:	bd30      	pop	{r4, r5, pc}
 801257c:	230a      	movs	r3, #10
 801257e:	2500      	movs	r5, #0
 8012580:	461c      	mov	r4, r3
 8012582:	e7f1      	b.n	8012568 <uxr_init_base_object_request+0x20>

08012584 <uxr_parse_base_object_request>:
 8012584:	b570      	push	{r4, r5, r6, lr}
 8012586:	4604      	mov	r4, r0
 8012588:	3002      	adds	r0, #2
 801258a:	460d      	mov	r5, r1
 801258c:	4616      	mov	r6, r2
 801258e:	f7ff f84d 	bl	801162c <uxr_object_id_from_raw>
 8012592:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012596:	8028      	strh	r0, [r5, #0]
 8012598:	806b      	strh	r3, [r5, #2]
 801259a:	7822      	ldrb	r2, [r4, #0]
 801259c:	7863      	ldrb	r3, [r4, #1]
 801259e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80125a2:	8033      	strh	r3, [r6, #0]
 80125a4:	bd70      	pop	{r4, r5, r6, pc}
 80125a6:	bf00      	nop

080125a8 <uxr_init_framing_io>:
 80125a8:	2300      	movs	r3, #0
 80125aa:	7041      	strb	r1, [r0, #1]
 80125ac:	7003      	strb	r3, [r0, #0]
 80125ae:	8583      	strh	r3, [r0, #44]	; 0x2c
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop

080125b4 <uxr_write_framed_msg>:
 80125b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	4604      	mov	r4, r0
 80125ba:	4617      	mov	r7, r2
 80125bc:	460e      	mov	r6, r1
 80125be:	b083      	sub	sp, #12
 80125c0:	7862      	ldrb	r2, [r4, #1]
 80125c2:	207e      	movs	r0, #126	; 0x7e
 80125c4:	469b      	mov	fp, r3
 80125c6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80125ca:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80125ce:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 80125d2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80125d6:	2901      	cmp	r1, #1
 80125d8:	f240 8126 	bls.w	8012828 <uxr_write_framed_msg+0x274>
 80125dc:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 80125e0:	2102      	movs	r1, #2
 80125e2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80125e6:	2d01      	cmp	r5, #1
 80125e8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80125ec:	d97b      	bls.n	80126e6 <uxr_write_framed_msg+0x132>
 80125ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125f0:	2103      	movs	r1, #3
 80125f2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80125f6:	b2dd      	uxtb	r5, r3
 80125f8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80125fc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8012600:	2a01      	cmp	r2, #1
 8012602:	f240 8088 	bls.w	8012716 <uxr_write_framed_msg+0x162>
 8012606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012608:	1862      	adds	r2, r4, r1
 801260a:	3101      	adds	r1, #1
 801260c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8012610:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8012614:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8012618:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801261c:	2a01      	cmp	r2, #1
 801261e:	f240 808d 	bls.w	801273c <uxr_write_framed_msg+0x188>
 8012622:	1c4a      	adds	r2, r1, #1
 8012624:	4421      	add	r1, r4
 8012626:	b2d2      	uxtb	r2, r2
 8012628:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801262c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 8092 	beq.w	801275a <uxr_write_framed_msg+0x1a6>
 8012636:	f04f 0800 	mov.w	r8, #0
 801263a:	46c1      	mov	r9, r8
 801263c:	4641      	mov	r1, r8
 801263e:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8012642:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012646:	2901      	cmp	r1, #1
 8012648:	f240 80b5 	bls.w	80127b6 <uxr_write_framed_msg+0x202>
 801264c:	2a29      	cmp	r2, #41	; 0x29
 801264e:	f200 808a 	bhi.w	8012766 <uxr_write_framed_msg+0x1b2>
 8012652:	1c50      	adds	r0, r2, #1
 8012654:	18a1      	adds	r1, r4, r2
 8012656:	b2c2      	uxtb	r2, r0
 8012658:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 801265c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012660:	ea88 0303 	eor.w	r3, r8, r3
 8012664:	4981      	ldr	r1, [pc, #516]	; (801286c <uxr_write_framed_msg+0x2b8>)
 8012666:	f109 0901 	add.w	r9, r9, #1
 801266a:	b2db      	uxtb	r3, r3
 801266c:	fa1f f989 	uxth.w	r9, r9
 8012670:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012674:	4649      	mov	r1, r9
 8012676:	ea83 2818 	eor.w	r8, r3, r8, lsr #8
 801267a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801267c:	454b      	cmp	r3, r9
 801267e:	d8de      	bhi.n	801263e <uxr_write_framed_msg+0x8a>
 8012680:	fa5f f188 	uxtb.w	r1, r8
 8012684:	f8ad 8004 	strh.w	r8, [sp, #4]
 8012688:	f04f 0900 	mov.w	r9, #0
 801268c:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8012690:	46c8      	mov	r8, r9
 8012692:	e015      	b.n	80126c0 <uxr_write_framed_msg+0x10c>
 8012694:	2a29      	cmp	r2, #41	; 0x29
 8012696:	d87a      	bhi.n	801278e <uxr_write_framed_msg+0x1da>
 8012698:	18a3      	adds	r3, r4, r2
 801269a:	3201      	adds	r2, #1
 801269c:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80126a0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80126a4:	f109 0901 	add.w	r9, r9, #1
 80126a8:	fa1f f989 	uxth.w	r9, r9
 80126ac:	f1b9 0f02 	cmp.w	r9, #2
 80126b0:	f000 8093 	beq.w	80127da <uxr_write_framed_msg+0x226>
 80126b4:	ab02      	add	r3, sp, #8
 80126b6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80126ba:	444b      	add	r3, r9
 80126bc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80126c0:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d8e5      	bhi.n	8012694 <uxr_write_framed_msg+0xe0>
 80126c8:	1c53      	adds	r3, r2, #1
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	2b29      	cmp	r3, #41	; 0x29
 80126ce:	d85e      	bhi.n	801278e <uxr_write_framed_msg+0x1da>
 80126d0:	18a3      	adds	r3, r4, r2
 80126d2:	f081 0120 	eor.w	r1, r1, #32
 80126d6:	3202      	adds	r2, #2
 80126d8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80126dc:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 80126e0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80126e4:	e7de      	b.n	80126a4 <uxr_write_framed_msg+0xf0>
 80126e6:	460a      	mov	r2, r1
 80126e8:	f04f 0c03 	mov.w	ip, #3
 80126ec:	2104      	movs	r1, #4
 80126ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126f0:	4422      	add	r2, r4
 80126f2:	44a4      	add	ip, r4
 80126f4:	f080 0020 	eor.w	r0, r0, #32
 80126f8:	b2dd      	uxtb	r5, r3
 80126fa:	f04f 087d 	mov.w	r8, #125	; 0x7d
 80126fe:	f1a5 0e7d 	sub.w	lr, r5, #125	; 0x7d
 8012702:	f882 8038 	strb.w	r8, [r2, #56]	; 0x38
 8012706:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801270a:	f1be 0f01 	cmp.w	lr, #1
 801270e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8012712:	f63f af78 	bhi.w	8012606 <uxr_write_framed_msg+0x52>
 8012716:	1862      	adds	r2, r4, r1
 8012718:	207d      	movs	r0, #125	; 0x7d
 801271a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801271c:	f085 0520 	eor.w	r5, r5, #32
 8012720:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8012724:	3102      	adds	r1, #2
 8012726:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801272a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801272e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8012732:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012736:	2a01      	cmp	r2, #1
 8012738:	f63f af73 	bhi.w	8012622 <uxr_write_framed_msg+0x6e>
 801273c:	1c8a      	adds	r2, r1, #2
 801273e:	f080 0020 	eor.w	r0, r0, #32
 8012742:	4421      	add	r1, r4
 8012744:	257d      	movs	r5, #125	; 0x7d
 8012746:	b2d2      	uxtb	r2, r2
 8012748:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
 801274c:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8012750:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012754:	2b00      	cmp	r3, #0
 8012756:	f47f af6e 	bne.w	8012636 <uxr_write_framed_msg+0x82>
 801275a:	4619      	mov	r1, r3
 801275c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012760:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012764:	e790      	b.n	8012688 <uxr_write_framed_msg+0xd4>
 8012766:	2500      	movs	r5, #0
 8012768:	e000      	b.n	801276c <uxr_write_framed_msg+0x1b8>
 801276a:	b160      	cbz	r0, 8012786 <uxr_write_framed_msg+0x1d2>
 801276c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012770:	1b52      	subs	r2, r2, r5
 8012772:	4653      	mov	r3, sl
 8012774:	4638      	mov	r0, r7
 8012776:	4421      	add	r1, r4
 8012778:	47b0      	blx	r6
 801277a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801277e:	4405      	add	r5, r0
 8012780:	4295      	cmp	r5, r2
 8012782:	d3f2      	bcc.n	801276a <uxr_write_framed_msg+0x1b6>
 8012784:	d045      	beq.n	8012812 <uxr_write_framed_msg+0x25e>
 8012786:	2000      	movs	r0, #0
 8012788:	b003      	add	sp, #12
 801278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278e:	2500      	movs	r5, #0
 8012790:	e001      	b.n	8012796 <uxr_write_framed_msg+0x1e2>
 8012792:	2800      	cmp	r0, #0
 8012794:	d0f7      	beq.n	8012786 <uxr_write_framed_msg+0x1d2>
 8012796:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801279a:	1b52      	subs	r2, r2, r5
 801279c:	4653      	mov	r3, sl
 801279e:	4638      	mov	r0, r7
 80127a0:	4421      	add	r1, r4
 80127a2:	47b0      	blx	r6
 80127a4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80127a8:	4405      	add	r5, r0
 80127aa:	4295      	cmp	r5, r2
 80127ac:	d3f1      	bcc.n	8012792 <uxr_write_framed_msg+0x1de>
 80127ae:	d1ea      	bne.n	8012786 <uxr_write_framed_msg+0x1d2>
 80127b0:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80127b4:	e77e      	b.n	80126b4 <uxr_write_framed_msg+0x100>
 80127b6:	1c51      	adds	r1, r2, #1
 80127b8:	b2c9      	uxtb	r1, r1
 80127ba:	2929      	cmp	r1, #41	; 0x29
 80127bc:	d8d3      	bhi.n	8012766 <uxr_write_framed_msg+0x1b2>
 80127be:	1c95      	adds	r5, r2, #2
 80127c0:	18a0      	adds	r0, r4, r2
 80127c2:	f083 0120 	eor.w	r1, r3, #32
 80127c6:	b2ea      	uxtb	r2, r5
 80127c8:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80127cc:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80127d0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80127d4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80127d8:	e742      	b.n	8012660 <uxr_write_framed_msg+0xac>
 80127da:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80127de:	b19a      	cbz	r2, 8012808 <uxr_write_framed_msg+0x254>
 80127e0:	2500      	movs	r5, #0
 80127e2:	e001      	b.n	80127e8 <uxr_write_framed_msg+0x234>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d0ce      	beq.n	8012786 <uxr_write_framed_msg+0x1d2>
 80127e8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80127ec:	1b52      	subs	r2, r2, r5
 80127ee:	4653      	mov	r3, sl
 80127f0:	4638      	mov	r0, r7
 80127f2:	4421      	add	r1, r4
 80127f4:	47b0      	blx	r6
 80127f6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80127fa:	4405      	add	r5, r0
 80127fc:	4295      	cmp	r5, r2
 80127fe:	d3f1      	bcc.n	80127e4 <uxr_write_framed_msg+0x230>
 8012800:	d1c1      	bne.n	8012786 <uxr_write_framed_msg+0x1d2>
 8012802:	2300      	movs	r3, #0
 8012804:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801280a:	b298      	uxth	r0, r3
 801280c:	b003      	add	sp, #12
 801280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012812:	f04f 0300 	mov.w	r3, #0
 8012816:	4649      	mov	r1, r9
 8012818:	2200      	movs	r2, #0
 801281a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801281e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012820:	454b      	cmp	r3, r9
 8012822:	f63f af0c 	bhi.w	801263e <uxr_write_framed_msg+0x8a>
 8012826:	e72b      	b.n	8012680 <uxr_write_framed_msg+0xcc>
 8012828:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 801282c:	f082 0220 	eor.w	r2, r2, #32
 8012830:	2103      	movs	r1, #3
 8012832:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8012836:	2d01      	cmp	r5, #1
 8012838:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801283c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8012840:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
 8012844:	d804      	bhi.n	8012850 <uxr_write_framed_msg+0x29c>
 8012846:	460a      	mov	r2, r1
 8012848:	f04f 0c04 	mov.w	ip, #4
 801284c:	2105      	movs	r1, #5
 801284e:	e74e      	b.n	80126ee <uxr_write_framed_msg+0x13a>
 8012850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012852:	2104      	movs	r1, #4
 8012854:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8012858:	b2dd      	uxtb	r5, r3
 801285a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801285e:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8012862:	2a01      	cmp	r2, #1
 8012864:	f63f aecf 	bhi.w	8012606 <uxr_write_framed_msg+0x52>
 8012868:	e755      	b.n	8012716 <uxr_write_framed_msg+0x162>
 801286a:	bf00      	nop
 801286c:	080201d4 	.word	0x080201d4

08012870 <uxr_framing_read_transport>:
 8012870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012874:	4604      	mov	r4, r0
 8012876:	b085      	sub	sp, #20
 8012878:	4689      	mov	r9, r1
 801287a:	4692      	mov	sl, r2
 801287c:	461d      	mov	r5, r3
 801287e:	f000 fc51 	bl	8013124 <uxr_millis>
 8012882:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012886:	4607      	mov	r7, r0
 8012888:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
 801288c:	4541      	cmp	r1, r8
 801288e:	d056      	beq.n	801293e <uxr_framing_read_transport+0xce>
 8012890:	d918      	bls.n	80128c4 <uxr_framing_read_transport+0x54>
 8012892:	f1b8 0f00 	cmp.w	r8, #0
 8012896:	d06c      	beq.n	8012972 <uxr_framing_read_transport+0x102>
 8012898:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801289c:	f1c1 022a 	rsb	r2, r1, #42	; 0x2a
 80128a0:	fa5f f888 	uxtb.w	r8, r8
 80128a4:	b2d2      	uxtb	r2, r2
 80128a6:	b9aa      	cbnz	r2, 80128d4 <uxr_framing_read_transport+0x64>
 80128a8:	2600      	movs	r6, #0
 80128aa:	f000 fc3b 	bl	8013124 <uxr_millis>
 80128ae:	4602      	mov	r2, r0
 80128b0:	682b      	ldr	r3, [r5, #0]
 80128b2:	4630      	mov	r0, r6
 80128b4:	1bd7      	subs	r7, r2, r7
 80128b6:	1bdb      	subs	r3, r3, r7
 80128b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80128bc:	602b      	str	r3, [r5, #0]
 80128be:	b005      	add	sp, #20
 80128c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80128c8:	f04f 0800 	mov.w	r8, #0
 80128cc:	1a52      	subs	r2, r2, r1
 80128ce:	b2d2      	uxtb	r2, r2
 80128d0:	2a00      	cmp	r2, #0
 80128d2:	d0e9      	beq.n	80128a8 <uxr_framing_read_transport+0x38>
 80128d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128d6:	3102      	adds	r1, #2
 80128d8:	9203      	str	r2, [sp, #12]
 80128da:	4650      	mov	r0, sl
 80128dc:	4421      	add	r1, r4
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	682b      	ldr	r3, [r5, #0]
 80128e2:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80128e6:	47c8      	blx	r9
 80128e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80128ec:	4a23      	ldr	r2, [pc, #140]	; (801297c <uxr_framing_read_transport+0x10c>)
 80128ee:	4606      	mov	r6, r0
 80128f0:	4403      	add	r3, r0
 80128f2:	0859      	lsrs	r1, r3, #1
 80128f4:	fba2 0101 	umull	r0, r1, r2, r1
 80128f8:	0889      	lsrs	r1, r1, #2
 80128fa:	fb0b 3111 	mls	r1, fp, r1, r3
 80128fe:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8012902:	2e00      	cmp	r6, #0
 8012904:	d0d0      	beq.n	80128a8 <uxr_framing_read_transport+0x38>
 8012906:	f1b8 0f00 	cmp.w	r8, #0
 801290a:	d0ce      	beq.n	80128aa <uxr_framing_read_transport+0x3a>
 801290c:	9a03      	ldr	r2, [sp, #12]
 801290e:	4296      	cmp	r6, r2
 8012910:	d1cb      	bne.n	80128aa <uxr_framing_read_transport+0x3a>
 8012912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012914:	3102      	adds	r1, #2
 8012916:	4642      	mov	r2, r8
 8012918:	4650      	mov	r0, sl
 801291a:	4421      	add	r1, r4
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	2300      	movs	r3, #0
 8012920:	47c8      	blx	r9
 8012922:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012926:	4915      	ldr	r1, [pc, #84]	; (801297c <uxr_framing_read_transport+0x10c>)
 8012928:	4406      	add	r6, r0
 801292a:	181a      	adds	r2, r3, r0
 801292c:	0853      	lsrs	r3, r2, #1
 801292e:	fba1 1303 	umull	r1, r3, r1, r3
 8012932:	089b      	lsrs	r3, r3, #2
 8012934:	fb0b 2313 	mls	r3, fp, r3, r2
 8012938:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801293c:	e7b5      	b.n	80128aa <uxr_framing_read_transport+0x3a>
 801293e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012940:	2300      	movs	r3, #0
 8012942:	1ca1      	adds	r1, r4, #2
 8012944:	4650      	mov	r0, sl
 8012946:	9200      	str	r2, [sp, #0]
 8012948:	2229      	movs	r2, #41	; 0x29
 801294a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801294c:	682b      	ldr	r3, [r5, #0]
 801294e:	47c8      	blx	r9
 8012950:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8012954:	4606      	mov	r6, r0
 8012956:	4809      	ldr	r0, [pc, #36]	; (801297c <uxr_framing_read_transport+0x10c>)
 8012958:	212a      	movs	r1, #42	; 0x2a
 801295a:	4432      	add	r2, r6
 801295c:	0853      	lsrs	r3, r2, #1
 801295e:	fba0 0303 	umull	r0, r3, r0, r3
 8012962:	089b      	lsrs	r3, r3, #2
 8012964:	fb01 2313 	mls	r3, r1, r3, r2
 8012968:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801296c:	2e00      	cmp	r6, #0
 801296e:	d19c      	bne.n	80128aa <uxr_framing_read_transport+0x3a>
 8012970:	e79a      	b.n	80128a8 <uxr_framing_read_transport+0x38>
 8012972:	f1c1 0229 	rsb	r2, r1, #41	; 0x29
 8012976:	b2d2      	uxtb	r2, r2
 8012978:	e795      	b.n	80128a6 <uxr_framing_read_transport+0x36>
 801297a:	bf00      	nop
 801297c:	30c30c31 	.word	0x30c30c31

08012980 <uxr_read_framed_msg>:
 8012980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012984:	b085      	sub	sp, #20
 8012986:	461f      	mov	r7, r3
 8012988:	4604      	mov	r4, r0
 801298a:	4689      	mov	r9, r1
 801298c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801298e:	4692      	mov	sl, r2
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	ab10      	add	r3, sp, #64	; 0x40
 8012994:	f7ff ff6c 	bl	8012870 <uxr_framing_read_transport>
 8012998:	b930      	cbnz	r0, 80129a8 <uxr_read_framed_msg+0x28>
 801299a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801299e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80129a2:	429a      	cmp	r2, r3
 80129a4:	f000 8135 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 80129a8:	7823      	ldrb	r3, [r4, #0]
 80129aa:	4ed0      	ldr	r6, [pc, #832]	; (8012cec <uxr_read_framed_msg+0x36c>)
 80129ac:	f8df 8340 	ldr.w	r8, [pc, #832]	; 8012cf0 <uxr_read_framed_msg+0x370>
 80129b0:	2b07      	cmp	r3, #7
 80129b2:	d8fd      	bhi.n	80129b0 <uxr_read_framed_msg+0x30>
 80129b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80129b8:	00eb010d 	.word	0x00eb010d
 80129bc:	00ac00ca 	.word	0x00ac00ca
 80129c0:	00440082 	.word	0x00440082
 80129c4:	00080026 	.word	0x00080026
 80129c8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80129cc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80129d0:	4298      	cmp	r0, r3
 80129d2:	f000 811e 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 80129d6:	18e2      	adds	r2, r4, r3
 80129d8:	7891      	ldrb	r1, [r2, #2]
 80129da:	297d      	cmp	r1, #125	; 0x7d
 80129dc:	f000 8142 	beq.w	8012c64 <uxr_read_framed_msg+0x2e4>
 80129e0:	3301      	adds	r3, #1
 80129e2:	202a      	movs	r0, #42	; 0x2a
 80129e4:	297e      	cmp	r1, #126	; 0x7e
 80129e6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80129ea:	fba6 5202 	umull	r5, r2, r6, r2
 80129ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80129f2:	fb00 3312 	mls	r3, r0, r2, r3
 80129f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80129fa:	f040 814f 	bne.w	8012c9c <uxr_read_framed_msg+0x31c>
 80129fe:	2301      	movs	r3, #1
 8012a00:	7023      	strb	r3, [r4, #0]
 8012a02:	e7d5      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012a04:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012a08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012a0c:	4298      	cmp	r0, r3
 8012a0e:	f000 8100 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 8012a12:	18e2      	adds	r2, r4, r3
 8012a14:	7891      	ldrb	r1, [r2, #2]
 8012a16:	297d      	cmp	r1, #125	; 0x7d
 8012a18:	f000 81aa 	beq.w	8012d70 <uxr_read_framed_msg+0x3f0>
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	202a      	movs	r0, #42	; 0x2a
 8012a20:	297e      	cmp	r1, #126	; 0x7e
 8012a22:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012a26:	fba6 5202 	umull	r5, r2, r6, r2
 8012a2a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012a2e:	fb00 3312 	mls	r3, r0, r2, r3
 8012a32:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012a36:	d0e2      	beq.n	80129fe <uxr_read_framed_msg+0x7e>
 8012a38:	2307      	movs	r3, #7
 8012a3a:	86a1      	strh	r1, [r4, #52]	; 0x34
 8012a3c:	7023      	strb	r3, [r4, #0]
 8012a3e:	e7b7      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012a40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012a42:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8012a46:	4573      	cmp	r3, lr
 8012a48:	d233      	bcs.n	8012ab2 <uxr_read_framed_msg+0x132>
 8012a4a:	252a      	movs	r5, #42	; 0x2a
 8012a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a50:	e021      	b.n	8012a96 <uxr_read_framed_msg+0x116>
 8012a52:	fba6 9202 	umull	r9, r2, r6, r2
 8012a56:	7880      	ldrb	r0, [r0, #2]
 8012a58:	0892      	lsrs	r2, r2, #2
 8012a5a:	287d      	cmp	r0, #125	; 0x7d
 8012a5c:	fb05 c212 	mls	r2, r5, r2, ip
 8012a60:	f000 80db 	beq.w	8012c1a <uxr_read_framed_msg+0x29a>
 8012a64:	287e      	cmp	r0, #126	; 0x7e
 8012a66:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012a6a:	f000 81db 	beq.w	8012e24 <uxr_read_framed_msg+0x4a4>
 8012a6e:	54f8      	strb	r0, [r7, r3]
 8012a70:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8012a74:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012a76:	ea8c 0100 	eor.w	r1, ip, r0
 8012a7a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8012a7e:	3301      	adds	r3, #1
 8012a80:	b2c9      	uxtb	r1, r1
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8012a88:	4573      	cmp	r3, lr
 8012a8a:	8663      	strh	r3, [r4, #50]	; 0x32
 8012a8c:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 8012a90:	86e2      	strh	r2, [r4, #54]	; 0x36
 8012a92:	f080 8115 	bcs.w	8012cc0 <uxr_read_framed_msg+0x340>
 8012a96:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8012a9a:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 8012a9e:	f101 0c01 	add.w	ip, r1, #1
 8012aa2:	1860      	adds	r0, r4, r1
 8012aa4:	458b      	cmp	fp, r1
 8012aa6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012aaa:	d1d2      	bne.n	8012a52 <uxr_read_framed_msg+0xd2>
 8012aac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012ab0:	459e      	cmp	lr, r3
 8012ab2:	f040 810c 	bne.w	8012cce <uxr_read_framed_msg+0x34e>
 8012ab6:	2306      	movs	r3, #6
 8012ab8:	7023      	strb	r3, [r4, #0]
 8012aba:	e779      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012abc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012ac0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012ac4:	4298      	cmp	r0, r3
 8012ac6:	f000 80a4 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 8012aca:	18e2      	adds	r2, r4, r3
 8012acc:	7891      	ldrb	r1, [r2, #2]
 8012ace:	297d      	cmp	r1, #125	; 0x7d
 8012ad0:	f000 8130 	beq.w	8012d34 <uxr_read_framed_msg+0x3b4>
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	202a      	movs	r0, #42	; 0x2a
 8012ad8:	297e      	cmp	r1, #126	; 0x7e
 8012ada:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012ade:	fba6 5202 	umull	r5, r2, r6, r2
 8012ae2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012ae6:	fb00 3312 	mls	r3, r0, r2, r3
 8012aea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012aee:	d086      	beq.n	80129fe <uxr_read_framed_msg+0x7e>
 8012af0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012af2:	2000      	movs	r0, #0
 8012af4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012af8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012afa:	8660      	strh	r0, [r4, #50]	; 0x32
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	86e0      	strh	r0, [r4, #54]	; 0x36
 8012b00:	428b      	cmp	r3, r1
 8012b02:	8623      	strh	r3, [r4, #48]	; 0x30
 8012b04:	f240 80ef 	bls.w	8012ce6 <uxr_read_framed_msg+0x366>
 8012b08:	7020      	strb	r0, [r4, #0]
 8012b0a:	b005      	add	sp, #20
 8012b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b10:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012b14:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012b18:	4298      	cmp	r0, r3
 8012b1a:	d07a      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012b1c:	18e2      	adds	r2, r4, r3
 8012b1e:	7891      	ldrb	r1, [r2, #2]
 8012b20:	297d      	cmp	r1, #125	; 0x7d
 8012b22:	f000 8143 	beq.w	8012dac <uxr_read_framed_msg+0x42c>
 8012b26:	3301      	adds	r3, #1
 8012b28:	202a      	movs	r0, #42	; 0x2a
 8012b2a:	297e      	cmp	r1, #126	; 0x7e
 8012b2c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012b30:	fba6 5202 	umull	r5, r2, r6, r2
 8012b34:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012b38:	fb00 3312 	mls	r3, r0, r2, r3
 8012b3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012b40:	f43f af5d 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012b44:	2304      	movs	r3, #4
 8012b46:	8621      	strh	r1, [r4, #48]	; 0x30
 8012b48:	7023      	strb	r3, [r4, #0]
 8012b4a:	e731      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012b4c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012b50:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012b54:	4291      	cmp	r1, r2
 8012b56:	d05c      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012b58:	18a3      	adds	r3, r4, r2
 8012b5a:	7898      	ldrb	r0, [r3, #2]
 8012b5c:	287d      	cmp	r0, #125	; 0x7d
 8012b5e:	f000 8143 	beq.w	8012de8 <uxr_read_framed_msg+0x468>
 8012b62:	3201      	adds	r2, #1
 8012b64:	232a      	movs	r3, #42	; 0x2a
 8012b66:	287e      	cmp	r0, #126	; 0x7e
 8012b68:	ea4f 0152 	mov.w	r1, r2, lsr #1
 8012b6c:	fba6 5101 	umull	r5, r1, r6, r1
 8012b70:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8012b74:	fb03 2211 	mls	r2, r3, r1, r2
 8012b78:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012b7c:	f43f af3f 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012b80:	7863      	ldrb	r3, [r4, #1]
 8012b82:	4283      	cmp	r3, r0
 8012b84:	bf0c      	ite	eq
 8012b86:	2303      	moveq	r3, #3
 8012b88:	2300      	movne	r3, #0
 8012b8a:	7023      	strb	r3, [r4, #0]
 8012b8c:	e710      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012b8e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012b92:	2200      	movs	r2, #0
 8012b94:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012b98:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012b9c:	4299      	cmp	r1, r3
 8012b9e:	d038      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012ba0:	18e2      	adds	r2, r4, r3
 8012ba2:	7892      	ldrb	r2, [r2, #2]
 8012ba4:	2a7d      	cmp	r2, #125	; 0x7d
 8012ba6:	f000 80a5 	beq.w	8012cf4 <uxr_read_framed_msg+0x374>
 8012baa:	1c59      	adds	r1, r3, #1
 8012bac:	202a      	movs	r0, #42	; 0x2a
 8012bae:	2a7e      	cmp	r2, #126	; 0x7e
 8012bb0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012bb4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8012bb8:	fba6 5303 	umull	r5, r3, r6, r3
 8012bbc:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8012bc0:	fb00 1313 	mls	r3, r0, r3, r1
 8012bc4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012bc8:	f000 808b 	beq.w	8012ce2 <uxr_read_framed_msg+0x362>
 8012bcc:	2302      	movs	r3, #2
 8012bce:	7023      	strb	r3, [r4, #0]
 8012bd0:	e6ee      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012bd2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012bd6:	252a      	movs	r5, #42	; 0x2a
 8012bd8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012bdc:	1c59      	adds	r1, r3, #1
 8012bde:	eb04 0c03 	add.w	ip, r4, r3
 8012be2:	4298      	cmp	r0, r3
 8012be4:	ea4f 0251 	mov.w	r2, r1, lsr #1
 8012be8:	d013      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012bea:	fba6 2302 	umull	r2, r3, r6, r2
 8012bee:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8012bf2:	089b      	lsrs	r3, r3, #2
 8012bf4:	2a7e      	cmp	r2, #126	; 0x7e
 8012bf6:	fb05 1313 	mls	r3, r5, r3, r1
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012c00:	f43f aefd 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012c04:	1c59      	adds	r1, r3, #1
 8012c06:	4298      	cmp	r0, r3
 8012c08:	eb04 0c03 	add.w	ip, r4, r3
 8012c0c:	ea4f 0251 	mov.w	r2, r1, lsr #1
 8012c10:	d1eb      	bne.n	8012bea <uxr_read_framed_msg+0x26a>
 8012c12:	2000      	movs	r0, #0
 8012c14:	b005      	add	sp, #20
 8012c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1a:	f101 0c01 	add.w	ip, r1, #1
 8012c1e:	3102      	adds	r1, #2
 8012c20:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012c24:	0848      	lsrs	r0, r1, #1
 8012c26:	fba6 9202 	umull	r9, r2, r6, r2
 8012c2a:	fba6 9000 	umull	r9, r0, r6, r0
 8012c2e:	0892      	lsrs	r2, r2, #2
 8012c30:	0880      	lsrs	r0, r0, #2
 8012c32:	fb05 c212 	mls	r2, r5, r2, ip
 8012c36:	fb05 1110 	mls	r1, r5, r0, r1
 8012c3a:	18a0      	adds	r0, r4, r2
 8012c3c:	b2d2      	uxtb	r2, r2
 8012c3e:	4593      	cmp	fp, r2
 8012c40:	f43f af34 	beq.w	8012aac <uxr_read_framed_msg+0x12c>
 8012c44:	7880      	ldrb	r0, [r0, #2]
 8012c46:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8012c4a:	287e      	cmp	r0, #126	; 0x7e
 8012c4c:	f080 0020 	eor.w	r0, r0, #32
 8012c50:	f47f af0d 	bne.w	8012a6e <uxr_read_framed_msg+0xee>
 8012c54:	459e      	cmp	lr, r3
 8012c56:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012c5a:	f43f af2c 	beq.w	8012ab6 <uxr_read_framed_msg+0x136>
 8012c5e:	2301      	movs	r3, #1
 8012c60:	7023      	strb	r3, [r4, #0]
 8012c62:	e6a5      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012c64:	1c59      	adds	r1, r3, #1
 8012c66:	252a      	movs	r5, #42	; 0x2a
 8012c68:	084a      	lsrs	r2, r1, #1
 8012c6a:	fba6 c202 	umull	ip, r2, r6, r2
 8012c6e:	0892      	lsrs	r2, r2, #2
 8012c70:	fb05 1212 	mls	r2, r5, r2, r1
 8012c74:	b2d1      	uxtb	r1, r2
 8012c76:	4288      	cmp	r0, r1
 8012c78:	d0cb      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012c7a:	3302      	adds	r3, #2
 8012c7c:	4422      	add	r2, r4
 8012c7e:	0858      	lsrs	r0, r3, #1
 8012c80:	7891      	ldrb	r1, [r2, #2]
 8012c82:	fba6 0200 	umull	r0, r2, r6, r0
 8012c86:	297e      	cmp	r1, #126	; 0x7e
 8012c88:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012c8c:	fb05 3312 	mls	r3, r5, r2, r3
 8012c90:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012c94:	f43f aeb3 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012c98:	f081 0120 	eor.w	r1, r1, #32
 8012c9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012ca2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012ca6:	7020      	strb	r0, [r4, #0]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	429a      	cmp	r2, r3
 8012cac:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012cae:	d1b0      	bne.n	8012c12 <uxr_read_framed_msg+0x292>
 8012cb0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012cb6:	7013      	strb	r3, [r2, #0]
 8012cb8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012cba:	b005      	add	sp, #20
 8012cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012cc4:	f43f aef7 	beq.w	8012ab6 <uxr_read_framed_msg+0x136>
 8012cc8:	287e      	cmp	r0, #126	; 0x7e
 8012cca:	f43f ae98 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012cd0:	4652      	mov	r2, sl
 8012cd2:	4649      	mov	r1, r9
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	ab10      	add	r3, sp, #64	; 0x40
 8012cda:	f7ff fdc9 	bl	8012870 <uxr_framing_read_transport>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d097      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012ce2:	7823      	ldrb	r3, [r4, #0]
 8012ce4:	e664      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012ce6:	2305      	movs	r3, #5
 8012ce8:	7023      	strb	r3, [r4, #0]
 8012cea:	e661      	b.n	80129b0 <uxr_read_framed_msg+0x30>
 8012cec:	30c30c31 	.word	0x30c30c31
 8012cf0:	080201d4 	.word	0x080201d4
 8012cf4:	1c5d      	adds	r5, r3, #1
 8012cf6:	202a      	movs	r0, #42	; 0x2a
 8012cf8:	086a      	lsrs	r2, r5, #1
 8012cfa:	fba6 c202 	umull	ip, r2, r6, r2
 8012cfe:	0892      	lsrs	r2, r2, #2
 8012d00:	fb00 5212 	mls	r2, r0, r2, r5
 8012d04:	b2d5      	uxtb	r5, r2
 8012d06:	42a9      	cmp	r1, r5
 8012d08:	d083      	beq.n	8012c12 <uxr_read_framed_msg+0x292>
 8012d0a:	3302      	adds	r3, #2
 8012d0c:	4422      	add	r2, r4
 8012d0e:	0859      	lsrs	r1, r3, #1
 8012d10:	7895      	ldrb	r5, [r2, #2]
 8012d12:	fba6 1201 	umull	r1, r2, r6, r1
 8012d16:	2d7e      	cmp	r5, #126	; 0x7e
 8012d18:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012d1c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012d20:	fb00 3312 	mls	r3, r0, r2, r3
 8012d24:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012d28:	d0db      	beq.n	8012ce2 <uxr_read_framed_msg+0x362>
 8012d2a:	f085 0520 	eor.w	r5, r5, #32
 8012d2e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012d32:	e74b      	b.n	8012bcc <uxr_read_framed_msg+0x24c>
 8012d34:	1c59      	adds	r1, r3, #1
 8012d36:	252a      	movs	r5, #42	; 0x2a
 8012d38:	084a      	lsrs	r2, r1, #1
 8012d3a:	fba6 c202 	umull	ip, r2, r6, r2
 8012d3e:	0892      	lsrs	r2, r2, #2
 8012d40:	fb05 1212 	mls	r2, r5, r2, r1
 8012d44:	b2d1      	uxtb	r1, r2
 8012d46:	4288      	cmp	r0, r1
 8012d48:	f43f af63 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 8012d4c:	3302      	adds	r3, #2
 8012d4e:	4422      	add	r2, r4
 8012d50:	0858      	lsrs	r0, r3, #1
 8012d52:	7891      	ldrb	r1, [r2, #2]
 8012d54:	fba6 0200 	umull	r0, r2, r6, r0
 8012d58:	297e      	cmp	r1, #126	; 0x7e
 8012d5a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012d5e:	fb05 3312 	mls	r3, r5, r2, r3
 8012d62:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012d66:	f43f ae4a 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012d6a:	f081 0120 	eor.w	r1, r1, #32
 8012d6e:	e6bf      	b.n	8012af0 <uxr_read_framed_msg+0x170>
 8012d70:	1c59      	adds	r1, r3, #1
 8012d72:	252a      	movs	r5, #42	; 0x2a
 8012d74:	084a      	lsrs	r2, r1, #1
 8012d76:	fba6 c202 	umull	ip, r2, r6, r2
 8012d7a:	0892      	lsrs	r2, r2, #2
 8012d7c:	fb05 1212 	mls	r2, r5, r2, r1
 8012d80:	b2d1      	uxtb	r1, r2
 8012d82:	4288      	cmp	r0, r1
 8012d84:	f43f af45 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 8012d88:	3302      	adds	r3, #2
 8012d8a:	4422      	add	r2, r4
 8012d8c:	0858      	lsrs	r0, r3, #1
 8012d8e:	7891      	ldrb	r1, [r2, #2]
 8012d90:	fba6 0200 	umull	r0, r2, r6, r0
 8012d94:	297e      	cmp	r1, #126	; 0x7e
 8012d96:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012d9a:	fb05 3312 	mls	r3, r5, r2, r3
 8012d9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012da2:	f43f ae2c 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012da6:	f081 0120 	eor.w	r1, r1, #32
 8012daa:	e645      	b.n	8012a38 <uxr_read_framed_msg+0xb8>
 8012dac:	1c59      	adds	r1, r3, #1
 8012dae:	252a      	movs	r5, #42	; 0x2a
 8012db0:	084a      	lsrs	r2, r1, #1
 8012db2:	fba6 c202 	umull	ip, r2, r6, r2
 8012db6:	0892      	lsrs	r2, r2, #2
 8012db8:	fb05 1212 	mls	r2, r5, r2, r1
 8012dbc:	b2d1      	uxtb	r1, r2
 8012dbe:	4288      	cmp	r0, r1
 8012dc0:	f43f af27 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 8012dc4:	3302      	adds	r3, #2
 8012dc6:	4422      	add	r2, r4
 8012dc8:	0858      	lsrs	r0, r3, #1
 8012dca:	7891      	ldrb	r1, [r2, #2]
 8012dcc:	fba6 0200 	umull	r0, r2, r6, r0
 8012dd0:	297e      	cmp	r1, #126	; 0x7e
 8012dd2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012dd6:	fb05 3312 	mls	r3, r5, r2, r3
 8012dda:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012dde:	f43f ae0e 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012de2:	f081 0120 	eor.w	r1, r1, #32
 8012de6:	e6ad      	b.n	8012b44 <uxr_read_framed_msg+0x1c4>
 8012de8:	1c50      	adds	r0, r2, #1
 8012dea:	252a      	movs	r5, #42	; 0x2a
 8012dec:	0843      	lsrs	r3, r0, #1
 8012dee:	fba6 c303 	umull	ip, r3, r6, r3
 8012df2:	089b      	lsrs	r3, r3, #2
 8012df4:	fb05 0313 	mls	r3, r5, r3, r0
 8012df8:	b2d8      	uxtb	r0, r3
 8012dfa:	4281      	cmp	r1, r0
 8012dfc:	f43f af09 	beq.w	8012c12 <uxr_read_framed_msg+0x292>
 8012e00:	3202      	adds	r2, #2
 8012e02:	4423      	add	r3, r4
 8012e04:	0851      	lsrs	r1, r2, #1
 8012e06:	789b      	ldrb	r3, [r3, #2]
 8012e08:	fba6 0101 	umull	r0, r1, r6, r1
 8012e0c:	2b7e      	cmp	r3, #126	; 0x7e
 8012e0e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8012e12:	fb05 2211 	mls	r2, r5, r1, r2
 8012e16:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012e1a:	f43f adf0 	beq.w	80129fe <uxr_read_framed_msg+0x7e>
 8012e1e:	f083 0020 	eor.w	r0, r3, #32
 8012e22:	e6ad      	b.n	8012b80 <uxr_read_framed_msg+0x200>
 8012e24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012e28:	e5e9      	b.n	80129fe <uxr_read_framed_msg+0x7e>
 8012e2a:	bf00      	nop

08012e2c <uxr_stream_id>:
 8012e2c:	2901      	cmp	r1, #1
 8012e2e:	b430      	push	{r4, r5}
 8012e30:	4604      	mov	r4, r0
 8012e32:	b082      	sub	sp, #8
 8012e34:	d01e      	beq.n	8012e74 <uxr_stream_id+0x48>
 8012e36:	2902      	cmp	r1, #2
 8012e38:	f04f 0500 	mov.w	r5, #0
 8012e3c:	d01d      	beq.n	8012e7a <uxr_stream_id+0x4e>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	4618      	mov	r0, r3
 8012e42:	f365 0307 	bfi	r3, r5, #0, #8
 8012e46:	f364 230f 	bfi	r3, r4, #8, #8
 8012e4a:	f361 4317 	bfi	r3, r1, #16, #8
 8012e4e:	f362 631f 	bfi	r3, r2, #24, #8
 8012e52:	b2dc      	uxtb	r4, r3
 8012e54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012e58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012e5c:	0e1b      	lsrs	r3, r3, #24
 8012e5e:	f364 0007 	bfi	r0, r4, #0, #8
 8012e62:	f361 200f 	bfi	r0, r1, #8, #8
 8012e66:	f362 4017 	bfi	r0, r2, #16, #8
 8012e6a:	f363 601f 	bfi	r0, r3, #24, #8
 8012e6e:	b002      	add	sp, #8
 8012e70:	bc30      	pop	{r4, r5}
 8012e72:	4770      	bx	lr
 8012e74:	1c45      	adds	r5, r0, #1
 8012e76:	b2ed      	uxtb	r5, r5
 8012e78:	e7e1      	b.n	8012e3e <uxr_stream_id+0x12>
 8012e7a:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 8012e7e:	e7de      	b.n	8012e3e <uxr_stream_id+0x12>

08012e80 <uxr_stream_id_from_raw>:
 8012e80:	b430      	push	{r4, r5}
 8012e82:	b082      	sub	sp, #8
 8012e84:	b128      	cbz	r0, 8012e92 <uxr_stream_id_from_raw+0x12>
 8012e86:	0603      	lsls	r3, r0, #24
 8012e88:	d421      	bmi.n	8012ece <uxr_stream_id_from_raw+0x4e>
 8012e8a:	1e44      	subs	r4, r0, #1
 8012e8c:	2501      	movs	r5, #1
 8012e8e:	b2e4      	uxtb	r4, r4
 8012e90:	e001      	b.n	8012e96 <uxr_stream_id_from_raw+0x16>
 8012e92:	4605      	mov	r5, r0
 8012e94:	4604      	mov	r4, r0
 8012e96:	2300      	movs	r3, #0
 8012e98:	461a      	mov	r2, r3
 8012e9a:	f360 0307 	bfi	r3, r0, #0, #8
 8012e9e:	f364 230f 	bfi	r3, r4, #8, #8
 8012ea2:	f365 4317 	bfi	r3, r5, #16, #8
 8012ea6:	f361 631f 	bfi	r3, r1, #24, #8
 8012eaa:	b2dc      	uxtb	r4, r3
 8012eac:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8012eb0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8012eb4:	0e1b      	lsrs	r3, r3, #24
 8012eb6:	f364 0207 	bfi	r2, r4, #0, #8
 8012eba:	f360 220f 	bfi	r2, r0, #8, #8
 8012ebe:	f361 4217 	bfi	r2, r1, #16, #8
 8012ec2:	f363 621f 	bfi	r2, r3, #24, #8
 8012ec6:	4610      	mov	r0, r2
 8012ec8:	b002      	add	sp, #8
 8012eca:	bc30      	pop	{r4, r5}
 8012ecc:	4770      	bx	lr
 8012ece:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8012ed2:	2502      	movs	r5, #2
 8012ed4:	e7df      	b.n	8012e96 <uxr_stream_id_from_raw+0x16>
 8012ed6:	bf00      	nop

08012ed8 <uxr_init_stream_storage>:
 8012ed8:	2300      	movs	r3, #0
 8012eda:	7403      	strb	r3, [r0, #16]
 8012edc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012ee0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8012ee4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8012ee8:	4770      	bx	lr
 8012eea:	bf00      	nop

08012eec <uxr_reset_stream_storage>:
 8012eec:	b570      	push	{r4, r5, r6, lr}
 8012eee:	7c03      	ldrb	r3, [r0, #16]
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	b14b      	cbz	r3, 8012f08 <uxr_reset_stream_storage+0x1c>
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	2500      	movs	r5, #0
 8012ef8:	4630      	mov	r0, r6
 8012efa:	3501      	adds	r5, #1
 8012efc:	f001 fcba 	bl	8014874 <uxr_reset_output_best_effort_stream>
 8012f00:	7c23      	ldrb	r3, [r4, #16]
 8012f02:	3610      	adds	r6, #16
 8012f04:	42ab      	cmp	r3, r5
 8012f06:	d8f7      	bhi.n	8012ef8 <uxr_reset_stream_storage+0xc>
 8012f08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012f0c:	b15b      	cbz	r3, 8012f26 <uxr_reset_stream_storage+0x3a>
 8012f0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012f12:	2500      	movs	r5, #0
 8012f14:	4630      	mov	r0, r6
 8012f16:	3501      	adds	r5, #1
 8012f18:	f001 fab0 	bl	801447c <uxr_reset_input_best_effort_stream>
 8012f1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012f20:	3602      	adds	r6, #2
 8012f22:	42ab      	cmp	r3, r5
 8012f24:	d8f6      	bhi.n	8012f14 <uxr_reset_stream_storage+0x28>
 8012f26:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012f2a:	b15b      	cbz	r3, 8012f44 <uxr_reset_stream_storage+0x58>
 8012f2c:	f104 0618 	add.w	r6, r4, #24
 8012f30:	2500      	movs	r5, #0
 8012f32:	4630      	mov	r0, r6
 8012f34:	3501      	adds	r5, #1
 8012f36:	f001 fd3f 	bl	80149b8 <uxr_reset_output_reliable_stream>
 8012f3a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012f3e:	3628      	adds	r6, #40	; 0x28
 8012f40:	42ab      	cmp	r3, r5
 8012f42:	d8f6      	bhi.n	8012f32 <uxr_reset_stream_storage+0x46>
 8012f44:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012f48:	b15b      	cbz	r3, 8012f62 <uxr_reset_stream_storage+0x76>
 8012f4a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8012f4e:	2500      	movs	r5, #0
 8012f50:	4630      	mov	r0, r6
 8012f52:	3501      	adds	r5, #1
 8012f54:	f001 fafa 	bl	801454c <uxr_reset_input_reliable_stream>
 8012f58:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012f5c:	3618      	adds	r6, #24
 8012f5e:	42ab      	cmp	r3, r5
 8012f60:	d8f6      	bhi.n	8012f50 <uxr_reset_stream_storage+0x64>
 8012f62:	bd70      	pop	{r4, r5, r6, pc}

08012f64 <uxr_add_output_best_effort_buffer>:
 8012f64:	b570      	push	{r4, r5, r6, lr}
 8012f66:	7c05      	ldrb	r5, [r0, #16]
 8012f68:	4604      	mov	r4, r0
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	1c6e      	adds	r6, r5, #1
 8012f6e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8012f72:	7426      	strb	r6, [r4, #16]
 8012f74:	f001 fc72 	bl	801485c <uxr_init_output_best_effort_stream>
 8012f78:	2201      	movs	r2, #1
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	b002      	add	sp, #8
 8012f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f84:	f7ff bf52 	b.w	8012e2c <uxr_stream_id>

08012f88 <uxr_add_output_reliable_buffer>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8012f90:	2528      	movs	r5, #40	; 0x28
 8012f92:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8012f96:	fb05 0504 	mla	r5, r5, r4, r0
 8012f9a:	9600      	str	r6, [sp, #0]
 8012f9c:	1c66      	adds	r6, r4, #1
 8012f9e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8012fa2:	f105 0018 	add.w	r0, r5, #24
 8012fa6:	f001 fcd5 	bl	8014954 <uxr_init_output_reliable_stream>
 8012faa:	4620      	mov	r0, r4
 8012fac:	2201      	movs	r2, #1
 8012fae:	2102      	movs	r1, #2
 8012fb0:	b004      	add	sp, #16
 8012fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fb6:	f7ff bf39 	b.w	8012e2c <uxr_stream_id>
 8012fba:	bf00      	nop

08012fbc <uxr_add_input_best_effort_buffer>:
 8012fbc:	b510      	push	{r4, lr}
 8012fbe:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	1c62      	adds	r2, r4, #1
 8012fc6:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8012fca:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8012fce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012fd2:	f001 fa4f 	bl	8014474 <uxr_init_input_best_effort_stream>
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	2200      	movs	r2, #0
 8012fda:	2101      	movs	r1, #1
 8012fdc:	b002      	add	sp, #8
 8012fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fe2:	f7ff bf23 	b.w	8012e2c <uxr_stream_id>
 8012fe6:	bf00      	nop

08012fe8 <uxr_add_input_reliable_buffer>:
 8012fe8:	b570      	push	{r4, r5, r6, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8012ff0:	2518      	movs	r5, #24
 8012ff2:	9e08      	ldr	r6, [sp, #32]
 8012ff4:	fb05 0504 	mla	r5, r5, r4, r0
 8012ff8:	9600      	str	r6, [sp, #0]
 8012ffa:	1c66      	adds	r6, r4, #1
 8012ffc:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8013000:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013004:	f001 fa7e 	bl	8014504 <uxr_init_input_reliable_stream>
 8013008:	4620      	mov	r0, r4
 801300a:	2200      	movs	r2, #0
 801300c:	2102      	movs	r1, #2
 801300e:	b004      	add	sp, #16
 8013010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013014:	f7ff bf0a 	b.w	8012e2c <uxr_stream_id>

08013018 <uxr_get_output_best_effort_stream>:
 8013018:	7c03      	ldrb	r3, [r0, #16]
 801301a:	428b      	cmp	r3, r1
 801301c:	bf8c      	ite	hi
 801301e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013022:	2000      	movls	r0, #0
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop

08013028 <uxr_get_output_reliable_stream>:
 8013028:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801302c:	428b      	cmp	r3, r1
 801302e:	d905      	bls.n	801303c <uxr_get_output_reliable_stream+0x14>
 8013030:	2328      	movs	r3, #40	; 0x28
 8013032:	fb03 0101 	mla	r1, r3, r1, r0
 8013036:	f101 0018 	add.w	r0, r1, #24
 801303a:	4770      	bx	lr
 801303c:	2000      	movs	r0, #0
 801303e:	4770      	bx	lr

08013040 <uxr_get_input_best_effort_stream>:
 8013040:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8013044:	428b      	cmp	r3, r1
 8013046:	d903      	bls.n	8013050 <uxr_get_input_best_effort_stream+0x10>
 8013048:	3121      	adds	r1, #33	; 0x21
 801304a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801304e:	4770      	bx	lr
 8013050:	2000      	movs	r0, #0
 8013052:	4770      	bx	lr

08013054 <uxr_get_input_reliable_stream>:
 8013054:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013058:	428b      	cmp	r3, r1
 801305a:	d905      	bls.n	8013068 <uxr_get_input_reliable_stream+0x14>
 801305c:	2318      	movs	r3, #24
 801305e:	fb03 0101 	mla	r1, r3, r1, r0
 8013062:	f101 0048 	add.w	r0, r1, #72	; 0x48
 8013066:	4770      	bx	lr
 8013068:	2000      	movs	r0, #0
 801306a:	4770      	bx	lr

0801306c <uxr_output_streams_confirmed>:
 801306c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013070:	b183      	cbz	r3, 8013094 <uxr_output_streams_confirmed+0x28>
 8013072:	b570      	push	{r4, r5, r6, lr}
 8013074:	4606      	mov	r6, r0
 8013076:	f100 0518 	add.w	r5, r0, #24
 801307a:	2400      	movs	r4, #0
 801307c:	e000      	b.n	8013080 <uxr_output_streams_confirmed+0x14>
 801307e:	b140      	cbz	r0, 8013092 <uxr_output_streams_confirmed+0x26>
 8013080:	4628      	mov	r0, r5
 8013082:	3401      	adds	r4, #1
 8013084:	f001 ff3c 	bl	8014f00 <uxr_is_output_up_to_date>
 8013088:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801308c:	3528      	adds	r5, #40	; 0x28
 801308e:	42a3      	cmp	r3, r4
 8013090:	d8f5      	bhi.n	801307e <uxr_output_streams_confirmed+0x12>
 8013092:	bd70      	pop	{r4, r5, r6, pc}
 8013094:	2001      	movs	r0, #1
 8013096:	4770      	bx	lr

08013098 <uxr_buffer_submessage_header>:
 8013098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801309a:	460e      	mov	r6, r1
 801309c:	2104      	movs	r1, #4
 801309e:	4604      	mov	r4, r0
 80130a0:	4615      	mov	r5, r2
 80130a2:	461f      	mov	r7, r3
 80130a4:	f7f7 fdfe 	bl	800aca4 <ucdr_align_to>
 80130a8:	2001      	movs	r0, #1
 80130aa:	4631      	mov	r1, r6
 80130ac:	462b      	mov	r3, r5
 80130ae:	ea47 0200 	orr.w	r2, r7, r0
 80130b2:	7520      	strb	r0, [r4, #20]
 80130b4:	4620      	mov	r0, r4
 80130b6:	f000 fa07 	bl	80134c8 <uxr_serialize_submessage_header>
 80130ba:	4620      	mov	r0, r4
 80130bc:	f7f7 fe08 	bl	800acd0 <ucdr_buffer_remaining>
 80130c0:	42a8      	cmp	r0, r5
 80130c2:	bf34      	ite	cc
 80130c4:	2000      	movcc	r0, #0
 80130c6:	2001      	movcs	r0, #1
 80130c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130ca:	bf00      	nop

080130cc <uxr_read_submessage_header>:
 80130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	4604      	mov	r4, r0
 80130d2:	460d      	mov	r5, r1
 80130d4:	2104      	movs	r1, #4
 80130d6:	4616      	mov	r6, r2
 80130d8:	4698      	mov	r8, r3
 80130da:	f7f7 fde3 	bl	800aca4 <ucdr_align_to>
 80130de:	4620      	mov	r0, r4
 80130e0:	f7f7 fdf6 	bl	800acd0 <ucdr_buffer_remaining>
 80130e4:	2803      	cmp	r0, #3
 80130e6:	bf8c      	ite	hi
 80130e8:	2701      	movhi	r7, #1
 80130ea:	2700      	movls	r7, #0
 80130ec:	d802      	bhi.n	80130f4 <uxr_read_submessage_header+0x28>
 80130ee:	4638      	mov	r0, r7
 80130f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f4:	4633      	mov	r3, r6
 80130f6:	4642      	mov	r2, r8
 80130f8:	4620      	mov	r0, r4
 80130fa:	4629      	mov	r1, r5
 80130fc:	f000 f9f8 	bl	80134f0 <uxr_deserialize_submessage_header>
 8013100:	f898 3000 	ldrb.w	r3, [r8]
 8013104:	4638      	mov	r0, r7
 8013106:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 801310a:	f003 0301 	and.w	r3, r3, #1
 801310e:	f888 2000 	strb.w	r2, [r8]
 8013112:	7523      	strb	r3, [r4, #20]
 8013114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013118 <uxr_submessage_padding>:
 8013118:	f010 0003 	ands.w	r0, r0, #3
 801311c:	bf18      	it	ne
 801311e:	f1c0 0004 	rsbne	r0, r0, #4
 8013122:	4770      	bx	lr

08013124 <uxr_millis>:
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	2001      	movs	r0, #1
 801312a:	4c0a      	ldr	r4, [pc, #40]	; (8013154 <uxr_millis+0x30>)
 801312c:	4669      	mov	r1, sp
 801312e:	f7ef fc93 	bl	8002a58 <clock_gettime>
 8013132:	9800      	ldr	r0, [sp, #0]
 8013134:	9d02      	ldr	r5, [sp, #8]
 8013136:	2300      	movs	r3, #0
 8013138:	fba0 0104 	umull	r0, r1, r0, r4
 801313c:	9e01      	ldr	r6, [sp, #4]
 801313e:	4a06      	ldr	r2, [pc, #24]	; (8013158 <uxr_millis+0x34>)
 8013140:	1940      	adds	r0, r0, r5
 8013142:	fb04 1106 	mla	r1, r4, r6, r1
 8013146:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
 801314a:	f7ee f8fb 	bl	8001344 <__aeabi_ldivmod>
 801314e:	b004      	add	sp, #16
 8013150:	bd70      	pop	{r4, r5, r6, pc}
 8013152:	bf00      	nop
 8013154:	3b9aca00 	.word	0x3b9aca00
 8013158:	000f4240 	.word	0x000f4240

0801315c <uxr_nanos>:
 801315c:	b510      	push	{r4, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	2001      	movs	r0, #1
 8013162:	4669      	mov	r1, sp
 8013164:	f7ef fc78 	bl	8002a58 <clock_gettime>
 8013168:	4906      	ldr	r1, [pc, #24]	; (8013184 <uxr_nanos+0x28>)
 801316a:	9802      	ldr	r0, [sp, #8]
 801316c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013170:	fba2 2301 	umull	r2, r3, r2, r1
 8013174:	fb01 3304 	mla	r3, r1, r4, r3
 8013178:	4604      	mov	r4, r0
 801317a:	1810      	adds	r0, r2, r0
 801317c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013180:	b004      	add	sp, #16
 8013182:	bd10      	pop	{r4, pc}
 8013184:	3b9aca00 	.word	0x3b9aca00

08013188 <on_full_output_buffer_fragmented>:
 8013188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801318c:	460d      	mov	r5, r1
 801318e:	b08b      	sub	sp, #44	; 0x2c
 8013190:	4680      	mov	r8, r0
 8013192:	f891 10bd 	ldrb.w	r1, [r1, #189]	; 0xbd
 8013196:	f105 0008 	add.w	r0, r5, #8
 801319a:	f7ff ff45 	bl	8013028 <uxr_get_output_reliable_stream>
 801319e:	4604      	mov	r4, r0
 80131a0:	f001 feb8 	bl	8014f14 <get_available_free_slots>
 80131a4:	b968      	cbnz	r0, 80131c2 <on_full_output_buffer_fragmented+0x3a>
 80131a6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 80131aa:	4628      	mov	r0, r5
 80131ac:	4798      	blx	r3
 80131ae:	b918      	cbnz	r0, 80131b8 <on_full_output_buffer_fragmented+0x30>
 80131b0:	2001      	movs	r0, #1
 80131b2:	b00b      	add	sp, #44	; 0x2c
 80131b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131b8:	4620      	mov	r0, r4
 80131ba:	f001 feab 	bl	8014f14 <get_available_free_slots>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d0f6      	beq.n	80131b0 <on_full_output_buffer_fragmented+0x28>
 80131c2:	8921      	ldrh	r1, [r4, #8]
 80131c4:	f64f 76fc 	movw	r6, #65532	; 0xfffc
 80131c8:	89e7      	ldrh	r7, [r4, #14]
 80131ca:	2300      	movs	r3, #0
 80131cc:	6862      	ldr	r2, [r4, #4]
 80131ce:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80131d2:	fbb7 f0f1 	udiv	r0, r7, r1
 80131d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80131da:	fb01 7010 	mls	r0, r1, r0, r7
 80131de:	eba6 060c 	sub.w	r6, r6, ip
 80131e2:	f1a2 0904 	sub.w	r9, r2, #4
 80131e6:	6821      	ldr	r1, [r4, #0]
 80131e8:	b280      	uxth	r0, r0
 80131ea:	f8d5 70c0 	ldr.w	r7, [r5, #192]	; 0xc0
 80131ee:	444e      	add	r6, r9
 80131f0:	fb02 f000 	mul.w	r0, r2, r0
 80131f4:	464a      	mov	r2, r9
 80131f6:	b2b6      	uxth	r6, r6
 80131f8:	3004      	adds	r0, #4
 80131fa:	1bbf      	subs	r7, r7, r6
 80131fc:	4401      	add	r1, r0
 80131fe:	a802      	add	r0, sp, #8
 8013200:	f8c5 70c0 	str.w	r7, [r5, #192]	; 0xc0
 8013204:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8013208:	9700      	str	r7, [sp, #0]
 801320a:	f7f7 fd1b 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 801320e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8013212:	4632      	mov	r2, r6
 8013214:	a802      	add	r0, sp, #8
 8013216:	454b      	cmp	r3, r9
 8013218:	bf34      	ite	cc
 801321a:	2302      	movcc	r3, #2
 801321c:	2300      	movcs	r3, #0
 801321e:	210d      	movs	r1, #13
 8013220:	f7ff ff3a 	bl	8013098 <uxr_buffer_submessage_header>
 8013224:	8926      	ldrh	r6, [r4, #8]
 8013226:	89e7      	ldrh	r7, [r4, #14]
 8013228:	2101      	movs	r1, #1
 801322a:	fbb7 f0f6 	udiv	r0, r7, r6
 801322e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013232:	fb06 7010 	mls	r0, r6, r0, r7
 8013236:	fbb3 f3f6 	udiv	r3, r3, r6
 801323a:	b280      	uxth	r0, r0
 801323c:	fb03 f300 	mul.w	r3, r3, r0
 8013240:	f842 9003 	str.w	r9, [r2, r3]
 8013244:	89e0      	ldrh	r0, [r4, #14]
 8013246:	f001 fe85 	bl	8014f54 <uxr_seq_num_add>
 801324a:	9904      	ldr	r1, [sp, #16]
 801324c:	4603      	mov	r3, r0
 801324e:	9a03      	ldr	r2, [sp, #12]
 8013250:	4640      	mov	r0, r8
 8013252:	1a52      	subs	r2, r2, r1
 8013254:	81e3      	strh	r3, [r4, #14]
 8013256:	f7f7 fd07 	bl	800ac68 <ucdr_init_buffer>
 801325a:	4640      	mov	r0, r8
 801325c:	462a      	mov	r2, r5
 801325e:	4903      	ldr	r1, [pc, #12]	; (801326c <on_full_output_buffer_fragmented+0xe4>)
 8013260:	f7f7 fcd8 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 8013264:	2000      	movs	r0, #0
 8013266:	b00b      	add	sp, #44	; 0x2c
 8013268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801326c:	08013189 	.word	0x08013189

08013270 <uxr_prepare_output_stream>:
 8013270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013272:	b087      	sub	sp, #28
 8013274:	2607      	movs	r6, #7
 8013276:	2500      	movs	r5, #0
 8013278:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801327a:	9202      	str	r2, [sp, #8]
 801327c:	1d22      	adds	r2, r4, #4
 801327e:	9103      	str	r1, [sp, #12]
 8013280:	461c      	mov	r4, r3
 8013282:	e9cd 6500 	strd	r6, r5, [sp]
 8013286:	4606      	mov	r6, r0
 8013288:	f7ff f828 	bl	80122dc <uxr_prepare_stream_to_write_submessage>
 801328c:	f080 0201 	eor.w	r2, r0, #1
 8013290:	b2d2      	uxtb	r2, r2
 8013292:	75a2      	strb	r2, [r4, #22]
 8013294:	b112      	cbz	r2, 801329c <uxr_prepare_output_stream+0x2c>
 8013296:	4628      	mov	r0, r5
 8013298:	b007      	add	sp, #28
 801329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801329c:	aa05      	add	r2, sp, #20
 801329e:	9902      	ldr	r1, [sp, #8]
 80132a0:	4630      	mov	r0, r6
 80132a2:	f7ff f951 	bl	8012548 <uxr_init_base_object_request>
 80132a6:	a905      	add	r1, sp, #20
 80132a8:	4605      	mov	r5, r0
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 fb42 	bl	8013934 <uxr_serialize_WRITE_DATA_Payload_Data>
 80132b0:	68a1      	ldr	r1, [r4, #8]
 80132b2:	6862      	ldr	r2, [r4, #4]
 80132b4:	4620      	mov	r0, r4
 80132b6:	69a6      	ldr	r6, [r4, #24]
 80132b8:	69e7      	ldr	r7, [r4, #28]
 80132ba:	1a52      	subs	r2, r2, r1
 80132bc:	f7f7 fcd4 	bl	800ac68 <ucdr_init_buffer>
 80132c0:	4620      	mov	r0, r4
 80132c2:	463a      	mov	r2, r7
 80132c4:	4631      	mov	r1, r6
 80132c6:	f7f7 fca5 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 80132ca:	4628      	mov	r0, r5
 80132cc:	b007      	add	sp, #28
 80132ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080132d0 <uxr_prepare_output_stream_fragmented>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	b091      	sub	sp, #68	; 0x44
 80132d6:	4605      	mov	r5, r0
 80132d8:	3008      	adds	r0, #8
 80132da:	461e      	mov	r6, r3
 80132dc:	9105      	str	r1, [sp, #20]
 80132de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80132e2:	9204      	str	r2, [sp, #16]
 80132e4:	f7ff fea0 	bl	8013028 <uxr_get_output_reliable_stream>
 80132e8:	2800      	cmp	r0, #0
 80132ea:	f000 8088 	beq.w	80133fe <uxr_prepare_output_stream_fragmented+0x12e>
 80132ee:	4604      	mov	r4, r0
 80132f0:	f001 fe10 	bl	8014f14 <get_available_free_slots>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d07e      	beq.n	80133f6 <uxr_prepare_output_stream_fragmented+0x126>
 80132f8:	8920      	ldrh	r0, [r4, #8]
 80132fa:	89e7      	ldrh	r7, [r4, #14]
 80132fc:	7b21      	ldrb	r1, [r4, #12]
 80132fe:	fbb7 f8f0 	udiv	r8, r7, r0
 8013302:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013306:	fb00 7818 	mls	r8, r0, r8, r7
 801330a:	fbb2 f2f0 	udiv	r2, r2, r0
 801330e:	fa1f f888 	uxth.w	r8, r8
 8013312:	f1a2 0b04 	sub.w	fp, r2, #4
 8013316:	9203      	str	r2, [sp, #12]
 8013318:	fb02 f808 	mul.w	r8, r2, r8
 801331c:	f108 0804 	add.w	r8, r8, #4
 8013320:	4498      	add	r8, r3
 8013322:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013326:	4551      	cmp	r1, sl
 8013328:	d375      	bcc.n	8013416 <uxr_prepare_output_stream_fragmented+0x146>
 801332a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801332c:	f1ab 0904 	sub.w	r9, fp, #4
 8013330:	a808      	add	r0, sp, #32
 8013332:	2300      	movs	r3, #0
 8013334:	3208      	adds	r2, #8
 8013336:	eba9 0901 	sub.w	r9, r9, r1
 801333a:	f8cd a000 	str.w	sl, [sp]
 801333e:	4641      	mov	r1, r8
 8013340:	9202      	str	r2, [sp, #8]
 8013342:	465a      	mov	r2, fp
 8013344:	f7f7 fc7e 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8013348:	9b02      	ldr	r3, [sp, #8]
 801334a:	fa1f f989 	uxth.w	r9, r9
 801334e:	a808      	add	r0, sp, #32
 8013350:	455b      	cmp	r3, fp
 8013352:	bf34      	ite	cc
 8013354:	2302      	movcc	r3, #2
 8013356:	2300      	movcs	r3, #0
 8013358:	210d      	movs	r1, #13
 801335a:	464a      	mov	r2, r9
 801335c:	f7ff fe9c 	bl	8013098 <uxr_buffer_submessage_header>
 8013360:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013364:	6862      	ldr	r2, [r4, #4]
 8013366:	4638      	mov	r0, r7
 8013368:	6823      	ldr	r3, [r4, #0]
 801336a:	fbb7 f1fc 	udiv	r1, r7, ip
 801336e:	fbb2 f2fc 	udiv	r2, r2, ip
 8013372:	fb0c 7711 	mls	r7, ip, r1, r7
 8013376:	2101      	movs	r1, #1
 8013378:	b2bf      	uxth	r7, r7
 801337a:	fb07 f702 	mul.w	r7, r7, r2
 801337e:	f843 b007 	str.w	fp, [r3, r7]
 8013382:	f001 fde7 	bl	8014f54 <uxr_seq_num_add>
 8013386:	9903      	ldr	r1, [sp, #12]
 8013388:	4607      	mov	r7, r0
 801338a:	4630      	mov	r0, r6
 801338c:	f1a1 0208 	sub.w	r2, r1, #8
 8013390:	f10a 0104 	add.w	r1, sl, #4
 8013394:	eba2 020a 	sub.w	r2, r2, sl
 8013398:	4441      	add	r1, r8
 801339a:	f7f7 fc65 	bl	800ac68 <ucdr_init_buffer>
 801339e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80133a0:	2300      	movs	r3, #0
 80133a2:	81e7      	strh	r7, [r4, #14]
 80133a4:	1d0a      	adds	r2, r1, #4
 80133a6:	4630      	mov	r0, r6
 80133a8:	2107      	movs	r1, #7
 80133aa:	b292      	uxth	r2, r2
 80133ac:	f7ff fe74 	bl	8013098 <uxr_buffer_submessage_header>
 80133b0:	a907      	add	r1, sp, #28
 80133b2:	4628      	mov	r0, r5
 80133b4:	460a      	mov	r2, r1
 80133b6:	9904      	ldr	r1, [sp, #16]
 80133b8:	f7ff f8c6 	bl	8012548 <uxr_init_base_object_request>
 80133bc:	a907      	add	r1, sp, #28
 80133be:	4604      	mov	r4, r0
 80133c0:	4630      	mov	r0, r6
 80133c2:	f000 fab7 	bl	8013934 <uxr_serialize_WRITE_DATA_Payload_Data>
 80133c6:	68b1      	ldr	r1, [r6, #8]
 80133c8:	6872      	ldr	r2, [r6, #4]
 80133ca:	4630      	mov	r0, r6
 80133cc:	1a52      	subs	r2, r2, r1
 80133ce:	f7f7 fc4b 	bl	800ac68 <ucdr_init_buffer>
 80133d2:	9a02      	ldr	r2, [sp, #8]
 80133d4:	9b05      	ldr	r3, [sp, #20]
 80133d6:	4630      	mov	r0, r6
 80133d8:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
 80133dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80133de:	491a      	ldr	r1, [pc, #104]	; (8013448 <uxr_prepare_output_stream_fragmented+0x178>)
 80133e0:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80133e4:	462a      	mov	r2, r5
 80133e6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80133ea:	f7f7 fc13 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 80133ee:	4620      	mov	r0, r4
 80133f0:	b011      	add	sp, #68	; 0x44
 80133f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f6:	4628      	mov	r0, r5
 80133f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133fa:	4798      	blx	r3
 80133fc:	b920      	cbnz	r0, 8013408 <uxr_prepare_output_stream_fragmented+0x138>
 80133fe:	2400      	movs	r4, #0
 8013400:	4620      	mov	r0, r4
 8013402:	b011      	add	sp, #68	; 0x44
 8013404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013408:	4620      	mov	r0, r4
 801340a:	f001 fd83 	bl	8014f14 <get_available_free_slots>
 801340e:	2800      	cmp	r0, #0
 8013410:	f47f af72 	bne.w	80132f8 <uxr_prepare_output_stream_fragmented+0x28>
 8013414:	e7f3      	b.n	80133fe <uxr_prepare_output_stream_fragmented+0x12e>
 8013416:	4638      	mov	r0, r7
 8013418:	2101      	movs	r1, #1
 801341a:	f001 fd9b 	bl	8014f54 <uxr_seq_num_add>
 801341e:	8921      	ldrh	r1, [r4, #8]
 8013420:	4607      	mov	r7, r0
 8013422:	fbb0 f8f1 	udiv	r8, r0, r1
 8013426:	e9d4 3200 	ldrd	r3, r2, [r4]
 801342a:	fb01 0818 	mls	r8, r1, r8, r0
 801342e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013432:	fa1f f888 	uxth.w	r8, r8
 8013436:	7b21      	ldrb	r1, [r4, #12]
 8013438:	fb08 f802 	mul.w	r8, r8, r2
 801343c:	f108 0804 	add.w	r8, r8, #4
 8013440:	4498      	add	r8, r3
 8013442:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013446:	e770      	b.n	801332a <uxr_prepare_output_stream_fragmented+0x5a>
 8013448:	08013189 	.word	0x08013189

0801344c <uxr_serialize_message_header>:
 801344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801344e:	4616      	mov	r6, r2
 8013450:	b083      	sub	sp, #12
 8013452:	4604      	mov	r4, r0
 8013454:	460d      	mov	r5, r1
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	9f08      	ldr	r7, [sp, #32]
 801345a:	f7f7 f883 	bl	800a564 <ucdr_serialize_uint8_t>
 801345e:	4631      	mov	r1, r6
 8013460:	4620      	mov	r0, r4
 8013462:	f7f7 f87f 	bl	800a564 <ucdr_serialize_uint8_t>
 8013466:	9a01      	ldr	r2, [sp, #4]
 8013468:	4620      	mov	r0, r4
 801346a:	2101      	movs	r1, #1
 801346c:	f7f7 f8d0 	bl	800a610 <ucdr_serialize_endian_uint16_t>
 8013470:	062b      	lsls	r3, r5, #24
 8013472:	d501      	bpl.n	8013478 <uxr_serialize_message_header+0x2c>
 8013474:	b003      	add	sp, #12
 8013476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013478:	4639      	mov	r1, r7
 801347a:	4620      	mov	r0, r4
 801347c:	2204      	movs	r2, #4
 801347e:	b003      	add	sp, #12
 8013480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013484:	f7fd bd7e 	b.w	8010f84 <ucdr_serialize_array_uint8_t>

08013488 <uxr_deserialize_message_header>:
 8013488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801348a:	4616      	mov	r6, r2
 801348c:	b083      	sub	sp, #12
 801348e:	4604      	mov	r4, r0
 8013490:	460d      	mov	r5, r1
 8013492:	9301      	str	r3, [sp, #4]
 8013494:	9f08      	ldr	r7, [sp, #32]
 8013496:	f7f7 f87b 	bl	800a590 <ucdr_deserialize_uint8_t>
 801349a:	4631      	mov	r1, r6
 801349c:	4620      	mov	r0, r4
 801349e:	f7f7 f877 	bl	800a590 <ucdr_deserialize_uint8_t>
 80134a2:	9a01      	ldr	r2, [sp, #4]
 80134a4:	4620      	mov	r0, r4
 80134a6:	2101      	movs	r1, #1
 80134a8:	f7f7 f904 	bl	800a6b4 <ucdr_deserialize_endian_uint16_t>
 80134ac:	f995 3000 	ldrsb.w	r3, [r5]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	da01      	bge.n	80134b8 <uxr_deserialize_message_header+0x30>
 80134b4:	b003      	add	sp, #12
 80134b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134b8:	4639      	mov	r1, r7
 80134ba:	4620      	mov	r0, r4
 80134bc:	2204      	movs	r2, #4
 80134be:	b003      	add	sp, #12
 80134c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80134c4:	f7fd bdc2 	b.w	801104c <ucdr_deserialize_array_uint8_t>

080134c8 <uxr_serialize_submessage_header>:
 80134c8:	b530      	push	{r4, r5, lr}
 80134ca:	4615      	mov	r5, r2
 80134cc:	b083      	sub	sp, #12
 80134ce:	4604      	mov	r4, r0
 80134d0:	9301      	str	r3, [sp, #4]
 80134d2:	f7f7 f847 	bl	800a564 <ucdr_serialize_uint8_t>
 80134d6:	4629      	mov	r1, r5
 80134d8:	4620      	mov	r0, r4
 80134da:	f7f7 f843 	bl	800a564 <ucdr_serialize_uint8_t>
 80134de:	9a01      	ldr	r2, [sp, #4]
 80134e0:	4620      	mov	r0, r4
 80134e2:	2101      	movs	r1, #1
 80134e4:	b003      	add	sp, #12
 80134e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134ea:	f7f7 b891 	b.w	800a610 <ucdr_serialize_endian_uint16_t>
 80134ee:	bf00      	nop

080134f0 <uxr_deserialize_submessage_header>:
 80134f0:	b530      	push	{r4, r5, lr}
 80134f2:	4615      	mov	r5, r2
 80134f4:	b083      	sub	sp, #12
 80134f6:	4604      	mov	r4, r0
 80134f8:	9301      	str	r3, [sp, #4]
 80134fa:	f7f7 f849 	bl	800a590 <ucdr_deserialize_uint8_t>
 80134fe:	4629      	mov	r1, r5
 8013500:	4620      	mov	r0, r4
 8013502:	f7f7 f845 	bl	800a590 <ucdr_deserialize_uint8_t>
 8013506:	9a01      	ldr	r2, [sp, #4]
 8013508:	4620      	mov	r0, r4
 801350a:	2101      	movs	r1, #1
 801350c:	b003      	add	sp, #12
 801350e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013512:	f7f7 b8cf 	b.w	800a6b4 <ucdr_deserialize_endian_uint16_t>
 8013516:	bf00      	nop

08013518 <uxr_serialize_CLIENT_Representation>:
 8013518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801351c:	460c      	mov	r4, r1
 801351e:	4605      	mov	r5, r0
 8013520:	2204      	movs	r2, #4
 8013522:	f7fd fd2f 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013526:	1d21      	adds	r1, r4, #4
 8013528:	4680      	mov	r8, r0
 801352a:	2202      	movs	r2, #2
 801352c:	4628      	mov	r0, r5
 801352e:	f7fd fd29 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013532:	4607      	mov	r7, r0
 8013534:	1da1      	adds	r1, r4, #6
 8013536:	2202      	movs	r2, #2
 8013538:	ea07 0708 	and.w	r7, r7, r8
 801353c:	4628      	mov	r0, r5
 801353e:	f7fd fd21 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013542:	2204      	movs	r2, #4
 8013544:	fa5f f887 	uxtb.w	r8, r7
 8013548:	4607      	mov	r7, r0
 801354a:	f104 0108 	add.w	r1, r4, #8
 801354e:	4628      	mov	r0, r5
 8013550:	f7fd fd18 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013554:	ea08 0707 	and.w	r7, r8, r7
 8013558:	4680      	mov	r8, r0
 801355a:	7b21      	ldrb	r1, [r4, #12]
 801355c:	4628      	mov	r0, r5
 801355e:	f7f7 f801 	bl	800a564 <ucdr_serialize_uint8_t>
 8013562:	ea08 0807 	and.w	r8, r8, r7
 8013566:	4607      	mov	r7, r0
 8013568:	7b61      	ldrb	r1, [r4, #13]
 801356a:	4628      	mov	r0, r5
 801356c:	f7f6 ffcc 	bl	800a508 <ucdr_serialize_bool>
 8013570:	ea08 0707 	and.w	r7, r8, r7
 8013574:	7b63      	ldrb	r3, [r4, #13]
 8013576:	ea07 0600 	and.w	r6, r7, r0
 801357a:	b933      	cbnz	r3, 801358a <uxr_serialize_CLIENT_Representation+0x72>
 801357c:	8ba1      	ldrh	r1, [r4, #28]
 801357e:	4628      	mov	r0, r5
 8013580:	f7f7 f81c 	bl	800a5bc <ucdr_serialize_uint16_t>
 8013584:	4030      	ands	r0, r6
 8013586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801358a:	6921      	ldr	r1, [r4, #16]
 801358c:	4628      	mov	r0, r5
 801358e:	f7f7 f8bb 	bl	800a708 <ucdr_serialize_uint32_t>
 8013592:	6923      	ldr	r3, [r4, #16]
 8013594:	b1cb      	cbz	r3, 80135ca <uxr_serialize_CLIENT_Representation+0xb2>
 8013596:	b1d0      	cbz	r0, 80135ce <uxr_serialize_CLIENT_Representation+0xb6>
 8013598:	46a0      	mov	r8, r4
 801359a:	f04f 0900 	mov.w	r9, #0
 801359e:	e000      	b.n	80135a2 <uxr_serialize_CLIENT_Representation+0x8a>
 80135a0:	b1a8      	cbz	r0, 80135ce <uxr_serialize_CLIENT_Representation+0xb6>
 80135a2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80135a6:	4628      	mov	r0, r5
 80135a8:	f7fd fe2c 	bl	8011204 <ucdr_serialize_string>
 80135ac:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80135b0:	4607      	mov	r7, r0
 80135b2:	4628      	mov	r0, r5
 80135b4:	f7fd fe26 	bl	8011204 <ucdr_serialize_string>
 80135b8:	f109 0901 	add.w	r9, r9, #1
 80135bc:	6923      	ldr	r3, [r4, #16]
 80135be:	4038      	ands	r0, r7
 80135c0:	f108 0808 	add.w	r8, r8, #8
 80135c4:	4599      	cmp	r9, r3
 80135c6:	b2c0      	uxtb	r0, r0
 80135c8:	d3ea      	bcc.n	80135a0 <uxr_serialize_CLIENT_Representation+0x88>
 80135ca:	4006      	ands	r6, r0
 80135cc:	e7d6      	b.n	801357c <uxr_serialize_CLIENT_Representation+0x64>
 80135ce:	2600      	movs	r6, #0
 80135d0:	e7d4      	b.n	801357c <uxr_serialize_CLIENT_Representation+0x64>
 80135d2:	bf00      	nop

080135d4 <uxr_serialize_AGENT_Representation>:
 80135d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135d8:	460c      	mov	r4, r1
 80135da:	4605      	mov	r5, r0
 80135dc:	2204      	movs	r2, #4
 80135de:	f7fd fcd1 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 80135e2:	1d21      	adds	r1, r4, #4
 80135e4:	4607      	mov	r7, r0
 80135e6:	2202      	movs	r2, #2
 80135e8:	4628      	mov	r0, r5
 80135ea:	f7fd fccb 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 80135ee:	4606      	mov	r6, r0
 80135f0:	1da1      	adds	r1, r4, #6
 80135f2:	2202      	movs	r2, #2
 80135f4:	403e      	ands	r6, r7
 80135f6:	4628      	mov	r0, r5
 80135f8:	f7fd fcc4 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 80135fc:	4603      	mov	r3, r0
 80135fe:	b2f6      	uxtb	r6, r6
 8013600:	7a21      	ldrb	r1, [r4, #8]
 8013602:	4628      	mov	r0, r5
 8013604:	401e      	ands	r6, r3
 8013606:	f7f6 ff7f 	bl	800a508 <ucdr_serialize_bool>
 801360a:	7a23      	ldrb	r3, [r4, #8]
 801360c:	ea00 0706 	and.w	r7, r0, r6
 8013610:	b913      	cbnz	r3, 8013618 <uxr_serialize_AGENT_Representation+0x44>
 8013612:	4638      	mov	r0, r7
 8013614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013618:	68e1      	ldr	r1, [r4, #12]
 801361a:	4628      	mov	r0, r5
 801361c:	f7f7 f874 	bl	800a708 <ucdr_serialize_uint32_t>
 8013620:	68e3      	ldr	r3, [r4, #12]
 8013622:	b313      	cbz	r3, 801366a <uxr_serialize_AGENT_Representation+0x96>
 8013624:	b1e8      	cbz	r0, 8013662 <uxr_serialize_AGENT_Representation+0x8e>
 8013626:	46a0      	mov	r8, r4
 8013628:	f04f 0900 	mov.w	r9, #0
 801362c:	e000      	b.n	8013630 <uxr_serialize_AGENT_Representation+0x5c>
 801362e:	b1c3      	cbz	r3, 8013662 <uxr_serialize_AGENT_Representation+0x8e>
 8013630:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013634:	4628      	mov	r0, r5
 8013636:	f7fd fde5 	bl	8011204 <ucdr_serialize_string>
 801363a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801363e:	4606      	mov	r6, r0
 8013640:	4628      	mov	r0, r5
 8013642:	f7fd fddf 	bl	8011204 <ucdr_serialize_string>
 8013646:	f109 0901 	add.w	r9, r9, #1
 801364a:	68e2      	ldr	r2, [r4, #12]
 801364c:	ea06 0300 	and.w	r3, r6, r0
 8013650:	f108 0808 	add.w	r8, r8, #8
 8013654:	4591      	cmp	r9, r2
 8013656:	b2db      	uxtb	r3, r3
 8013658:	d3e9      	bcc.n	801362e <uxr_serialize_AGENT_Representation+0x5a>
 801365a:	401f      	ands	r7, r3
 801365c:	4638      	mov	r0, r7
 801365e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013662:	2700      	movs	r7, #0
 8013664:	4638      	mov	r0, r7
 8013666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801366a:	4007      	ands	r7, r0
 801366c:	e7d1      	b.n	8013612 <uxr_serialize_AGENT_Representation+0x3e>
 801366e:	bf00      	nop

08013670 <uxr_deserialize_BaseObjectRequest>:
 8013670:	b570      	push	{r4, r5, r6, lr}
 8013672:	2202      	movs	r2, #2
 8013674:	4605      	mov	r5, r0
 8013676:	460e      	mov	r6, r1
 8013678:	f7fd fce8 	bl	801104c <ucdr_deserialize_array_uint8_t>
 801367c:	4604      	mov	r4, r0
 801367e:	2202      	movs	r2, #2
 8013680:	1cb1      	adds	r1, r6, #2
 8013682:	4628      	mov	r0, r5
 8013684:	f7fd fce2 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013688:	4020      	ands	r0, r4
 801368a:	b2c0      	uxtb	r0, r0
 801368c:	bd70      	pop	{r4, r5, r6, pc}
 801368e:	bf00      	nop

08013690 <uxr_serialize_ReadSpecification>:
 8013690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013694:	460e      	mov	r6, r1
 8013696:	4607      	mov	r7, r0
 8013698:	7809      	ldrb	r1, [r1, #0]
 801369a:	f7f6 ff63 	bl	800a564 <ucdr_serialize_uint8_t>
 801369e:	7871      	ldrb	r1, [r6, #1]
 80136a0:	4604      	mov	r4, r0
 80136a2:	4638      	mov	r0, r7
 80136a4:	f7f6 ff5e 	bl	800a564 <ucdr_serialize_uint8_t>
 80136a8:	4605      	mov	r5, r0
 80136aa:	78b1      	ldrb	r1, [r6, #2]
 80136ac:	4638      	mov	r0, r7
 80136ae:	402c      	ands	r4, r5
 80136b0:	f7f6 ff2a 	bl	800a508 <ucdr_serialize_bool>
 80136b4:	78b3      	ldrb	r3, [r6, #2]
 80136b6:	b2e4      	uxtb	r4, r4
 80136b8:	4004      	ands	r4, r0
 80136ba:	b94b      	cbnz	r3, 80136d0 <uxr_serialize_ReadSpecification+0x40>
 80136bc:	7a31      	ldrb	r1, [r6, #8]
 80136be:	4638      	mov	r0, r7
 80136c0:	f7f6 ff22 	bl	800a508 <ucdr_serialize_bool>
 80136c4:	7a33      	ldrb	r3, [r6, #8]
 80136c6:	4004      	ands	r4, r0
 80136c8:	b943      	cbnz	r3, 80136dc <uxr_serialize_ReadSpecification+0x4c>
 80136ca:	4620      	mov	r0, r4
 80136cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d0:	6871      	ldr	r1, [r6, #4]
 80136d2:	4638      	mov	r0, r7
 80136d4:	f7fd fd96 	bl	8011204 <ucdr_serialize_string>
 80136d8:	4004      	ands	r4, r0
 80136da:	e7ef      	b.n	80136bc <uxr_serialize_ReadSpecification+0x2c>
 80136dc:	8971      	ldrh	r1, [r6, #10]
 80136de:	4638      	mov	r0, r7
 80136e0:	f7f6 ff6c 	bl	800a5bc <ucdr_serialize_uint16_t>
 80136e4:	89b1      	ldrh	r1, [r6, #12]
 80136e6:	4605      	mov	r5, r0
 80136e8:	4638      	mov	r0, r7
 80136ea:	f7f6 ff67 	bl	800a5bc <ucdr_serialize_uint16_t>
 80136ee:	4680      	mov	r8, r0
 80136f0:	89f1      	ldrh	r1, [r6, #14]
 80136f2:	4638      	mov	r0, r7
 80136f4:	ea05 0508 	and.w	r5, r5, r8
 80136f8:	f7f6 ff60 	bl	800a5bc <ucdr_serialize_uint16_t>
 80136fc:	8a31      	ldrh	r1, [r6, #16]
 80136fe:	4606      	mov	r6, r0
 8013700:	b2ed      	uxtb	r5, r5
 8013702:	4638      	mov	r0, r7
 8013704:	f7f6 ff5a 	bl	800a5bc <ucdr_serialize_uint16_t>
 8013708:	4025      	ands	r5, r4
 801370a:	4035      	ands	r5, r6
 801370c:	ea00 0405 	and.w	r4, r0, r5
 8013710:	4620      	mov	r0, r4
 8013712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013716:	bf00      	nop

08013718 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013718:	f7ff befe 	b.w	8013518 <uxr_serialize_CLIENT_Representation>

0801371c <uxr_serialize_CREATE_Payload>:
 801371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371e:	4606      	mov	r6, r0
 8013720:	460d      	mov	r5, r1
 8013722:	2202      	movs	r2, #2
 8013724:	f7fd fc2e 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013728:	1ca9      	adds	r1, r5, #2
 801372a:	4604      	mov	r4, r0
 801372c:	2202      	movs	r2, #2
 801372e:	4630      	mov	r0, r6
 8013730:	f7fd fc28 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013734:	7929      	ldrb	r1, [r5, #4]
 8013736:	4607      	mov	r7, r0
 8013738:	4630      	mov	r0, r6
 801373a:	f7f6 ff13 	bl	800a564 <ucdr_serialize_uint8_t>
 801373e:	b328      	cbz	r0, 801378c <uxr_serialize_CREATE_Payload+0x70>
 8013740:	792b      	ldrb	r3, [r5, #4]
 8013742:	403c      	ands	r4, r7
 8013744:	3b01      	subs	r3, #1
 8013746:	b2e4      	uxtb	r4, r4
 8013748:	2b0d      	cmp	r3, #13
 801374a:	d81d      	bhi.n	8013788 <uxr_serialize_CREATE_Payload+0x6c>
 801374c:	e8df f003 	tbb	[pc, r3]
 8013750:	32320753 	.word	0x32320753
 8013754:	07070707 	.word	0x07070707
 8013758:	2121211c 	.word	0x2121211c
 801375c:	684c      	.short	0x684c
 801375e:	7a29      	ldrb	r1, [r5, #8]
 8013760:	4630      	mov	r0, r6
 8013762:	f7f6 feff 	bl	800a564 <ucdr_serialize_uint8_t>
 8013766:	4607      	mov	r7, r0
 8013768:	b130      	cbz	r0, 8013778 <uxr_serialize_CREATE_Payload+0x5c>
 801376a:	7a2b      	ldrb	r3, [r5, #8]
 801376c:	2b02      	cmp	r3, #2
 801376e:	d035      	beq.n	80137dc <uxr_serialize_CREATE_Payload+0xc0>
 8013770:	2b03      	cmp	r3, #3
 8013772:	d02b      	beq.n	80137cc <uxr_serialize_CREATE_Payload+0xb0>
 8013774:	2b01      	cmp	r3, #1
 8013776:	d031      	beq.n	80137dc <uxr_serialize_CREATE_Payload+0xc0>
 8013778:	f105 0118 	add.w	r1, r5, #24
 801377c:	4630      	mov	r0, r6
 801377e:	2202      	movs	r2, #2
 8013780:	f7fd fc00 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013784:	4038      	ands	r0, r7
 8013786:	4004      	ands	r4, r0
 8013788:	4620      	mov	r0, r4
 801378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801378c:	2400      	movs	r4, #0
 801378e:	4620      	mov	r0, r4
 8013790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013792:	7a29      	ldrb	r1, [r5, #8]
 8013794:	4630      	mov	r0, r6
 8013796:	f7f6 fee5 	bl	800a564 <ucdr_serialize_uint8_t>
 801379a:	2800      	cmp	r0, #0
 801379c:	d0f6      	beq.n	801378c <uxr_serialize_CREATE_Payload+0x70>
 801379e:	7a2b      	ldrb	r3, [r5, #8]
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d001      	beq.n	80137a8 <uxr_serialize_CREATE_Payload+0x8c>
 80137a4:	2b02      	cmp	r3, #2
 80137a6:	d1ef      	bne.n	8013788 <uxr_serialize_CREATE_Payload+0x6c>
 80137a8:	68e9      	ldr	r1, [r5, #12]
 80137aa:	4630      	mov	r0, r6
 80137ac:	f7fd fd2a 	bl	8011204 <ucdr_serialize_string>
 80137b0:	4004      	ands	r4, r0
 80137b2:	e7e9      	b.n	8013788 <uxr_serialize_CREATE_Payload+0x6c>
 80137b4:	7a29      	ldrb	r1, [r5, #8]
 80137b6:	4630      	mov	r0, r6
 80137b8:	f7f6 fed4 	bl	800a564 <ucdr_serialize_uint8_t>
 80137bc:	4607      	mov	r7, r0
 80137be:	2800      	cmp	r0, #0
 80137c0:	d0da      	beq.n	8013778 <uxr_serialize_CREATE_Payload+0x5c>
 80137c2:	7a2b      	ldrb	r3, [r5, #8]
 80137c4:	2b02      	cmp	r3, #2
 80137c6:	d009      	beq.n	80137dc <uxr_serialize_CREATE_Payload+0xc0>
 80137c8:	2b03      	cmp	r3, #3
 80137ca:	d1d5      	bne.n	8013778 <uxr_serialize_CREATE_Payload+0x5c>
 80137cc:	68ea      	ldr	r2, [r5, #12]
 80137ce:	f105 0110 	add.w	r1, r5, #16
 80137d2:	4630      	mov	r0, r6
 80137d4:	f000 fe3c 	bl	8014450 <ucdr_serialize_sequence_uint8_t>
 80137d8:	4607      	mov	r7, r0
 80137da:	e7cd      	b.n	8013778 <uxr_serialize_CREATE_Payload+0x5c>
 80137dc:	68e9      	ldr	r1, [r5, #12]
 80137de:	4630      	mov	r0, r6
 80137e0:	f7fd fd10 	bl	8011204 <ucdr_serialize_string>
 80137e4:	4607      	mov	r7, r0
 80137e6:	e7c7      	b.n	8013778 <uxr_serialize_CREATE_Payload+0x5c>
 80137e8:	f105 0108 	add.w	r1, r5, #8
 80137ec:	4630      	mov	r0, r6
 80137ee:	f7ff fef1 	bl	80135d4 <uxr_serialize_AGENT_Representation>
 80137f2:	4004      	ands	r4, r0
 80137f4:	e7c8      	b.n	8013788 <uxr_serialize_CREATE_Payload+0x6c>
 80137f6:	7a29      	ldrb	r1, [r5, #8]
 80137f8:	4630      	mov	r0, r6
 80137fa:	f7f6 feb3 	bl	800a564 <ucdr_serialize_uint8_t>
 80137fe:	4607      	mov	r7, r0
 8013800:	b130      	cbz	r0, 8013810 <uxr_serialize_CREATE_Payload+0xf4>
 8013802:	7a2b      	ldrb	r3, [r5, #8]
 8013804:	2b02      	cmp	r3, #2
 8013806:	d012      	beq.n	801382e <uxr_serialize_CREATE_Payload+0x112>
 8013808:	2b03      	cmp	r3, #3
 801380a:	d016      	beq.n	801383a <uxr_serialize_CREATE_Payload+0x11e>
 801380c:	2b01      	cmp	r3, #1
 801380e:	d00e      	beq.n	801382e <uxr_serialize_CREATE_Payload+0x112>
 8013810:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
 8013814:	4630      	mov	r0, r6
 8013816:	f7f7 f839 	bl	800a88c <ucdr_serialize_int16_t>
 801381a:	4038      	ands	r0, r7
 801381c:	4004      	ands	r4, r0
 801381e:	e7b3      	b.n	8013788 <uxr_serialize_CREATE_Payload+0x6c>
 8013820:	f105 0108 	add.w	r1, r5, #8
 8013824:	4630      	mov	r0, r6
 8013826:	f7ff fe77 	bl	8013518 <uxr_serialize_CLIENT_Representation>
 801382a:	4004      	ands	r4, r0
 801382c:	e7ac      	b.n	8013788 <uxr_serialize_CREATE_Payload+0x6c>
 801382e:	68e9      	ldr	r1, [r5, #12]
 8013830:	4630      	mov	r0, r6
 8013832:	f7fd fce7 	bl	8011204 <ucdr_serialize_string>
 8013836:	4607      	mov	r7, r0
 8013838:	e7ea      	b.n	8013810 <uxr_serialize_CREATE_Payload+0xf4>
 801383a:	68ea      	ldr	r2, [r5, #12]
 801383c:	f105 0110 	add.w	r1, r5, #16
 8013840:	4630      	mov	r0, r6
 8013842:	f000 fe05 	bl	8014450 <ucdr_serialize_sequence_uint8_t>
 8013846:	4607      	mov	r7, r0
 8013848:	e7e2      	b.n	8013810 <uxr_serialize_CREATE_Payload+0xf4>
 801384a:	bf00      	nop

0801384c <uxr_serialize_DELETE_Payload>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	2202      	movs	r2, #2
 8013850:	4605      	mov	r5, r0
 8013852:	460e      	mov	r6, r1
 8013854:	f7fd fb96 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013858:	4604      	mov	r4, r0
 801385a:	2202      	movs	r2, #2
 801385c:	1cb1      	adds	r1, r6, #2
 801385e:	4628      	mov	r0, r5
 8013860:	f7fd fb90 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013864:	4020      	ands	r0, r4
 8013866:	b2c0      	uxtb	r0, r0
 8013868:	bd70      	pop	{r4, r5, r6, pc}
 801386a:	bf00      	nop

0801386c <uxr_deserialize_STATUS_AGENT_Payload>:
 801386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013870:	4606      	mov	r6, r0
 8013872:	460f      	mov	r7, r1
 8013874:	f7f6 fe8c 	bl	800a590 <ucdr_deserialize_uint8_t>
 8013878:	4605      	mov	r5, r0
 801387a:	1c79      	adds	r1, r7, #1
 801387c:	4630      	mov	r0, r6
 801387e:	f7f6 fe87 	bl	800a590 <ucdr_deserialize_uint8_t>
 8013882:	4682      	mov	sl, r0
 8013884:	1d39      	adds	r1, r7, #4
 8013886:	4630      	mov	r0, r6
 8013888:	ea05 050a 	and.w	r5, r5, sl
 801388c:	2204      	movs	r2, #4
 801388e:	f7fd fbdd 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013892:	4681      	mov	r9, r0
 8013894:	b2ec      	uxtb	r4, r5
 8013896:	f107 0108 	add.w	r1, r7, #8
 801389a:	4630      	mov	r0, r6
 801389c:	2202      	movs	r2, #2
 801389e:	f7fd fbd5 	bl	801104c <ucdr_deserialize_array_uint8_t>
 80138a2:	ea04 0409 	and.w	r4, r4, r9
 80138a6:	4680      	mov	r8, r0
 80138a8:	f107 010a 	add.w	r1, r7, #10
 80138ac:	2202      	movs	r2, #2
 80138ae:	4630      	mov	r0, r6
 80138b0:	f7fd fbcc 	bl	801104c <ucdr_deserialize_array_uint8_t>
 80138b4:	ea08 0404 	and.w	r4, r8, r4
 80138b8:	4605      	mov	r5, r0
 80138ba:	f107 010c 	add.w	r1, r7, #12
 80138be:	4630      	mov	r0, r6
 80138c0:	4025      	ands	r5, r4
 80138c2:	f7f6 fe37 	bl	800a534 <ucdr_deserialize_bool>
 80138c6:	4028      	ands	r0, r5
 80138c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080138cc <uxr_deserialize_STATUS_Payload>:
 80138cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d0:	4606      	mov	r6, r0
 80138d2:	460f      	mov	r7, r1
 80138d4:	2202      	movs	r2, #2
 80138d6:	f7fd fbb9 	bl	801104c <ucdr_deserialize_array_uint8_t>
 80138da:	2202      	movs	r2, #2
 80138dc:	1cb9      	adds	r1, r7, #2
 80138de:	4605      	mov	r5, r0
 80138e0:	4630      	mov	r0, r6
 80138e2:	f7fd fbb3 	bl	801104c <ucdr_deserialize_array_uint8_t>
 80138e6:	4680      	mov	r8, r0
 80138e8:	1d39      	adds	r1, r7, #4
 80138ea:	4630      	mov	r0, r6
 80138ec:	f7f6 fe50 	bl	800a590 <ucdr_deserialize_uint8_t>
 80138f0:	ea05 0508 	and.w	r5, r5, r8
 80138f4:	4604      	mov	r4, r0
 80138f6:	1d79      	adds	r1, r7, #5
 80138f8:	4630      	mov	r0, r6
 80138fa:	402c      	ands	r4, r5
 80138fc:	f7f6 fe48 	bl	800a590 <ucdr_deserialize_uint8_t>
 8013900:	4020      	ands	r0, r4
 8013902:	b2c0      	uxtb	r0, r0
 8013904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013908 <uxr_serialize_READ_DATA_Payload>:
 8013908:	b570      	push	{r4, r5, r6, lr}
 801390a:	4605      	mov	r5, r0
 801390c:	460e      	mov	r6, r1
 801390e:	2202      	movs	r2, #2
 8013910:	f7fd fb38 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013914:	1cb1      	adds	r1, r6, #2
 8013916:	2202      	movs	r2, #2
 8013918:	4604      	mov	r4, r0
 801391a:	4628      	mov	r0, r5
 801391c:	f7fd fb32 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013920:	4603      	mov	r3, r0
 8013922:	1d31      	adds	r1, r6, #4
 8013924:	4628      	mov	r0, r5
 8013926:	401c      	ands	r4, r3
 8013928:	f7ff feb2 	bl	8013690 <uxr_serialize_ReadSpecification>
 801392c:	b2e4      	uxtb	r4, r4
 801392e:	4020      	ands	r0, r4
 8013930:	bd70      	pop	{r4, r5, r6, pc}
 8013932:	bf00      	nop

08013934 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013934:	b570      	push	{r4, r5, r6, lr}
 8013936:	2202      	movs	r2, #2
 8013938:	4605      	mov	r5, r0
 801393a:	460e      	mov	r6, r1
 801393c:	f7fd fb22 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013940:	4604      	mov	r4, r0
 8013942:	2202      	movs	r2, #2
 8013944:	1cb1      	adds	r1, r6, #2
 8013946:	4628      	mov	r0, r5
 8013948:	f7fd fb1c 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 801394c:	4020      	ands	r0, r4
 801394e:	b2c0      	uxtb	r0, r0
 8013950:	bd70      	pop	{r4, r5, r6, pc}
 8013952:	bf00      	nop

08013954 <uxr_serialize_ACKNACK_Payload>:
 8013954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013956:	460f      	mov	r7, r1
 8013958:	4605      	mov	r5, r0
 801395a:	460e      	mov	r6, r1
 801395c:	f837 1b02 	ldrh.w	r1, [r7], #2
 8013960:	f7f6 fe2c 	bl	800a5bc <ucdr_serialize_uint16_t>
 8013964:	2202      	movs	r2, #2
 8013966:	4639      	mov	r1, r7
 8013968:	4604      	mov	r4, r0
 801396a:	4628      	mov	r0, r5
 801396c:	f7fd fb0a 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013970:	4603      	mov	r3, r0
 8013972:	7931      	ldrb	r1, [r6, #4]
 8013974:	4628      	mov	r0, r5
 8013976:	401c      	ands	r4, r3
 8013978:	f7f6 fdf4 	bl	800a564 <ucdr_serialize_uint8_t>
 801397c:	b2e4      	uxtb	r4, r4
 801397e:	4020      	ands	r0, r4
 8013980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013982:	bf00      	nop

08013984 <uxr_deserialize_ACKNACK_Payload>:
 8013984:	b570      	push	{r4, r5, r6, lr}
 8013986:	4605      	mov	r5, r0
 8013988:	460e      	mov	r6, r1
 801398a:	f7f6 fe69 	bl	800a660 <ucdr_deserialize_uint16_t>
 801398e:	2202      	movs	r2, #2
 8013990:	1cb1      	adds	r1, r6, #2
 8013992:	4604      	mov	r4, r0
 8013994:	4628      	mov	r0, r5
 8013996:	f7fd fb59 	bl	801104c <ucdr_deserialize_array_uint8_t>
 801399a:	4603      	mov	r3, r0
 801399c:	1d31      	adds	r1, r6, #4
 801399e:	4628      	mov	r0, r5
 80139a0:	401c      	ands	r4, r3
 80139a2:	f7f6 fdf5 	bl	800a590 <ucdr_deserialize_uint8_t>
 80139a6:	b2e4      	uxtb	r4, r4
 80139a8:	4020      	ands	r0, r4
 80139aa:	bd70      	pop	{r4, r5, r6, pc}

080139ac <uxr_serialize_HEARTBEAT_Payload>:
 80139ac:	b570      	push	{r4, r5, r6, lr}
 80139ae:	460d      	mov	r5, r1
 80139b0:	4606      	mov	r6, r0
 80139b2:	8809      	ldrh	r1, [r1, #0]
 80139b4:	f7f6 fe02 	bl	800a5bc <ucdr_serialize_uint16_t>
 80139b8:	8869      	ldrh	r1, [r5, #2]
 80139ba:	4604      	mov	r4, r0
 80139bc:	4630      	mov	r0, r6
 80139be:	f7f6 fdfd 	bl	800a5bc <ucdr_serialize_uint16_t>
 80139c2:	4603      	mov	r3, r0
 80139c4:	7929      	ldrb	r1, [r5, #4]
 80139c6:	4630      	mov	r0, r6
 80139c8:	401c      	ands	r4, r3
 80139ca:	f7f6 fdcb 	bl	800a564 <ucdr_serialize_uint8_t>
 80139ce:	b2e4      	uxtb	r4, r4
 80139d0:	4020      	ands	r0, r4
 80139d2:	bd70      	pop	{r4, r5, r6, pc}

080139d4 <uxr_deserialize_HEARTBEAT_Payload>:
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	4605      	mov	r5, r0
 80139d8:	460e      	mov	r6, r1
 80139da:	f7f6 fe41 	bl	800a660 <ucdr_deserialize_uint16_t>
 80139de:	4604      	mov	r4, r0
 80139e0:	1cb1      	adds	r1, r6, #2
 80139e2:	4628      	mov	r0, r5
 80139e4:	f7f6 fe3c 	bl	800a660 <ucdr_deserialize_uint16_t>
 80139e8:	4603      	mov	r3, r0
 80139ea:	1d31      	adds	r1, r6, #4
 80139ec:	4628      	mov	r0, r5
 80139ee:	401c      	ands	r4, r3
 80139f0:	f7f6 fdce 	bl	800a590 <ucdr_deserialize_uint8_t>
 80139f4:	b2e4      	uxtb	r4, r4
 80139f6:	4020      	ands	r0, r4
 80139f8:	bd70      	pop	{r4, r5, r6, pc}
 80139fa:	bf00      	nop

080139fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80139fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a00:	4605      	mov	r5, r0
 8013a02:	460e      	mov	r6, r1
 8013a04:	f7f6 ff9e 	bl	800a944 <ucdr_deserialize_int32_t>
 8013a08:	4680      	mov	r8, r0
 8013a0a:	1d31      	adds	r1, r6, #4
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	f7f6 fedd 	bl	800a7cc <ucdr_deserialize_uint32_t>
 8013a12:	4681      	mov	r9, r0
 8013a14:	f106 0108 	add.w	r1, r6, #8
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f7f6 ff93 	bl	800a944 <ucdr_deserialize_int32_t>
 8013a1e:	ea08 0809 	and.w	r8, r8, r9
 8013a22:	4607      	mov	r7, r0
 8013a24:	f106 010c 	add.w	r1, r6, #12
 8013a28:	4628      	mov	r0, r5
 8013a2a:	f7f6 fecf 	bl	800a7cc <ucdr_deserialize_uint32_t>
 8013a2e:	ea07 0708 	and.w	r7, r7, r8
 8013a32:	4604      	mov	r4, r0
 8013a34:	f106 0110 	add.w	r1, r6, #16
 8013a38:	4628      	mov	r0, r5
 8013a3a:	f7f6 ff83 	bl	800a944 <ucdr_deserialize_int32_t>
 8013a3e:	403c      	ands	r4, r7
 8013a40:	4603      	mov	r3, r0
 8013a42:	4628      	mov	r0, r5
 8013a44:	b2e4      	uxtb	r4, r4
 8013a46:	f106 0114 	add.w	r1, r6, #20
 8013a4a:	461d      	mov	r5, r3
 8013a4c:	f7f6 febe 	bl	800a7cc <ucdr_deserialize_uint32_t>
 8013a50:	402c      	ands	r4, r5
 8013a52:	4020      	ands	r0, r4
 8013a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013a58 <uxr_serialize_SampleIdentity>:
 8013a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	460d      	mov	r5, r1
 8013a60:	220c      	movs	r2, #12
 8013a62:	f7fd fa8f 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013a66:	2203      	movs	r2, #3
 8013a68:	f105 010c 	add.w	r1, r5, #12
 8013a6c:	4607      	mov	r7, r0
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f7fd fa88 	bl	8010f84 <ucdr_serialize_array_uint8_t>
 8013a74:	7be9      	ldrb	r1, [r5, #15]
 8013a76:	4680      	mov	r8, r0
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7f6 fd73 	bl	800a564 <ucdr_serialize_uint8_t>
 8013a7e:	6929      	ldr	r1, [r5, #16]
 8013a80:	4606      	mov	r6, r0
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7f6 ff2c 	bl	800a8e0 <ucdr_serialize_int32_t>
 8013a88:	ea07 0708 	and.w	r7, r7, r8
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	4620      	mov	r0, r4
 8013a90:	403e      	ands	r6, r7
 8013a92:	6969      	ldr	r1, [r5, #20]
 8013a94:	461c      	mov	r4, r3
 8013a96:	f7f6 fe37 	bl	800a708 <ucdr_serialize_uint32_t>
 8013a9a:	4034      	ands	r4, r6
 8013a9c:	4020      	ands	r0, r4
 8013a9e:	b2c0      	uxtb	r0, r0
 8013aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013aa4 <uxr_deserialize_SampleIdentity>:
 8013aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	4604      	mov	r4, r0
 8013aaa:	460d      	mov	r5, r1
 8013aac:	220c      	movs	r2, #12
 8013aae:	f7fd facd 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013ab2:	2203      	movs	r2, #3
 8013ab4:	f105 010c 	add.w	r1, r5, #12
 8013ab8:	4607      	mov	r7, r0
 8013aba:	4620      	mov	r0, r4
 8013abc:	f7fd fac6 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013ac0:	f105 010f 	add.w	r1, r5, #15
 8013ac4:	4680      	mov	r8, r0
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f7f6 fd62 	bl	800a590 <ucdr_deserialize_uint8_t>
 8013acc:	f105 0110 	add.w	r1, r5, #16
 8013ad0:	4606      	mov	r6, r0
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f7f6 ff36 	bl	800a944 <ucdr_deserialize_int32_t>
 8013ad8:	ea07 0708 	and.w	r7, r7, r8
 8013adc:	4603      	mov	r3, r0
 8013ade:	4620      	mov	r0, r4
 8013ae0:	403e      	ands	r6, r7
 8013ae2:	f105 0114 	add.w	r1, r5, #20
 8013ae6:	461c      	mov	r4, r3
 8013ae8:	f7f6 fe70 	bl	800a7cc <ucdr_deserialize_uint32_t>
 8013aec:	4034      	ands	r4, r6
 8013aee:	4020      	ands	r0, r4
 8013af0:	b2c0      	uxtb	r0, r0
 8013af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af6:	bf00      	nop

08013af8 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013af8:	280b      	cmp	r0, #11
 8013afa:	dc0d      	bgt.n	8013b18 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	db09      	blt.n	8013b14 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013b00:	280b      	cmp	r0, #11
 8013b02:	d807      	bhi.n	8013b14 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013b04:	e8df f000 	tbb	[pc, r0]
 8013b08:	07060607 	.word	0x07060607
 8013b0c:	06060606 	.word	0x06060606
 8013b10:	07070606 	.word	0x07070606
 8013b14:	2001      	movs	r0, #1
 8013b16:	4770      	bx	lr
 8013b18:	28cb      	cmp	r0, #203	; 0xcb
 8013b1a:	bf18      	it	ne
 8013b1c:	2001      	movne	r0, #1
 8013b1e:	4770      	bx	lr

08013b20 <rcl_get_default_domain_id>:
 8013b20:	b530      	push	{r4, r5, lr}
 8013b22:	2300      	movs	r3, #0
 8013b24:	b083      	sub	sp, #12
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	b1d0      	cbz	r0, 8013b60 <rcl_get_default_domain_id+0x40>
 8013b2a:	4604      	mov	r4, r0
 8013b2c:	4669      	mov	r1, sp
 8013b2e:	4815      	ldr	r0, [pc, #84]	; (8013b84 <rcl_get_default_domain_id+0x64>)
 8013b30:	f7fa febe 	bl	800e8b0 <rcutils_get_env>
 8013b34:	4602      	mov	r2, r0
 8013b36:	b110      	cbz	r0, 8013b3e <rcl_get_default_domain_id+0x1e>
 8013b38:	2001      	movs	r0, #1
 8013b3a:	b003      	add	sp, #12
 8013b3c:	bd30      	pop	{r4, r5, pc}
 8013b3e:	9b00      	ldr	r3, [sp, #0]
 8013b40:	b18b      	cbz	r3, 8013b66 <rcl_get_default_domain_id+0x46>
 8013b42:	7818      	ldrb	r0, [r3, #0]
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d0f8      	beq.n	8013b3a <rcl_get_default_domain_id+0x1a>
 8013b48:	4618      	mov	r0, r3
 8013b4a:	a901      	add	r1, sp, #4
 8013b4c:	9201      	str	r2, [sp, #4]
 8013b4e:	f002 fd9b 	bl	8016688 <strtoul>
 8013b52:	4605      	mov	r5, r0
 8013b54:	b150      	cbz	r0, 8013b6c <rcl_get_default_domain_id+0x4c>
 8013b56:	1c43      	adds	r3, r0, #1
 8013b58:	d00d      	beq.n	8013b76 <rcl_get_default_domain_id+0x56>
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	6025      	str	r5, [r4, #0]
 8013b5e:	e7ec      	b.n	8013b3a <rcl_get_default_domain_id+0x1a>
 8013b60:	200b      	movs	r0, #11
 8013b62:	b003      	add	sp, #12
 8013b64:	bd30      	pop	{r4, r5, pc}
 8013b66:	4618      	mov	r0, r3
 8013b68:	b003      	add	sp, #12
 8013b6a:	bd30      	pop	{r4, r5, pc}
 8013b6c:	9b01      	ldr	r3, [sp, #4]
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d0f2      	beq.n	8013b5a <rcl_get_default_domain_id+0x3a>
 8013b74:	e7e0      	b.n	8013b38 <rcl_get_default_domain_id+0x18>
 8013b76:	f001 fa45 	bl	8015004 <__errno>
 8013b7a:	6803      	ldr	r3, [r0, #0]
 8013b7c:	2b22      	cmp	r3, #34	; 0x22
 8013b7e:	d1ec      	bne.n	8013b5a <rcl_get_default_domain_id+0x3a>
 8013b80:	e7da      	b.n	8013b38 <rcl_get_default_domain_id+0x18>
 8013b82:	bf00      	nop
 8013b84:	080203d4 	.word	0x080203d4

08013b88 <rcl_get_zero_initialized_guard_condition>:
 8013b88:	4a03      	ldr	r2, [pc, #12]	; (8013b98 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b90:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b94:	4618      	mov	r0, r3
 8013b96:	4770      	bx	lr
 8013b98:	080203e4 	.word	0x080203e4

08013b9c <rcl_guard_condition_init>:
 8013b9c:	b082      	sub	sp, #8
 8013b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ba0:	b087      	sub	sp, #28
 8013ba2:	4606      	mov	r6, r0
 8013ba4:	460f      	mov	r7, r1
 8013ba6:	ad0c      	add	r5, sp, #48	; 0x30
 8013ba8:	ac01      	add	r4, sp, #4
 8013baa:	e9c5 2300 	strd	r2, r3, [r5]
 8013bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bb0:	682d      	ldr	r5, [r5, #0]
 8013bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bb4:	a801      	add	r0, sp, #4
 8013bb6:	6025      	str	r5, [r4, #0]
 8013bb8:	f7fa fcf2 	bl	800e5a0 <rcutils_allocator_is_valid>
 8013bbc:	b35e      	cbz	r6, 8013c16 <rcl_guard_condition_init+0x7a>
 8013bbe:	f080 0301 	eor.w	r3, r0, #1
 8013bc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013bc6:	d126      	bne.n	8013c16 <rcl_guard_condition_init+0x7a>
 8013bc8:	6875      	ldr	r5, [r6, #4]
 8013bca:	b9ed      	cbnz	r5, 8013c08 <rcl_guard_condition_init+0x6c>
 8013bcc:	b31f      	cbz	r7, 8013c16 <rcl_guard_condition_init+0x7a>
 8013bce:	4638      	mov	r0, r7
 8013bd0:	f7f7 fe62 	bl	800b898 <rcl_context_is_valid>
 8013bd4:	b308      	cbz	r0, 8013c1a <rcl_guard_condition_init+0x7e>
 8013bd6:	9b01      	ldr	r3, [sp, #4]
 8013bd8:	201c      	movs	r0, #28
 8013bda:	9905      	ldr	r1, [sp, #20]
 8013bdc:	4798      	blx	r3
 8013bde:	4604      	mov	r4, r0
 8013be0:	6070      	str	r0, [r6, #4]
 8013be2:	b318      	cbz	r0, 8013c2c <rcl_guard_condition_init+0x90>
 8013be4:	6838      	ldr	r0, [r7, #0]
 8013be6:	3028      	adds	r0, #40	; 0x28
 8013be8:	f000 f9e0 	bl	8013fac <rmw_create_guard_condition>
 8013bec:	6873      	ldr	r3, [r6, #4]
 8013bee:	6020      	str	r0, [r4, #0]
 8013bf0:	681c      	ldr	r4, [r3, #0]
 8013bf2:	b1a4      	cbz	r4, 8013c1e <rcl_guard_condition_init+0x82>
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	ac01      	add	r4, sp, #4
 8013bf8:	f103 0608 	add.w	r6, r3, #8
 8013bfc:	711a      	strb	r2, [r3, #4]
 8013bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c00:	6824      	ldr	r4, [r4, #0]
 8013c02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013c04:	6034      	str	r4, [r6, #0]
 8013c06:	e000      	b.n	8013c0a <rcl_guard_condition_init+0x6e>
 8013c08:	2564      	movs	r5, #100	; 0x64
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	b007      	add	sp, #28
 8013c0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013c12:	b002      	add	sp, #8
 8013c14:	4770      	bx	lr
 8013c16:	250b      	movs	r5, #11
 8013c18:	e7f7      	b.n	8013c0a <rcl_guard_condition_init+0x6e>
 8013c1a:	2565      	movs	r5, #101	; 0x65
 8013c1c:	e7f5      	b.n	8013c0a <rcl_guard_condition_init+0x6e>
 8013c1e:	4618      	mov	r0, r3
 8013c20:	9905      	ldr	r1, [sp, #20]
 8013c22:	9b02      	ldr	r3, [sp, #8]
 8013c24:	2501      	movs	r5, #1
 8013c26:	4798      	blx	r3
 8013c28:	6074      	str	r4, [r6, #4]
 8013c2a:	e7ee      	b.n	8013c0a <rcl_guard_condition_init+0x6e>
 8013c2c:	250a      	movs	r5, #10
 8013c2e:	e7ec      	b.n	8013c0a <rcl_guard_condition_init+0x6e>

08013c30 <rcl_guard_condition_init_from_rmw>:
 8013c30:	b082      	sub	sp, #8
 8013c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c36:	b086      	sub	sp, #24
 8013c38:	4606      	mov	r6, r0
 8013c3a:	4688      	mov	r8, r1
 8013c3c:	4617      	mov	r7, r2
 8013c3e:	ac0c      	add	r4, sp, #48	; 0x30
 8013c40:	ad01      	add	r5, sp, #4
 8013c42:	f844 3f04 	str.w	r3, [r4, #4]!
 8013c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c48:	6824      	ldr	r4, [r4, #0]
 8013c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c4c:	a801      	add	r0, sp, #4
 8013c4e:	602c      	str	r4, [r5, #0]
 8013c50:	f7fa fca6 	bl	800e5a0 <rcutils_allocator_is_valid>
 8013c54:	f080 0001 	eor.w	r0, r0, #1
 8013c58:	f010 0fff 	tst.w	r0, #255	; 0xff
 8013c5c:	d123      	bne.n	8013ca6 <rcl_guard_condition_init_from_rmw+0x76>
 8013c5e:	b316      	cbz	r6, 8013ca6 <rcl_guard_condition_init_from_rmw+0x76>
 8013c60:	6874      	ldr	r4, [r6, #4]
 8013c62:	b9cc      	cbnz	r4, 8013c98 <rcl_guard_condition_init_from_rmw+0x68>
 8013c64:	b1ff      	cbz	r7, 8013ca6 <rcl_guard_condition_init_from_rmw+0x76>
 8013c66:	4638      	mov	r0, r7
 8013c68:	f7f7 fe16 	bl	800b898 <rcl_context_is_valid>
 8013c6c:	b1e8      	cbz	r0, 8013caa <rcl_guard_condition_init_from_rmw+0x7a>
 8013c6e:	9b01      	ldr	r3, [sp, #4]
 8013c70:	201c      	movs	r0, #28
 8013c72:	9905      	ldr	r1, [sp, #20]
 8013c74:	4798      	blx	r3
 8013c76:	4605      	mov	r5, r0
 8013c78:	6070      	str	r0, [r6, #4]
 8013c7a:	b318      	cbz	r0, 8013cc4 <rcl_guard_condition_init_from_rmw+0x94>
 8013c7c:	f1b8 0f00 	cmp.w	r8, #0
 8013c80:	d015      	beq.n	8013cae <rcl_guard_condition_init_from_rmw+0x7e>
 8013c82:	f8c0 8000 	str.w	r8, [r0]
 8013c86:	7104      	strb	r4, [r0, #4]
 8013c88:	ac01      	add	r4, sp, #4
 8013c8a:	3508      	adds	r5, #8
 8013c8c:	2600      	movs	r6, #0
 8013c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c90:	6824      	ldr	r4, [r4, #0]
 8013c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c94:	602c      	str	r4, [r5, #0]
 8013c96:	e000      	b.n	8013c9a <rcl_guard_condition_init_from_rmw+0x6a>
 8013c98:	2664      	movs	r6, #100	; 0x64
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	b006      	add	sp, #24
 8013c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca2:	b002      	add	sp, #8
 8013ca4:	4770      	bx	lr
 8013ca6:	260b      	movs	r6, #11
 8013ca8:	e7f7      	b.n	8013c9a <rcl_guard_condition_init_from_rmw+0x6a>
 8013caa:	2665      	movs	r6, #101	; 0x65
 8013cac:	e7f5      	b.n	8013c9a <rcl_guard_condition_init_from_rmw+0x6a>
 8013cae:	6838      	ldr	r0, [r7, #0]
 8013cb0:	3028      	adds	r0, #40	; 0x28
 8013cb2:	f000 f97b 	bl	8013fac <rmw_create_guard_condition>
 8013cb6:	6028      	str	r0, [r5, #0]
 8013cb8:	6875      	ldr	r5, [r6, #4]
 8013cba:	682c      	ldr	r4, [r5, #0]
 8013cbc:	b124      	cbz	r4, 8013cc8 <rcl_guard_condition_init_from_rmw+0x98>
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	712b      	strb	r3, [r5, #4]
 8013cc2:	e7e1      	b.n	8013c88 <rcl_guard_condition_init_from_rmw+0x58>
 8013cc4:	260a      	movs	r6, #10
 8013cc6:	e7e8      	b.n	8013c9a <rcl_guard_condition_init_from_rmw+0x6a>
 8013cc8:	4628      	mov	r0, r5
 8013cca:	9b02      	ldr	r3, [sp, #8]
 8013ccc:	9905      	ldr	r1, [sp, #20]
 8013cce:	4798      	blx	r3
 8013cd0:	6074      	str	r4, [r6, #4]
 8013cd2:	2601      	movs	r6, #1
 8013cd4:	e7e1      	b.n	8013c9a <rcl_guard_condition_init_from_rmw+0x6a>
 8013cd6:	bf00      	nop

08013cd8 <rcl_guard_condition_fini>:
 8013cd8:	b570      	push	{r4, r5, r6, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	b1f0      	cbz	r0, 8013d1c <rcl_guard_condition_fini+0x44>
 8013cde:	6843      	ldr	r3, [r0, #4]
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	b163      	cbz	r3, 8013cfe <rcl_guard_condition_fini+0x26>
 8013ce4:	6818      	ldr	r0, [r3, #0]
 8013ce6:	68de      	ldr	r6, [r3, #12]
 8013ce8:	6999      	ldr	r1, [r3, #24]
 8013cea:	b160      	cbz	r0, 8013d06 <rcl_guard_condition_fini+0x2e>
 8013cec:	791d      	ldrb	r5, [r3, #4]
 8013cee:	b965      	cbnz	r5, 8013d0a <rcl_guard_condition_fini+0x32>
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	47b0      	blx	r6
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	6063      	str	r3, [r4, #4]
 8013cfa:	b002      	add	sp, #8
 8013cfc:	bd70      	pop	{r4, r5, r6, pc}
 8013cfe:	461d      	mov	r5, r3
 8013d00:	4628      	mov	r0, r5
 8013d02:	b002      	add	sp, #8
 8013d04:	bd70      	pop	{r4, r5, r6, pc}
 8013d06:	4605      	mov	r5, r0
 8013d08:	e7f2      	b.n	8013cf0 <rcl_guard_condition_fini+0x18>
 8013d0a:	9101      	str	r1, [sp, #4]
 8013d0c:	f000 f962 	bl	8013fd4 <rmw_destroy_guard_condition>
 8013d10:	1e05      	subs	r5, r0, #0
 8013d12:	6863      	ldr	r3, [r4, #4]
 8013d14:	9901      	ldr	r1, [sp, #4]
 8013d16:	bf18      	it	ne
 8013d18:	2501      	movne	r5, #1
 8013d1a:	e7e9      	b.n	8013cf0 <rcl_guard_condition_fini+0x18>
 8013d1c:	250b      	movs	r5, #11
 8013d1e:	4628      	mov	r0, r5
 8013d20:	b002      	add	sp, #8
 8013d22:	bd70      	pop	{r4, r5, r6, pc}

08013d24 <rcl_guard_condition_get_default_options>:
 8013d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d28:	b086      	sub	sp, #24
 8013d2a:	4c09      	ldr	r4, [pc, #36]	; (8013d50 <rcl_guard_condition_get_default_options+0x2c>)
 8013d2c:	4680      	mov	r8, r0
 8013d2e:	466d      	mov	r5, sp
 8013d30:	4668      	mov	r0, sp
 8013d32:	f7fa fc27 	bl	800e584 <rcutils_get_default_allocator>
 8013d36:	4627      	mov	r7, r4
 8013d38:	4646      	mov	r6, r8
 8013d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d3c:	682d      	ldr	r5, [r5, #0]
 8013d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013d42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013d44:	4640      	mov	r0, r8
 8013d46:	6025      	str	r5, [r4, #0]
 8013d48:	6035      	str	r5, [r6, #0]
 8013d4a:	b006      	add	sp, #24
 8013d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d50:	20009b14 	.word	0x20009b14

08013d54 <rcl_trigger_guard_condition>:
 8013d54:	b148      	cbz	r0, 8013d6a <rcl_trigger_guard_condition+0x16>
 8013d56:	b508      	push	{r3, lr}
 8013d58:	6843      	ldr	r3, [r0, #4]
 8013d5a:	b143      	cbz	r3, 8013d6e <rcl_trigger_guard_condition+0x1a>
 8013d5c:	6818      	ldr	r0, [r3, #0]
 8013d5e:	f000 f9a9 	bl	80140b4 <rmw_trigger_guard_condition>
 8013d62:	3800      	subs	r0, #0
 8013d64:	bf18      	it	ne
 8013d66:	2001      	movne	r0, #1
 8013d68:	bd08      	pop	{r3, pc}
 8013d6a:	200b      	movs	r0, #11
 8013d6c:	4770      	bx	lr
 8013d6e:	200b      	movs	r0, #11
 8013d70:	bd08      	pop	{r3, pc}
 8013d72:	bf00      	nop

08013d74 <rcl_guard_condition_get_rmw_handle>:
 8013d74:	b110      	cbz	r0, 8013d7c <rcl_guard_condition_get_rmw_handle+0x8>
 8013d76:	6840      	ldr	r0, [r0, #4]
 8013d78:	b100      	cbz	r0, 8013d7c <rcl_guard_condition_get_rmw_handle+0x8>
 8013d7a:	6800      	ldr	r0, [r0, #0]
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop

08013d80 <rmw_allocate>:
 8013d80:	b530      	push	{r4, r5, lr}
 8013d82:	b087      	sub	sp, #28
 8013d84:	4605      	mov	r5, r0
 8013d86:	a801      	add	r0, sp, #4
 8013d88:	f7fa fbfc 	bl	800e584 <rcutils_get_default_allocator>
 8013d8c:	9b01      	ldr	r3, [sp, #4]
 8013d8e:	4628      	mov	r0, r5
 8013d90:	9905      	ldr	r1, [sp, #20]
 8013d92:	4798      	blx	r3
 8013d94:	4604      	mov	r4, r0
 8013d96:	b118      	cbz	r0, 8013da0 <rmw_allocate+0x20>
 8013d98:	462a      	mov	r2, r5
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	f001 fd7c 	bl	8015898 <memset>
 8013da0:	4620      	mov	r0, r4
 8013da2:	b007      	add	sp, #28
 8013da4:	bd30      	pop	{r4, r5, pc}
 8013da6:	bf00      	nop

08013da8 <rmw_free>:
 8013da8:	b510      	push	{r4, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	4604      	mov	r4, r0
 8013dae:	a801      	add	r0, sp, #4
 8013db0:	f7fa fbe8 	bl	800e584 <rcutils_get_default_allocator>
 8013db4:	4620      	mov	r0, r4
 8013db6:	9905      	ldr	r1, [sp, #20]
 8013db8:	9b02      	ldr	r3, [sp, #8]
 8013dba:	b006      	add	sp, #24
 8013dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dc0:	4718      	bx	r3
 8013dc2:	bf00      	nop

08013dc4 <rmw_node_allocate>:
 8013dc4:	b500      	push	{lr}
 8013dc6:	b087      	sub	sp, #28
 8013dc8:	a801      	add	r0, sp, #4
 8013dca:	f7fa fbdb 	bl	800e584 <rcutils_get_default_allocator>
 8013dce:	9b01      	ldr	r3, [sp, #4]
 8013dd0:	9905      	ldr	r1, [sp, #20]
 8013dd2:	2014      	movs	r0, #20
 8013dd4:	4798      	blx	r3
 8013dd6:	b128      	cbz	r0, 8013de4 <rmw_node_allocate+0x20>
 8013dd8:	2300      	movs	r3, #0
 8013dda:	6003      	str	r3, [r0, #0]
 8013ddc:	6043      	str	r3, [r0, #4]
 8013dde:	6083      	str	r3, [r0, #8]
 8013de0:	60c3      	str	r3, [r0, #12]
 8013de2:	6103      	str	r3, [r0, #16]
 8013de4:	b007      	add	sp, #28
 8013de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dea:	bf00      	nop

08013dec <rmw_node_free>:
 8013dec:	b510      	push	{r4, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	4604      	mov	r4, r0
 8013df2:	a801      	add	r0, sp, #4
 8013df4:	f7fa fbc6 	bl	800e584 <rcutils_get_default_allocator>
 8013df8:	4620      	mov	r0, r4
 8013dfa:	9905      	ldr	r1, [sp, #20]
 8013dfc:	9b02      	ldr	r3, [sp, #8]
 8013dfe:	b006      	add	sp, #24
 8013e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e04:	4718      	bx	r3
 8013e06:	bf00      	nop

08013e08 <on_status>:
 8013e08:	b082      	sub	sp, #8
 8013e0a:	b002      	add	sp, #8
 8013e0c:	4770      	bx	lr
 8013e0e:	bf00      	nop

08013e10 <on_topic>:
 8013e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e12:	4a18      	ldr	r2, [pc, #96]	; (8013e74 <on_topic+0x64>)
 8013e14:	b083      	sub	sp, #12
 8013e16:	9101      	str	r1, [sp, #4]
 8013e18:	6811      	ldr	r1, [r2, #0]
 8013e1a:	9f08      	ldr	r7, [sp, #32]
 8013e1c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8013e20:	9300      	str	r3, [sp, #0]
 8013e22:	b329      	cbz	r1, 8013e70 <on_topic+0x60>
 8013e24:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8013e28:	f89d 5006 	ldrb.w	r5, [sp, #6]
 8013e2c:	e001      	b.n	8013e32 <on_topic+0x22>
 8013e2e:	6889      	ldr	r1, [r1, #8]
 8013e30:	b1f1      	cbz	r1, 8013e70 <on_topic+0x60>
 8013e32:	68cc      	ldr	r4, [r1, #12]
 8013e34:	8b23      	ldrh	r3, [r4, #24]
 8013e36:	4283      	cmp	r3, r0
 8013e38:	d1f9      	bne.n	8013e2e <on_topic+0x1e>
 8013e3a:	7ea3      	ldrb	r3, [r4, #26]
 8013e3c:	42ab      	cmp	r3, r5
 8013e3e:	d1f6      	bne.n	8013e2e <on_topic+0x1e>
 8013e40:	480d      	ldr	r0, [pc, #52]	; (8013e78 <on_topic+0x68>)
 8013e42:	f000 f88f 	bl	8013f64 <get_memory>
 8013e46:	4605      	mov	r5, r0
 8013e48:	b190      	cbz	r0, 8013e70 <on_topic+0x60>
 8013e4a:	68c3      	ldr	r3, [r0, #12]
 8013e4c:	4632      	mov	r2, r6
 8013e4e:	4638      	mov	r0, r7
 8013e50:	f103 0110 	add.w	r1, r3, #16
 8013e54:	f8c3 4814 	str.w	r4, [r3, #2068]	; 0x814
 8013e58:	f8c3 6810 	str.w	r6, [r3, #2064]	; 0x810
 8013e5c:	f7fd f8f6 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013e60:	b930      	cbnz	r0, 8013e70 <on_topic+0x60>
 8013e62:	4629      	mov	r1, r5
 8013e64:	4804      	ldr	r0, [pc, #16]	; (8013e78 <on_topic+0x68>)
 8013e66:	b003      	add	sp, #12
 8013e68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013e6c:	f000 b88a 	b.w	8013f84 <put_memory>
 8013e70:	b003      	add	sp, #12
 8013e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e74:	2000d9d4 	.word	0x2000d9d4
 8013e78:	2000a948 	.word	0x2000a948

08013e7c <on_request>:
 8013e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e80:	481a      	ldr	r0, [pc, #104]	; (8013eec <on_request+0x70>)
 8013e82:	b082      	sub	sp, #8
 8013e84:	9101      	str	r1, [sp, #4]
 8013e86:	6801      	ldr	r1, [r0, #0]
 8013e88:	9f08      	ldr	r7, [sp, #32]
 8013e8a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8013e8e:	b311      	cbz	r1, 8013ed6 <on_request+0x5a>
 8013e90:	461d      	mov	r5, r3
 8013e92:	e001      	b.n	8013e98 <on_request+0x1c>
 8013e94:	6889      	ldr	r1, [r1, #8]
 8013e96:	b1f1      	cbz	r1, 8013ed6 <on_request+0x5a>
 8013e98:	68cc      	ldr	r4, [r1, #12]
 8013e9a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8013e9c:	4290      	cmp	r0, r2
 8013e9e:	d1f9      	bne.n	8013e94 <on_request+0x18>
 8013ea0:	4813      	ldr	r0, [pc, #76]	; (8013ef0 <on_request+0x74>)
 8013ea2:	f000 f85f 	bl	8013f64 <get_memory>
 8013ea6:	4680      	mov	r8, r0
 8013ea8:	b1a8      	cbz	r0, 8013ed6 <on_request+0x5a>
 8013eaa:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8013eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013eb0:	f60e 0c18 	addw	ip, lr, #2072	; 0x818
 8013eb4:	f8ce 4814 	str.w	r4, [lr, #2068]	; 0x814
 8013eb8:	f8ce 6810 	str.w	r6, [lr, #2064]	; 0x810
 8013ebc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ec0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013ec4:	4632      	mov	r2, r6
 8013ec6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013eca:	f10e 0110 	add.w	r1, lr, #16
 8013ece:	4638      	mov	r0, r7
 8013ed0:	f7fd f8bc 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013ed4:	b110      	cbz	r0, 8013edc <on_request+0x60>
 8013ed6:	b002      	add	sp, #8
 8013ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013edc:	4641      	mov	r1, r8
 8013ede:	4804      	ldr	r0, [pc, #16]	; (8013ef0 <on_request+0x74>)
 8013ee0:	b002      	add	sp, #8
 8013ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee6:	f000 b84d 	b.w	8013f84 <put_memory>
 8013eea:	bf00      	nop
 8013eec:	2000d9c4 	.word	0x2000d9c4
 8013ef0:	2000a948 	.word	0x2000a948

08013ef4 <on_reply>:
 8013ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ef8:	4818      	ldr	r0, [pc, #96]	; (8013f5c <on_reply+0x68>)
 8013efa:	b083      	sub	sp, #12
 8013efc:	9101      	str	r1, [sp, #4]
 8013efe:	6801      	ldr	r1, [r0, #0]
 8013f00:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8013f04:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 8013f08:	b1e9      	cbz	r1, 8013f46 <on_reply+0x52>
 8013f0a:	461e      	mov	r6, r3
 8013f0c:	e001      	b.n	8013f12 <on_reply+0x1e>
 8013f0e:	6889      	ldr	r1, [r1, #8]
 8013f10:	b1c9      	cbz	r1, 8013f46 <on_reply+0x52>
 8013f12:	68cc      	ldr	r4, [r1, #12]
 8013f14:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8013f16:	4290      	cmp	r0, r2
 8013f18:	d1f9      	bne.n	8013f0e <on_reply+0x1a>
 8013f1a:	4811      	ldr	r0, [pc, #68]	; (8013f60 <on_reply+0x6c>)
 8013f1c:	f000 f822 	bl	8013f64 <get_memory>
 8013f20:	4605      	mov	r5, r0
 8013f22:	b180      	cbz	r0, 8013f46 <on_reply+0x52>
 8013f24:	68c1      	ldr	r1, [r0, #12]
 8013f26:	b2b6      	uxth	r6, r6
 8013f28:	2700      	movs	r7, #0
 8013f2a:	4648      	mov	r0, r9
 8013f2c:	f601 0318 	addw	r3, r1, #2072	; 0x818
 8013f30:	f8c1 4814 	str.w	r4, [r1, #2068]	; 0x814
 8013f34:	f8c1 8810 	str.w	r8, [r1, #2064]	; 0x810
 8013f38:	4642      	mov	r2, r8
 8013f3a:	3110      	adds	r1, #16
 8013f3c:	e9c3 6700 	strd	r6, r7, [r3]
 8013f40:	f7fd f884 	bl	801104c <ucdr_deserialize_array_uint8_t>
 8013f44:	b110      	cbz	r0, 8013f4c <on_reply+0x58>
 8013f46:	b003      	add	sp, #12
 8013f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	4804      	ldr	r0, [pc, #16]	; (8013f60 <on_reply+0x6c>)
 8013f50:	b003      	add	sp, #12
 8013f52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f56:	f000 b815 	b.w	8013f84 <put_memory>
 8013f5a:	bf00      	nop
 8013f5c:	2000b0e8 	.word	0x2000b0e8
 8013f60:	2000a948 	.word	0x2000a948

08013f64 <get_memory>:
 8013f64:	4603      	mov	r3, r0
 8013f66:	6840      	ldr	r0, [r0, #4]
 8013f68:	b158      	cbz	r0, 8013f82 <get_memory+0x1e>
 8013f6a:	6882      	ldr	r2, [r0, #8]
 8013f6c:	605a      	str	r2, [r3, #4]
 8013f6e:	b10a      	cbz	r2, 8013f74 <get_memory+0x10>
 8013f70:	2100      	movs	r1, #0
 8013f72:	6051      	str	r1, [r2, #4]
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	6082      	str	r2, [r0, #8]
 8013f78:	b102      	cbz	r2, 8013f7c <get_memory+0x18>
 8013f7a:	6050      	str	r0, [r2, #4]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	6042      	str	r2, [r0, #4]
 8013f80:	6018      	str	r0, [r3, #0]
 8013f82:	4770      	bx	lr

08013f84 <put_memory>:
 8013f84:	684b      	ldr	r3, [r1, #4]
 8013f86:	b10b      	cbz	r3, 8013f8c <put_memory+0x8>
 8013f88:	688a      	ldr	r2, [r1, #8]
 8013f8a:	609a      	str	r2, [r3, #8]
 8013f8c:	688a      	ldr	r2, [r1, #8]
 8013f8e:	b102      	cbz	r2, 8013f92 <put_memory+0xe>
 8013f90:	6053      	str	r3, [r2, #4]
 8013f92:	6803      	ldr	r3, [r0, #0]
 8013f94:	428b      	cmp	r3, r1
 8013f96:	6843      	ldr	r3, [r0, #4]
 8013f98:	bf08      	it	eq
 8013f9a:	6002      	streq	r2, [r0, #0]
 8013f9c:	608b      	str	r3, [r1, #8]
 8013f9e:	b103      	cbz	r3, 8013fa2 <put_memory+0x1e>
 8013fa0:	6059      	str	r1, [r3, #4]
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	604b      	str	r3, [r1, #4]
 8013fa6:	6041      	str	r1, [r0, #4]
 8013fa8:	4770      	bx	lr
 8013faa:	bf00      	nop

08013fac <rmw_create_guard_condition>:
 8013fac:	b538      	push	{r3, r4, r5, lr}
 8013fae:	4605      	mov	r5, r0
 8013fb0:	200c      	movs	r0, #12
 8013fb2:	f7ff fee5 	bl	8013d80 <rmw_allocate>
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	6085      	str	r5, [r0, #8]
 8013fba:	f7fa ff91 	bl	800eee0 <rmw_get_implementation_identifier>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2001      	movs	r0, #1
 8013fc2:	6023      	str	r3, [r4, #0]
 8013fc4:	f7ff fedc 	bl	8013d80 <rmw_allocate>
 8013fc8:	2200      	movs	r2, #0
 8013fca:	4603      	mov	r3, r0
 8013fcc:	4620      	mov	r0, r4
 8013fce:	6063      	str	r3, [r4, #4]
 8013fd0:	701a      	strb	r2, [r3, #0]
 8013fd2:	bd38      	pop	{r3, r4, r5, pc}

08013fd4 <rmw_destroy_guard_condition>:
 8013fd4:	b508      	push	{r3, lr}
 8013fd6:	f7ff fee7 	bl	8013da8 <rmw_free>
 8013fda:	2000      	movs	r0, #0
 8013fdc:	bd08      	pop	{r3, pc}
 8013fde:	bf00      	nop

08013fe0 <create_topic>:
 8013fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fe4:	4605      	mov	r5, r0
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	4824      	ldr	r0, [pc, #144]	; (801407c <create_topic+0x9c>)
 8013fea:	460f      	mov	r7, r1
 8013fec:	4616      	mov	r6, r2
 8013fee:	4698      	mov	r8, r3
 8013ff0:	f7ff ffb8 	bl	8013f64 <get_memory>
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	b3a0      	cbz	r0, 8014062 <create_topic+0x82>
 8013ff8:	696a      	ldr	r2, [r5, #20]
 8013ffa:	f241 538a 	movw	r3, #5514	; 0x158a
 8013ffe:	68c4      	ldr	r4, [r0, #12]
 8014000:	f04f 0e00 	mov.w	lr, #0
 8014004:	5ad0      	ldrh	r0, [r2, r3]
 8014006:	2102      	movs	r1, #2
 8014008:	f884 e018 	strb.w	lr, [r4, #24]
 801400c:	f100 0c01 	add.w	ip, r0, #1
 8014010:	61e5      	str	r5, [r4, #28]
 8014012:	6166      	str	r6, [r4, #20]
 8014014:	f822 c003 	strh.w	ip, [r2, r3]
 8014018:	f7fd fafa 	bl	8011610 <uxr_object_id>
 801401c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8014080 <create_topic+0xa0>
 8014020:	f44f 7c16 	mov.w	ip, #600	; 0x258
 8014024:	6120      	str	r0, [r4, #16]
 8014026:	464b      	mov	r3, r9
 8014028:	4642      	mov	r2, r8
 801402a:	4631      	mov	r1, r6
 801402c:	4638      	mov	r0, r7
 801402e:	f8cd c000 	str.w	ip, [sp]
 8014032:	f7fc fa45 	bl	80104c0 <build_topic_xml>
 8014036:	4603      	mov	r3, r0
 8014038:	b1b8      	cbz	r0, 801406a <create_topic+0x8a>
 801403a:	6968      	ldr	r0, [r5, #20]
 801403c:	2104      	movs	r1, #4
 801403e:	69ab      	ldr	r3, [r5, #24]
 8014040:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8014044:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014048:	e9cd 9100 	strd	r9, r1, [sp]
 801404c:	6811      	ldr	r1, [r2, #0]
 801404e:	6922      	ldr	r2, [r4, #16]
 8014050:	f7fd f95e 	bl	8011310 <uxr_buffer_create_topic_xml>
 8014054:	4601      	mov	r1, r0
 8014056:	6968      	ldr	r0, [r5, #20]
 8014058:	f7fc f99e 	bl	8010398 <run_xrce_session>
 801405c:	4603      	mov	r3, r0
 801405e:	7620      	strb	r0, [r4, #24]
 8014060:	b118      	cbz	r0, 801406a <create_topic+0x8a>
 8014062:	4620      	mov	r0, r4
 8014064:	b003      	add	sp, #12
 8014066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801406a:	4620      	mov	r0, r4
 801406c:	461c      	mov	r4, r3
 801406e:	f7fc f97d 	bl	801036c <rmw_uxrce_fini_topic_memory>
 8014072:	4620      	mov	r0, r4
 8014074:	b003      	add	sp, #12
 8014076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801407a:	bf00      	nop
 801407c:	2000d988 	.word	0x2000d988
 8014080:	2000b0f8 	.word	0x2000b0f8

08014084 <destroy_topic>:
 8014084:	b538      	push	{r3, r4, r5, lr}
 8014086:	69c5      	ldr	r5, [r0, #28]
 8014088:	4604      	mov	r4, r0
 801408a:	6902      	ldr	r2, [r0, #16]
 801408c:	6968      	ldr	r0, [r5, #20]
 801408e:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8014092:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014096:	6819      	ldr	r1, [r3, #0]
 8014098:	f7fd f8cc 	bl	8011234 <uxr_buffer_delete_entity>
 801409c:	4601      	mov	r1, r0
 801409e:	6968      	ldr	r0, [r5, #20]
 80140a0:	f7fc f97a 	bl	8010398 <run_xrce_session>
 80140a4:	b908      	cbnz	r0, 80140aa <destroy_topic+0x26>
 80140a6:	2001      	movs	r0, #1
 80140a8:	bd38      	pop	{r3, r4, r5, pc}
 80140aa:	4620      	mov	r0, r4
 80140ac:	f7fc f95e 	bl	801036c <rmw_uxrce_fini_topic_memory>
 80140b0:	2000      	movs	r0, #0
 80140b2:	bd38      	pop	{r3, r4, r5, pc}

080140b4 <rmw_trigger_guard_condition>:
 80140b4:	b160      	cbz	r0, 80140d0 <rmw_trigger_guard_condition+0x1c>
 80140b6:	b510      	push	{r4, lr}
 80140b8:	4604      	mov	r4, r0
 80140ba:	6800      	ldr	r0, [r0, #0]
 80140bc:	f7fc fae2 	bl	8010684 <is_uxrce_rmw_identifier_valid>
 80140c0:	b908      	cbnz	r0, 80140c6 <rmw_trigger_guard_condition+0x12>
 80140c2:	2001      	movs	r0, #1
 80140c4:	bd10      	pop	{r4, pc}
 80140c6:	6863      	ldr	r3, [r4, #4]
 80140c8:	2201      	movs	r2, #1
 80140ca:	2000      	movs	r0, #0
 80140cc:	701a      	strb	r2, [r3, #0]
 80140ce:	bd10      	pop	{r4, pc}
 80140d0:	2001      	movs	r0, #1
 80140d2:	4770      	bx	lr

080140d4 <get_serialized_size_geometry_msgs__msg__Pose>:
 80140d4:	b538      	push	{r3, r4, r5, lr}
 80140d6:	4604      	mov	r4, r0
 80140d8:	b158      	cbz	r0, 80140f2 <get_serialized_size_geometry_msgs__msg__Pose+0x1e>
 80140da:	460d      	mov	r5, r1
 80140dc:	f7f5 ffe2 	bl	800a0a4 <get_serialized_size_geometry_msgs__msg__Point>
 80140e0:	4603      	mov	r3, r0
 80140e2:	f104 0018 	add.w	r0, r4, #24
 80140e6:	461c      	mov	r4, r3
 80140e8:	18e9      	adds	r1, r5, r3
 80140ea:	f000 f8a1 	bl	8014230 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80140ee:	4420      	add	r0, r4
 80140f0:	bd38      	pop	{r3, r4, r5, pc}
 80140f2:	4b05      	ldr	r3, [pc, #20]	; (8014108 <get_serialized_size_geometry_msgs__msg__Pose+0x34>)
 80140f4:	221b      	movs	r2, #27
 80140f6:	2101      	movs	r1, #1
 80140f8:	4804      	ldr	r0, [pc, #16]	; (801410c <get_serialized_size_geometry_msgs__msg__Pose+0x38>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	f000 ffdb 	bl	80150b8 <fwrite>
 8014102:	4620      	mov	r0, r4
 8014104:	bd38      	pop	{r3, r4, r5, pc}
 8014106:	bf00      	nop
 8014108:	20000208 	.word	0x20000208
 801410c:	0801f7a8 	.word	0x0801f7a8

08014110 <_Pose__cdr_deserialize>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	460c      	mov	r4, r1
 8014114:	b199      	cbz	r1, 801413e <_Pose__cdr_deserialize+0x2e>
 8014116:	4605      	mov	r5, r0
 8014118:	f7f6 f882 	bl	800a220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801411c:	4603      	mov	r3, r0
 801411e:	4621      	mov	r1, r4
 8014120:	4628      	mov	r0, r5
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	68db      	ldr	r3, [r3, #12]
 8014126:	4798      	blx	r3
 8014128:	f000 f962 	bl	80143f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801412c:	4603      	mov	r3, r0
 801412e:	f104 0118 	add.w	r1, r4, #24
 8014132:	4628      	mov	r0, r5
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	4718      	bx	r3
 801413e:	4b05      	ldr	r3, [pc, #20]	; (8014154 <_Pose__cdr_deserialize+0x44>)
 8014140:	221b      	movs	r2, #27
 8014142:	2101      	movs	r1, #1
 8014144:	4804      	ldr	r0, [pc, #16]	; (8014158 <_Pose__cdr_deserialize+0x48>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	68db      	ldr	r3, [r3, #12]
 801414a:	f000 ffb5 	bl	80150b8 <fwrite>
 801414e:	4620      	mov	r0, r4
 8014150:	bd70      	pop	{r4, r5, r6, pc}
 8014152:	bf00      	nop
 8014154:	20000208 	.word	0x20000208
 8014158:	0801f7a8 	.word	0x0801f7a8

0801415c <_Pose__cdr_serialize>:
 801415c:	b510      	push	{r4, lr}
 801415e:	4604      	mov	r4, r0
 8014160:	b082      	sub	sp, #8
 8014162:	b1a0      	cbz	r0, 801418e <_Pose__cdr_serialize+0x32>
 8014164:	9101      	str	r1, [sp, #4]
 8014166:	f7f6 f85b 	bl	800a220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801416a:	4603      	mov	r3, r0
 801416c:	9901      	ldr	r1, [sp, #4]
 801416e:	4620      	mov	r0, r4
 8014170:	685b      	ldr	r3, [r3, #4]
 8014172:	689b      	ldr	r3, [r3, #8]
 8014174:	4798      	blx	r3
 8014176:	f000 f93b 	bl	80143f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801417a:	4603      	mov	r3, r0
 801417c:	9901      	ldr	r1, [sp, #4]
 801417e:	f104 0018 	add.w	r0, r4, #24
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	689b      	ldr	r3, [r3, #8]
 8014186:	b002      	add	sp, #8
 8014188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801418c:	4718      	bx	r3
 801418e:	4b05      	ldr	r3, [pc, #20]	; (80141a4 <_Pose__cdr_serialize+0x48>)
 8014190:	221b      	movs	r2, #27
 8014192:	2101      	movs	r1, #1
 8014194:	4804      	ldr	r0, [pc, #16]	; (80141a8 <_Pose__cdr_serialize+0x4c>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	68db      	ldr	r3, [r3, #12]
 801419a:	f000 ff8d 	bl	80150b8 <fwrite>
 801419e:	4620      	mov	r0, r4
 80141a0:	b002      	add	sp, #8
 80141a2:	bd10      	pop	{r4, pc}
 80141a4:	20000208 	.word	0x20000208
 80141a8:	0801f7a8 	.word	0x0801f7a8

080141ac <_Pose__max_serialized_size>:
 80141ac:	b510      	push	{r4, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	2301      	movs	r3, #1
 80141b2:	2100      	movs	r1, #0
 80141b4:	f10d 0007 	add.w	r0, sp, #7
 80141b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80141bc:	f7f6 f816 	bl	800a1ec <max_serialized_size_geometry_msgs__msg__Point>
 80141c0:	4604      	mov	r4, r0
 80141c2:	f10d 0007 	add.w	r0, sp, #7
 80141c6:	4621      	mov	r1, r4
 80141c8:	f000 f8f2 	bl	80143b0 <max_serialized_size_geometry_msgs__msg__Quaternion>
 80141cc:	4420      	add	r0, r4
 80141ce:	b002      	add	sp, #8
 80141d0:	bd10      	pop	{r4, pc}
 80141d2:	bf00      	nop

080141d4 <_Pose__get_serialized_size>:
 80141d4:	b510      	push	{r4, lr}
 80141d6:	4604      	mov	r4, r0
 80141d8:	b150      	cbz	r0, 80141f0 <_Pose__get_serialized_size+0x1c>
 80141da:	2100      	movs	r1, #0
 80141dc:	f7f5 ff62 	bl	800a0a4 <get_serialized_size_geometry_msgs__msg__Point>
 80141e0:	4601      	mov	r1, r0
 80141e2:	f104 0018 	add.w	r0, r4, #24
 80141e6:	460c      	mov	r4, r1
 80141e8:	f000 f822 	bl	8014230 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80141ec:	4420      	add	r0, r4
 80141ee:	bd10      	pop	{r4, pc}
 80141f0:	4b04      	ldr	r3, [pc, #16]	; (8014204 <_Pose__get_serialized_size+0x30>)
 80141f2:	221b      	movs	r2, #27
 80141f4:	2101      	movs	r1, #1
 80141f6:	4804      	ldr	r0, [pc, #16]	; (8014208 <_Pose__get_serialized_size+0x34>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	f000 ff5c 	bl	80150b8 <fwrite>
 8014200:	4620      	mov	r0, r4
 8014202:	bd10      	pop	{r4, pc}
 8014204:	20000208 	.word	0x20000208
 8014208:	0801f7a8 	.word	0x0801f7a8

0801420c <max_serialized_size_geometry_msgs__msg__Pose>:
 801420c:	2301      	movs	r3, #1
 801420e:	b570      	push	{r4, r5, r6, lr}
 8014210:	7003      	strb	r3, [r0, #0]
 8014212:	4605      	mov	r5, r0
 8014214:	460e      	mov	r6, r1
 8014216:	f7f5 ffe9 	bl	800a1ec <max_serialized_size_geometry_msgs__msg__Point>
 801421a:	4604      	mov	r4, r0
 801421c:	4628      	mov	r0, r5
 801421e:	1931      	adds	r1, r6, r4
 8014220:	f000 f8c6 	bl	80143b0 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8014224:	4420      	add	r0, r4
 8014226:	bd70      	pop	{r4, r5, r6, pc}

08014228 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8014228:	4800      	ldr	r0, [pc, #0]	; (801422c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 801422a:	4770      	bx	lr
 801422c:	200001b8 	.word	0x200001b8

08014230 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8014230:	b570      	push	{r4, r5, r6, lr}
 8014232:	b1e0      	cbz	r0, 801426e <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 8014234:	460d      	mov	r5, r1
 8014236:	2108      	movs	r1, #8
 8014238:	f105 0408 	add.w	r4, r5, #8
 801423c:	4628      	mov	r0, r5
 801423e:	f7f6 fd17 	bl	800ac70 <ucdr_alignment>
 8014242:	2108      	movs	r1, #8
 8014244:	1906      	adds	r6, r0, r4
 8014246:	f1c5 0508 	rsb	r5, r5, #8
 801424a:	4630      	mov	r0, r6
 801424c:	f7f6 fd10 	bl	800ac70 <ucdr_alignment>
 8014250:	2108      	movs	r1, #8
 8014252:	1844      	adds	r4, r0, r1
 8014254:	4434      	add	r4, r6
 8014256:	4620      	mov	r0, r4
 8014258:	f7f6 fd0a 	bl	800ac70 <ucdr_alignment>
 801425c:	2108      	movs	r1, #8
 801425e:	4408      	add	r0, r1
 8014260:	4404      	add	r4, r0
 8014262:	4620      	mov	r0, r4
 8014264:	f7f6 fd04 	bl	800ac70 <ucdr_alignment>
 8014268:	4428      	add	r0, r5
 801426a:	4420      	add	r0, r4
 801426c:	bd70      	pop	{r4, r5, r6, pc}
 801426e:	4b05      	ldr	r3, [pc, #20]	; (8014284 <get_serialized_size_geometry_msgs__msg__Quaternion+0x54>)
 8014270:	4604      	mov	r4, r0
 8014272:	221b      	movs	r2, #27
 8014274:	2101      	movs	r1, #1
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4803      	ldr	r0, [pc, #12]	; (8014288 <get_serialized_size_geometry_msgs__msg__Quaternion+0x58>)
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	f000 ff1c 	bl	80150b8 <fwrite>
 8014280:	4620      	mov	r0, r4
 8014282:	bd70      	pop	{r4, r5, r6, pc}
 8014284:	20000208 	.word	0x20000208
 8014288:	0801f7a8 	.word	0x0801f7a8

0801428c <_Quaternion__cdr_serialize>:
 801428c:	b570      	push	{r4, r5, r6, lr}
 801428e:	4604      	mov	r4, r0
 8014290:	b1b0      	cbz	r0, 80142c0 <_Quaternion__cdr_serialize+0x34>
 8014292:	460d      	mov	r5, r1
 8014294:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014298:	4608      	mov	r0, r1
 801429a:	f7f6 fb83 	bl	800a9a4 <ucdr_serialize_double>
 801429e:	4628      	mov	r0, r5
 80142a0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80142a4:	f7f6 fb7e 	bl	800a9a4 <ucdr_serialize_double>
 80142a8:	4628      	mov	r0, r5
 80142aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80142ae:	f7f6 fb79 	bl	800a9a4 <ucdr_serialize_double>
 80142b2:	4628      	mov	r0, r5
 80142b4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80142b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142bc:	f7f6 bb72 	b.w	800a9a4 <ucdr_serialize_double>
 80142c0:	4b04      	ldr	r3, [pc, #16]	; (80142d4 <_Quaternion__cdr_serialize+0x48>)
 80142c2:	221b      	movs	r2, #27
 80142c4:	2101      	movs	r1, #1
 80142c6:	4804      	ldr	r0, [pc, #16]	; (80142d8 <_Quaternion__cdr_serialize+0x4c>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	f000 fef4 	bl	80150b8 <fwrite>
 80142d0:	4620      	mov	r0, r4
 80142d2:	bd70      	pop	{r4, r5, r6, pc}
 80142d4:	20000208 	.word	0x20000208
 80142d8:	0801f7a8 	.word	0x0801f7a8

080142dc <_Quaternion__cdr_deserialize>:
 80142dc:	b538      	push	{r3, r4, r5, lr}
 80142de:	460c      	mov	r4, r1
 80142e0:	b199      	cbz	r1, 801430a <_Quaternion__cdr_deserialize+0x2e>
 80142e2:	4605      	mov	r5, r0
 80142e4:	f7f6 fbf2 	bl	800aacc <ucdr_deserialize_double>
 80142e8:	f104 0108 	add.w	r1, r4, #8
 80142ec:	4628      	mov	r0, r5
 80142ee:	f7f6 fbed 	bl	800aacc <ucdr_deserialize_double>
 80142f2:	f104 0110 	add.w	r1, r4, #16
 80142f6:	4628      	mov	r0, r5
 80142f8:	f7f6 fbe8 	bl	800aacc <ucdr_deserialize_double>
 80142fc:	f104 0118 	add.w	r1, r4, #24
 8014300:	4628      	mov	r0, r5
 8014302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014306:	f7f6 bbe1 	b.w	800aacc <ucdr_deserialize_double>
 801430a:	4b05      	ldr	r3, [pc, #20]	; (8014320 <_Quaternion__cdr_deserialize+0x44>)
 801430c:	221b      	movs	r2, #27
 801430e:	2101      	movs	r1, #1
 8014310:	4804      	ldr	r0, [pc, #16]	; (8014324 <_Quaternion__cdr_deserialize+0x48>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	f000 fecf 	bl	80150b8 <fwrite>
 801431a:	4620      	mov	r0, r4
 801431c:	bd38      	pop	{r3, r4, r5, pc}
 801431e:	bf00      	nop
 8014320:	20000208 	.word	0x20000208
 8014324:	0801f7a8 	.word	0x0801f7a8

08014328 <_Quaternion__max_serialized_size>:
 8014328:	b538      	push	{r3, r4, r5, lr}
 801432a:	2108      	movs	r1, #8
 801432c:	2000      	movs	r0, #0
 801432e:	f7f6 fc9f 	bl	800ac70 <ucdr_alignment>
 8014332:	2108      	movs	r1, #8
 8014334:	1845      	adds	r5, r0, r1
 8014336:	4628      	mov	r0, r5
 8014338:	f7f6 fc9a 	bl	800ac70 <ucdr_alignment>
 801433c:	2108      	movs	r1, #8
 801433e:	1844      	adds	r4, r0, r1
 8014340:	442c      	add	r4, r5
 8014342:	4620      	mov	r0, r4
 8014344:	f7f6 fc94 	bl	800ac70 <ucdr_alignment>
 8014348:	2108      	movs	r1, #8
 801434a:	4408      	add	r0, r1
 801434c:	4404      	add	r4, r0
 801434e:	4620      	mov	r0, r4
 8014350:	f7f6 fc8e 	bl	800ac70 <ucdr_alignment>
 8014354:	3008      	adds	r0, #8
 8014356:	4420      	add	r0, r4
 8014358:	bd38      	pop	{r3, r4, r5, pc}
 801435a:	bf00      	nop

0801435c <_Quaternion__get_serialized_size>:
 801435c:	b538      	push	{r3, r4, r5, lr}
 801435e:	b1b8      	cbz	r0, 8014390 <_Quaternion__get_serialized_size+0x34>
 8014360:	2108      	movs	r1, #8
 8014362:	2000      	movs	r0, #0
 8014364:	f7f6 fc84 	bl	800ac70 <ucdr_alignment>
 8014368:	2108      	movs	r1, #8
 801436a:	1845      	adds	r5, r0, r1
 801436c:	4628      	mov	r0, r5
 801436e:	f7f6 fc7f 	bl	800ac70 <ucdr_alignment>
 8014372:	2108      	movs	r1, #8
 8014374:	1844      	adds	r4, r0, r1
 8014376:	442c      	add	r4, r5
 8014378:	4620      	mov	r0, r4
 801437a:	f7f6 fc79 	bl	800ac70 <ucdr_alignment>
 801437e:	2108      	movs	r1, #8
 8014380:	4408      	add	r0, r1
 8014382:	4404      	add	r4, r0
 8014384:	4620      	mov	r0, r4
 8014386:	f7f6 fc73 	bl	800ac70 <ucdr_alignment>
 801438a:	3008      	adds	r0, #8
 801438c:	4420      	add	r0, r4
 801438e:	bd38      	pop	{r3, r4, r5, pc}
 8014390:	4b05      	ldr	r3, [pc, #20]	; (80143a8 <_Quaternion__get_serialized_size+0x4c>)
 8014392:	4604      	mov	r4, r0
 8014394:	221b      	movs	r2, #27
 8014396:	2101      	movs	r1, #1
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	4804      	ldr	r0, [pc, #16]	; (80143ac <_Quaternion__get_serialized_size+0x50>)
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	f000 fe8b 	bl	80150b8 <fwrite>
 80143a2:	4620      	mov	r0, r4
 80143a4:	bd38      	pop	{r3, r4, r5, pc}
 80143a6:	bf00      	nop
 80143a8:	20000208 	.word	0x20000208
 80143ac:	0801f7a8 	.word	0x0801f7a8

080143b0 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 80143b0:	b570      	push	{r4, r5, r6, lr}
 80143b2:	460c      	mov	r4, r1
 80143b4:	2301      	movs	r3, #1
 80143b6:	2108      	movs	r1, #8
 80143b8:	f104 0508 	add.w	r5, r4, #8
 80143bc:	7003      	strb	r3, [r0, #0]
 80143be:	4620      	mov	r0, r4
 80143c0:	f1c4 0408 	rsb	r4, r4, #8
 80143c4:	f7f6 fc54 	bl	800ac70 <ucdr_alignment>
 80143c8:	1946      	adds	r6, r0, r5
 80143ca:	2108      	movs	r1, #8
 80143cc:	4630      	mov	r0, r6
 80143ce:	f7f6 fc4f 	bl	800ac70 <ucdr_alignment>
 80143d2:	2108      	movs	r1, #8
 80143d4:	1845      	adds	r5, r0, r1
 80143d6:	4435      	add	r5, r6
 80143d8:	4628      	mov	r0, r5
 80143da:	f7f6 fc49 	bl	800ac70 <ucdr_alignment>
 80143de:	2108      	movs	r1, #8
 80143e0:	4408      	add	r0, r1
 80143e2:	4405      	add	r5, r0
 80143e4:	4628      	mov	r0, r5
 80143e6:	f7f6 fc43 	bl	800ac70 <ucdr_alignment>
 80143ea:	4420      	add	r0, r4
 80143ec:	4428      	add	r0, r5
 80143ee:	bd70      	pop	{r4, r5, r6, pc}

080143f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80143f0:	4800      	ldr	r0, [pc, #0]	; (80143f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 80143f2:	4770      	bx	lr
 80143f4:	200001e0 	.word	0x200001e0

080143f8 <ucdr_serialize_sequence_char>:
 80143f8:	b570      	push	{r4, r5, r6, lr}
 80143fa:	4615      	mov	r5, r2
 80143fc:	460e      	mov	r6, r1
 80143fe:	7d01      	ldrb	r1, [r0, #20]
 8014400:	4604      	mov	r4, r0
 8014402:	f7f6 f9b3 	bl	800a76c <ucdr_serialize_endian_uint32_t>
 8014406:	b90d      	cbnz	r5, 801440c <ucdr_serialize_sequence_char+0x14>
 8014408:	2001      	movs	r0, #1
 801440a:	bd70      	pop	{r4, r5, r6, pc}
 801440c:	462b      	mov	r3, r5
 801440e:	4632      	mov	r2, r6
 8014410:	7d21      	ldrb	r1, [r4, #20]
 8014412:	4620      	mov	r0, r4
 8014414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014418:	f7fc bd4e 	b.w	8010eb8 <ucdr_serialize_endian_array_char>

0801441c <ucdr_deserialize_sequence_char>:
 801441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014420:	461d      	mov	r5, r3
 8014422:	4616      	mov	r6, r2
 8014424:	460f      	mov	r7, r1
 8014426:	461a      	mov	r2, r3
 8014428:	7d01      	ldrb	r1, [r0, #20]
 801442a:	4604      	mov	r4, r0
 801442c:	f7f6 f9fe 	bl	800a82c <ucdr_deserialize_endian_uint32_t>
 8014430:	682b      	ldr	r3, [r5, #0]
 8014432:	429e      	cmp	r6, r3
 8014434:	d201      	bcs.n	801443a <ucdr_deserialize_sequence_char+0x1e>
 8014436:	2201      	movs	r2, #1
 8014438:	75a2      	strb	r2, [r4, #22]
 801443a:	b913      	cbnz	r3, 8014442 <ucdr_deserialize_sequence_char+0x26>
 801443c:	2001      	movs	r0, #1
 801443e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014442:	463a      	mov	r2, r7
 8014444:	7d21      	ldrb	r1, [r4, #20]
 8014446:	4620      	mov	r0, r4
 8014448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801444c:	f7fc bd66 	b.w	8010f1c <ucdr_deserialize_endian_array_char>

08014450 <ucdr_serialize_sequence_uint8_t>:
 8014450:	b570      	push	{r4, r5, r6, lr}
 8014452:	4615      	mov	r5, r2
 8014454:	460e      	mov	r6, r1
 8014456:	7d01      	ldrb	r1, [r0, #20]
 8014458:	4604      	mov	r4, r0
 801445a:	f7f6 f987 	bl	800a76c <ucdr_serialize_endian_uint32_t>
 801445e:	b90d      	cbnz	r5, 8014464 <ucdr_serialize_sequence_uint8_t+0x14>
 8014460:	2001      	movs	r0, #1
 8014462:	bd70      	pop	{r4, r5, r6, pc}
 8014464:	462b      	mov	r3, r5
 8014466:	4632      	mov	r2, r6
 8014468:	7d21      	ldrb	r1, [r4, #20]
 801446a:	4620      	mov	r0, r4
 801446c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014470:	f7fc bdba 	b.w	8010fe8 <ucdr_serialize_endian_array_uint8_t>

08014474 <uxr_init_input_best_effort_stream>:
 8014474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014478:	8003      	strh	r3, [r0, #0]
 801447a:	4770      	bx	lr

0801447c <uxr_reset_input_best_effort_stream>:
 801447c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014480:	8003      	strh	r3, [r0, #0]
 8014482:	4770      	bx	lr

08014484 <uxr_receive_best_effort_message>:
 8014484:	b538      	push	{r3, r4, r5, lr}
 8014486:	4604      	mov	r4, r0
 8014488:	8800      	ldrh	r0, [r0, #0]
 801448a:	460d      	mov	r5, r1
 801448c:	f000 fd6a 	bl	8014f64 <uxr_seq_num_cmp>
 8014490:	4603      	mov	r3, r0
 8014492:	0fc0      	lsrs	r0, r0, #31
 8014494:	2b00      	cmp	r3, #0
 8014496:	bfb8      	it	lt
 8014498:	8025      	strhlt	r5, [r4, #0]
 801449a:	bd38      	pop	{r3, r4, r5, pc}

0801449c <on_full_input_buffer>:
 801449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801449e:	4605      	mov	r5, r0
 80144a0:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80144a4:	460c      	mov	r4, r1
 80144a6:	7d0f      	ldrb	r7, [r1, #20]
 80144a8:	682a      	ldr	r2, [r5, #0]
 80144aa:	e9d1 6000 	ldrd	r6, r0, [r1]
 80144ae:	1b93      	subs	r3, r2, r6
 80144b0:	fbb0 f2fc 	udiv	r2, r0, ip
 80144b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80144b8:	3301      	adds	r3, #1
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	fbb3 f1fc 	udiv	r1, r3, ip
 80144c0:	fb0c 3311 	mls	r3, ip, r1, r3
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	fb02 f203 	mul.w	r2, r2, r3
 80144ca:	1d13      	adds	r3, r2, #4
 80144cc:	4433      	add	r3, r6
 80144ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80144d2:	b117      	cbz	r7, 80144da <on_full_input_buffer+0x3e>
 80144d4:	2100      	movs	r1, #0
 80144d6:	f843 1c04 	str.w	r1, [r3, #-4]
 80144da:	2803      	cmp	r0, #3
 80144dc:	d801      	bhi.n	80144e2 <on_full_input_buffer+0x46>
 80144de:	2001      	movs	r0, #1
 80144e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144e2:	f102 0108 	add.w	r1, r2, #8
 80144e6:	692b      	ldr	r3, [r5, #16]
 80144e8:	1f02      	subs	r2, r0, #4
 80144ea:	4628      	mov	r0, r5
 80144ec:	4431      	add	r1, r6
 80144ee:	f7f6 fbb3 	bl	800ac58 <ucdr_init_buffer_origin>
 80144f2:	4628      	mov	r0, r5
 80144f4:	4622      	mov	r2, r4
 80144f6:	4902      	ldr	r1, [pc, #8]	; (8014500 <on_full_input_buffer+0x64>)
 80144f8:	f7f6 fb8c 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 80144fc:	2000      	movs	r0, #0
 80144fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014500:	0801449d 	.word	0x0801449d

08014504 <uxr_init_input_reliable_stream>:
 8014504:	b4f0      	push	{r4, r5, r6, r7}
 8014506:	9c04      	ldr	r4, [sp, #16]
 8014508:	2700      	movs	r7, #0
 801450a:	6001      	str	r1, [r0, #0]
 801450c:	8103      	strh	r3, [r0, #8]
 801450e:	6042      	str	r2, [r0, #4]
 8014510:	6104      	str	r4, [r0, #16]
 8014512:	7507      	strb	r7, [r0, #20]
 8014514:	b1ab      	cbz	r3, 8014542 <uxr_init_input_reliable_stream+0x3e>
 8014516:	600f      	str	r7, [r1, #0]
 8014518:	8902      	ldrh	r2, [r0, #8]
 801451a:	2a01      	cmp	r2, #1
 801451c:	d911      	bls.n	8014542 <uxr_init_input_reliable_stream+0x3e>
 801451e:	2101      	movs	r1, #1
 8014520:	6845      	ldr	r5, [r0, #4]
 8014522:	1c4e      	adds	r6, r1, #1
 8014524:	6804      	ldr	r4, [r0, #0]
 8014526:	fbb1 f3f2 	udiv	r3, r1, r2
 801452a:	fbb5 f5f2 	udiv	r5, r5, r2
 801452e:	fb02 1313 	mls	r3, r2, r3, r1
 8014532:	b2b1      	uxth	r1, r6
 8014534:	b29b      	uxth	r3, r3
 8014536:	fb03 f305 	mul.w	r3, r3, r5
 801453a:	50e7      	str	r7, [r4, r3]
 801453c:	8902      	ldrh	r2, [r0, #8]
 801453e:	428a      	cmp	r2, r1
 8014540:	d8ee      	bhi.n	8014520 <uxr_init_input_reliable_stream+0x1c>
 8014542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014546:	bcf0      	pop	{r4, r5, r6, r7}
 8014548:	60c3      	str	r3, [r0, #12]
 801454a:	4770      	bx	lr

0801454c <uxr_reset_input_reliable_stream>:
 801454c:	8902      	ldrh	r2, [r0, #8]
 801454e:	b1ca      	cbz	r2, 8014584 <uxr_reset_input_reliable_stream+0x38>
 8014550:	b4f0      	push	{r4, r5, r6, r7}
 8014552:	2600      	movs	r6, #0
 8014554:	4631      	mov	r1, r6
 8014556:	4637      	mov	r7, r6
 8014558:	6844      	ldr	r4, [r0, #4]
 801455a:	3601      	adds	r6, #1
 801455c:	6805      	ldr	r5, [r0, #0]
 801455e:	fbb1 f3f2 	udiv	r3, r1, r2
 8014562:	fbb4 f4f2 	udiv	r4, r4, r2
 8014566:	fb02 1313 	mls	r3, r2, r3, r1
 801456a:	b2b1      	uxth	r1, r6
 801456c:	b29b      	uxth	r3, r3
 801456e:	fb03 f304 	mul.w	r3, r3, r4
 8014572:	50ef      	str	r7, [r5, r3]
 8014574:	8902      	ldrh	r2, [r0, #8]
 8014576:	428a      	cmp	r2, r1
 8014578:	d8ee      	bhi.n	8014558 <uxr_reset_input_reliable_stream+0xc>
 801457a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801457e:	bcf0      	pop	{r4, r5, r6, r7}
 8014580:	60c3      	str	r3, [r0, #12]
 8014582:	4770      	bx	lr
 8014584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014588:	60c3      	str	r3, [r0, #12]
 801458a:	4770      	bx	lr

0801458c <uxr_receive_reliable_message>:
 801458c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014590:	4604      	mov	r4, r0
 8014592:	460d      	mov	r5, r1
 8014594:	8901      	ldrh	r1, [r0, #8]
 8014596:	4617      	mov	r7, r2
 8014598:	8980      	ldrh	r0, [r0, #12]
 801459a:	4698      	mov	r8, r3
 801459c:	f000 fcda 	bl	8014f54 <uxr_seq_num_add>
 80145a0:	4629      	mov	r1, r5
 80145a2:	4606      	mov	r6, r0
 80145a4:	89a0      	ldrh	r0, [r4, #12]
 80145a6:	f000 fcdd 	bl	8014f64 <uxr_seq_num_cmp>
 80145aa:	2800      	cmp	r0, #0
 80145ac:	db0a      	blt.n	80145c4 <uxr_receive_reliable_message+0x38>
 80145ae:	2600      	movs	r6, #0
 80145b0:	4629      	mov	r1, r5
 80145b2:	89e0      	ldrh	r0, [r4, #14]
 80145b4:	f000 fcd6 	bl	8014f64 <uxr_seq_num_cmp>
 80145b8:	2800      	cmp	r0, #0
 80145ba:	4630      	mov	r0, r6
 80145bc:	bfb8      	it	lt
 80145be:	81e5      	strhlt	r5, [r4, #14]
 80145c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145c4:	4630      	mov	r0, r6
 80145c6:	4629      	mov	r1, r5
 80145c8:	f000 fccc 	bl	8014f64 <uxr_seq_num_cmp>
 80145cc:	2800      	cmp	r0, #0
 80145ce:	dbee      	blt.n	80145ae <uxr_receive_reliable_message+0x22>
 80145d0:	6923      	ldr	r3, [r4, #16]
 80145d2:	4638      	mov	r0, r7
 80145d4:	4798      	blx	r3
 80145d6:	2101      	movs	r1, #1
 80145d8:	4681      	mov	r9, r0
 80145da:	89a0      	ldrh	r0, [r4, #12]
 80145dc:	f000 fcba 	bl	8014f54 <uxr_seq_num_add>
 80145e0:	1a2e      	subs	r6, r5, r0
 80145e2:	fab6 f686 	clz	r6, r6
 80145e6:	0976      	lsrs	r6, r6, #5
 80145e8:	f1b9 0f00 	cmp.w	r9, #0
 80145ec:	bf18      	it	ne
 80145ee:	2600      	movne	r6, #0
 80145f0:	b126      	cbz	r6, 80145fc <uxr_receive_reliable_message+0x70>
 80145f2:	2300      	movs	r3, #0
 80145f4:	9a08      	ldr	r2, [sp, #32]
 80145f6:	81a0      	strh	r0, [r4, #12]
 80145f8:	7013      	strb	r3, [r2, #0]
 80145fa:	e7d9      	b.n	80145b0 <uxr_receive_reliable_message+0x24>
 80145fc:	8921      	ldrh	r1, [r4, #8]
 80145fe:	fbb5 f3f1 	udiv	r3, r5, r1
 8014602:	e9d4 0200 	ldrd	r0, r2, [r4]
 8014606:	fb01 5313 	mls	r3, r1, r3, r5
 801460a:	fbb2 f2f1 	udiv	r2, r2, r1
 801460e:	b29b      	uxth	r3, r3
 8014610:	fb03 f302 	mul.w	r3, r3, r2
 8014614:	3304      	adds	r3, #4
 8014616:	4418      	add	r0, r3
 8014618:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d1c6      	bne.n	80145ae <uxr_receive_reliable_message+0x22>
 8014620:	4639      	mov	r1, r7
 8014622:	4642      	mov	r2, r8
 8014624:	f7eb fe0c 	bl	8000240 <memcpy>
 8014628:	8921      	ldrh	r1, [r4, #8]
 801462a:	6862      	ldr	r2, [r4, #4]
 801462c:	2001      	movs	r0, #1
 801462e:	fbb5 f3f1 	udiv	r3, r5, r1
 8014632:	fbb2 f2f1 	udiv	r2, r2, r1
 8014636:	fb01 5313 	mls	r3, r1, r3, r5
 801463a:	6821      	ldr	r1, [r4, #0]
 801463c:	b29b      	uxth	r3, r3
 801463e:	fb03 f302 	mul.w	r3, r3, r2
 8014642:	f841 8003 	str.w	r8, [r1, r3]
 8014646:	9b08      	ldr	r3, [sp, #32]
 8014648:	7018      	strb	r0, [r3, #0]
 801464a:	f1b9 0f00 	cmp.w	r9, #0
 801464e:	d0ae      	beq.n	80145ae <uxr_receive_reliable_message+0x22>
 8014650:	89a6      	ldrh	r6, [r4, #12]
 8014652:	e001      	b.n	8014658 <uxr_receive_reliable_message+0xcc>
 8014654:	2801      	cmp	r0, #1
 8014656:	d1aa      	bne.n	80145ae <uxr_receive_reliable_message+0x22>
 8014658:	4630      	mov	r0, r6
 801465a:	2101      	movs	r1, #1
 801465c:	f000 fc7a 	bl	8014f54 <uxr_seq_num_add>
 8014660:	8927      	ldrh	r7, [r4, #8]
 8014662:	4606      	mov	r6, r0
 8014664:	fbb0 f3f7 	udiv	r3, r0, r7
 8014668:	e9d4 2100 	ldrd	r2, r1, [r4]
 801466c:	fb07 0313 	mls	r3, r7, r3, r0
 8014670:	fbb1 f1f7 	udiv	r1, r1, r7
 8014674:	b29b      	uxth	r3, r3
 8014676:	fb03 f301 	mul.w	r3, r3, r1
 801467a:	3304      	adds	r3, #4
 801467c:	18d0      	adds	r0, r2, r3
 801467e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d093      	beq.n	80145ae <uxr_receive_reliable_message+0x22>
 8014686:	6923      	ldr	r3, [r4, #16]
 8014688:	4798      	blx	r3
 801468a:	2802      	cmp	r0, #2
 801468c:	d1e2      	bne.n	8014654 <uxr_receive_reliable_message+0xc8>
 801468e:	2601      	movs	r6, #1
 8014690:	e78e      	b.n	80145b0 <uxr_receive_reliable_message+0x24>
 8014692:	bf00      	nop

08014694 <uxr_next_input_reliable_buffer_available>:
 8014694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014698:	4604      	mov	r4, r0
 801469a:	460f      	mov	r7, r1
 801469c:	8980      	ldrh	r0, [r0, #12]
 801469e:	2101      	movs	r1, #1
 80146a0:	4690      	mov	r8, r2
 80146a2:	f000 fc57 	bl	8014f54 <uxr_seq_num_add>
 80146a6:	8921      	ldrh	r1, [r4, #8]
 80146a8:	fbb0 f5f1 	udiv	r5, r0, r1
 80146ac:	e9d4 3200 	ldrd	r3, r2, [r4]
 80146b0:	fb01 0515 	mls	r5, r1, r5, r0
 80146b4:	fbb2 f2f1 	udiv	r2, r2, r1
 80146b8:	b2ad      	uxth	r5, r5
 80146ba:	fb05 f502 	mul.w	r5, r5, r2
 80146be:	3504      	adds	r5, #4
 80146c0:	441d      	add	r5, r3
 80146c2:	f855 9c04 	ldr.w	r9, [r5, #-4]
 80146c6:	f1b9 0f00 	cmp.w	r9, #0
 80146ca:	d025      	beq.n	8014718 <uxr_next_input_reliable_buffer_available+0x84>
 80146cc:	4606      	mov	r6, r0
 80146ce:	6923      	ldr	r3, [r4, #16]
 80146d0:	4628      	mov	r0, r5
 80146d2:	4798      	blx	r3
 80146d4:	4682      	mov	sl, r0
 80146d6:	b310      	cbz	r0, 801471e <uxr_next_input_reliable_buffer_available+0x8a>
 80146d8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80146dc:	e005      	b.n	80146ea <uxr_next_input_reliable_buffer_available+0x56>
 80146de:	6923      	ldr	r3, [r4, #16]
 80146e0:	4798      	blx	r3
 80146e2:	2802      	cmp	r0, #2
 80146e4:	d032      	beq.n	801474c <uxr_next_input_reliable_buffer_available+0xb8>
 80146e6:	2801      	cmp	r0, #1
 80146e8:	d116      	bne.n	8014718 <uxr_next_input_reliable_buffer_available+0x84>
 80146ea:	4650      	mov	r0, sl
 80146ec:	2101      	movs	r1, #1
 80146ee:	f000 fc31 	bl	8014f54 <uxr_seq_num_add>
 80146f2:	8921      	ldrh	r1, [r4, #8]
 80146f4:	4682      	mov	sl, r0
 80146f6:	fbba f3f1 	udiv	r3, sl, r1
 80146fa:	e9d4 0200 	ldrd	r0, r2, [r4]
 80146fe:	fb01 a313 	mls	r3, r1, r3, sl
 8014702:	fbb2 f2f1 	udiv	r2, r2, r1
 8014706:	b29b      	uxth	r3, r3
 8014708:	fb03 f302 	mul.w	r3, r3, r2
 801470c:	3304      	adds	r3, #4
 801470e:	4418      	add	r0, r3
 8014710:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d1e2      	bne.n	80146de <uxr_next_input_reliable_buffer_available+0x4a>
 8014718:	2000      	movs	r0, #0
 801471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801471e:	464a      	mov	r2, r9
 8014720:	4629      	mov	r1, r5
 8014722:	4638      	mov	r0, r7
 8014724:	f7f6 faa0 	bl	800ac68 <ucdr_init_buffer>
 8014728:	8921      	ldrh	r1, [r4, #8]
 801472a:	6862      	ldr	r2, [r4, #4]
 801472c:	2001      	movs	r0, #1
 801472e:	fbb6 f3f1 	udiv	r3, r6, r1
 8014732:	fbb2 f2f1 	udiv	r2, r2, r1
 8014736:	fb01 6313 	mls	r3, r1, r3, r6
 801473a:	6821      	ldr	r1, [r4, #0]
 801473c:	b29b      	uxth	r3, r3
 801473e:	fb03 f302 	mul.w	r3, r3, r2
 8014742:	f841 a003 	str.w	sl, [r1, r3]
 8014746:	81a6      	strh	r6, [r4, #12]
 8014748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801474c:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 8014750:	eb05 0108 	add.w	r1, r5, r8
 8014754:	6863      	ldr	r3, [r4, #4]
 8014756:	f04f 0c00 	mov.w	ip, #0
 801475a:	eba9 0208 	sub.w	r2, r9, r8
 801475e:	fbb6 f0fe 	udiv	r0, r6, lr
 8014762:	fbb3 f5fe 	udiv	r5, r3, lr
 8014766:	fb0e 6610 	mls	r6, lr, r0, r6
 801476a:	6823      	ldr	r3, [r4, #0]
 801476c:	4638      	mov	r0, r7
 801476e:	b2b6      	uxth	r6, r6
 8014770:	fb06 f605 	mul.w	r6, r6, r5
 8014774:	f843 c006 	str.w	ip, [r3, r6]
 8014778:	f7f6 fa76 	bl	800ac68 <ucdr_init_buffer>
 801477c:	4638      	mov	r0, r7
 801477e:	4622      	mov	r2, r4
 8014780:	4903      	ldr	r1, [pc, #12]	; (8014790 <uxr_next_input_reliable_buffer_available+0xfc>)
 8014782:	f7f6 fa47 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 8014786:	2001      	movs	r0, #1
 8014788:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801478c:	e7c5      	b.n	801471a <uxr_next_input_reliable_buffer_available+0x86>
 801478e:	bf00      	nop
 8014790:	0801449d 	.word	0x0801449d

08014794 <uxr_process_heartbeat>:
 8014794:	b538      	push	{r3, r4, r5, lr}
 8014796:	4611      	mov	r1, r2
 8014798:	4604      	mov	r4, r0
 801479a:	89c0      	ldrh	r0, [r0, #14]
 801479c:	4615      	mov	r5, r2
 801479e:	f000 fbe1 	bl	8014f64 <uxr_seq_num_cmp>
 80147a2:	2800      	cmp	r0, #0
 80147a4:	bfb8      	it	lt
 80147a6:	81e5      	strhlt	r5, [r4, #14]
 80147a8:	bd38      	pop	{r3, r4, r5, pc}
 80147aa:	bf00      	nop

080147ac <uxr_compute_acknack>:
 80147ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b0:	8903      	ldrh	r3, [r0, #8]
 80147b2:	4604      	mov	r4, r0
 80147b4:	460f      	mov	r7, r1
 80147b6:	8985      	ldrh	r5, [r0, #12]
 80147b8:	b1db      	cbz	r3, 80147f2 <uxr_compute_acknack+0x46>
 80147ba:	4628      	mov	r0, r5
 80147bc:	2601      	movs	r6, #1
 80147be:	e004      	b.n	80147ca <uxr_compute_acknack+0x1e>
 80147c0:	4566      	cmp	r6, ip
 80147c2:	f106 0601 	add.w	r6, r6, #1
 80147c6:	d214      	bcs.n	80147f2 <uxr_compute_acknack+0x46>
 80147c8:	89a0      	ldrh	r0, [r4, #12]
 80147ca:	b2b1      	uxth	r1, r6
 80147cc:	f000 fbc2 	bl	8014f54 <uxr_seq_num_add>
 80147d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80147d4:	fbb0 f2fc 	udiv	r2, r0, ip
 80147d8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80147dc:	fb0c 0212 	mls	r2, ip, r2, r0
 80147e0:	fbb3 f3fc 	udiv	r3, r3, ip
 80147e4:	b292      	uxth	r2, r2
 80147e6:	fb02 1303 	mla	r3, r2, r3, r1
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d1e7      	bne.n	80147c0 <uxr_compute_acknack+0x14>
 80147f0:	4605      	mov	r5, r0
 80147f2:	4628      	mov	r0, r5
 80147f4:	803d      	strh	r5, [r7, #0]
 80147f6:	89e5      	ldrh	r5, [r4, #14]
 80147f8:	2101      	movs	r1, #1
 80147fa:	f000 fbaf 	bl	8014f5c <uxr_seq_num_sub>
 80147fe:	4601      	mov	r1, r0
 8014800:	4628      	mov	r0, r5
 8014802:	f000 fbab 	bl	8014f5c <uxr_seq_num_sub>
 8014806:	4606      	mov	r6, r0
 8014808:	b320      	cbz	r0, 8014854 <uxr_compute_acknack+0xa8>
 801480a:	f04f 0900 	mov.w	r9, #0
 801480e:	f04f 0801 	mov.w	r8, #1
 8014812:	464d      	mov	r5, r9
 8014814:	fa1f f189 	uxth.w	r1, r9
 8014818:	8838      	ldrh	r0, [r7, #0]
 801481a:	f000 fb9b 	bl	8014f54 <uxr_seq_num_add>
 801481e:	8923      	ldrh	r3, [r4, #8]
 8014820:	fa08 fc09 	lsl.w	ip, r8, r9
 8014824:	f109 0901 	add.w	r9, r9, #1
 8014828:	fbb0 fef3 	udiv	lr, r0, r3
 801482c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014830:	ea4c 0c05 	orr.w	ip, ip, r5
 8014834:	fbb1 f1f3 	udiv	r1, r1, r3
 8014838:	fb0e 0313 	mls	r3, lr, r3, r0
 801483c:	b29b      	uxth	r3, r3
 801483e:	fb03 2101 	mla	r1, r3, r1, r2
 8014842:	680b      	ldr	r3, [r1, #0]
 8014844:	b90b      	cbnz	r3, 801484a <uxr_compute_acknack+0x9e>
 8014846:	fa1f f58c 	uxth.w	r5, ip
 801484a:	454e      	cmp	r6, r9
 801484c:	d1e2      	bne.n	8014814 <uxr_compute_acknack+0x68>
 801484e:	4628      	mov	r0, r5
 8014850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014854:	4605      	mov	r5, r0
 8014856:	4628      	mov	r0, r5
 8014858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801485c <uxr_init_output_best_effort_stream>:
 801485c:	b410      	push	{r4}
 801485e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8014862:	7303      	strb	r3, [r0, #12]
 8014864:	6082      	str	r2, [r0, #8]
 8014866:	81c4      	strh	r4, [r0, #14]
 8014868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801486c:	e9c0 1300 	strd	r1, r3, [r0]
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop

08014874 <uxr_reset_output_best_effort_stream>:
 8014874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014878:	7b03      	ldrb	r3, [r0, #12]
 801487a:	81c2      	strh	r2, [r0, #14]
 801487c:	6043      	str	r3, [r0, #4]
 801487e:	4770      	bx	lr

08014880 <uxr_prepare_best_effort_buffer_to_write>:
 8014880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014882:	4604      	mov	r4, r0
 8014884:	b083      	sub	sp, #12
 8014886:	6840      	ldr	r0, [r0, #4]
 8014888:	460d      	mov	r5, r1
 801488a:	4616      	mov	r6, r2
 801488c:	f7fe fc44 	bl	8013118 <uxr_submessage_padding>
 8014890:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8014894:	4410      	add	r0, r2
 8014896:	1942      	adds	r2, r0, r5
 8014898:	4293      	cmp	r3, r2
 801489a:	bf2c      	ite	cs
 801489c:	2701      	movcs	r7, #1
 801489e:	2700      	movcc	r7, #0
 80148a0:	d202      	bcs.n	80148a8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80148a2:	4638      	mov	r0, r7
 80148a4:	b003      	add	sp, #12
 80148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148a8:	9000      	str	r0, [sp, #0]
 80148aa:	2300      	movs	r3, #0
 80148ac:	4630      	mov	r0, r6
 80148ae:	6821      	ldr	r1, [r4, #0]
 80148b0:	f7f6 f9c8 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 80148b4:	6861      	ldr	r1, [r4, #4]
 80148b6:	4638      	mov	r0, r7
 80148b8:	4429      	add	r1, r5
 80148ba:	6061      	str	r1, [r4, #4]
 80148bc:	b003      	add	sp, #12
 80148be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148c0 <uxr_prepare_best_effort_buffer_to_send>:
 80148c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c4:	6845      	ldr	r5, [r0, #4]
 80148c6:	4604      	mov	r4, r0
 80148c8:	7b00      	ldrb	r0, [r0, #12]
 80148ca:	4285      	cmp	r5, r0
 80148cc:	bf8c      	ite	hi
 80148ce:	2501      	movhi	r5, #1
 80148d0:	2500      	movls	r5, #0
 80148d2:	d802      	bhi.n	80148da <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80148d4:	4628      	mov	r0, r5
 80148d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148da:	4688      	mov	r8, r1
 80148dc:	89e0      	ldrh	r0, [r4, #14]
 80148de:	2101      	movs	r1, #1
 80148e0:	4617      	mov	r7, r2
 80148e2:	461e      	mov	r6, r3
 80148e4:	f000 fb36 	bl	8014f54 <uxr_seq_num_add>
 80148e8:	81e0      	strh	r0, [r4, #14]
 80148ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80148ee:	8030      	strh	r0, [r6, #0]
 80148f0:	4628      	mov	r0, r5
 80148f2:	f8c8 2000 	str.w	r2, [r8]
 80148f6:	603b      	str	r3, [r7, #0]
 80148f8:	7b23      	ldrb	r3, [r4, #12]
 80148fa:	6063      	str	r3, [r4, #4]
 80148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014900 <on_full_output_buffer>:
 8014900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014902:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8014906:	460d      	mov	r5, r1
 8014908:	6803      	ldr	r3, [r0, #0]
 801490a:	4606      	mov	r6, r0
 801490c:	7b2a      	ldrb	r2, [r5, #12]
 801490e:	e9d1 1700 	ldrd	r1, r7, [r1]
 8014912:	fbb7 f7fc 	udiv	r7, r7, ip
 8014916:	1a5c      	subs	r4, r3, r1
 8014918:	6903      	ldr	r3, [r0, #16]
 801491a:	fbb4 f4f7 	udiv	r4, r4, r7
 801491e:	3401      	adds	r4, #1
 8014920:	b2a4      	uxth	r4, r4
 8014922:	fbb4 fefc 	udiv	lr, r4, ip
 8014926:	fb0c 441e 	mls	r4, ip, lr, r4
 801492a:	b2a4      	uxth	r4, r4
 801492c:	fb07 f404 	mul.w	r4, r7, r4
 8014930:	590f      	ldr	r7, [r1, r4]
 8014932:	4414      	add	r4, r2
 8014934:	1aba      	subs	r2, r7, r2
 8014936:	3408      	adds	r4, #8
 8014938:	3a04      	subs	r2, #4
 801493a:	4421      	add	r1, r4
 801493c:	f7f6 f98c 	bl	800ac58 <ucdr_init_buffer_origin>
 8014940:	4630      	mov	r0, r6
 8014942:	462a      	mov	r2, r5
 8014944:	4902      	ldr	r1, [pc, #8]	; (8014950 <on_full_output_buffer+0x50>)
 8014946:	f7f6 f965 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 801494a:	2000      	movs	r0, #0
 801494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801494e:	bf00      	nop
 8014950:	08014901 	.word	0x08014901

08014954 <uxr_init_output_reliable_stream>:
 8014954:	b4f0      	push	{r4, r5, r6, r7}
 8014956:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801495a:	6001      	str	r1, [r0, #0]
 801495c:	8103      	strh	r3, [r0, #8]
 801495e:	6042      	str	r2, [r0, #4]
 8014960:	7304      	strb	r4, [r0, #12]
 8014962:	b1b3      	cbz	r3, 8014992 <uxr_init_output_reliable_stream+0x3e>
 8014964:	600c      	str	r4, [r1, #0]
 8014966:	8902      	ldrh	r2, [r0, #8]
 8014968:	2a01      	cmp	r2, #1
 801496a:	d912      	bls.n	8014992 <uxr_init_output_reliable_stream+0x3e>
 801496c:	2101      	movs	r1, #1
 801496e:	6845      	ldr	r5, [r0, #4]
 8014970:	1c4f      	adds	r7, r1, #1
 8014972:	7b06      	ldrb	r6, [r0, #12]
 8014974:	6804      	ldr	r4, [r0, #0]
 8014976:	fbb1 f3f2 	udiv	r3, r1, r2
 801497a:	fbb5 f5f2 	udiv	r5, r5, r2
 801497e:	fb02 1313 	mls	r3, r2, r3, r1
 8014982:	b2b9      	uxth	r1, r7
 8014984:	b29b      	uxth	r3, r3
 8014986:	fb03 f305 	mul.w	r3, r3, r5
 801498a:	50e6      	str	r6, [r4, r3]
 801498c:	8902      	ldrh	r2, [r0, #8]
 801498e:	428a      	cmp	r2, r1
 8014990:	d8ed      	bhi.n	801496e <uxr_init_output_reliable_stream+0x1a>
 8014992:	4d08      	ldr	r5, [pc, #32]	; (80149b4 <uxr_init_output_reliable_stream+0x60>)
 8014994:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8014998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801499c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149a0:	2100      	movs	r1, #0
 80149a2:	f8c0 500e 	str.w	r5, [r0, #14]
 80149a6:	8244      	strh	r4, [r0, #18]
 80149a8:	8401      	strh	r1, [r0, #32]
 80149aa:	bcf0      	pop	{r4, r5, r6, r7}
 80149ac:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80149b0:	4770      	bx	lr
 80149b2:	bf00      	nop
 80149b4:	ffff0000 	.word	0xffff0000

080149b8 <uxr_reset_output_reliable_stream>:
 80149b8:	8902      	ldrh	r2, [r0, #8]
 80149ba:	b4f0      	push	{r4, r5, r6, r7}
 80149bc:	b19a      	cbz	r2, 80149e6 <uxr_reset_output_reliable_stream+0x2e>
 80149be:	2600      	movs	r6, #0
 80149c0:	4631      	mov	r1, r6
 80149c2:	6845      	ldr	r5, [r0, #4]
 80149c4:	3601      	adds	r6, #1
 80149c6:	7b07      	ldrb	r7, [r0, #12]
 80149c8:	6804      	ldr	r4, [r0, #0]
 80149ca:	fbb1 f3f2 	udiv	r3, r1, r2
 80149ce:	fbb5 f5f2 	udiv	r5, r5, r2
 80149d2:	fb02 1313 	mls	r3, r2, r3, r1
 80149d6:	b2b1      	uxth	r1, r6
 80149d8:	b29b      	uxth	r3, r3
 80149da:	fb03 f305 	mul.w	r3, r3, r5
 80149de:	50e7      	str	r7, [r4, r3]
 80149e0:	8902      	ldrh	r2, [r0, #8]
 80149e2:	428a      	cmp	r2, r1
 80149e4:	d8ed      	bhi.n	80149c2 <uxr_reset_output_reliable_stream+0xa>
 80149e6:	4d08      	ldr	r5, [pc, #32]	; (8014a08 <uxr_reset_output_reliable_stream+0x50>)
 80149e8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80149ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149f4:	2100      	movs	r1, #0
 80149f6:	f8c0 500e 	str.w	r5, [r0, #14]
 80149fa:	8244      	strh	r4, [r0, #18]
 80149fc:	8401      	strh	r1, [r0, #32]
 80149fe:	bcf0      	pop	{r4, r5, r6, r7}
 8014a00:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop
 8014a08:	ffff0000 	.word	0xffff0000

08014a0c <uxr_prepare_reliable_buffer_to_write>:
 8014a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a10:	8903      	ldrh	r3, [r0, #8]
 8014a12:	b091      	sub	sp, #68	; 0x44
 8014a14:	89c4      	ldrh	r4, [r0, #14]
 8014a16:	4605      	mov	r5, r0
 8014a18:	9204      	str	r2, [sp, #16]
 8014a1a:	4689      	mov	r9, r1
 8014a1c:	6840      	ldr	r0, [r0, #4]
 8014a1e:	6829      	ldr	r1, [r5, #0]
 8014a20:	fbb4 f2f3 	udiv	r2, r4, r3
 8014a24:	fbb0 fcf3 	udiv	ip, r0, r3
 8014a28:	fb03 4012 	mls	r0, r3, r2, r4
 8014a2c:	f1ac 0804 	sub.w	r8, ip, #4
 8014a30:	f8cd c014 	str.w	ip, [sp, #20]
 8014a34:	b280      	uxth	r0, r0
 8014a36:	fb0c 1000 	mla	r0, ip, r0, r1
 8014a3a:	6806      	ldr	r6, [r0, #0]
 8014a3c:	3004      	adds	r0, #4
 8014a3e:	9602      	str	r6, [sp, #8]
 8014a40:	444e      	add	r6, r9
 8014a42:	9003      	str	r0, [sp, #12]
 8014a44:	4546      	cmp	r6, r8
 8014a46:	f240 80e4 	bls.w	8014c12 <uxr_prepare_reliable_buffer_to_write+0x206>
 8014a4a:	7b2e      	ldrb	r6, [r5, #12]
 8014a4c:	eb06 0009 	add.w	r0, r6, r9
 8014a50:	4540      	cmp	r0, r8
 8014a52:	f240 80cb 	bls.w	8014bec <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8014a56:	9802      	ldr	r0, [sp, #8]
 8014a58:	3004      	adds	r0, #4
 8014a5a:	4540      	cmp	r0, r8
 8014a5c:	f080 811b 	bcs.w	8014c96 <uxr_prepare_reliable_buffer_to_write+0x28a>
 8014a60:	f8cd c01c 	str.w	ip, [sp, #28]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f000 8132 	beq.w	8014cce <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8014a6a:	f04f 0a00 	mov.w	sl, #0
 8014a6e:	4650      	mov	r0, sl
 8014a70:	4657      	mov	r7, sl
 8014a72:	f10a 0a01 	add.w	sl, sl, #1
 8014a76:	fbb7 fef3 	udiv	lr, r7, r3
 8014a7a:	fb03 7e1e 	mls	lr, r3, lr, r7
 8014a7e:	fa1f f78a 	uxth.w	r7, sl
 8014a82:	fa1f fe8e 	uxth.w	lr, lr
 8014a86:	fb0c 1e0e 	mla	lr, ip, lr, r1
 8014a8a:	f8de e000 	ldr.w	lr, [lr]
 8014a8e:	4576      	cmp	r6, lr
 8014a90:	d101      	bne.n	8014a96 <uxr_prepare_reliable_buffer_to_write+0x8a>
 8014a92:	3001      	adds	r0, #1
 8014a94:	b280      	uxth	r0, r0
 8014a96:	429f      	cmp	r7, r3
 8014a98:	d3eb      	bcc.n	8014a72 <uxr_prepare_reliable_buffer_to_write+0x66>
 8014a9a:	f1a8 0704 	sub.w	r7, r8, #4
 8014a9e:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8014aa2:	fa1f fb87 	uxth.w	fp, r7
 8014aa6:	eba9 090b 	sub.w	r9, r9, fp
 8014aaa:	ebab 0606 	sub.w	r6, fp, r6
 8014aae:	44f1      	add	r9, lr
 8014ab0:	b2b6      	uxth	r6, r6
 8014ab2:	fa1f f989 	uxth.w	r9, r9
 8014ab6:	fbb9 faf6 	udiv	sl, r9, r6
 8014aba:	fb06 991a 	mls	r9, r6, sl, r9
 8014abe:	fa1f f789 	uxth.w	r7, r9
 8014ac2:	9706      	str	r7, [sp, #24]
 8014ac4:	2f00      	cmp	r7, #0
 8014ac6:	f040 80c6 	bne.w	8014c56 <uxr_prepare_reliable_buffer_to_write+0x24a>
 8014aca:	fa1f fa8a 	uxth.w	sl, sl
 8014ace:	9606      	str	r6, [sp, #24]
 8014ad0:	4582      	cmp	sl, r0
 8014ad2:	f200 809a 	bhi.w	8014c0a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8014ad6:	f1ba 0f00 	cmp.w	sl, #0
 8014ada:	f000 80f5 	beq.w	8014cc8 <uxr_prepare_reliable_buffer_to_write+0x2bc>
 8014ade:	ebab 070e 	sub.w	r7, fp, lr
 8014ae2:	f04f 0900 	mov.w	r9, #0
 8014ae6:	f10d 0b20 	add.w	fp, sp, #32
 8014aea:	4696      	mov	lr, r2
 8014aec:	b2bf      	uxth	r7, r7
 8014aee:	e003      	b.n	8014af8 <uxr_prepare_reliable_buffer_to_write+0xec>
 8014af0:	fbb2 fcf3 	udiv	ip, r2, r3
 8014af4:	fbb0 fef3 	udiv	lr, r0, r3
 8014af8:	fb03 4e1e 	mls	lr, r3, lr, r4
 8014afc:	4642      	mov	r2, r8
 8014afe:	2300      	movs	r3, #0
 8014b00:	4658      	mov	r0, fp
 8014b02:	fa1f fe8e 	uxth.w	lr, lr
 8014b06:	f109 0901 	add.w	r9, r9, #1
 8014b0a:	fb0c 110e 	mla	r1, ip, lr, r1
 8014b0e:	f8d1 c000 	ldr.w	ip, [r1]
 8014b12:	3104      	adds	r1, #4
 8014b14:	f8cd c000 	str.w	ip, [sp]
 8014b18:	f7f6 f894 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8014b1c:	463a      	mov	r2, r7
 8014b1e:	2300      	movs	r3, #0
 8014b20:	210d      	movs	r1, #13
 8014b22:	4658      	mov	r0, fp
 8014b24:	4637      	mov	r7, r6
 8014b26:	f7fe fab7 	bl	8013098 <uxr_buffer_submessage_header>
 8014b2a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8014b2e:	686a      	ldr	r2, [r5, #4]
 8014b30:	4620      	mov	r0, r4
 8014b32:	682b      	ldr	r3, [r5, #0]
 8014b34:	fbb4 f1fc 	udiv	r1, r4, ip
 8014b38:	fbb2 f2fc 	udiv	r2, r2, ip
 8014b3c:	fb0c 4411 	mls	r4, ip, r1, r4
 8014b40:	2101      	movs	r1, #1
 8014b42:	b2a4      	uxth	r4, r4
 8014b44:	fb04 f402 	mul.w	r4, r4, r2
 8014b48:	f843 8004 	str.w	r8, [r3, r4]
 8014b4c:	f000 fa02 	bl	8014f54 <uxr_seq_num_add>
 8014b50:	4604      	mov	r4, r0
 8014b52:	fa1f f389 	uxth.w	r3, r9
 8014b56:	459a      	cmp	sl, r3
 8014b58:	892b      	ldrh	r3, [r5, #8]
 8014b5a:	e9d5 1200 	ldrd	r1, r2, [r5]
 8014b5e:	d8c7      	bhi.n	8014af0 <uxr_prepare_reliable_buffer_to_write+0xe4>
 8014b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b64:	9207      	str	r2, [sp, #28]
 8014b66:	fbb0 f2f3 	udiv	r2, r0, r3
 8014b6a:	fb03 4612 	mls	r6, r3, r2, r4
 8014b6e:	9f07      	ldr	r7, [sp, #28]
 8014b70:	4642      	mov	r2, r8
 8014b72:	4658      	mov	r0, fp
 8014b74:	b2b6      	uxth	r6, r6
 8014b76:	2300      	movs	r3, #0
 8014b78:	fb07 1106 	mla	r1, r7, r6, r1
 8014b7c:	680e      	ldr	r6, [r1, #0]
 8014b7e:	3104      	adds	r1, #4
 8014b80:	9600      	str	r6, [sp, #0]
 8014b82:	f7f6 f85f 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8014b86:	9f06      	ldr	r7, [sp, #24]
 8014b88:	4658      	mov	r0, fp
 8014b8a:	2302      	movs	r3, #2
 8014b8c:	463a      	mov	r2, r7
 8014b8e:	210d      	movs	r1, #13
 8014b90:	f7fe fa82 	bl	8013098 <uxr_buffer_submessage_header>
 8014b94:	f895 e00c 	ldrb.w	lr, [r5, #12]
 8014b98:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8014b9c:	f10e 0e04 	add.w	lr, lr, #4
 8014ba0:	686e      	ldr	r6, [r5, #4]
 8014ba2:	9b05      	ldr	r3, [sp, #20]
 8014ba4:	44be      	add	lr, r7
 8014ba6:	9802      	ldr	r0, [sp, #8]
 8014ba8:	f1a3 0208 	sub.w	r2, r3, #8
 8014bac:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014bb0:	1d01      	adds	r1, r0, #4
 8014bb2:	682b      	ldr	r3, [r5, #0]
 8014bb4:	1a12      	subs	r2, r2, r0
 8014bb6:	9803      	ldr	r0, [sp, #12]
 8014bb8:	fbb4 f7fc 	udiv	r7, r4, ip
 8014bbc:	fbb6 f8fc 	udiv	r8, r6, ip
 8014bc0:	fb0c 4617 	mls	r6, ip, r7, r4
 8014bc4:	4408      	add	r0, r1
 8014bc6:	b2b6      	uxth	r6, r6
 8014bc8:	4601      	mov	r1, r0
 8014bca:	4648      	mov	r0, r9
 8014bcc:	fb06 f608 	mul.w	r6, r6, r8
 8014bd0:	f843 e006 	str.w	lr, [r3, r6]
 8014bd4:	f7f6 f848 	bl	800ac68 <ucdr_init_buffer>
 8014bd8:	4648      	mov	r0, r9
 8014bda:	462a      	mov	r2, r5
 8014bdc:	493d      	ldr	r1, [pc, #244]	; (8014cd4 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 8014bde:	f7f6 f819 	bl	800ac14 <ucdr_set_on_full_buffer_callback>
 8014be2:	2001      	movs	r0, #1
 8014be4:	81ec      	strh	r4, [r5, #14]
 8014be6:	b011      	add	sp, #68	; 0x44
 8014be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	4620      	mov	r0, r4
 8014bee:	2101      	movs	r1, #1
 8014bf0:	f000 f9b0 	bl	8014f54 <uxr_seq_num_add>
 8014bf4:	4604      	mov	r4, r0
 8014bf6:	8929      	ldrh	r1, [r5, #8]
 8014bf8:	8a68      	ldrh	r0, [r5, #18]
 8014bfa:	f000 f9ab 	bl	8014f54 <uxr_seq_num_add>
 8014bfe:	4601      	mov	r1, r0
 8014c00:	4620      	mov	r0, r4
 8014c02:	f000 f9af 	bl	8014f64 <uxr_seq_num_cmp>
 8014c06:	2800      	cmp	r0, #0
 8014c08:	dd2a      	ble.n	8014c60 <uxr_prepare_reliable_buffer_to_write+0x254>
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	b011      	add	sp, #68	; 0x44
 8014c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c12:	4619      	mov	r1, r3
 8014c14:	8a68      	ldrh	r0, [r5, #18]
 8014c16:	f000 f99d 	bl	8014f54 <uxr_seq_num_add>
 8014c1a:	4601      	mov	r1, r0
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	f000 f9a1 	bl	8014f64 <uxr_seq_num_cmp>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	dcf1      	bgt.n	8014c0a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8014c26:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8014c2a:	fbb4 f3fc 	udiv	r3, r4, ip
 8014c2e:	e9d5 7200 	ldrd	r7, r2, [r5]
 8014c32:	fb0c 4413 	mls	r4, ip, r3, r4
 8014c36:	2300      	movs	r3, #0
 8014c38:	fbb2 f5fc 	udiv	r5, r2, ip
 8014c3c:	b2a4      	uxth	r4, r4
 8014c3e:	4632      	mov	r2, r6
 8014c40:	fb04 f405 	mul.w	r4, r4, r5
 8014c44:	513e      	str	r6, [r7, r4]
 8014c46:	9c02      	ldr	r4, [sp, #8]
 8014c48:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014c4c:	9400      	str	r4, [sp, #0]
 8014c4e:	f7f5 fff9 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8014c52:	2001      	movs	r0, #1
 8014c54:	e7da      	b.n	8014c0c <uxr_prepare_reliable_buffer_to_write+0x200>
 8014c56:	f10a 0a01 	add.w	sl, sl, #1
 8014c5a:	fa1f fa8a 	uxth.w	sl, sl
 8014c5e:	e737      	b.n	8014ad0 <uxr_prepare_reliable_buffer_to_write+0xc4>
 8014c60:	892e      	ldrh	r6, [r5, #8]
 8014c62:	2300      	movs	r3, #0
 8014c64:	686a      	ldr	r2, [r5, #4]
 8014c66:	9804      	ldr	r0, [sp, #16]
 8014c68:	fbb4 f1f6 	udiv	r1, r4, r6
 8014c6c:	fbb2 f7f6 	udiv	r7, r2, r6
 8014c70:	fb06 4111 	mls	r1, r6, r1, r4
 8014c74:	7b2a      	ldrb	r2, [r5, #12]
 8014c76:	682e      	ldr	r6, [r5, #0]
 8014c78:	b289      	uxth	r1, r1
 8014c7a:	444a      	add	r2, r9
 8014c7c:	fb01 f107 	mul.w	r1, r1, r7
 8014c80:	3104      	adds	r1, #4
 8014c82:	4431      	add	r1, r6
 8014c84:	f841 2c04 	str.w	r2, [r1, #-4]
 8014c88:	7b2e      	ldrb	r6, [r5, #12]
 8014c8a:	9600      	str	r6, [sp, #0]
 8014c8c:	f7f5 ffda 	bl	800ac44 <ucdr_init_buffer_origin_offset>
 8014c90:	2001      	movs	r0, #1
 8014c92:	81ec      	strh	r4, [r5, #14]
 8014c94:	e7ba      	b.n	8014c0c <uxr_prepare_reliable_buffer_to_write+0x200>
 8014c96:	4620      	mov	r0, r4
 8014c98:	2101      	movs	r1, #1
 8014c9a:	f000 f95b 	bl	8014f54 <uxr_seq_num_add>
 8014c9e:	892b      	ldrh	r3, [r5, #8]
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	7b2e      	ldrb	r6, [r5, #12]
 8014ca4:	fbb4 f2f3 	udiv	r2, r4, r3
 8014ca8:	e9d5 1000 	ldrd	r1, r0, [r5]
 8014cac:	fbb0 fcf3 	udiv	ip, r0, r3
 8014cb0:	fb03 4012 	mls	r0, r3, r2, r4
 8014cb4:	f8cd c01c 	str.w	ip, [sp, #28]
 8014cb8:	b280      	uxth	r0, r0
 8014cba:	fb0c 1000 	mla	r0, ip, r0, r1
 8014cbe:	1d07      	adds	r7, r0, #4
 8014cc0:	6800      	ldr	r0, [r0, #0]
 8014cc2:	9703      	str	r7, [sp, #12]
 8014cc4:	9002      	str	r0, [sp, #8]
 8014cc6:	e6cd      	b.n	8014a64 <uxr_prepare_reliable_buffer_to_write+0x58>
 8014cc8:	f10d 0b20 	add.w	fp, sp, #32
 8014ccc:	e74d      	b.n	8014b6a <uxr_prepare_reliable_buffer_to_write+0x15e>
 8014cce:	4618      	mov	r0, r3
 8014cd0:	e6e3      	b.n	8014a9a <uxr_prepare_reliable_buffer_to_write+0x8e>
 8014cd2:	bf00      	nop
 8014cd4:	08014901 	.word	0x08014901

08014cd8 <uxr_prepare_next_reliable_buffer_to_send>:
 8014cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cdc:	4606      	mov	r6, r0
 8014cde:	461f      	mov	r7, r3
 8014ce0:	4689      	mov	r9, r1
 8014ce2:	8a00      	ldrh	r0, [r0, #16]
 8014ce4:	2101      	movs	r1, #1
 8014ce6:	4690      	mov	r8, r2
 8014ce8:	f000 f934 	bl	8014f54 <uxr_seq_num_add>
 8014cec:	6872      	ldr	r2, [r6, #4]
 8014cee:	6833      	ldr	r3, [r6, #0]
 8014cf0:	8038      	strh	r0, [r7, #0]
 8014cf2:	8931      	ldrh	r1, [r6, #8]
 8014cf4:	fbb0 f5f1 	udiv	r5, r0, r1
 8014cf8:	fbb2 f2f1 	udiv	r2, r2, r1
 8014cfc:	fb01 0415 	mls	r4, r1, r5, r0
 8014d00:	89f1      	ldrh	r1, [r6, #14]
 8014d02:	b2a4      	uxth	r4, r4
 8014d04:	fb04 f402 	mul.w	r4, r4, r2
 8014d08:	3404      	adds	r4, #4
 8014d0a:	4423      	add	r3, r4
 8014d0c:	f8c9 3000 	str.w	r3, [r9]
 8014d10:	6833      	ldr	r3, [r6, #0]
 8014d12:	441c      	add	r4, r3
 8014d14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014d18:	f8c8 3000 	str.w	r3, [r8]
 8014d1c:	f000 f922 	bl	8014f64 <uxr_seq_num_cmp>
 8014d20:	2800      	cmp	r0, #0
 8014d22:	dd02      	ble.n	8014d2a <uxr_prepare_next_reliable_buffer_to_send+0x52>
 8014d24:	2000      	movs	r0, #0
 8014d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d2a:	f8d8 2000 	ldr.w	r2, [r8]
 8014d2e:	7b33      	ldrb	r3, [r6, #12]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d9f7      	bls.n	8014d24 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8014d34:	8a71      	ldrh	r1, [r6, #18]
 8014d36:	8a30      	ldrh	r0, [r6, #16]
 8014d38:	f000 f910 	bl	8014f5c <uxr_seq_num_sub>
 8014d3c:	8933      	ldrh	r3, [r6, #8]
 8014d3e:	4283      	cmp	r3, r0
 8014d40:	d0f0      	beq.n	8014d24 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8014d42:	8838      	ldrh	r0, [r7, #0]
 8014d44:	89f3      	ldrh	r3, [r6, #14]
 8014d46:	8230      	strh	r0, [r6, #16]
 8014d48:	4298      	cmp	r0, r3
 8014d4a:	d002      	beq.n	8014d52 <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 8014d4c:	2001      	movs	r0, #1
 8014d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d52:	2101      	movs	r1, #1
 8014d54:	f000 f8fe 	bl	8014f54 <uxr_seq_num_add>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2001      	movs	r0, #1
 8014d5c:	81f3      	strh	r3, [r6, #14]
 8014d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d62:	bf00      	nop

08014d64 <uxr_update_output_stream_heartbeat_timestamp>:
 8014d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d68:	8a01      	ldrh	r1, [r0, #16]
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	8a40      	ldrh	r0, [r0, #18]
 8014d6e:	4616      	mov	r6, r2
 8014d70:	461f      	mov	r7, r3
 8014d72:	f000 f8f7 	bl	8014f64 <uxr_seq_num_cmp>
 8014d76:	2800      	cmp	r0, #0
 8014d78:	db08      	blt.n	8014d8c <uxr_update_output_stream_heartbeat_timestamp+0x28>
 8014d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014d82:	2000      	movs	r0, #0
 8014d84:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d8c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014d90:	b950      	cbnz	r0, 8014da8 <uxr_update_output_stream_heartbeat_timestamp+0x44>
 8014d92:	1c71      	adds	r1, r6, #1
 8014d94:	f04f 0201 	mov.w	r2, #1
 8014d98:	f147 0300 	adc.w	r3, r7, #0
 8014d9c:	61a1      	str	r1, [r4, #24]
 8014d9e:	f884 2020 	strb.w	r2, [r4, #32]
 8014da2:	61e3      	str	r3, [r4, #28]
 8014da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da8:	e9d4 ab06 	ldrd	sl, fp, [r4, #24]
 8014dac:	4556      	cmp	r6, sl
 8014dae:	eb77 030b 	sbcs.w	r3, r7, fp
 8014db2:	db2f      	blt.n	8014e14 <uxr_update_output_stream_heartbeat_timestamp+0xb0>
 8014db4:	4919      	ldr	r1, [pc, #100]	; (8014e1c <uxr_update_output_stream_heartbeat_timestamp+0xb8>)
 8014db6:	ebb6 080a 	subs.w	r8, r6, sl
 8014dba:	f04f 0501 	mov.w	r5, #1
 8014dbe:	fba1 3100 	umull	r3, r1, r1, r0
 8014dc2:	eb67 090b 	sbc.w	r9, r7, fp
 8014dc6:	1a46      	subs	r6, r0, r1
 8014dc8:	eb01 0156 	add.w	r1, r1, r6, lsr #1
 8014dcc:	0949      	lsrs	r1, r1, #5
 8014dce:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8014dd2:	1a41      	subs	r1, r0, r1
 8014dd4:	b2c9      	uxtb	r1, r1
 8014dd6:	fa05 f601 	lsl.w	r6, r5, r1
 8014dda:	f1a1 0c20 	sub.w	ip, r1, #32
 8014dde:	f1c1 0120 	rsb	r1, r1, #32
 8014de2:	fa05 fc0c 	lsl.w	ip, r5, ip
 8014de6:	4546      	cmp	r6, r8
 8014de8:	fa25 f101 	lsr.w	r1, r5, r1
 8014dec:	ea4c 0701 	orr.w	r7, ip, r1
 8014df0:	eb77 0309 	sbcs.w	r3, r7, r9
 8014df4:	da01      	bge.n	8014dfa <uxr_update_output_stream_heartbeat_timestamp+0x96>
 8014df6:	4646      	mov	r6, r8
 8014df8:	464f      	mov	r7, r9
 8014dfa:	eb16 020a 	adds.w	r2, r6, sl
 8014dfe:	f100 0001 	add.w	r0, r0, #1
 8014e02:	eb47 030b 	adc.w	r3, r7, fp
 8014e06:	f884 0020 	strb.w	r0, [r4, #32]
 8014e0a:	61a2      	str	r2, [r4, #24]
 8014e0c:	2001      	movs	r0, #1
 8014e0e:	61e3      	str	r3, [r4, #28]
 8014e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e14:	2000      	movs	r0, #0
 8014e16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e1a:	bf00      	nop
 8014e1c:	04104105 	.word	0x04104105

08014e20 <uxr_begin_output_nack_buffer_it>:
 8014e20:	8a40      	ldrh	r0, [r0, #18]
 8014e22:	4770      	bx	lr

08014e24 <uxr_next_reliable_nack_buffer_to_send>:
 8014e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e28:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8014e2c:	f1b9 0f00 	cmp.w	r9, #0
 8014e30:	d012      	beq.n	8014e58 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014e32:	4682      	mov	sl, r0
 8014e34:	460f      	mov	r7, r1
 8014e36:	4690      	mov	r8, r2
 8014e38:	461e      	mov	r6, r3
 8014e3a:	8818      	ldrh	r0, [r3, #0]
 8014e3c:	2101      	movs	r1, #1
 8014e3e:	f000 f889 	bl	8014f54 <uxr_seq_num_add>
 8014e42:	8030      	strh	r0, [r6, #0]
 8014e44:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8014e48:	f000 f88c 	bl	8014f64 <uxr_seq_num_cmp>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	dd06      	ble.n	8014e5e <uxr_next_reliable_nack_buffer_to_send+0x3a>
 8014e50:	2300      	movs	r3, #0
 8014e52:	4699      	mov	r9, r3
 8014e54:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
 8014e58:	4648      	mov	r0, r9
 8014e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e5e:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 8014e62:	8830      	ldrh	r0, [r6, #0]
 8014e64:	fbb0 f4f2 	udiv	r4, r0, r2
 8014e68:	e9da 5300 	ldrd	r5, r3, [sl]
 8014e6c:	fb02 0414 	mls	r4, r2, r4, r0
 8014e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e74:	b2a4      	uxth	r4, r4
 8014e76:	fb04 f403 	mul.w	r4, r4, r3
 8014e7a:	3404      	adds	r4, #4
 8014e7c:	4425      	add	r5, r4
 8014e7e:	603d      	str	r5, [r7, #0]
 8014e80:	f8da 3000 	ldr.w	r3, [sl]
 8014e84:	441c      	add	r4, r3
 8014e86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014e8a:	f8c8 3000 	str.w	r3, [r8]
 8014e8e:	f89a 200c 	ldrb.w	r2, [sl, #12]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d0d2      	beq.n	8014e3c <uxr_next_reliable_nack_buffer_to_send+0x18>
 8014e96:	e7df      	b.n	8014e58 <uxr_next_reliable_nack_buffer_to_send+0x34>

08014e98 <uxr_process_acknack>:
 8014e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e9c:	4604      	mov	r4, r0
 8014e9e:	460f      	mov	r7, r1
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	2101      	movs	r1, #1
 8014ea4:	f000 f85a 	bl	8014f5c <uxr_seq_num_sub>
 8014ea8:	8a61      	ldrh	r1, [r4, #18]
 8014eaa:	f000 f857 	bl	8014f5c <uxr_seq_num_sub>
 8014eae:	b1d8      	cbz	r0, 8014ee8 <uxr_process_acknack+0x50>
 8014eb0:	4606      	mov	r6, r0
 8014eb2:	f04f 0800 	mov.w	r8, #0
 8014eb6:	2101      	movs	r1, #1
 8014eb8:	8a60      	ldrh	r0, [r4, #18]
 8014eba:	f000 f84b 	bl	8014f54 <uxr_seq_num_add>
 8014ebe:	8923      	ldrh	r3, [r4, #8]
 8014ec0:	6861      	ldr	r1, [r4, #4]
 8014ec2:	f108 0801 	add.w	r8, r8, #1
 8014ec6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014eca:	6825      	ldr	r5, [r4, #0]
 8014ecc:	4546      	cmp	r6, r8
 8014ece:	8260      	strh	r0, [r4, #18]
 8014ed0:	fbb0 f2f3 	udiv	r2, r0, r3
 8014ed4:	fbb1 f1f3 	udiv	r1, r1, r3
 8014ed8:	fb03 0312 	mls	r3, r3, r2, r0
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	fb03 f301 	mul.w	r3, r3, r1
 8014ee2:	f845 c003 	str.w	ip, [r5, r3]
 8014ee6:	d1e6      	bne.n	8014eb6 <uxr_process_acknack+0x1e>
 8014ee8:	3f00      	subs	r7, #0
 8014eea:	f04f 0300 	mov.w	r3, #0
 8014eee:	bf18      	it	ne
 8014ef0:	2701      	movne	r7, #1
 8014ef2:	f884 3020 	strb.w	r3, [r4, #32]
 8014ef6:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
 8014efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014efe:	bf00      	nop

08014f00 <uxr_is_output_up_to_date>:
 8014f00:	8a01      	ldrh	r1, [r0, #16]
 8014f02:	8a40      	ldrh	r0, [r0, #18]
 8014f04:	b508      	push	{r3, lr}
 8014f06:	f000 f82d 	bl	8014f64 <uxr_seq_num_cmp>
 8014f0a:	fab0 f080 	clz	r0, r0
 8014f0e:	0940      	lsrs	r0, r0, #5
 8014f10:	bd08      	pop	{r3, pc}
 8014f12:	bf00      	nop

08014f14 <get_available_free_slots>:
 8014f14:	8901      	ldrh	r1, [r0, #8]
 8014f16:	b1d9      	cbz	r1, 8014f50 <get_available_free_slots+0x3c>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	b4f0      	push	{r4, r5, r6, r7}
 8014f1c:	6845      	ldr	r5, [r0, #4]
 8014f1e:	2400      	movs	r4, #0
 8014f20:	6807      	ldr	r7, [r0, #0]
 8014f22:	4622      	mov	r2, r4
 8014f24:	4620      	mov	r0, r4
 8014f26:	7b1e      	ldrb	r6, [r3, #12]
 8014f28:	fbb5 f5f1 	udiv	r5, r5, r1
 8014f2c:	fbb2 f3f1 	udiv	r3, r2, r1
 8014f30:	fb01 2313 	mls	r3, r1, r3, r2
 8014f34:	3401      	adds	r4, #1
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	b2a2      	uxth	r2, r4
 8014f3a:	fb05 7303 	mla	r3, r5, r3, r7
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	429e      	cmp	r6, r3
 8014f42:	d101      	bne.n	8014f48 <get_available_free_slots+0x34>
 8014f44:	3001      	adds	r0, #1
 8014f46:	b280      	uxth	r0, r0
 8014f48:	428a      	cmp	r2, r1
 8014f4a:	d3ef      	bcc.n	8014f2c <get_available_free_slots+0x18>
 8014f4c:	bcf0      	pop	{r4, r5, r6, r7}
 8014f4e:	4770      	bx	lr
 8014f50:	4608      	mov	r0, r1
 8014f52:	4770      	bx	lr

08014f54 <uxr_seq_num_add>:
 8014f54:	4408      	add	r0, r1
 8014f56:	b280      	uxth	r0, r0
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop

08014f5c <uxr_seq_num_sub>:
 8014f5c:	1a40      	subs	r0, r0, r1
 8014f5e:	b280      	uxth	r0, r0
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop

08014f64 <uxr_seq_num_cmp>:
 8014f64:	4288      	cmp	r0, r1
 8014f66:	d011      	beq.n	8014f8c <uxr_seq_num_cmp+0x28>
 8014f68:	d309      	bcc.n	8014f7e <uxr_seq_num_cmp+0x1a>
 8014f6a:	4288      	cmp	r0, r1
 8014f6c:	d910      	bls.n	8014f90 <uxr_seq_num_cmp+0x2c>
 8014f6e:	1a40      	subs	r0, r0, r1
 8014f70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014f74:	bfd4      	ite	le
 8014f76:	2001      	movle	r0, #1
 8014f78:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8014f7c:	4770      	bx	lr
 8014f7e:	1a0b      	subs	r3, r1, r0
 8014f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f84:	daf1      	bge.n	8014f6a <uxr_seq_num_cmp+0x6>
 8014f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f8a:	4770      	bx	lr
 8014f8c:	2000      	movs	r0, #0
 8014f8e:	4770      	bx	lr
 8014f90:	2001      	movs	r0, #1
 8014f92:	4770      	bx	lr

08014f94 <calloc>:
 8014f94:	4b02      	ldr	r3, [pc, #8]	; (8014fa0 <calloc+0xc>)
 8014f96:	460a      	mov	r2, r1
 8014f98:	4601      	mov	r1, r0
 8014f9a:	6818      	ldr	r0, [r3, #0]
 8014f9c:	f000 b802 	b.w	8014fa4 <_calloc_r>
 8014fa0:	20000208 	.word	0x20000208

08014fa4 <_calloc_r>:
 8014fa4:	b510      	push	{r4, lr}
 8014fa6:	fb02 f101 	mul.w	r1, r2, r1
 8014faa:	f000 f91f 	bl	80151ec <_malloc_r>
 8014fae:	4604      	mov	r4, r0
 8014fb0:	b168      	cbz	r0, 8014fce <_calloc_r+0x2a>
 8014fb2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014fb6:	f022 0203 	bic.w	r2, r2, #3
 8014fba:	3a04      	subs	r2, #4
 8014fbc:	2a24      	cmp	r2, #36	; 0x24
 8014fbe:	d818      	bhi.n	8014ff2 <_calloc_r+0x4e>
 8014fc0:	2a13      	cmp	r2, #19
 8014fc2:	d806      	bhi.n	8014fd2 <_calloc_r+0x2e>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	e9c2 3300 	strd	r3, r3, [r2]
 8014fcc:	6093      	str	r3, [r2, #8]
 8014fce:	4620      	mov	r0, r4
 8014fd0:	bd10      	pop	{r4, pc}
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	2a1b      	cmp	r2, #27
 8014fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8014fda:	d90f      	bls.n	8014ffc <_calloc_r+0x58>
 8014fdc:	2a24      	cmp	r2, #36	; 0x24
 8014fde:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8014fe2:	bf0a      	itet	eq
 8014fe4:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 8014fe8:	f100 0210 	addne.w	r2, r0, #16
 8014fec:	f100 0218 	addeq.w	r2, r0, #24
 8014ff0:	e7e9      	b.n	8014fc6 <_calloc_r+0x22>
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	f000 fc50 	bl	8015898 <memset>
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	bd10      	pop	{r4, pc}
 8014ffc:	f100 0208 	add.w	r2, r0, #8
 8015000:	e7e1      	b.n	8014fc6 <_calloc_r+0x22>
 8015002:	bf00      	nop

08015004 <__errno>:
 8015004:	4b01      	ldr	r3, [pc, #4]	; (801500c <__errno+0x8>)
 8015006:	6818      	ldr	r0, [r3, #0]
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	20000208 	.word	0x20000208

08015010 <_fwrite_r>:
 8015010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015014:	b086      	sub	sp, #24
 8015016:	fb02 f703 	mul.w	r7, r2, r3
 801501a:	4690      	mov	r8, r2
 801501c:	461d      	mov	r5, r3
 801501e:	aa01      	add	r2, sp, #4
 8015020:	2301      	movs	r3, #1
 8015022:	e9cd 1701 	strd	r1, r7, [sp, #4]
 8015026:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801502a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801502c:	9705      	str	r7, [sp, #20]
 801502e:	4606      	mov	r6, r0
 8015030:	b108      	cbz	r0, 8015036 <_fwrite_r+0x26>
 8015032:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015034:	b343      	cbz	r3, 8015088 <_fwrite_r+0x78>
 8015036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015038:	f013 0f01 	tst.w	r3, #1
 801503c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015040:	b29a      	uxth	r2, r3
 8015042:	d101      	bne.n	8015048 <_fwrite_r+0x38>
 8015044:	0599      	lsls	r1, r3, #22
 8015046:	d530      	bpl.n	80150aa <_fwrite_r+0x9a>
 8015048:	0492      	lsls	r2, r2, #18
 801504a:	d406      	bmi.n	801505a <_fwrite_r+0x4a>
 801504c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801504e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015056:	81a3      	strh	r3, [r4, #12]
 8015058:	6662      	str	r2, [r4, #100]	; 0x64
 801505a:	4630      	mov	r0, r6
 801505c:	aa03      	add	r2, sp, #12
 801505e:	4621      	mov	r1, r4
 8015060:	f006 fa7e 	bl	801b560 <__sfvwrite_r>
 8015064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015066:	b190      	cbz	r0, 801508e <_fwrite_r+0x7e>
 8015068:	07da      	lsls	r2, r3, #31
 801506a:	d506      	bpl.n	801507a <_fwrite_r+0x6a>
 801506c:	9d05      	ldr	r5, [sp, #20]
 801506e:	1b7f      	subs	r7, r7, r5
 8015070:	fbb7 f0f8 	udiv	r0, r7, r8
 8015074:	b006      	add	sp, #24
 8015076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801507a:	89a3      	ldrh	r3, [r4, #12]
 801507c:	059b      	lsls	r3, r3, #22
 801507e:	d4f5      	bmi.n	801506c <_fwrite_r+0x5c>
 8015080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015082:	f000 f8a1 	bl	80151c8 <__retarget_lock_release_recursive>
 8015086:	e7f1      	b.n	801506c <_fwrite_r+0x5c>
 8015088:	f006 f8ca 	bl	801b220 <__sinit>
 801508c:	e7d3      	b.n	8015036 <_fwrite_r+0x26>
 801508e:	07d8      	lsls	r0, r3, #31
 8015090:	d407      	bmi.n	80150a2 <_fwrite_r+0x92>
 8015092:	89a3      	ldrh	r3, [r4, #12]
 8015094:	0599      	lsls	r1, r3, #22
 8015096:	d404      	bmi.n	80150a2 <_fwrite_r+0x92>
 8015098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801509a:	f000 f895 	bl	80151c8 <__retarget_lock_release_recursive>
 801509e:	4628      	mov	r0, r5
 80150a0:	e7e8      	b.n	8015074 <_fwrite_r+0x64>
 80150a2:	4628      	mov	r0, r5
 80150a4:	b006      	add	sp, #24
 80150a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ac:	f000 f88a 	bl	80151c4 <__retarget_lock_acquire_recursive>
 80150b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	e7c7      	b.n	8015048 <_fwrite_r+0x38>

080150b8 <fwrite>:
 80150b8:	b570      	push	{r4, r5, r6, lr}
 80150ba:	4c06      	ldr	r4, [pc, #24]	; (80150d4 <fwrite+0x1c>)
 80150bc:	b082      	sub	sp, #8
 80150be:	460e      	mov	r6, r1
 80150c0:	4615      	mov	r5, r2
 80150c2:	4601      	mov	r1, r0
 80150c4:	9300      	str	r3, [sp, #0]
 80150c6:	6820      	ldr	r0, [r4, #0]
 80150c8:	4632      	mov	r2, r6
 80150ca:	462b      	mov	r3, r5
 80150cc:	f7ff ffa0 	bl	8015010 <_fwrite_r>
 80150d0:	b002      	add	sp, #8
 80150d2:	bd70      	pop	{r4, r5, r6, pc}
 80150d4:	20000208 	.word	0x20000208

080150d8 <getenv>:
 80150d8:	b500      	push	{lr}
 80150da:	4b05      	ldr	r3, [pc, #20]	; (80150f0 <getenv+0x18>)
 80150dc:	b083      	sub	sp, #12
 80150de:	4601      	mov	r1, r0
 80150e0:	aa01      	add	r2, sp, #4
 80150e2:	6818      	ldr	r0, [r3, #0]
 80150e4:	f000 f806 	bl	80150f4 <_findenv_r>
 80150e8:	b003      	add	sp, #12
 80150ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80150ee:	bf00      	nop
 80150f0:	20000208 	.word	0x20000208

080150f4 <_findenv_r>:
 80150f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150f8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015170 <_findenv_r+0x7c>
 80150fc:	4689      	mov	r9, r1
 80150fe:	4617      	mov	r7, r2
 8015100:	4606      	mov	r6, r0
 8015102:	f005 ff8d 	bl	801b020 <__env_lock>
 8015106:	f8d8 5000 	ldr.w	r5, [r8]
 801510a:	b155      	cbz	r5, 8015122 <_findenv_r+0x2e>
 801510c:	f899 3000 	ldrb.w	r3, [r9]
 8015110:	461c      	mov	r4, r3
 8015112:	b173      	cbz	r3, 8015132 <_findenv_r+0x3e>
 8015114:	464c      	mov	r4, r9
 8015116:	e002      	b.n	801511e <_findenv_r+0x2a>
 8015118:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801511c:	b13b      	cbz	r3, 801512e <_findenv_r+0x3a>
 801511e:	2b3d      	cmp	r3, #61	; 0x3d
 8015120:	d1fa      	bne.n	8015118 <_findenv_r+0x24>
 8015122:	4630      	mov	r0, r6
 8015124:	f005 ff82 	bl	801b02c <__env_unlock>
 8015128:	2000      	movs	r0, #0
 801512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801512e:	eba4 0409 	sub.w	r4, r4, r9
 8015132:	6828      	ldr	r0, [r5, #0]
 8015134:	2800      	cmp	r0, #0
 8015136:	d0f4      	beq.n	8015122 <_findenv_r+0x2e>
 8015138:	4622      	mov	r2, r4
 801513a:	4649      	mov	r1, r9
 801513c:	f000 ffa6 	bl	801608c <strncmp>
 8015140:	b928      	cbnz	r0, 801514e <_findenv_r+0x5a>
 8015142:	682b      	ldr	r3, [r5, #0]
 8015144:	5d1a      	ldrb	r2, [r3, r4]
 8015146:	2a3d      	cmp	r2, #61	; 0x3d
 8015148:	eb03 0a04 	add.w	sl, r3, r4
 801514c:	d004      	beq.n	8015158 <_findenv_r+0x64>
 801514e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015152:	2800      	cmp	r0, #0
 8015154:	d1f0      	bne.n	8015138 <_findenv_r+0x44>
 8015156:	e7e4      	b.n	8015122 <_findenv_r+0x2e>
 8015158:	f8d8 3000 	ldr.w	r3, [r8]
 801515c:	1aed      	subs	r5, r5, r3
 801515e:	10ad      	asrs	r5, r5, #2
 8015160:	4630      	mov	r0, r6
 8015162:	603d      	str	r5, [r7, #0]
 8015164:	f005 ff62 	bl	801b02c <__env_unlock>
 8015168:	f10a 0001 	add.w	r0, sl, #1
 801516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015170:	20000000 	.word	0x20000000

08015174 <__libc_init_array>:
 8015174:	b570      	push	{r4, r5, r6, lr}
 8015176:	4e0d      	ldr	r6, [pc, #52]	; (80151ac <__libc_init_array+0x38>)
 8015178:	4d0d      	ldr	r5, [pc, #52]	; (80151b0 <__libc_init_array+0x3c>)
 801517a:	1b76      	subs	r6, r6, r5
 801517c:	10b6      	asrs	r6, r6, #2
 801517e:	d006      	beq.n	801518e <__libc_init_array+0x1a>
 8015180:	2400      	movs	r4, #0
 8015182:	f855 3b04 	ldr.w	r3, [r5], #4
 8015186:	3401      	adds	r4, #1
 8015188:	4798      	blx	r3
 801518a:	42a6      	cmp	r6, r4
 801518c:	d1f9      	bne.n	8015182 <__libc_init_array+0xe>
 801518e:	4e09      	ldr	r6, [pc, #36]	; (80151b4 <__libc_init_array+0x40>)
 8015190:	4d09      	ldr	r5, [pc, #36]	; (80151b8 <__libc_init_array+0x44>)
 8015192:	1b76      	subs	r6, r6, r5
 8015194:	f009 fc72 	bl	801ea7c <_init>
 8015198:	10b6      	asrs	r6, r6, #2
 801519a:	d006      	beq.n	80151aa <__libc_init_array+0x36>
 801519c:	2400      	movs	r4, #0
 801519e:	f855 3b04 	ldr.w	r3, [r5], #4
 80151a2:	3401      	adds	r4, #1
 80151a4:	4798      	blx	r3
 80151a6:	42a6      	cmp	r6, r4
 80151a8:	d1f9      	bne.n	801519e <__libc_init_array+0x2a>
 80151aa:	bd70      	pop	{r4, r5, r6, pc}
 80151ac:	08020a10 	.word	0x08020a10
 80151b0:	08020a10 	.word	0x08020a10
 80151b4:	08020a18 	.word	0x08020a18
 80151b8:	08020a10 	.word	0x08020a10

080151bc <__retarget_lock_init_recursive>:
 80151bc:	4770      	bx	lr
 80151be:	bf00      	nop

080151c0 <__retarget_lock_close_recursive>:
 80151c0:	4770      	bx	lr
 80151c2:	bf00      	nop

080151c4 <__retarget_lock_acquire_recursive>:
 80151c4:	4770      	bx	lr
 80151c6:	bf00      	nop

080151c8 <__retarget_lock_release_recursive>:
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop

080151cc <malloc>:
 80151cc:	4b02      	ldr	r3, [pc, #8]	; (80151d8 <malloc+0xc>)
 80151ce:	4601      	mov	r1, r0
 80151d0:	6818      	ldr	r0, [r3, #0]
 80151d2:	f000 b80b 	b.w	80151ec <_malloc_r>
 80151d6:	bf00      	nop
 80151d8:	20000208 	.word	0x20000208

080151dc <free>:
 80151dc:	4b02      	ldr	r3, [pc, #8]	; (80151e8 <free+0xc>)
 80151de:	4601      	mov	r1, r0
 80151e0:	6818      	ldr	r0, [r3, #0]
 80151e2:	f006 b8b9 	b.w	801b358 <_free_r>
 80151e6:	bf00      	nop
 80151e8:	20000208 	.word	0x20000208

080151ec <_malloc_r>:
 80151ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f0:	f101 050b 	add.w	r5, r1, #11
 80151f4:	2d16      	cmp	r5, #22
 80151f6:	b083      	sub	sp, #12
 80151f8:	4606      	mov	r6, r0
 80151fa:	d824      	bhi.n	8015246 <_malloc_r+0x5a>
 80151fc:	2910      	cmp	r1, #16
 80151fe:	f200 80b7 	bhi.w	8015370 <_malloc_r+0x184>
 8015202:	f000 fb99 	bl	8015938 <__malloc_lock>
 8015206:	2510      	movs	r5, #16
 8015208:	2102      	movs	r1, #2
 801520a:	2318      	movs	r3, #24
 801520c:	f8df 84f0 	ldr.w	r8, [pc, #1264]	; 8015700 <_malloc_r+0x514>
 8015210:	4443      	add	r3, r8
 8015212:	f1a3 0208 	sub.w	r2, r3, #8
 8015216:	685c      	ldr	r4, [r3, #4]
 8015218:	4294      	cmp	r4, r2
 801521a:	f000 80b5 	beq.w	8015388 <_malloc_r+0x19c>
 801521e:	6863      	ldr	r3, [r4, #4]
 8015220:	f023 0303 	bic.w	r3, r3, #3
 8015224:	4423      	add	r3, r4
 8015226:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 801522a:	685a      	ldr	r2, [r3, #4]
 801522c:	60e9      	str	r1, [r5, #12]
 801522e:	f042 0201 	orr.w	r2, r2, #1
 8015232:	4630      	mov	r0, r6
 8015234:	608d      	str	r5, [r1, #8]
 8015236:	605a      	str	r2, [r3, #4]
 8015238:	f000 fb84 	bl	8015944 <__malloc_unlock>
 801523c:	3408      	adds	r4, #8
 801523e:	4620      	mov	r0, r4
 8015240:	b003      	add	sp, #12
 8015242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015246:	f035 0507 	bics.w	r5, r5, #7
 801524a:	f100 8091 	bmi.w	8015370 <_malloc_r+0x184>
 801524e:	42a9      	cmp	r1, r5
 8015250:	f200 808e 	bhi.w	8015370 <_malloc_r+0x184>
 8015254:	f000 fb70 	bl	8015938 <__malloc_lock>
 8015258:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 801525c:	f0c0 8190 	bcc.w	8015580 <_malloc_r+0x394>
 8015260:	0a6b      	lsrs	r3, r5, #9
 8015262:	f000 808c 	beq.w	801537e <_malloc_r+0x192>
 8015266:	2b04      	cmp	r3, #4
 8015268:	f200 8166 	bhi.w	8015538 <_malloc_r+0x34c>
 801526c:	09ab      	lsrs	r3, r5, #6
 801526e:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8015272:	f103 0738 	add.w	r7, r3, #56	; 0x38
 8015276:	00cb      	lsls	r3, r1, #3
 8015278:	f8df 8484 	ldr.w	r8, [pc, #1156]	; 8015700 <_malloc_r+0x514>
 801527c:	4443      	add	r3, r8
 801527e:	f1a3 0008 	sub.w	r0, r3, #8
 8015282:	685c      	ldr	r4, [r3, #4]
 8015284:	42a0      	cmp	r0, r4
 8015286:	d106      	bne.n	8015296 <_malloc_r+0xaa>
 8015288:	e00c      	b.n	80152a4 <_malloc_r+0xb8>
 801528a:	2a00      	cmp	r2, #0
 801528c:	f280 8122 	bge.w	80154d4 <_malloc_r+0x2e8>
 8015290:	68e4      	ldr	r4, [r4, #12]
 8015292:	42a0      	cmp	r0, r4
 8015294:	d006      	beq.n	80152a4 <_malloc_r+0xb8>
 8015296:	6863      	ldr	r3, [r4, #4]
 8015298:	f023 0303 	bic.w	r3, r3, #3
 801529c:	1b5a      	subs	r2, r3, r5
 801529e:	2a0f      	cmp	r2, #15
 80152a0:	ddf3      	ble.n	801528a <_malloc_r+0x9e>
 80152a2:	4639      	mov	r1, r7
 80152a4:	f8d8 4010 	ldr.w	r4, [r8, #16]
 80152a8:	f8df c458 	ldr.w	ip, [pc, #1112]	; 8015704 <_malloc_r+0x518>
 80152ac:	4564      	cmp	r4, ip
 80152ae:	d077      	beq.n	80153a0 <_malloc_r+0x1b4>
 80152b0:	6862      	ldr	r2, [r4, #4]
 80152b2:	f022 0203 	bic.w	r2, r2, #3
 80152b6:	1b53      	subs	r3, r2, r5
 80152b8:	2b0f      	cmp	r3, #15
 80152ba:	f300 816f 	bgt.w	801559c <_malloc_r+0x3b0>
 80152be:	2b00      	cmp	r3, #0
 80152c0:	e9c8 cc04 	strd	ip, ip, [r8, #16]
 80152c4:	f280 8160 	bge.w	8015588 <_malloc_r+0x39c>
 80152c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80152cc:	f080 8110 	bcs.w	80154f0 <_malloc_r+0x304>
 80152d0:	08d3      	lsrs	r3, r2, #3
 80152d2:	3301      	adds	r3, #1
 80152d4:	0950      	lsrs	r0, r2, #5
 80152d6:	2201      	movs	r2, #1
 80152d8:	4082      	lsls	r2, r0
 80152da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80152de:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
 80152e2:	60a7      	str	r7, [r4, #8]
 80152e4:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
 80152e8:	4302      	orrs	r2, r0
 80152ea:	f1ae 0008 	sub.w	r0, lr, #8
 80152ee:	60e0      	str	r0, [r4, #12]
 80152f0:	f8c8 2004 	str.w	r2, [r8, #4]
 80152f4:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
 80152f8:	60fc      	str	r4, [r7, #12]
 80152fa:	108b      	asrs	r3, r1, #2
 80152fc:	2001      	movs	r0, #1
 80152fe:	4098      	lsls	r0, r3
 8015300:	4290      	cmp	r0, r2
 8015302:	d854      	bhi.n	80153ae <_malloc_r+0x1c2>
 8015304:	4210      	tst	r0, r2
 8015306:	d106      	bne.n	8015316 <_malloc_r+0x12a>
 8015308:	f021 0103 	bic.w	r1, r1, #3
 801530c:	0040      	lsls	r0, r0, #1
 801530e:	4210      	tst	r0, r2
 8015310:	f101 0104 	add.w	r1, r1, #4
 8015314:	d0fa      	beq.n	801530c <_malloc_r+0x120>
 8015316:	eb08 09c1 	add.w	r9, r8, r1, lsl #3
 801531a:	464c      	mov	r4, r9
 801531c:	468e      	mov	lr, r1
 801531e:	68e7      	ldr	r7, [r4, #12]
 8015320:	42bc      	cmp	r4, r7
 8015322:	d107      	bne.n	8015334 <_malloc_r+0x148>
 8015324:	e114      	b.n	8015550 <_malloc_r+0x364>
 8015326:	2b00      	cmp	r3, #0
 8015328:	f280 811b 	bge.w	8015562 <_malloc_r+0x376>
 801532c:	68ff      	ldr	r7, [r7, #12]
 801532e:	42bc      	cmp	r4, r7
 8015330:	f000 810e 	beq.w	8015550 <_malloc_r+0x364>
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	f022 0203 	bic.w	r2, r2, #3
 801533a:	1b53      	subs	r3, r2, r5
 801533c:	2b0f      	cmp	r3, #15
 801533e:	ddf2      	ble.n	8015326 <_malloc_r+0x13a>
 8015340:	e9d7 e402 	ldrd	lr, r4, [r7, #8]
 8015344:	1979      	adds	r1, r7, r5
 8015346:	f045 0501 	orr.w	r5, r5, #1
 801534a:	607d      	str	r5, [r7, #4]
 801534c:	f043 0501 	orr.w	r5, r3, #1
 8015350:	f8ce 400c 	str.w	r4, [lr, #12]
 8015354:	4630      	mov	r0, r6
 8015356:	f8c4 e008 	str.w	lr, [r4, #8]
 801535a:	e9c8 1104 	strd	r1, r1, [r8, #16]
 801535e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8015362:	604d      	str	r5, [r1, #4]
 8015364:	50bb      	str	r3, [r7, r2]
 8015366:	f000 faed 	bl	8015944 <__malloc_unlock>
 801536a:	f107 0408 	add.w	r4, r7, #8
 801536e:	e002      	b.n	8015376 <_malloc_r+0x18a>
 8015370:	230c      	movs	r3, #12
 8015372:	6033      	str	r3, [r6, #0]
 8015374:	2400      	movs	r4, #0
 8015376:	4620      	mov	r0, r4
 8015378:	b003      	add	sp, #12
 801537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801537e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015382:	2140      	movs	r1, #64	; 0x40
 8015384:	273f      	movs	r7, #63	; 0x3f
 8015386:	e777      	b.n	8015278 <_malloc_r+0x8c>
 8015388:	68dc      	ldr	r4, [r3, #12]
 801538a:	42a3      	cmp	r3, r4
 801538c:	bf08      	it	eq
 801538e:	3102      	addeq	r1, #2
 8015390:	f47f af45 	bne.w	801521e <_malloc_r+0x32>
 8015394:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8015398:	f8df c368 	ldr.w	ip, [pc, #872]	; 8015704 <_malloc_r+0x518>
 801539c:	4564      	cmp	r4, ip
 801539e:	d187      	bne.n	80152b0 <_malloc_r+0xc4>
 80153a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80153a4:	108b      	asrs	r3, r1, #2
 80153a6:	2001      	movs	r0, #1
 80153a8:	4098      	lsls	r0, r3
 80153aa:	4290      	cmp	r0, r2
 80153ac:	d9aa      	bls.n	8015304 <_malloc_r+0x118>
 80153ae:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80153b2:	6867      	ldr	r7, [r4, #4]
 80153b4:	f027 0703 	bic.w	r7, r7, #3
 80153b8:	42bd      	cmp	r5, r7
 80153ba:	d802      	bhi.n	80153c2 <_malloc_r+0x1d6>
 80153bc:	1b7b      	subs	r3, r7, r5
 80153be:	2b0f      	cmp	r3, #15
 80153c0:	dc77      	bgt.n	80154b2 <_malloc_r+0x2c6>
 80153c2:	f8df 9344 	ldr.w	r9, [pc, #836]	; 8015708 <_malloc_r+0x51c>
 80153c6:	4bca      	ldr	r3, [pc, #808]	; (80156f0 <_malloc_r+0x504>)
 80153c8:	f8d9 2000 	ldr.w	r2, [r9]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	3201      	adds	r2, #1
 80153d0:	442b      	add	r3, r5
 80153d2:	eb04 0a07 	add.w	sl, r4, r7
 80153d6:	f000 812e 	beq.w	8015636 <_malloc_r+0x44a>
 80153da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153de:	330f      	adds	r3, #15
 80153e0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 80153e4:	f02b 0b0f 	bic.w	fp, fp, #15
 80153e8:	4659      	mov	r1, fp
 80153ea:	4630      	mov	r0, r6
 80153ec:	f000 fce2 	bl	8015db4 <_sbrk_r>
 80153f0:	1c41      	adds	r1, r0, #1
 80153f2:	4602      	mov	r2, r0
 80153f4:	f000 80eb 	beq.w	80155ce <_malloc_r+0x3e2>
 80153f8:	4582      	cmp	sl, r0
 80153fa:	f200 80e6 	bhi.w	80155ca <_malloc_r+0x3de>
 80153fe:	4bbd      	ldr	r3, [pc, #756]	; (80156f4 <_malloc_r+0x508>)
 8015400:	6819      	ldr	r1, [r3, #0]
 8015402:	4459      	add	r1, fp
 8015404:	6019      	str	r1, [r3, #0]
 8015406:	4608      	mov	r0, r1
 8015408:	f000 814b 	beq.w	80156a2 <_malloc_r+0x4b6>
 801540c:	f8d9 1000 	ldr.w	r1, [r9]
 8015410:	9301      	str	r3, [sp, #4]
 8015412:	3101      	adds	r1, #1
 8015414:	bf1b      	ittet	ne
 8015416:	eba2 0a0a 	subne.w	sl, r2, sl
 801541a:	4450      	addne	r0, sl
 801541c:	f8c9 2000 	streq.w	r2, [r9]
 8015420:	6018      	strne	r0, [r3, #0]
 8015422:	f012 0a07 	ands.w	sl, r2, #7
 8015426:	f000 8114 	beq.w	8015652 <_malloc_r+0x466>
 801542a:	f1ca 0108 	rsb	r1, sl, #8
 801542e:	440a      	add	r2, r1
 8015430:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
 8015434:	4493      	add	fp, r2
 8015436:	3108      	adds	r1, #8
 8015438:	eba1 010b 	sub.w	r1, r1, fp
 801543c:	f3c1 090b 	ubfx	r9, r1, #0, #12
 8015440:	4649      	mov	r1, r9
 8015442:	4630      	mov	r0, r6
 8015444:	9200      	str	r2, [sp, #0]
 8015446:	f000 fcb5 	bl	8015db4 <_sbrk_r>
 801544a:	1c42      	adds	r2, r0, #1
 801544c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015450:	f000 815c 	beq.w	801570c <_malloc_r+0x520>
 8015454:	1a80      	subs	r0, r0, r2
 8015456:	eb00 0b09 	add.w	fp, r0, r9
 801545a:	6819      	ldr	r1, [r3, #0]
 801545c:	f8c8 2008 	str.w	r2, [r8, #8]
 8015460:	f04b 0001 	orr.w	r0, fp, #1
 8015464:	4449      	add	r1, r9
 8015466:	4544      	cmp	r4, r8
 8015468:	6050      	str	r0, [r2, #4]
 801546a:	6019      	str	r1, [r3, #0]
 801546c:	f000 8126 	beq.w	80156bc <_malloc_r+0x4d0>
 8015470:	2f0f      	cmp	r7, #15
 8015472:	f240 8125 	bls.w	80156c0 <_malloc_r+0x4d4>
 8015476:	6860      	ldr	r0, [r4, #4]
 8015478:	3f0c      	subs	r7, #12
 801547a:	f027 0707 	bic.w	r7, r7, #7
 801547e:	f000 0001 	and.w	r0, r0, #1
 8015482:	eb04 0c07 	add.w	ip, r4, r7
 8015486:	4338      	orrs	r0, r7
 8015488:	f04f 0e05 	mov.w	lr, #5
 801548c:	2f0f      	cmp	r7, #15
 801548e:	6060      	str	r0, [r4, #4]
 8015490:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8015494:	f200 8142 	bhi.w	801571c <_malloc_r+0x530>
 8015498:	6850      	ldr	r0, [r2, #4]
 801549a:	4614      	mov	r4, r2
 801549c:	4b96      	ldr	r3, [pc, #600]	; (80156f8 <_malloc_r+0x50c>)
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	428a      	cmp	r2, r1
 80154a2:	bf38      	it	cc
 80154a4:	6019      	strcc	r1, [r3, #0]
 80154a6:	4b95      	ldr	r3, [pc, #596]	; (80156fc <_malloc_r+0x510>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	428a      	cmp	r2, r1
 80154ac:	bf38      	it	cc
 80154ae:	6019      	strcc	r1, [r3, #0]
 80154b0:	e090      	b.n	80155d4 <_malloc_r+0x3e8>
 80154b2:	1962      	adds	r2, r4, r5
 80154b4:	f043 0301 	orr.w	r3, r3, #1
 80154b8:	f045 0501 	orr.w	r5, r5, #1
 80154bc:	6065      	str	r5, [r4, #4]
 80154be:	4630      	mov	r0, r6
 80154c0:	f8c8 2008 	str.w	r2, [r8, #8]
 80154c4:	6053      	str	r3, [r2, #4]
 80154c6:	f000 fa3d 	bl	8015944 <__malloc_unlock>
 80154ca:	3408      	adds	r4, #8
 80154cc:	4620      	mov	r0, r4
 80154ce:	b003      	add	sp, #12
 80154d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d4:	4423      	add	r3, r4
 80154d6:	68e1      	ldr	r1, [r4, #12]
 80154d8:	685a      	ldr	r2, [r3, #4]
 80154da:	68a5      	ldr	r5, [r4, #8]
 80154dc:	f042 0201 	orr.w	r2, r2, #1
 80154e0:	60e9      	str	r1, [r5, #12]
 80154e2:	4630      	mov	r0, r6
 80154e4:	608d      	str	r5, [r1, #8]
 80154e6:	605a      	str	r2, [r3, #4]
 80154e8:	f000 fa2c 	bl	8015944 <__malloc_unlock>
 80154ec:	3408      	adds	r4, #8
 80154ee:	e742      	b.n	8015376 <_malloc_r+0x18a>
 80154f0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 80154f4:	ea4f 2352 	mov.w	r3, r2, lsr #9
 80154f8:	d361      	bcc.n	80155be <_malloc_r+0x3d2>
 80154fa:	2b14      	cmp	r3, #20
 80154fc:	f200 80ba 	bhi.w	8015674 <_malloc_r+0x488>
 8015500:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8015504:	00c0      	lsls	r0, r0, #3
 8015506:	335b      	adds	r3, #91	; 0x5b
 8015508:	eb08 0700 	add.w	r7, r8, r0
 801550c:	f858 0000 	ldr.w	r0, [r8, r0]
 8015510:	3f08      	subs	r7, #8
 8015512:	4287      	cmp	r7, r0
 8015514:	f000 8092 	beq.w	801563c <_malloc_r+0x450>
 8015518:	6843      	ldr	r3, [r0, #4]
 801551a:	f023 0303 	bic.w	r3, r3, #3
 801551e:	4293      	cmp	r3, r2
 8015520:	d902      	bls.n	8015528 <_malloc_r+0x33c>
 8015522:	6880      	ldr	r0, [r0, #8]
 8015524:	4287      	cmp	r7, r0
 8015526:	d1f7      	bne.n	8015518 <_malloc_r+0x32c>
 8015528:	68c7      	ldr	r7, [r0, #12]
 801552a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801552e:	e9c4 0702 	strd	r0, r7, [r4, #8]
 8015532:	60bc      	str	r4, [r7, #8]
 8015534:	60c4      	str	r4, [r0, #12]
 8015536:	e6e0      	b.n	80152fa <_malloc_r+0x10e>
 8015538:	2b14      	cmp	r3, #20
 801553a:	d959      	bls.n	80155f0 <_malloc_r+0x404>
 801553c:	2b54      	cmp	r3, #84	; 0x54
 801553e:	f200 80a1 	bhi.w	8015684 <_malloc_r+0x498>
 8015542:	0b2b      	lsrs	r3, r5, #12
 8015544:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8015548:	f103 076e 	add.w	r7, r3, #110	; 0x6e
 801554c:	00cb      	lsls	r3, r1, #3
 801554e:	e693      	b.n	8015278 <_malloc_r+0x8c>
 8015550:	f10e 0e01 	add.w	lr, lr, #1
 8015554:	f01e 0f03 	tst.w	lr, #3
 8015558:	f104 0408 	add.w	r4, r4, #8
 801555c:	f47f aedf 	bne.w	801531e <_malloc_r+0x132>
 8015560:	e051      	b.n	8015606 <_malloc_r+0x41a>
 8015562:	443a      	add	r2, r7
 8015564:	463c      	mov	r4, r7
 8015566:	6853      	ldr	r3, [r2, #4]
 8015568:	68f9      	ldr	r1, [r7, #12]
 801556a:	f854 5f08 	ldr.w	r5, [r4, #8]!
 801556e:	f043 0301 	orr.w	r3, r3, #1
 8015572:	6053      	str	r3, [r2, #4]
 8015574:	4630      	mov	r0, r6
 8015576:	60e9      	str	r1, [r5, #12]
 8015578:	608d      	str	r5, [r1, #8]
 801557a:	f000 f9e3 	bl	8015944 <__malloc_unlock>
 801557e:	e6fa      	b.n	8015376 <_malloc_r+0x18a>
 8015580:	08e9      	lsrs	r1, r5, #3
 8015582:	f105 0308 	add.w	r3, r5, #8
 8015586:	e641      	b.n	801520c <_malloc_r+0x20>
 8015588:	4422      	add	r2, r4
 801558a:	4630      	mov	r0, r6
 801558c:	6853      	ldr	r3, [r2, #4]
 801558e:	f043 0301 	orr.w	r3, r3, #1
 8015592:	6053      	str	r3, [r2, #4]
 8015594:	3408      	adds	r4, #8
 8015596:	f000 f9d5 	bl	8015944 <__malloc_unlock>
 801559a:	e6ec      	b.n	8015376 <_malloc_r+0x18a>
 801559c:	1961      	adds	r1, r4, r5
 801559e:	f043 0701 	orr.w	r7, r3, #1
 80155a2:	f045 0501 	orr.w	r5, r5, #1
 80155a6:	6065      	str	r5, [r4, #4]
 80155a8:	4630      	mov	r0, r6
 80155aa:	e9c8 1104 	strd	r1, r1, [r8, #16]
 80155ae:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80155b2:	604f      	str	r7, [r1, #4]
 80155b4:	50a3      	str	r3, [r4, r2]
 80155b6:	f000 f9c5 	bl	8015944 <__malloc_unlock>
 80155ba:	3408      	adds	r4, #8
 80155bc:	e6db      	b.n	8015376 <_malloc_r+0x18a>
 80155be:	0993      	lsrs	r3, r2, #6
 80155c0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80155c4:	00c0      	lsls	r0, r0, #3
 80155c6:	3338      	adds	r3, #56	; 0x38
 80155c8:	e79e      	b.n	8015508 <_malloc_r+0x31c>
 80155ca:	4544      	cmp	r4, r8
 80155cc:	d064      	beq.n	8015698 <_malloc_r+0x4ac>
 80155ce:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80155d2:	6860      	ldr	r0, [r4, #4]
 80155d4:	f020 0b03 	bic.w	fp, r0, #3
 80155d8:	455d      	cmp	r5, fp
 80155da:	ebab 0305 	sub.w	r3, fp, r5
 80155de:	d802      	bhi.n	80155e6 <_malloc_r+0x3fa>
 80155e0:	2b0f      	cmp	r3, #15
 80155e2:	f73f af66 	bgt.w	80154b2 <_malloc_r+0x2c6>
 80155e6:	4630      	mov	r0, r6
 80155e8:	f000 f9ac 	bl	8015944 <__malloc_unlock>
 80155ec:	2400      	movs	r4, #0
 80155ee:	e6c2      	b.n	8015376 <_malloc_r+0x18a>
 80155f0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80155f4:	f103 075b 	add.w	r7, r3, #91	; 0x5b
 80155f8:	00cb      	lsls	r3, r1, #3
 80155fa:	e63d      	b.n	8015278 <_malloc_r+0x8c>
 80155fc:	f859 3908 	ldr.w	r3, [r9], #-8
 8015600:	454b      	cmp	r3, r9
 8015602:	f040 80aa 	bne.w	801575a <_malloc_r+0x56e>
 8015606:	f011 0f03 	tst.w	r1, #3
 801560a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 801560e:	d1f5      	bne.n	80155fc <_malloc_r+0x410>
 8015610:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015614:	ea23 0300 	bic.w	r3, r3, r0
 8015618:	f8c8 3004 	str.w	r3, [r8, #4]
 801561c:	0040      	lsls	r0, r0, #1
 801561e:	4298      	cmp	r0, r3
 8015620:	f63f aec5 	bhi.w	80153ae <_malloc_r+0x1c2>
 8015624:	b918      	cbnz	r0, 801562e <_malloc_r+0x442>
 8015626:	e6c2      	b.n	80153ae <_malloc_r+0x1c2>
 8015628:	0040      	lsls	r0, r0, #1
 801562a:	f10e 0e04 	add.w	lr, lr, #4
 801562e:	4218      	tst	r0, r3
 8015630:	d0fa      	beq.n	8015628 <_malloc_r+0x43c>
 8015632:	4671      	mov	r1, lr
 8015634:	e66f      	b.n	8015316 <_malloc_r+0x12a>
 8015636:	f103 0b10 	add.w	fp, r3, #16
 801563a:	e6d5      	b.n	80153e8 <_malloc_r+0x1fc>
 801563c:	109a      	asrs	r2, r3, #2
 801563e:	f04f 0e01 	mov.w	lr, #1
 8015642:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015646:	fa0e f202 	lsl.w	r2, lr, r2
 801564a:	431a      	orrs	r2, r3
 801564c:	f8c8 2004 	str.w	r2, [r8, #4]
 8015650:	e76d      	b.n	801552e <_malloc_r+0x342>
 8015652:	eb02 010b 	add.w	r1, r2, fp
 8015656:	4249      	negs	r1, r1
 8015658:	f3c1 090b 	ubfx	r9, r1, #0, #12
 801565c:	4649      	mov	r1, r9
 801565e:	4630      	mov	r0, r6
 8015660:	9200      	str	r2, [sp, #0]
 8015662:	f000 fba7 	bl	8015db4 <_sbrk_r>
 8015666:	1c43      	adds	r3, r0, #1
 8015668:	e9dd 2300 	ldrd	r2, r3, [sp]
 801566c:	f47f aef2 	bne.w	8015454 <_malloc_r+0x268>
 8015670:	46d1      	mov	r9, sl
 8015672:	e6f2      	b.n	801545a <_malloc_r+0x26e>
 8015674:	2b54      	cmp	r3, #84	; 0x54
 8015676:	d826      	bhi.n	80156c6 <_malloc_r+0x4da>
 8015678:	0b13      	lsrs	r3, r2, #12
 801567a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 801567e:	00c0      	lsls	r0, r0, #3
 8015680:	336e      	adds	r3, #110	; 0x6e
 8015682:	e741      	b.n	8015508 <_malloc_r+0x31c>
 8015684:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8015688:	d826      	bhi.n	80156d8 <_malloc_r+0x4ec>
 801568a:	0beb      	lsrs	r3, r5, #15
 801568c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8015690:	f103 0777 	add.w	r7, r3, #119	; 0x77
 8015694:	00cb      	lsls	r3, r1, #3
 8015696:	e5ef      	b.n	8015278 <_malloc_r+0x8c>
 8015698:	4b16      	ldr	r3, [pc, #88]	; (80156f4 <_malloc_r+0x508>)
 801569a:	6818      	ldr	r0, [r3, #0]
 801569c:	4458      	add	r0, fp
 801569e:	6018      	str	r0, [r3, #0]
 80156a0:	e6b4      	b.n	801540c <_malloc_r+0x220>
 80156a2:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 80156a6:	f1bc 0f00 	cmp.w	ip, #0
 80156aa:	f47f aeaf 	bne.w	801540c <_malloc_r+0x220>
 80156ae:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80156b2:	44bb      	add	fp, r7
 80156b4:	f04b 0001 	orr.w	r0, fp, #1
 80156b8:	6060      	str	r0, [r4, #4]
 80156ba:	e6ef      	b.n	801549c <_malloc_r+0x2b0>
 80156bc:	4614      	mov	r4, r2
 80156be:	e6ed      	b.n	801549c <_malloc_r+0x2b0>
 80156c0:	2301      	movs	r3, #1
 80156c2:	6053      	str	r3, [r2, #4]
 80156c4:	e78f      	b.n	80155e6 <_malloc_r+0x3fa>
 80156c6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80156ca:	d833      	bhi.n	8015734 <_malloc_r+0x548>
 80156cc:	0bd3      	lsrs	r3, r2, #15
 80156ce:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80156d2:	00c0      	lsls	r0, r0, #3
 80156d4:	3377      	adds	r3, #119	; 0x77
 80156d6:	e717      	b.n	8015508 <_malloc_r+0x31c>
 80156d8:	f240 5254 	movw	r2, #1364	; 0x554
 80156dc:	4293      	cmp	r3, r2
 80156de:	d833      	bhi.n	8015748 <_malloc_r+0x55c>
 80156e0:	0cab      	lsrs	r3, r5, #18
 80156e2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 80156e6:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 80156ea:	00cb      	lsls	r3, r1, #3
 80156ec:	e5c4      	b.n	8015278 <_malloc_r+0x8c>
 80156ee:	bf00      	nop
 80156f0:	20009b58 	.word	0x20009b58
 80156f4:	20009b28 	.word	0x20009b28
 80156f8:	20009b50 	.word	0x20009b50
 80156fc:	20009b54 	.word	0x20009b54
 8015700:	20000638 	.word	0x20000638
 8015704:	20000640 	.word	0x20000640
 8015708:	20000a40 	.word	0x20000a40
 801570c:	f1aa 0a08 	sub.w	sl, sl, #8
 8015710:	44d3      	add	fp, sl
 8015712:	ebab 0b02 	sub.w	fp, fp, r2
 8015716:	f04f 0900 	mov.w	r9, #0
 801571a:	e69e      	b.n	801545a <_malloc_r+0x26e>
 801571c:	f104 0108 	add.w	r1, r4, #8
 8015720:	4630      	mov	r0, r6
 8015722:	9300      	str	r3, [sp, #0]
 8015724:	f005 fe18 	bl	801b358 <_free_r>
 8015728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801572c:	9b00      	ldr	r3, [sp, #0]
 801572e:	6860      	ldr	r0, [r4, #4]
 8015730:	6819      	ldr	r1, [r3, #0]
 8015732:	e6b3      	b.n	801549c <_malloc_r+0x2b0>
 8015734:	f240 5054 	movw	r0, #1364	; 0x554
 8015738:	4283      	cmp	r3, r0
 801573a:	d80a      	bhi.n	8015752 <_malloc_r+0x566>
 801573c:	0c93      	lsrs	r3, r2, #18
 801573e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8015742:	00c0      	lsls	r0, r0, #3
 8015744:	337c      	adds	r3, #124	; 0x7c
 8015746:	e6df      	b.n	8015508 <_malloc_r+0x31c>
 8015748:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 801574c:	217f      	movs	r1, #127	; 0x7f
 801574e:	277e      	movs	r7, #126	; 0x7e
 8015750:	e592      	b.n	8015278 <_malloc_r+0x8c>
 8015752:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 8015756:	237e      	movs	r3, #126	; 0x7e
 8015758:	e6d6      	b.n	8015508 <_malloc_r+0x31c>
 801575a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801575e:	e75d      	b.n	801561c <_malloc_r+0x430>

08015760 <memcmp>:
 8015760:	2a03      	cmp	r2, #3
 8015762:	b470      	push	{r4, r5, r6}
 8015764:	d912      	bls.n	801578c <memcmp+0x2c>
 8015766:	ea40 0501 	orr.w	r5, r0, r1
 801576a:	07ad      	lsls	r5, r5, #30
 801576c:	4604      	mov	r4, r0
 801576e:	460b      	mov	r3, r1
 8015770:	d11e      	bne.n	80157b0 <memcmp+0x50>
 8015772:	4619      	mov	r1, r3
 8015774:	4620      	mov	r0, r4
 8015776:	f853 5b04 	ldr.w	r5, [r3], #4
 801577a:	f854 6b04 	ldr.w	r6, [r4], #4
 801577e:	42ae      	cmp	r6, r5
 8015780:	d116      	bne.n	80157b0 <memcmp+0x50>
 8015782:	3a04      	subs	r2, #4
 8015784:	2a03      	cmp	r2, #3
 8015786:	4620      	mov	r0, r4
 8015788:	4619      	mov	r1, r3
 801578a:	d8f2      	bhi.n	8015772 <memcmp+0x12>
 801578c:	1e56      	subs	r6, r2, #1
 801578e:	b1a2      	cbz	r2, 80157ba <memcmp+0x5a>
 8015790:	3901      	subs	r1, #1
 8015792:	1e44      	subs	r4, r0, #1
 8015794:	e001      	b.n	801579a <memcmp+0x3a>
 8015796:	18c3      	adds	r3, r0, r3
 8015798:	d00c      	beq.n	80157b4 <memcmp+0x54>
 801579a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801579e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80157a2:	4295      	cmp	r5, r2
 80157a4:	eba6 0304 	sub.w	r3, r6, r4
 80157a8:	d0f5      	beq.n	8015796 <memcmp+0x36>
 80157aa:	1aa8      	subs	r0, r5, r2
 80157ac:	bc70      	pop	{r4, r5, r6}
 80157ae:	4770      	bx	lr
 80157b0:	1e56      	subs	r6, r2, #1
 80157b2:	e7ed      	b.n	8015790 <memcmp+0x30>
 80157b4:	4618      	mov	r0, r3
 80157b6:	bc70      	pop	{r4, r5, r6}
 80157b8:	4770      	bx	lr
 80157ba:	4610      	mov	r0, r2
 80157bc:	e7f6      	b.n	80157ac <memcmp+0x4c>
 80157be:	bf00      	nop

080157c0 <memmove>:
 80157c0:	4288      	cmp	r0, r1
 80157c2:	b4f0      	push	{r4, r5, r6, r7}
 80157c4:	d90d      	bls.n	80157e2 <memmove+0x22>
 80157c6:	188b      	adds	r3, r1, r2
 80157c8:	4283      	cmp	r3, r0
 80157ca:	d90a      	bls.n	80157e2 <memmove+0x22>
 80157cc:	1884      	adds	r4, r0, r2
 80157ce:	b132      	cbz	r2, 80157de <memmove+0x1e>
 80157d0:	4622      	mov	r2, r4
 80157d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80157da:	4299      	cmp	r1, r3
 80157dc:	d1f9      	bne.n	80157d2 <memmove+0x12>
 80157de:	bcf0      	pop	{r4, r5, r6, r7}
 80157e0:	4770      	bx	lr
 80157e2:	2a0f      	cmp	r2, #15
 80157e4:	d80e      	bhi.n	8015804 <memmove+0x44>
 80157e6:	4603      	mov	r3, r0
 80157e8:	1e54      	subs	r4, r2, #1
 80157ea:	2a00      	cmp	r2, #0
 80157ec:	d0f7      	beq.n	80157de <memmove+0x1e>
 80157ee:	3401      	adds	r4, #1
 80157f0:	440c      	add	r4, r1
 80157f2:	3b01      	subs	r3, #1
 80157f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157fc:	42a1      	cmp	r1, r4
 80157fe:	d1f9      	bne.n	80157f4 <memmove+0x34>
 8015800:	bcf0      	pop	{r4, r5, r6, r7}
 8015802:	4770      	bx	lr
 8015804:	ea40 0301 	orr.w	r3, r0, r1
 8015808:	079b      	lsls	r3, r3, #30
 801580a:	d13f      	bne.n	801588c <memmove+0xcc>
 801580c:	f1a2 0310 	sub.w	r3, r2, #16
 8015810:	f023 040f 	bic.w	r4, r3, #15
 8015814:	f101 0720 	add.w	r7, r1, #32
 8015818:	4427      	add	r7, r4
 801581a:	091b      	lsrs	r3, r3, #4
 801581c:	f101 0410 	add.w	r4, r1, #16
 8015820:	f100 0510 	add.w	r5, r0, #16
 8015824:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8015828:	f845 6c10 	str.w	r6, [r5, #-16]
 801582c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8015830:	f845 6c0c 	str.w	r6, [r5, #-12]
 8015834:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8015838:	f845 6c08 	str.w	r6, [r5, #-8]
 801583c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8015840:	f845 6c04 	str.w	r6, [r5, #-4]
 8015844:	3410      	adds	r4, #16
 8015846:	42bc      	cmp	r4, r7
 8015848:	f105 0510 	add.w	r5, r5, #16
 801584c:	d1ea      	bne.n	8015824 <memmove+0x64>
 801584e:	3301      	adds	r3, #1
 8015850:	f012 0f0c 	tst.w	r2, #12
 8015854:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8015858:	f002 040f 	and.w	r4, r2, #15
 801585c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8015860:	d017      	beq.n	8015892 <memmove+0xd2>
 8015862:	3c04      	subs	r4, #4
 8015864:	f024 0c03 	bic.w	ip, r4, #3
 8015868:	08a5      	lsrs	r5, r4, #2
 801586a:	449c      	add	ip, r3
 801586c:	1f1c      	subs	r4, r3, #4
 801586e:	460e      	mov	r6, r1
 8015870:	f856 7b04 	ldr.w	r7, [r6], #4
 8015874:	f844 7f04 	str.w	r7, [r4, #4]!
 8015878:	4564      	cmp	r4, ip
 801587a:	d1f9      	bne.n	8015870 <memmove+0xb0>
 801587c:	1c6c      	adds	r4, r5, #1
 801587e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015882:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015886:	f002 0203 	and.w	r2, r2, #3
 801588a:	e7ad      	b.n	80157e8 <memmove+0x28>
 801588c:	1e54      	subs	r4, r2, #1
 801588e:	4603      	mov	r3, r0
 8015890:	e7ad      	b.n	80157ee <memmove+0x2e>
 8015892:	4622      	mov	r2, r4
 8015894:	e7a8      	b.n	80157e8 <memmove+0x28>
 8015896:	bf00      	nop

08015898 <memset>:
 8015898:	b4f0      	push	{r4, r5, r6, r7}
 801589a:	0786      	lsls	r6, r0, #30
 801589c:	d046      	beq.n	801592c <memset+0x94>
 801589e:	1e54      	subs	r4, r2, #1
 80158a0:	2a00      	cmp	r2, #0
 80158a2:	d03c      	beq.n	801591e <memset+0x86>
 80158a4:	b2ca      	uxtb	r2, r1
 80158a6:	4603      	mov	r3, r0
 80158a8:	e001      	b.n	80158ae <memset+0x16>
 80158aa:	3c01      	subs	r4, #1
 80158ac:	d337      	bcc.n	801591e <memset+0x86>
 80158ae:	f803 2b01 	strb.w	r2, [r3], #1
 80158b2:	079d      	lsls	r5, r3, #30
 80158b4:	d1f9      	bne.n	80158aa <memset+0x12>
 80158b6:	2c03      	cmp	r4, #3
 80158b8:	d92a      	bls.n	8015910 <memset+0x78>
 80158ba:	b2cd      	uxtb	r5, r1
 80158bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80158c0:	2c0f      	cmp	r4, #15
 80158c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80158c6:	d934      	bls.n	8015932 <memset+0x9a>
 80158c8:	f1a4 0210 	sub.w	r2, r4, #16
 80158cc:	f022 0c0f 	bic.w	ip, r2, #15
 80158d0:	f103 0720 	add.w	r7, r3, #32
 80158d4:	0916      	lsrs	r6, r2, #4
 80158d6:	4467      	add	r7, ip
 80158d8:	f103 0210 	add.w	r2, r3, #16
 80158dc:	e942 5504 	strd	r5, r5, [r2, #-16]
 80158e0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80158e4:	3210      	adds	r2, #16
 80158e6:	42ba      	cmp	r2, r7
 80158e8:	d1f8      	bne.n	80158dc <memset+0x44>
 80158ea:	1c72      	adds	r2, r6, #1
 80158ec:	f014 0f0c 	tst.w	r4, #12
 80158f0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80158f4:	f004 060f 	and.w	r6, r4, #15
 80158f8:	d013      	beq.n	8015922 <memset+0x8a>
 80158fa:	1f33      	subs	r3, r6, #4
 80158fc:	f023 0303 	bic.w	r3, r3, #3
 8015900:	3304      	adds	r3, #4
 8015902:	4413      	add	r3, r2
 8015904:	f842 5b04 	str.w	r5, [r2], #4
 8015908:	4293      	cmp	r3, r2
 801590a:	d1fb      	bne.n	8015904 <memset+0x6c>
 801590c:	f006 0403 	and.w	r4, r6, #3
 8015910:	b12c      	cbz	r4, 801591e <memset+0x86>
 8015912:	b2ca      	uxtb	r2, r1
 8015914:	441c      	add	r4, r3
 8015916:	f803 2b01 	strb.w	r2, [r3], #1
 801591a:	429c      	cmp	r4, r3
 801591c:	d1fb      	bne.n	8015916 <memset+0x7e>
 801591e:	bcf0      	pop	{r4, r5, r6, r7}
 8015920:	4770      	bx	lr
 8015922:	4634      	mov	r4, r6
 8015924:	4613      	mov	r3, r2
 8015926:	2c00      	cmp	r4, #0
 8015928:	d1f3      	bne.n	8015912 <memset+0x7a>
 801592a:	e7f8      	b.n	801591e <memset+0x86>
 801592c:	4614      	mov	r4, r2
 801592e:	4603      	mov	r3, r0
 8015930:	e7c1      	b.n	80158b6 <memset+0x1e>
 8015932:	461a      	mov	r2, r3
 8015934:	4626      	mov	r6, r4
 8015936:	e7e0      	b.n	80158fa <memset+0x62>

08015938 <__malloc_lock>:
 8015938:	4801      	ldr	r0, [pc, #4]	; (8015940 <__malloc_lock+0x8>)
 801593a:	f7ff bc43 	b.w	80151c4 <__retarget_lock_acquire_recursive>
 801593e:	bf00      	nop
 8015940:	2000efd8 	.word	0x2000efd8

08015944 <__malloc_unlock>:
 8015944:	4801      	ldr	r0, [pc, #4]	; (801594c <__malloc_unlock+0x8>)
 8015946:	f7ff bc3f 	b.w	80151c8 <__retarget_lock_release_recursive>
 801594a:	bf00      	nop
 801594c:	2000efd8 	.word	0x2000efd8

08015950 <printf>:
 8015950:	b40f      	push	{r0, r1, r2, r3}
 8015952:	b500      	push	{lr}
 8015954:	4907      	ldr	r1, [pc, #28]	; (8015974 <printf+0x24>)
 8015956:	b083      	sub	sp, #12
 8015958:	ab04      	add	r3, sp, #16
 801595a:	6808      	ldr	r0, [r1, #0]
 801595c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015960:	6881      	ldr	r1, [r0, #8]
 8015962:	9301      	str	r3, [sp, #4]
 8015964:	f002 fc38 	bl	80181d8 <_vfprintf_r>
 8015968:	b003      	add	sp, #12
 801596a:	f85d eb04 	ldr.w	lr, [sp], #4
 801596e:	b004      	add	sp, #16
 8015970:	4770      	bx	lr
 8015972:	bf00      	nop
 8015974:	20000208 	.word	0x20000208

08015978 <srand>:
 8015978:	4b02      	ldr	r3, [pc, #8]	; (8015984 <srand+0xc>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2200      	movs	r2, #0
 801597e:	e9c3 022a 	strd	r0, r2, [r3, #168]	; 0xa8
 8015982:	4770      	bx	lr
 8015984:	20000208 	.word	0x20000208

08015988 <rand>:
 8015988:	4b0b      	ldr	r3, [pc, #44]	; (80159b8 <rand+0x30>)
 801598a:	480c      	ldr	r0, [pc, #48]	; (80159bc <rand+0x34>)
 801598c:	6819      	ldr	r1, [r3, #0]
 801598e:	e9d1 232a 	ldrd	r2, r3, [r1, #168]	; 0xa8
 8015992:	b410      	push	{r4}
 8015994:	4c0a      	ldr	r4, [pc, #40]	; (80159c0 <rand+0x38>)
 8015996:	fb00 f002 	mul.w	r0, r0, r2
 801599a:	fb04 0003 	mla	r0, r4, r3, r0
 801599e:	fba2 3404 	umull	r3, r4, r2, r4
 80159a2:	4404      	add	r4, r0
 80159a4:	1c5a      	adds	r2, r3, #1
 80159a6:	f144 0000 	adc.w	r0, r4, #0
 80159aa:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 80159ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80159b6:	4770      	bx	lr
 80159b8:	20000208 	.word	0x20000208
 80159bc:	5851f42d 	.word	0x5851f42d
 80159c0:	4c957f2d 	.word	0x4c957f2d

080159c4 <realloc>:
 80159c4:	4b02      	ldr	r3, [pc, #8]	; (80159d0 <realloc+0xc>)
 80159c6:	460a      	mov	r2, r1
 80159c8:	4601      	mov	r1, r0
 80159ca:	6818      	ldr	r0, [r3, #0]
 80159cc:	f000 b802 	b.w	80159d4 <_realloc_r>
 80159d0:	20000208 	.word	0x20000208

080159d4 <_realloc_r>:
 80159d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d8:	4617      	mov	r7, r2
 80159da:	2900      	cmp	r1, #0
 80159dc:	f000 80bc 	beq.w	8015b58 <_realloc_r+0x184>
 80159e0:	f107 050b 	add.w	r5, r7, #11
 80159e4:	460c      	mov	r4, r1
 80159e6:	4680      	mov	r8, r0
 80159e8:	f7ff ffa6 	bl	8015938 <__malloc_lock>
 80159ec:	2d16      	cmp	r5, #22
 80159ee:	d85f      	bhi.n	8015ab0 <_realloc_r+0xdc>
 80159f0:	2510      	movs	r5, #16
 80159f2:	462a      	mov	r2, r5
 80159f4:	42af      	cmp	r7, r5
 80159f6:	d860      	bhi.n	8015aba <_realloc_r+0xe6>
 80159f8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80159fc:	f021 0603 	bic.w	r6, r1, #3
 8015a00:	4296      	cmp	r6, r2
 8015a02:	f1a4 0908 	sub.w	r9, r4, #8
 8015a06:	f280 8086 	bge.w	8015b16 <_realloc_r+0x142>
 8015a0a:	4bc9      	ldr	r3, [pc, #804]	; (8015d30 <_realloc_r+0x35c>)
 8015a0c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8015a10:	eb09 0006 	add.w	r0, r9, r6
 8015a14:	4584      	cmp	ip, r0
 8015a16:	f000 80ba 	beq.w	8015b8e <_realloc_r+0x1ba>
 8015a1a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8015a1e:	f02c 0301 	bic.w	r3, ip, #1
 8015a22:	4403      	add	r3, r0
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	07db      	lsls	r3, r3, #31
 8015a28:	f100 808b 	bmi.w	8015b42 <_realloc_r+0x16e>
 8015a2c:	f02c 0c03 	bic.w	ip, ip, #3
 8015a30:	eb06 030c 	add.w	r3, r6, ip
 8015a34:	4293      	cmp	r3, r2
 8015a36:	f280 8116 	bge.w	8015c66 <_realloc_r+0x292>
 8015a3a:	07cb      	lsls	r3, r1, #31
 8015a3c:	d40f      	bmi.n	8015a5e <_realloc_r+0x8a>
 8015a3e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8015a42:	eba9 0a03 	sub.w	sl, r9, r3
 8015a46:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015a4a:	f023 0103 	bic.w	r1, r3, #3
 8015a4e:	448c      	add	ip, r1
 8015a50:	44b4      	add	ip, r6
 8015a52:	4594      	cmp	ip, r2
 8015a54:	da38      	bge.n	8015ac8 <_realloc_r+0xf4>
 8015a56:	1873      	adds	r3, r6, r1
 8015a58:	4293      	cmp	r3, r2
 8015a5a:	f280 8110 	bge.w	8015c7e <_realloc_r+0x2aa>
 8015a5e:	4639      	mov	r1, r7
 8015a60:	4640      	mov	r0, r8
 8015a62:	f7ff fbc3 	bl	80151ec <_malloc_r>
 8015a66:	4607      	mov	r7, r0
 8015a68:	b1e0      	cbz	r0, 8015aa4 <_realloc_r+0xd0>
 8015a6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015a6e:	f023 0301 	bic.w	r3, r3, #1
 8015a72:	444b      	add	r3, r9
 8015a74:	f1a0 0208 	sub.w	r2, r0, #8
 8015a78:	4293      	cmp	r3, r2
 8015a7a:	f000 80fa 	beq.w	8015c72 <_realloc_r+0x29e>
 8015a7e:	1f32      	subs	r2, r6, #4
 8015a80:	2a24      	cmp	r2, #36	; 0x24
 8015a82:	f200 811d 	bhi.w	8015cc0 <_realloc_r+0x2ec>
 8015a86:	2a13      	cmp	r2, #19
 8015a88:	f200 80ce 	bhi.w	8015c28 <_realloc_r+0x254>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	4622      	mov	r2, r4
 8015a90:	6811      	ldr	r1, [r2, #0]
 8015a92:	6019      	str	r1, [r3, #0]
 8015a94:	6851      	ldr	r1, [r2, #4]
 8015a96:	6059      	str	r1, [r3, #4]
 8015a98:	6892      	ldr	r2, [r2, #8]
 8015a9a:	609a      	str	r2, [r3, #8]
 8015a9c:	4621      	mov	r1, r4
 8015a9e:	4640      	mov	r0, r8
 8015aa0:	f005 fc5a 	bl	801b358 <_free_r>
 8015aa4:	4640      	mov	r0, r8
 8015aa6:	f7ff ff4d 	bl	8015944 <__malloc_unlock>
 8015aaa:	4638      	mov	r0, r7
 8015aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab0:	f025 0507 	bic.w	r5, r5, #7
 8015ab4:	2d00      	cmp	r5, #0
 8015ab6:	462a      	mov	r2, r5
 8015ab8:	da9c      	bge.n	80159f4 <_realloc_r+0x20>
 8015aba:	230c      	movs	r3, #12
 8015abc:	f8c8 3000 	str.w	r3, [r8]
 8015ac0:	2700      	movs	r7, #0
 8015ac2:	4638      	mov	r0, r7
 8015ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8015acc:	4657      	mov	r7, sl
 8015ace:	60d3      	str	r3, [r2, #12]
 8015ad0:	609a      	str	r2, [r3, #8]
 8015ad2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8015ad6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8015ada:	60cb      	str	r3, [r1, #12]
 8015adc:	1f32      	subs	r2, r6, #4
 8015ade:	2a24      	cmp	r2, #36	; 0x24
 8015ae0:	6099      	str	r1, [r3, #8]
 8015ae2:	f200 8108 	bhi.w	8015cf6 <_realloc_r+0x322>
 8015ae6:	2a13      	cmp	r2, #19
 8015ae8:	f240 8103 	bls.w	8015cf2 <_realloc_r+0x31e>
 8015aec:	6823      	ldr	r3, [r4, #0]
 8015aee:	f8ca 3008 	str.w	r3, [sl, #8]
 8015af2:	6863      	ldr	r3, [r4, #4]
 8015af4:	f8ca 300c 	str.w	r3, [sl, #12]
 8015af8:	2a1b      	cmp	r2, #27
 8015afa:	f200 811b 	bhi.w	8015d34 <_realloc_r+0x360>
 8015afe:	3408      	adds	r4, #8
 8015b00:	f10a 0310 	add.w	r3, sl, #16
 8015b04:	6822      	ldr	r2, [r4, #0]
 8015b06:	601a      	str	r2, [r3, #0]
 8015b08:	6862      	ldr	r2, [r4, #4]
 8015b0a:	605a      	str	r2, [r3, #4]
 8015b0c:	68a2      	ldr	r2, [r4, #8]
 8015b0e:	609a      	str	r2, [r3, #8]
 8015b10:	4666      	mov	r6, ip
 8015b12:	46d1      	mov	r9, sl
 8015b14:	463c      	mov	r4, r7
 8015b16:	1b73      	subs	r3, r6, r5
 8015b18:	2b0f      	cmp	r3, #15
 8015b1a:	d822      	bhi.n	8015b62 <_realloc_r+0x18e>
 8015b1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015b20:	f003 0301 	and.w	r3, r3, #1
 8015b24:	4333      	orrs	r3, r6
 8015b26:	444e      	add	r6, r9
 8015b28:	f8c9 3004 	str.w	r3, [r9, #4]
 8015b2c:	6873      	ldr	r3, [r6, #4]
 8015b2e:	f043 0301 	orr.w	r3, r3, #1
 8015b32:	6073      	str	r3, [r6, #4]
 8015b34:	4640      	mov	r0, r8
 8015b36:	4627      	mov	r7, r4
 8015b38:	f7ff ff04 	bl	8015944 <__malloc_unlock>
 8015b3c:	4638      	mov	r0, r7
 8015b3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b42:	07c9      	lsls	r1, r1, #31
 8015b44:	d48b      	bmi.n	8015a5e <_realloc_r+0x8a>
 8015b46:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8015b4a:	eba9 0a03 	sub.w	sl, r9, r3
 8015b4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015b52:	f021 0103 	bic.w	r1, r1, #3
 8015b56:	e77e      	b.n	8015a56 <_realloc_r+0x82>
 8015b58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	f7ff bb45 	b.w	80151ec <_malloc_r>
 8015b62:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8015b66:	eb09 0105 	add.w	r1, r9, r5
 8015b6a:	f002 0201 	and.w	r2, r2, #1
 8015b6e:	444e      	add	r6, r9
 8015b70:	f043 0301 	orr.w	r3, r3, #1
 8015b74:	4315      	orrs	r5, r2
 8015b76:	f8c9 5004 	str.w	r5, [r9, #4]
 8015b7a:	604b      	str	r3, [r1, #4]
 8015b7c:	6873      	ldr	r3, [r6, #4]
 8015b7e:	f043 0301 	orr.w	r3, r3, #1
 8015b82:	3108      	adds	r1, #8
 8015b84:	6073      	str	r3, [r6, #4]
 8015b86:	4640      	mov	r0, r8
 8015b88:	f005 fbe6 	bl	801b358 <_free_r>
 8015b8c:	e7d2      	b.n	8015b34 <_realloc_r+0x160>
 8015b8e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015b92:	f020 0b03 	bic.w	fp, r0, #3
 8015b96:	eb06 0c0b 	add.w	ip, r6, fp
 8015b9a:	f105 0010 	add.w	r0, r5, #16
 8015b9e:	4584      	cmp	ip, r0
 8015ba0:	da4d      	bge.n	8015c3e <_realloc_r+0x26a>
 8015ba2:	07c9      	lsls	r1, r1, #31
 8015ba4:	f53f af5b 	bmi.w	8015a5e <_realloc_r+0x8a>
 8015ba8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8015bac:	eba9 0a01 	sub.w	sl, r9, r1
 8015bb0:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015bb4:	f021 0103 	bic.w	r1, r1, #3
 8015bb8:	448b      	add	fp, r1
 8015bba:	44b3      	add	fp, r6
 8015bbc:	4558      	cmp	r0, fp
 8015bbe:	f73f af4a 	bgt.w	8015a56 <_realloc_r+0x82>
 8015bc2:	4657      	mov	r7, sl
 8015bc4:	f8da 100c 	ldr.w	r1, [sl, #12]
 8015bc8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8015bcc:	1f32      	subs	r2, r6, #4
 8015bce:	2a24      	cmp	r2, #36	; 0x24
 8015bd0:	60c1      	str	r1, [r0, #12]
 8015bd2:	6088      	str	r0, [r1, #8]
 8015bd4:	f200 80bc 	bhi.w	8015d50 <_realloc_r+0x37c>
 8015bd8:	2a13      	cmp	r2, #19
 8015bda:	f240 80b7 	bls.w	8015d4c <_realloc_r+0x378>
 8015bde:	6821      	ldr	r1, [r4, #0]
 8015be0:	f8ca 1008 	str.w	r1, [sl, #8]
 8015be4:	6861      	ldr	r1, [r4, #4]
 8015be6:	f8ca 100c 	str.w	r1, [sl, #12]
 8015bea:	2a1b      	cmp	r2, #27
 8015bec:	f200 80c0 	bhi.w	8015d70 <_realloc_r+0x39c>
 8015bf0:	3408      	adds	r4, #8
 8015bf2:	f10a 0210 	add.w	r2, sl, #16
 8015bf6:	6821      	ldr	r1, [r4, #0]
 8015bf8:	6011      	str	r1, [r2, #0]
 8015bfa:	6861      	ldr	r1, [r4, #4]
 8015bfc:	6051      	str	r1, [r2, #4]
 8015bfe:	68a1      	ldr	r1, [r4, #8]
 8015c00:	6091      	str	r1, [r2, #8]
 8015c02:	eb0a 0105 	add.w	r1, sl, r5
 8015c06:	ebab 0205 	sub.w	r2, fp, r5
 8015c0a:	f042 0201 	orr.w	r2, r2, #1
 8015c0e:	6099      	str	r1, [r3, #8]
 8015c10:	604a      	str	r2, [r1, #4]
 8015c12:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015c16:	f003 0301 	and.w	r3, r3, #1
 8015c1a:	431d      	orrs	r5, r3
 8015c1c:	4640      	mov	r0, r8
 8015c1e:	f8ca 5004 	str.w	r5, [sl, #4]
 8015c22:	f7ff fe8f 	bl	8015944 <__malloc_unlock>
 8015c26:	e74c      	b.n	8015ac2 <_realloc_r+0xee>
 8015c28:	6823      	ldr	r3, [r4, #0]
 8015c2a:	6003      	str	r3, [r0, #0]
 8015c2c:	6863      	ldr	r3, [r4, #4]
 8015c2e:	6043      	str	r3, [r0, #4]
 8015c30:	2a1b      	cmp	r2, #27
 8015c32:	d849      	bhi.n	8015cc8 <_realloc_r+0x2f4>
 8015c34:	f104 0208 	add.w	r2, r4, #8
 8015c38:	f100 0308 	add.w	r3, r0, #8
 8015c3c:	e728      	b.n	8015a90 <_realloc_r+0xbc>
 8015c3e:	eb09 0105 	add.w	r1, r9, r5
 8015c42:	ebac 0205 	sub.w	r2, ip, r5
 8015c46:	f042 0201 	orr.w	r2, r2, #1
 8015c4a:	6099      	str	r1, [r3, #8]
 8015c4c:	604a      	str	r2, [r1, #4]
 8015c4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015c52:	f003 0301 	and.w	r3, r3, #1
 8015c56:	431d      	orrs	r5, r3
 8015c58:	4640      	mov	r0, r8
 8015c5a:	f844 5c04 	str.w	r5, [r4, #-4]
 8015c5e:	f7ff fe71 	bl	8015944 <__malloc_unlock>
 8015c62:	4627      	mov	r7, r4
 8015c64:	e72d      	b.n	8015ac2 <_realloc_r+0xee>
 8015c66:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8015c6a:	461e      	mov	r6, r3
 8015c6c:	60ca      	str	r2, [r1, #12]
 8015c6e:	6091      	str	r1, [r2, #8]
 8015c70:	e751      	b.n	8015b16 <_realloc_r+0x142>
 8015c72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015c76:	f023 0303 	bic.w	r3, r3, #3
 8015c7a:	441e      	add	r6, r3
 8015c7c:	e74b      	b.n	8015b16 <_realloc_r+0x142>
 8015c7e:	4657      	mov	r7, sl
 8015c80:	f8da 100c 	ldr.w	r1, [sl, #12]
 8015c84:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8015c88:	1f32      	subs	r2, r6, #4
 8015c8a:	2a24      	cmp	r2, #36	; 0x24
 8015c8c:	60c1      	str	r1, [r0, #12]
 8015c8e:	6088      	str	r0, [r1, #8]
 8015c90:	d827      	bhi.n	8015ce2 <_realloc_r+0x30e>
 8015c92:	2a13      	cmp	r2, #19
 8015c94:	d923      	bls.n	8015cde <_realloc_r+0x30a>
 8015c96:	6821      	ldr	r1, [r4, #0]
 8015c98:	f8ca 1008 	str.w	r1, [sl, #8]
 8015c9c:	6861      	ldr	r1, [r4, #4]
 8015c9e:	f8ca 100c 	str.w	r1, [sl, #12]
 8015ca2:	2a1b      	cmp	r2, #27
 8015ca4:	d82f      	bhi.n	8015d06 <_realloc_r+0x332>
 8015ca6:	3408      	adds	r4, #8
 8015ca8:	f10a 0210 	add.w	r2, sl, #16
 8015cac:	6821      	ldr	r1, [r4, #0]
 8015cae:	6011      	str	r1, [r2, #0]
 8015cb0:	6861      	ldr	r1, [r4, #4]
 8015cb2:	6051      	str	r1, [r2, #4]
 8015cb4:	68a1      	ldr	r1, [r4, #8]
 8015cb6:	6091      	str	r1, [r2, #8]
 8015cb8:	461e      	mov	r6, r3
 8015cba:	46d1      	mov	r9, sl
 8015cbc:	463c      	mov	r4, r7
 8015cbe:	e72a      	b.n	8015b16 <_realloc_r+0x142>
 8015cc0:	4621      	mov	r1, r4
 8015cc2:	f7ff fd7d 	bl	80157c0 <memmove>
 8015cc6:	e6e9      	b.n	8015a9c <_realloc_r+0xc8>
 8015cc8:	68a3      	ldr	r3, [r4, #8]
 8015cca:	6083      	str	r3, [r0, #8]
 8015ccc:	68e3      	ldr	r3, [r4, #12]
 8015cce:	60c3      	str	r3, [r0, #12]
 8015cd0:	2a24      	cmp	r2, #36	; 0x24
 8015cd2:	d024      	beq.n	8015d1e <_realloc_r+0x34a>
 8015cd4:	f104 0210 	add.w	r2, r4, #16
 8015cd8:	f100 0310 	add.w	r3, r0, #16
 8015cdc:	e6d8      	b.n	8015a90 <_realloc_r+0xbc>
 8015cde:	463a      	mov	r2, r7
 8015ce0:	e7e4      	b.n	8015cac <_realloc_r+0x2d8>
 8015ce2:	4621      	mov	r1, r4
 8015ce4:	4638      	mov	r0, r7
 8015ce6:	461e      	mov	r6, r3
 8015ce8:	46d1      	mov	r9, sl
 8015cea:	f7ff fd69 	bl	80157c0 <memmove>
 8015cee:	463c      	mov	r4, r7
 8015cf0:	e711      	b.n	8015b16 <_realloc_r+0x142>
 8015cf2:	463b      	mov	r3, r7
 8015cf4:	e706      	b.n	8015b04 <_realloc_r+0x130>
 8015cf6:	4621      	mov	r1, r4
 8015cf8:	4638      	mov	r0, r7
 8015cfa:	4666      	mov	r6, ip
 8015cfc:	46d1      	mov	r9, sl
 8015cfe:	f7ff fd5f 	bl	80157c0 <memmove>
 8015d02:	463c      	mov	r4, r7
 8015d04:	e707      	b.n	8015b16 <_realloc_r+0x142>
 8015d06:	68a1      	ldr	r1, [r4, #8]
 8015d08:	f8ca 1010 	str.w	r1, [sl, #16]
 8015d0c:	68e1      	ldr	r1, [r4, #12]
 8015d0e:	f8ca 1014 	str.w	r1, [sl, #20]
 8015d12:	2a24      	cmp	r2, #36	; 0x24
 8015d14:	d022      	beq.n	8015d5c <_realloc_r+0x388>
 8015d16:	3410      	adds	r4, #16
 8015d18:	f10a 0218 	add.w	r2, sl, #24
 8015d1c:	e7c6      	b.n	8015cac <_realloc_r+0x2d8>
 8015d1e:	6923      	ldr	r3, [r4, #16]
 8015d20:	6103      	str	r3, [r0, #16]
 8015d22:	6963      	ldr	r3, [r4, #20]
 8015d24:	6143      	str	r3, [r0, #20]
 8015d26:	f104 0218 	add.w	r2, r4, #24
 8015d2a:	f100 0318 	add.w	r3, r0, #24
 8015d2e:	e6af      	b.n	8015a90 <_realloc_r+0xbc>
 8015d30:	20000638 	.word	0x20000638
 8015d34:	68a3      	ldr	r3, [r4, #8]
 8015d36:	f8ca 3010 	str.w	r3, [sl, #16]
 8015d3a:	68e3      	ldr	r3, [r4, #12]
 8015d3c:	f8ca 3014 	str.w	r3, [sl, #20]
 8015d40:	2a24      	cmp	r2, #36	; 0x24
 8015d42:	d021      	beq.n	8015d88 <_realloc_r+0x3b4>
 8015d44:	3410      	adds	r4, #16
 8015d46:	f10a 0318 	add.w	r3, sl, #24
 8015d4a:	e6db      	b.n	8015b04 <_realloc_r+0x130>
 8015d4c:	463a      	mov	r2, r7
 8015d4e:	e752      	b.n	8015bf6 <_realloc_r+0x222>
 8015d50:	4621      	mov	r1, r4
 8015d52:	4638      	mov	r0, r7
 8015d54:	f7ff fd34 	bl	80157c0 <memmove>
 8015d58:	4b15      	ldr	r3, [pc, #84]	; (8015db0 <_realloc_r+0x3dc>)
 8015d5a:	e752      	b.n	8015c02 <_realloc_r+0x22e>
 8015d5c:	6922      	ldr	r2, [r4, #16]
 8015d5e:	f8ca 2018 	str.w	r2, [sl, #24]
 8015d62:	6962      	ldr	r2, [r4, #20]
 8015d64:	f8ca 201c 	str.w	r2, [sl, #28]
 8015d68:	3418      	adds	r4, #24
 8015d6a:	f10a 0220 	add.w	r2, sl, #32
 8015d6e:	e79d      	b.n	8015cac <_realloc_r+0x2d8>
 8015d70:	68a1      	ldr	r1, [r4, #8]
 8015d72:	f8ca 1010 	str.w	r1, [sl, #16]
 8015d76:	68e1      	ldr	r1, [r4, #12]
 8015d78:	f8ca 1014 	str.w	r1, [sl, #20]
 8015d7c:	2a24      	cmp	r2, #36	; 0x24
 8015d7e:	d00d      	beq.n	8015d9c <_realloc_r+0x3c8>
 8015d80:	3410      	adds	r4, #16
 8015d82:	f10a 0218 	add.w	r2, sl, #24
 8015d86:	e736      	b.n	8015bf6 <_realloc_r+0x222>
 8015d88:	6923      	ldr	r3, [r4, #16]
 8015d8a:	f8ca 3018 	str.w	r3, [sl, #24]
 8015d8e:	6963      	ldr	r3, [r4, #20]
 8015d90:	f8ca 301c 	str.w	r3, [sl, #28]
 8015d94:	3418      	adds	r4, #24
 8015d96:	f10a 0320 	add.w	r3, sl, #32
 8015d9a:	e6b3      	b.n	8015b04 <_realloc_r+0x130>
 8015d9c:	6922      	ldr	r2, [r4, #16]
 8015d9e:	f8ca 2018 	str.w	r2, [sl, #24]
 8015da2:	6962      	ldr	r2, [r4, #20]
 8015da4:	f8ca 201c 	str.w	r2, [sl, #28]
 8015da8:	3418      	adds	r4, #24
 8015daa:	f10a 0220 	add.w	r2, sl, #32
 8015dae:	e722      	b.n	8015bf6 <_realloc_r+0x222>
 8015db0:	20000638 	.word	0x20000638

08015db4 <_sbrk_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4d07      	ldr	r5, [pc, #28]	; (8015dd4 <_sbrk_r+0x20>)
 8015db8:	2200      	movs	r2, #0
 8015dba:	4604      	mov	r4, r0
 8015dbc:	4608      	mov	r0, r1
 8015dbe:	602a      	str	r2, [r5, #0]
 8015dc0:	f7ed fa28 	bl	8003214 <_sbrk>
 8015dc4:	1c43      	adds	r3, r0, #1
 8015dc6:	d000      	beq.n	8015dca <_sbrk_r+0x16>
 8015dc8:	bd38      	pop	{r3, r4, r5, pc}
 8015dca:	682b      	ldr	r3, [r5, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d0fb      	beq.n	8015dc8 <_sbrk_r+0x14>
 8015dd0:	6023      	str	r3, [r4, #0]
 8015dd2:	bd38      	pop	{r3, r4, r5, pc}
 8015dd4:	2000efec 	.word	0x2000efec

08015dd8 <snprintf>:
 8015dd8:	b40c      	push	{r2, r3}
 8015dda:	b530      	push	{r4, r5, lr}
 8015ddc:	4b1f      	ldr	r3, [pc, #124]	; (8015e5c <snprintf+0x84>)
 8015dde:	2900      	cmp	r1, #0
 8015de0:	681c      	ldr	r4, [r3, #0]
 8015de2:	b09d      	sub	sp, #116	; 0x74
 8015de4:	db35      	blt.n	8015e52 <snprintf+0x7a>
 8015de6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015dea:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015dee:	9002      	str	r0, [sp, #8]
 8015df0:	9006      	str	r0, [sp, #24]
 8015df2:	ab21      	add	r3, sp, #132	; 0x84
 8015df4:	d018      	beq.n	8015e28 <snprintf+0x50>
 8015df6:	3901      	subs	r1, #1
 8015df8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015dfa:	9104      	str	r1, [sp, #16]
 8015dfc:	9107      	str	r1, [sp, #28]
 8015dfe:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8015e02:	a902      	add	r1, sp, #8
 8015e04:	4620      	mov	r0, r4
 8015e06:	9301      	str	r3, [sp, #4]
 8015e08:	f8ad 5016 	strh.w	r5, [sp, #22]
 8015e0c:	f000 fc48 	bl	80166a0 <_svfprintf_r>
 8015e10:	1c42      	adds	r2, r0, #1
 8015e12:	da01      	bge.n	8015e18 <snprintf+0x40>
 8015e14:	238b      	movs	r3, #139	; 0x8b
 8015e16:	6023      	str	r3, [r4, #0]
 8015e18:	9b02      	ldr	r3, [sp, #8]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	701a      	strb	r2, [r3, #0]
 8015e1e:	b01d      	add	sp, #116	; 0x74
 8015e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e24:	b002      	add	sp, #8
 8015e26:	4770      	bx	lr
 8015e28:	9104      	str	r1, [sp, #16]
 8015e2a:	9107      	str	r1, [sp, #28]
 8015e2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e2e:	9301      	str	r3, [sp, #4]
 8015e30:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8015e34:	a902      	add	r1, sp, #8
 8015e36:	4620      	mov	r0, r4
 8015e38:	f8ad 5016 	strh.w	r5, [sp, #22]
 8015e3c:	f000 fc30 	bl	80166a0 <_svfprintf_r>
 8015e40:	1c43      	adds	r3, r0, #1
 8015e42:	da01      	bge.n	8015e48 <snprintf+0x70>
 8015e44:	238b      	movs	r3, #139	; 0x8b
 8015e46:	6023      	str	r3, [r4, #0]
 8015e48:	b01d      	add	sp, #116	; 0x74
 8015e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e4e:	b002      	add	sp, #8
 8015e50:	4770      	bx	lr
 8015e52:	238b      	movs	r3, #139	; 0x8b
 8015e54:	6023      	str	r3, [r4, #0]
 8015e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e5a:	e7f5      	b.n	8015e48 <snprintf+0x70>
 8015e5c:	20000208 	.word	0x20000208

08015e60 <sprintf>:
 8015e60:	b40e      	push	{r1, r2, r3}
 8015e62:	b530      	push	{r4, r5, lr}
 8015e64:	b09c      	sub	sp, #112	; 0x70
 8015e66:	ab1f      	add	r3, sp, #124	; 0x7c
 8015e68:	4c0c      	ldr	r4, [pc, #48]	; (8015e9c <sprintf+0x3c>)
 8015e6a:	4d0d      	ldr	r5, [pc, #52]	; (8015ea0 <sprintf+0x40>)
 8015e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e70:	9301      	str	r3, [sp, #4]
 8015e72:	4601      	mov	r1, r0
 8015e74:	9102      	str	r1, [sp, #8]
 8015e76:	9106      	str	r1, [sp, #24]
 8015e78:	6820      	ldr	r0, [r4, #0]
 8015e7a:	a902      	add	r1, sp, #8
 8015e7c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8015e80:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015e84:	9407      	str	r4, [sp, #28]
 8015e86:	f000 fc0b 	bl	80166a0 <_svfprintf_r>
 8015e8a:	9b02      	ldr	r3, [sp, #8]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	701a      	strb	r2, [r3, #0]
 8015e90:	b01c      	add	sp, #112	; 0x70
 8015e92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e96:	b003      	add	sp, #12
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop
 8015e9c:	20000208 	.word	0x20000208
 8015ea0:	ffff0208 	.word	0xffff0208

08015ea4 <stpcpy>:
 8015ea4:	ea41 0300 	orr.w	r3, r1, r0
 8015ea8:	079b      	lsls	r3, r3, #30
 8015eaa:	d008      	beq.n	8015ebe <stpcpy+0x1a>
 8015eac:	4603      	mov	r3, r0
 8015eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f803 2b01 	strb.w	r2, [r3], #1
 8015eb8:	2a00      	cmp	r2, #0
 8015eba:	d1f8      	bne.n	8015eae <stpcpy+0xa>
 8015ebc:	4770      	bx	lr
 8015ebe:	680b      	ldr	r3, [r1, #0]
 8015ec0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8015ec4:	ea22 0203 	bic.w	r2, r2, r3
 8015ec8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8015ecc:	d1ee      	bne.n	8015eac <stpcpy+0x8>
 8015ece:	b410      	push	{r4}
 8015ed0:	1d0c      	adds	r4, r1, #4
 8015ed2:	f840 3b04 	str.w	r3, [r0], #4
 8015ed6:	4621      	mov	r1, r4
 8015ed8:	f854 3b04 	ldr.w	r3, [r4], #4
 8015edc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8015ee0:	ea22 0203 	bic.w	r2, r2, r3
 8015ee4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8015ee8:	d0f3      	beq.n	8015ed2 <stpcpy+0x2e>
 8015eea:	4603      	mov	r3, r0
 8015eec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f803 2b01 	strb.w	r2, [r3], #1
 8015ef6:	2a00      	cmp	r2, #0
 8015ef8:	d1f8      	bne.n	8015eec <stpcpy+0x48>
 8015efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015efe:	4770      	bx	lr

08015f00 <strchr>:
 8015f00:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8015f04:	4603      	mov	r3, r0
 8015f06:	d044      	beq.n	8015f92 <strchr+0x92>
 8015f08:	0782      	lsls	r2, r0, #30
 8015f0a:	d132      	bne.n	8015f72 <strchr+0x72>
 8015f0c:	b470      	push	{r4, r5, r6}
 8015f0e:	6804      	ldr	r4, [r0, #0]
 8015f10:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8015f14:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8015f18:	ea86 0504 	eor.w	r5, r6, r4
 8015f1c:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8015f20:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8015f24:	ea23 0305 	bic.w	r3, r3, r5
 8015f28:	ea22 0204 	bic.w	r2, r2, r4
 8015f2c:	4313      	orrs	r3, r2
 8015f2e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8015f32:	d10f      	bne.n	8015f54 <strchr+0x54>
 8015f34:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8015f38:	ea84 0506 	eor.w	r5, r4, r6
 8015f3c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8015f40:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8015f44:	ea22 0205 	bic.w	r2, r2, r5
 8015f48:	ea23 0304 	bic.w	r3, r3, r4
 8015f4c:	4313      	orrs	r3, r2
 8015f4e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8015f52:	d0ef      	beq.n	8015f34 <strchr+0x34>
 8015f54:	7803      	ldrb	r3, [r0, #0]
 8015f56:	b923      	cbnz	r3, 8015f62 <strchr+0x62>
 8015f58:	e036      	b.n	8015fc8 <strchr+0xc8>
 8015f5a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d032      	beq.n	8015fc8 <strchr+0xc8>
 8015f62:	4299      	cmp	r1, r3
 8015f64:	d1f9      	bne.n	8015f5a <strchr+0x5a>
 8015f66:	e030      	b.n	8015fca <strchr+0xca>
 8015f68:	428a      	cmp	r2, r1
 8015f6a:	d011      	beq.n	8015f90 <strchr+0x90>
 8015f6c:	079a      	lsls	r2, r3, #30
 8015f6e:	4618      	mov	r0, r3
 8015f70:	d0cc      	beq.n	8015f0c <strchr+0xc>
 8015f72:	4618      	mov	r0, r3
 8015f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f78:	2a00      	cmp	r2, #0
 8015f7a:	d1f5      	bne.n	8015f68 <strchr+0x68>
 8015f7c:	4610      	mov	r0, r2
 8015f7e:	4770      	bx	lr
 8015f80:	0799      	lsls	r1, r3, #30
 8015f82:	4618      	mov	r0, r3
 8015f84:	d007      	beq.n	8015f96 <strchr+0x96>
 8015f86:	4618      	mov	r0, r3
 8015f88:	3301      	adds	r3, #1
 8015f8a:	7802      	ldrb	r2, [r0, #0]
 8015f8c:	2a00      	cmp	r2, #0
 8015f8e:	d1f7      	bne.n	8015f80 <strchr+0x80>
 8015f90:	4770      	bx	lr
 8015f92:	0782      	lsls	r2, r0, #30
 8015f94:	d1f7      	bne.n	8015f86 <strchr+0x86>
 8015f96:	6802      	ldr	r2, [r0, #0]
 8015f98:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8015f9c:	ea23 0302 	bic.w	r3, r3, r2
 8015fa0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8015fa4:	d108      	bne.n	8015fb8 <strchr+0xb8>
 8015fa6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8015faa:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8015fae:	ea23 0302 	bic.w	r3, r3, r2
 8015fb2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8015fb6:	d0f6      	beq.n	8015fa6 <strchr+0xa6>
 8015fb8:	7803      	ldrb	r3, [r0, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d0e8      	beq.n	8015f90 <strchr+0x90>
 8015fbe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d1fb      	bne.n	8015fbe <strchr+0xbe>
 8015fc6:	4770      	bx	lr
 8015fc8:	4618      	mov	r0, r3
 8015fca:	bc70      	pop	{r4, r5, r6}
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop

08015fd0 <strcpy>:
 8015fd0:	ea80 0201 	eor.w	r2, r0, r1
 8015fd4:	4684      	mov	ip, r0
 8015fd6:	f012 0f03 	tst.w	r2, #3
 8015fda:	d14f      	bne.n	801607c <strcpy+0xac>
 8015fdc:	f011 0f03 	tst.w	r1, #3
 8015fe0:	d132      	bne.n	8016048 <strcpy+0x78>
 8015fe2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8015fe6:	f011 0f04 	tst.w	r1, #4
 8015fea:	f851 3b04 	ldr.w	r3, [r1], #4
 8015fee:	d00b      	beq.n	8016008 <strcpy+0x38>
 8015ff0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8015ff4:	439a      	bics	r2, r3
 8015ff6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8015ffa:	bf04      	itt	eq
 8015ffc:	f84c 3b04 	streq.w	r3, [ip], #4
 8016000:	f851 3b04 	ldreq.w	r3, [r1], #4
 8016004:	d116      	bne.n	8016034 <strcpy+0x64>
 8016006:	bf00      	nop
 8016008:	f851 4b04 	ldr.w	r4, [r1], #4
 801600c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8016010:	439a      	bics	r2, r3
 8016012:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8016016:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 801601a:	d10b      	bne.n	8016034 <strcpy+0x64>
 801601c:	f84c 3b04 	str.w	r3, [ip], #4
 8016020:	43a2      	bics	r2, r4
 8016022:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8016026:	bf04      	itt	eq
 8016028:	f851 3b04 	ldreq.w	r3, [r1], #4
 801602c:	f84c 4b04 	streq.w	r4, [ip], #4
 8016030:	d0ea      	beq.n	8016008 <strcpy+0x38>
 8016032:	4623      	mov	r3, r4
 8016034:	f80c 3b01 	strb.w	r3, [ip], #1
 8016038:	f013 0fff 	tst.w	r3, #255	; 0xff
 801603c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8016040:	d1f8      	bne.n	8016034 <strcpy+0x64>
 8016042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016046:	4770      	bx	lr
 8016048:	f011 0f01 	tst.w	r1, #1
 801604c:	d006      	beq.n	801605c <strcpy+0x8c>
 801604e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016052:	f80c 2b01 	strb.w	r2, [ip], #1
 8016056:	2a00      	cmp	r2, #0
 8016058:	bf08      	it	eq
 801605a:	4770      	bxeq	lr
 801605c:	f011 0f02 	tst.w	r1, #2
 8016060:	d0bf      	beq.n	8015fe2 <strcpy+0x12>
 8016062:	f831 2b02 	ldrh.w	r2, [r1], #2
 8016066:	f012 0fff 	tst.w	r2, #255	; 0xff
 801606a:	bf16      	itet	ne
 801606c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8016070:	f88c 2000 	strbeq.w	r2, [ip]
 8016074:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8016078:	d1b3      	bne.n	8015fe2 <strcpy+0x12>
 801607a:	4770      	bx	lr
 801607c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016080:	f80c 2b01 	strb.w	r2, [ip], #1
 8016084:	2a00      	cmp	r2, #0
 8016086:	d1f9      	bne.n	801607c <strcpy+0xac>
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop

0801608c <strncmp>:
 801608c:	b39a      	cbz	r2, 80160f6 <strncmp+0x6a>
 801608e:	b4f0      	push	{r4, r5, r6, r7}
 8016090:	ea40 0501 	orr.w	r5, r0, r1
 8016094:	07ad      	lsls	r5, r5, #30
 8016096:	4604      	mov	r4, r0
 8016098:	4603      	mov	r3, r0
 801609a:	4608      	mov	r0, r1
 801609c:	d028      	beq.n	80160f0 <strncmp+0x64>
 801609e:	7820      	ldrb	r0, [r4, #0]
 80160a0:	780e      	ldrb	r6, [r1, #0]
 80160a2:	4286      	cmp	r6, r0
 80160a4:	d129      	bne.n	80160fa <strncmp+0x6e>
 80160a6:	2a01      	cmp	r2, #1
 80160a8:	d02a      	beq.n	8016100 <strncmp+0x74>
 80160aa:	4625      	mov	r5, r4
 80160ac:	b150      	cbz	r0, 80160c4 <strncmp+0x38>
 80160ae:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80160b2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80160b6:	43eb      	mvns	r3, r5
 80160b8:	42b0      	cmp	r0, r6
 80160ba:	4413      	add	r3, r2
 80160bc:	d11d      	bne.n	80160fa <strncmp+0x6e>
 80160be:	18e3      	adds	r3, r4, r3
 80160c0:	d1f4      	bne.n	80160ac <strncmp+0x20>
 80160c2:	4618      	mov	r0, r3
 80160c4:	bcf0      	pop	{r4, r5, r6, r7}
 80160c6:	4770      	bx	lr
 80160c8:	6807      	ldr	r7, [r0, #0]
 80160ca:	461c      	mov	r4, r3
 80160cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80160d0:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 80160d4:	42bd      	cmp	r5, r7
 80160d6:	4601      	mov	r1, r0
 80160d8:	ea26 0605 	bic.w	r6, r6, r5
 80160dc:	f100 0004 	add.w	r0, r0, #4
 80160e0:	d1dd      	bne.n	801609e <strncmp+0x12>
 80160e2:	3a04      	subs	r2, #4
 80160e4:	461c      	mov	r4, r3
 80160e6:	4601      	mov	r1, r0
 80160e8:	d00a      	beq.n	8016100 <strncmp+0x74>
 80160ea:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80160ee:	d107      	bne.n	8016100 <strncmp+0x74>
 80160f0:	2a03      	cmp	r2, #3
 80160f2:	d8e9      	bhi.n	80160c8 <strncmp+0x3c>
 80160f4:	e7d3      	b.n	801609e <strncmp+0x12>
 80160f6:	4610      	mov	r0, r2
 80160f8:	4770      	bx	lr
 80160fa:	1b80      	subs	r0, r0, r6
 80160fc:	bcf0      	pop	{r4, r5, r6, r7}
 80160fe:	4770      	bx	lr
 8016100:	2000      	movs	r0, #0
 8016102:	bcf0      	pop	{r4, r5, r6, r7}
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop

08016108 <strnlen>:
 8016108:	b191      	cbz	r1, 8016130 <strnlen+0x28>
 801610a:	b410      	push	{r4}
 801610c:	4603      	mov	r3, r0
 801610e:	1844      	adds	r4, r0, r1
 8016110:	e001      	b.n	8016116 <strnlen+0xe>
 8016112:	42a3      	cmp	r3, r4
 8016114:	d008      	beq.n	8016128 <strnlen+0x20>
 8016116:	461a      	mov	r2, r3
 8016118:	3301      	adds	r3, #1
 801611a:	7811      	ldrb	r1, [r2, #0]
 801611c:	2900      	cmp	r1, #0
 801611e:	d1f8      	bne.n	8016112 <strnlen+0xa>
 8016120:	1a10      	subs	r0, r2, r0
 8016122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016126:	4770      	bx	lr
 8016128:	1a18      	subs	r0, r3, r0
 801612a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801612e:	4770      	bx	lr
 8016130:	4608      	mov	r0, r1
 8016132:	4770      	bx	lr

08016134 <two_way_long_needle>:
 8016134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016138:	2b01      	cmp	r3, #1
 801613a:	461d      	mov	r5, r3
 801613c:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8016140:	4681      	mov	r9, r0
 8016142:	460f      	mov	r7, r1
 8016144:	4690      	mov	r8, r2
 8016146:	f04f 0301 	mov.w	r3, #1
 801614a:	f240 8144 	bls.w	80163d6 <two_way_long_needle+0x2a2>
 801614e:	4619      	mov	r1, r3
 8016150:	469c      	mov	ip, r3
 8016152:	2400      	movs	r4, #0
 8016154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016158:	e006      	b.n	8016168 <two_way_long_needle+0x34>
 801615a:	eba3 0c00 	sub.w	ip, r3, r0
 801615e:	461c      	mov	r4, r3
 8016160:	2101      	movs	r1, #1
 8016162:	1863      	adds	r3, r4, r1
 8016164:	429d      	cmp	r5, r3
 8016166:	d910      	bls.n	801618a <two_way_long_needle+0x56>
 8016168:	eb08 0200 	add.w	r2, r8, r0
 801616c:	f818 6003 	ldrb.w	r6, [r8, r3]
 8016170:	5c52      	ldrb	r2, [r2, r1]
 8016172:	4296      	cmp	r6, r2
 8016174:	d3f1      	bcc.n	801615a <two_way_long_needle+0x26>
 8016176:	f000 8082 	beq.w	801627e <two_way_long_needle+0x14a>
 801617a:	f04f 0c01 	mov.w	ip, #1
 801617e:	4661      	mov	r1, ip
 8016180:	4620      	mov	r0, r4
 8016182:	4464      	add	r4, ip
 8016184:	1863      	adds	r3, r4, r1
 8016186:	429d      	cmp	r5, r3
 8016188:	d8ee      	bhi.n	8016168 <two_way_long_needle+0x34>
 801618a:	f8cd c008 	str.w	ip, [sp, #8]
 801618e:	f04f 0c01 	mov.w	ip, #1
 8016192:	4661      	mov	r1, ip
 8016194:	4663      	mov	r3, ip
 8016196:	2400      	movs	r4, #0
 8016198:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801619c:	e006      	b.n	80161ac <two_way_long_needle+0x78>
 801619e:	eba3 0c06 	sub.w	ip, r3, r6
 80161a2:	461c      	mov	r4, r3
 80161a4:	2101      	movs	r1, #1
 80161a6:	1863      	adds	r3, r4, r1
 80161a8:	429d      	cmp	r5, r3
 80161aa:	d90f      	bls.n	80161cc <two_way_long_needle+0x98>
 80161ac:	eb08 0201 	add.w	r2, r8, r1
 80161b0:	f818 e003 	ldrb.w	lr, [r8, r3]
 80161b4:	5d92      	ldrb	r2, [r2, r6]
 80161b6:	4596      	cmp	lr, r2
 80161b8:	d8f1      	bhi.n	801619e <two_way_long_needle+0x6a>
 80161ba:	d066      	beq.n	801628a <two_way_long_needle+0x156>
 80161bc:	f04f 0c01 	mov.w	ip, #1
 80161c0:	4661      	mov	r1, ip
 80161c2:	4626      	mov	r6, r4
 80161c4:	4464      	add	r4, ip
 80161c6:	1863      	adds	r3, r4, r1
 80161c8:	429d      	cmp	r5, r3
 80161ca:	d8ef      	bhi.n	80161ac <two_way_long_needle+0x78>
 80161cc:	3601      	adds	r6, #1
 80161ce:	f100 0b01 	add.w	fp, r0, #1
 80161d2:	455e      	cmp	r6, fp
 80161d4:	d302      	bcc.n	80161dc <two_way_long_needle+0xa8>
 80161d6:	f8cd c008 	str.w	ip, [sp, #8]
 80161da:	46b3      	mov	fp, r6
 80161dc:	ab05      	add	r3, sp, #20
 80161de:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 80161e2:	f843 5f04 	str.w	r5, [r3, #4]!
 80161e6:	4293      	cmp	r3, r2
 80161e8:	d1fb      	bne.n	80161e2 <two_way_long_needle+0xae>
 80161ea:	2d00      	cmp	r5, #0
 80161ec:	f000 80f7 	beq.w	80163de <two_way_long_needle+0x2aa>
 80161f0:	1e6c      	subs	r4, r5, #1
 80161f2:	ae06      	add	r6, sp, #24
 80161f4:	eb08 0004 	add.w	r0, r8, r4
 80161f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80161fc:	9601      	str	r6, [sp, #4]
 80161fe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8016202:	43d3      	mvns	r3, r2
 8016204:	442b      	add	r3, r5
 8016206:	4443      	add	r3, r8
 8016208:	4290      	cmp	r0, r2
 801620a:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 801620e:	d1f6      	bne.n	80161fe <two_way_long_needle+0xca>
 8016210:	9b02      	ldr	r3, [sp, #8]
 8016212:	465a      	mov	r2, fp
 8016214:	eb08 0103 	add.w	r1, r8, r3
 8016218:	4640      	mov	r0, r8
 801621a:	f7ff faa1 	bl	8015760 <memcmp>
 801621e:	2800      	cmp	r0, #0
 8016220:	f040 8082 	bne.w	8016328 <two_way_long_needle+0x1f4>
 8016224:	9b02      	ldr	r3, [sp, #8]
 8016226:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 801622a:	1aeb      	subs	r3, r5, r3
 801622c:	4682      	mov	sl, r0
 801622e:	4606      	mov	r6, r0
 8016230:	9205      	str	r2, [sp, #20]
 8016232:	9303      	str	r3, [sp, #12]
 8016234:	eb09 0e06 	add.w	lr, r9, r6
 8016238:	9a01      	ldr	r2, [sp, #4]
 801623a:	f81e 3004 	ldrb.w	r3, [lr, r4]
 801623e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016242:	b343      	cbz	r3, 8016296 <two_way_long_needle+0x162>
 8016244:	f1ba 0f00 	cmp.w	sl, #0
 8016248:	d004      	beq.n	8016254 <two_way_long_needle+0x120>
 801624a:	9a02      	ldr	r2, [sp, #8]
 801624c:	4293      	cmp	r3, r2
 801624e:	9a03      	ldr	r2, [sp, #12]
 8016250:	bf38      	it	cc
 8016252:	4613      	movcc	r3, r2
 8016254:	441e      	add	r6, r3
 8016256:	f04f 0a00 	mov.w	sl, #0
 801625a:	1b7b      	subs	r3, r7, r5
 801625c:	42b3      	cmp	r3, r6
 801625e:	d2e9      	bcs.n	8016234 <two_way_long_needle+0x100>
 8016260:	eb09 0007 	add.w	r0, r9, r7
 8016264:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8016268:	f7ff ff4e 	bl	8016108 <strnlen>
 801626c:	4407      	add	r7, r0
 801626e:	1b7b      	subs	r3, r7, r5
 8016270:	42b3      	cmp	r3, r6
 8016272:	d2df      	bcs.n	8016234 <two_way_long_needle+0x100>
 8016274:	2000      	movs	r0, #0
 8016276:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 801627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801627e:	458c      	cmp	ip, r1
 8016280:	bf12      	itee	ne
 8016282:	3101      	addne	r1, #1
 8016284:	4464      	addeq	r4, ip
 8016286:	2101      	moveq	r1, #1
 8016288:	e76b      	b.n	8016162 <two_way_long_needle+0x2e>
 801628a:	4561      	cmp	r1, ip
 801628c:	bf0a      	itet	eq
 801628e:	1864      	addeq	r4, r4, r1
 8016290:	3101      	addne	r1, #1
 8016292:	2101      	moveq	r1, #1
 8016294:	e787      	b.n	80161a6 <two_way_long_needle+0x72>
 8016296:	45d3      	cmp	fp, sl
 8016298:	465b      	mov	r3, fp
 801629a:	bf38      	it	cc
 801629c:	4653      	movcc	r3, sl
 801629e:	42a3      	cmp	r3, r4
 80162a0:	d211      	bcs.n	80162c6 <two_way_long_needle+0x192>
 80162a2:	1e59      	subs	r1, r3, #1
 80162a4:	199a      	adds	r2, r3, r6
 80162a6:	4441      	add	r1, r8
 80162a8:	444a      	add	r2, r9
 80162aa:	e002      	b.n	80162b2 <two_way_long_needle+0x17e>
 80162ac:	3301      	adds	r3, #1
 80162ae:	42a3      	cmp	r3, r4
 80162b0:	d209      	bcs.n	80162c6 <two_way_long_needle+0x192>
 80162b2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80162b6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80162ba:	4584      	cmp	ip, r0
 80162bc:	d0f6      	beq.n	80162ac <two_way_long_needle+0x178>
 80162be:	f1cb 0201 	rsb	r2, fp, #1
 80162c2:	4416      	add	r6, r2
 80162c4:	e7c6      	b.n	8016254 <two_way_long_needle+0x120>
 80162c6:	45d3      	cmp	fp, sl
 80162c8:	9b05      	ldr	r3, [sp, #20]
 80162ca:	f240 8082 	bls.w	80163d2 <two_way_long_needle+0x29e>
 80162ce:	eb0b 0206 	add.w	r2, fp, r6
 80162d2:	444a      	add	r2, r9
 80162d4:	eb08 010b 	add.w	r1, r8, fp
 80162d8:	f8cd b010 	str.w	fp, [sp, #16]
 80162dc:	e002      	b.n	80162e4 <two_way_long_needle+0x1b0>
 80162de:	4553      	cmp	r3, sl
 80162e0:	d016      	beq.n	8016310 <two_way_long_needle+0x1dc>
 80162e2:	4603      	mov	r3, r0
 80162e4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 80162e8:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 80162ec:	4584      	cmp	ip, r0
 80162ee:	f103 0b01 	add.w	fp, r3, #1
 80162f2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80162f6:	d0f2      	beq.n	80162de <two_way_long_needle+0x1aa>
 80162f8:	465b      	mov	r3, fp
 80162fa:	f8dd b010 	ldr.w	fp, [sp, #16]
 80162fe:	f10a 0a01 	add.w	sl, sl, #1
 8016302:	459a      	cmp	sl, r3
 8016304:	d80b      	bhi.n	801631e <two_way_long_needle+0x1ea>
 8016306:	9b02      	ldr	r3, [sp, #8]
 8016308:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801630c:	441e      	add	r6, r3
 801630e:	e7a4      	b.n	801625a <two_way_long_needle+0x126>
 8016310:	4653      	mov	r3, sl
 8016312:	f10a 0a01 	add.w	sl, sl, #1
 8016316:	459a      	cmp	sl, r3
 8016318:	f8dd b010 	ldr.w	fp, [sp, #16]
 801631c:	d9f3      	bls.n	8016306 <two_way_long_needle+0x1d2>
 801631e:	4670      	mov	r0, lr
 8016320:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8016324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016328:	eba5 030b 	sub.w	r3, r5, fp
 801632c:	455b      	cmp	r3, fp
 801632e:	bf38      	it	cc
 8016330:	465b      	movcc	r3, fp
 8016332:	3301      	adds	r3, #1
 8016334:	9304      	str	r3, [sp, #16]
 8016336:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	f1cb 0301 	rsb	r3, fp, #1
 8016340:	2600      	movs	r6, #0
 8016342:	9303      	str	r3, [sp, #12]
 8016344:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 8016348:	eb09 0106 	add.w	r1, r9, r6
 801634c:	9a01      	ldr	r2, [sp, #4]
 801634e:	5d0b      	ldrb	r3, [r1, r4]
 8016350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016354:	b16b      	cbz	r3, 8016372 <two_way_long_needle+0x23e>
 8016356:	441e      	add	r6, r3
 8016358:	1b7b      	subs	r3, r7, r5
 801635a:	429e      	cmp	r6, r3
 801635c:	d9f4      	bls.n	8016348 <two_way_long_needle+0x214>
 801635e:	eb09 0007 	add.w	r0, r9, r7
 8016362:	4651      	mov	r1, sl
 8016364:	f7ff fed0 	bl	8016108 <strnlen>
 8016368:	4407      	add	r7, r0
 801636a:	1b7b      	subs	r3, r7, r5
 801636c:	429e      	cmp	r6, r3
 801636e:	d9eb      	bls.n	8016348 <two_way_long_needle+0x214>
 8016370:	e780      	b.n	8016274 <two_way_long_needle+0x140>
 8016372:	45a3      	cmp	fp, r4
 8016374:	d214      	bcs.n	80163a0 <two_way_long_needle+0x26c>
 8016376:	9b02      	ldr	r3, [sp, #8]
 8016378:	eb0b 0206 	add.w	r2, fp, r6
 801637c:	eb08 0c03 	add.w	ip, r8, r3
 8016380:	444a      	add	r2, r9
 8016382:	465b      	mov	r3, fp
 8016384:	e002      	b.n	801638c <two_way_long_needle+0x258>
 8016386:	3301      	adds	r3, #1
 8016388:	42a3      	cmp	r3, r4
 801638a:	d209      	bcs.n	80163a0 <two_way_long_needle+0x26c>
 801638c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8016390:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8016394:	4586      	cmp	lr, r0
 8016396:	d0f6      	beq.n	8016386 <two_way_long_needle+0x252>
 8016398:	9a03      	ldr	r2, [sp, #12]
 801639a:	4416      	add	r6, r2
 801639c:	441e      	add	r6, r3
 801639e:	e7db      	b.n	8016358 <two_way_long_needle+0x224>
 80163a0:	f1bb 0f00 	cmp.w	fp, #0
 80163a4:	d010      	beq.n	80163c8 <two_way_long_needle+0x294>
 80163a6:	eb0b 0006 	add.w	r0, fp, r6
 80163aa:	4448      	add	r0, r9
 80163ac:	eb08 020b 	add.w	r2, r8, fp
 80163b0:	e001      	b.n	80163b6 <two_way_long_needle+0x282>
 80163b2:	4543      	cmp	r3, r8
 80163b4:	d008      	beq.n	80163c8 <two_way_long_needle+0x294>
 80163b6:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
 80163ba:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
 80163be:	45e6      	cmp	lr, ip
 80163c0:	4613      	mov	r3, r2
 80163c2:	d0f6      	beq.n	80163b2 <two_way_long_needle+0x27e>
 80163c4:	9b04      	ldr	r3, [sp, #16]
 80163c6:	e7c6      	b.n	8016356 <two_way_long_needle+0x222>
 80163c8:	4608      	mov	r0, r1
 80163ca:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 80163ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163d2:	465b      	mov	r3, fp
 80163d4:	e793      	b.n	80162fe <two_way_long_needle+0x1ca>
 80163d6:	9302      	str	r3, [sp, #8]
 80163d8:	f04f 0b00 	mov.w	fp, #0
 80163dc:	e6fe      	b.n	80161dc <two_way_long_needle+0xa8>
 80163de:	ab06      	add	r3, sp, #24
 80163e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80163e4:	9301      	str	r3, [sp, #4]
 80163e6:	e713      	b.n	8016210 <two_way_long_needle+0xdc>

080163e8 <strstr>:
 80163e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ec:	460e      	mov	r6, r1
 80163ee:	7809      	ldrb	r1, [r1, #0]
 80163f0:	b090      	sub	sp, #64	; 0x40
 80163f2:	4604      	mov	r4, r0
 80163f4:	2900      	cmp	r1, #0
 80163f6:	d050      	beq.n	801649a <strstr+0xb2>
 80163f8:	7872      	ldrb	r2, [r6, #1]
 80163fa:	2a00      	cmp	r2, #0
 80163fc:	f000 8082 	beq.w	8016504 <strstr+0x11c>
 8016400:	78b3      	ldrb	r3, [r6, #2]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d04d      	beq.n	80164a2 <strstr+0xba>
 8016406:	78f0      	ldrb	r0, [r6, #3]
 8016408:	2800      	cmp	r0, #0
 801640a:	f000 8082 	beq.w	8016512 <strstr+0x12a>
 801640e:	7933      	ldrb	r3, [r6, #4]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d054      	beq.n	80164be <strstr+0xd6>
 8016414:	4630      	mov	r0, r6
 8016416:	f7ea f933 	bl	8000680 <strlen>
 801641a:	4607      	mov	r7, r0
 801641c:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 8016420:	4620      	mov	r0, r4
 8016422:	f7ff fe71 	bl	8016108 <strnlen>
 8016426:	4287      	cmp	r7, r0
 8016428:	d867      	bhi.n	80164fa <strstr+0x112>
 801642a:	2ffe      	cmp	r7, #254	; 0xfe
 801642c:	f200 8085 	bhi.w	801653a <strstr+0x152>
 8016430:	eba0 0807 	sub.w	r8, r0, r7
 8016434:	2240      	movs	r2, #64	; 0x40
 8016436:	1c79      	adds	r1, r7, #1
 8016438:	4668      	mov	r0, sp
 801643a:	44a0      	add	r8, r4
 801643c:	f7ff fa2c 	bl	8015898 <memset>
 8016440:	b177      	cbz	r7, 8016460 <strstr+0x78>
 8016442:	1e72      	subs	r2, r6, #1
 8016444:	19d5      	adds	r5, r2, r7
 8016446:	b2f8      	uxtb	r0, r7
 8016448:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801644c:	a910      	add	r1, sp, #64	; 0x40
 801644e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016452:	440b      	add	r3, r1
 8016454:	1ab1      	subs	r1, r6, r2
 8016456:	4401      	add	r1, r0
 8016458:	42aa      	cmp	r2, r5
 801645a:	f803 1c40 	strb.w	r1, [r3, #-64]
 801645e:	d1f3      	bne.n	8016448 <strstr+0x60>
 8016460:	3c01      	subs	r4, #1
 8016462:	aa10      	add	r2, sp, #64	; 0x40
 8016464:	5de3      	ldrb	r3, [r4, r7]
 8016466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801646a:	4413      	add	r3, r2
 801646c:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 8016470:	4404      	add	r4, r0
 8016472:	45a0      	cmp	r8, r4
 8016474:	d203      	bcs.n	801647e <strstr+0x96>
 8016476:	e034      	b.n	80164e2 <strstr+0xfa>
 8016478:	442c      	add	r4, r5
 801647a:	45a0      	cmp	r8, r4
 801647c:	d331      	bcc.n	80164e2 <strstr+0xfa>
 801647e:	5de5      	ldrb	r5, [r4, r7]
 8016480:	ab10      	add	r3, sp, #64	; 0x40
 8016482:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8016486:	441d      	add	r5, r3
 8016488:	463a      	mov	r2, r7
 801648a:	4631      	mov	r1, r6
 801648c:	4620      	mov	r0, r4
 801648e:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 8016492:	f7ff f965 	bl	8015760 <memcmp>
 8016496:	2800      	cmp	r0, #0
 8016498:	d1ee      	bne.n	8016478 <strstr+0x90>
 801649a:	4620      	mov	r0, r4
 801649c:	b010      	add	sp, #64	; 0x40
 801649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80164a6:	7802      	ldrb	r2, [r0, #0]
 80164a8:	e000      	b.n	80164ac <strstr+0xc4>
 80164aa:	4604      	mov	r4, r0
 80164ac:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80164b0:	1c60      	adds	r0, r4, #1
 80164b2:	b312      	cbz	r2, 80164fa <strstr+0x112>
 80164b4:	4299      	cmp	r1, r3
 80164b6:	7862      	ldrb	r2, [r4, #1]
 80164b8:	d1f7      	bne.n	80164aa <strstr+0xc2>
 80164ba:	3c01      	subs	r4, #1
 80164bc:	e7ed      	b.n	801649a <strstr+0xb2>
 80164be:	7822      	ldrb	r2, [r4, #0]
 80164c0:	b1da      	cbz	r2, 80164fa <strstr+0x112>
 80164c2:	6831      	ldr	r1, [r6, #0]
 80164c4:	ba09      	rev	r1, r1
 80164c6:	e001      	b.n	80164cc <strstr+0xe4>
 80164c8:	4299      	cmp	r1, r3
 80164ca:	d008      	beq.n	80164de <strstr+0xf6>
 80164cc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80164d0:	4620      	mov	r0, r4
 80164d2:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	d1f6      	bne.n	80164c8 <strstr+0xe0>
 80164da:	4299      	cmp	r1, r3
 80164dc:	d10d      	bne.n	80164fa <strstr+0x112>
 80164de:	1ec4      	subs	r4, r0, #3
 80164e0:	e7db      	b.n	801649a <strstr+0xb2>
 80164e2:	f818 3007 	ldrb.w	r3, [r8, r7]
 80164e6:	eb08 0007 	add.w	r0, r8, r7
 80164ea:	b133      	cbz	r3, 80164fa <strstr+0x112>
 80164ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80164f0:	f7ff fe0a 	bl	8016108 <strnlen>
 80164f4:	4480      	add	r8, r0
 80164f6:	4544      	cmp	r4, r8
 80164f8:	d9b2      	bls.n	8016460 <strstr+0x78>
 80164fa:	2400      	movs	r4, #0
 80164fc:	4620      	mov	r0, r4
 80164fe:	b010      	add	sp, #64	; 0x40
 8016500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016504:	f7ff fcfc 	bl	8015f00 <strchr>
 8016508:	4604      	mov	r4, r0
 801650a:	4620      	mov	r0, r4
 801650c:	b010      	add	sp, #64	; 0x40
 801650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016512:	0412      	lsls	r2, r2, #16
 8016514:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016518:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 801651c:	7822      	ldrb	r2, [r4, #0]
 801651e:	e000      	b.n	8016522 <strstr+0x13a>
 8016520:	462c      	mov	r4, r5
 8016522:	ea42 0100 	orr.w	r1, r2, r0
 8016526:	1c65      	adds	r5, r4, #1
 8016528:	0208      	lsls	r0, r1, #8
 801652a:	2a00      	cmp	r2, #0
 801652c:	d0e5      	beq.n	80164fa <strstr+0x112>
 801652e:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8016532:	7862      	ldrb	r2, [r4, #1]
 8016534:	d1f4      	bne.n	8016520 <strstr+0x138>
 8016536:	3c02      	subs	r4, #2
 8016538:	e7af      	b.n	801649a <strstr+0xb2>
 801653a:	4601      	mov	r1, r0
 801653c:	463b      	mov	r3, r7
 801653e:	4620      	mov	r0, r4
 8016540:	4632      	mov	r2, r6
 8016542:	f7ff fdf7 	bl	8016134 <two_way_long_needle>
 8016546:	4604      	mov	r4, r0
 8016548:	e7a7      	b.n	801649a <strstr+0xb2>
 801654a:	bf00      	nop

0801654c <_strtoul_l.isra.0>:
 801654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016550:	4d4b      	ldr	r5, [pc, #300]	; (8016680 <_strtoul_l.isra.0+0x134>)
 8016552:	4686      	mov	lr, r0
 8016554:	468c      	mov	ip, r1
 8016556:	4660      	mov	r0, ip
 8016558:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801655c:	5d2e      	ldrb	r6, [r5, r4]
 801655e:	f016 0608 	ands.w	r6, r6, #8
 8016562:	d1f8      	bne.n	8016556 <_strtoul_l.isra.0+0xa>
 8016564:	2c2d      	cmp	r4, #45	; 0x2d
 8016566:	d057      	beq.n	8016618 <_strtoul_l.isra.0+0xcc>
 8016568:	2c2b      	cmp	r4, #43	; 0x2b
 801656a:	bf0a      	itet	eq
 801656c:	f89c 5000 	ldrbeq.w	r5, [ip]
 8016570:	4625      	movne	r5, r4
 8016572:	f100 0c02 	addeq.w	ip, r0, #2
 8016576:	b15b      	cbz	r3, 8016590 <_strtoul_l.isra.0+0x44>
 8016578:	2b10      	cmp	r3, #16
 801657a:	d053      	beq.n	8016624 <_strtoul_l.isra.0+0xd8>
 801657c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016580:	fbb8 f8f3 	udiv	r8, r8, r3
 8016584:	fb03 fa08 	mul.w	sl, r3, r8
 8016588:	ea6f 0a0a 	mvn.w	sl, sl
 801658c:	4699      	mov	r9, r3
 801658e:	e007      	b.n	80165a0 <_strtoul_l.isra.0+0x54>
 8016590:	2d30      	cmp	r5, #48	; 0x30
 8016592:	d05b      	beq.n	801664c <_strtoul_l.isra.0+0x100>
 8016594:	230a      	movs	r3, #10
 8016596:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8016684 <_strtoul_l.isra.0+0x138>
 801659a:	4699      	mov	r9, r3
 801659c:	f04f 0a05 	mov.w	sl, #5
 80165a0:	2700      	movs	r7, #0
 80165a2:	4638      	mov	r0, r7
 80165a4:	e007      	b.n	80165b6 <_strtoul_l.isra.0+0x6a>
 80165a6:	4540      	cmp	r0, r8
 80165a8:	d813      	bhi.n	80165d2 <_strtoul_l.isra.0+0x86>
 80165aa:	d026      	beq.n	80165fa <_strtoul_l.isra.0+0xae>
 80165ac:	fb09 4000 	mla	r0, r9, r0, r4
 80165b0:	2701      	movs	r7, #1
 80165b2:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80165b6:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
 80165ba:	2c09      	cmp	r4, #9
 80165bc:	d905      	bls.n	80165ca <_strtoul_l.isra.0+0x7e>
 80165be:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
 80165c2:	2c19      	cmp	r4, #25
 80165c4:	d808      	bhi.n	80165d8 <_strtoul_l.isra.0+0x8c>
 80165c6:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
 80165ca:	42a3      	cmp	r3, r4
 80165cc:	dd0c      	ble.n	80165e8 <_strtoul_l.isra.0+0x9c>
 80165ce:	2f00      	cmp	r7, #0
 80165d0:	dae9      	bge.n	80165a6 <_strtoul_l.isra.0+0x5a>
 80165d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80165d6:	e7ec      	b.n	80165b2 <_strtoul_l.isra.0+0x66>
 80165d8:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
 80165dc:	2c19      	cmp	r4, #25
 80165de:	d803      	bhi.n	80165e8 <_strtoul_l.isra.0+0x9c>
 80165e0:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
 80165e4:	42a3      	cmp	r3, r4
 80165e6:	dcf2      	bgt.n	80165ce <_strtoul_l.isra.0+0x82>
 80165e8:	2f00      	cmp	r7, #0
 80165ea:	db0b      	blt.n	8016604 <_strtoul_l.isra.0+0xb8>
 80165ec:	b106      	cbz	r6, 80165f0 <_strtoul_l.isra.0+0xa4>
 80165ee:	4240      	negs	r0, r0
 80165f0:	b10a      	cbz	r2, 80165f6 <_strtoul_l.isra.0+0xaa>
 80165f2:	b977      	cbnz	r7, 8016612 <_strtoul_l.isra.0+0xc6>
 80165f4:	6011      	str	r1, [r2, #0]
 80165f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165fa:	4554      	cmp	r4, sl
 80165fc:	ddd6      	ble.n	80165ac <_strtoul_l.isra.0+0x60>
 80165fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016602:	e7d6      	b.n	80165b2 <_strtoul_l.isra.0+0x66>
 8016604:	2322      	movs	r3, #34	; 0x22
 8016606:	f8ce 3000 	str.w	r3, [lr]
 801660a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801660e:	2a00      	cmp	r2, #0
 8016610:	d0f1      	beq.n	80165f6 <_strtoul_l.isra.0+0xaa>
 8016612:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8016616:	e7ed      	b.n	80165f4 <_strtoul_l.isra.0+0xa8>
 8016618:	f89c 5000 	ldrb.w	r5, [ip]
 801661c:	2601      	movs	r6, #1
 801661e:	f100 0c02 	add.w	ip, r0, #2
 8016622:	e7a8      	b.n	8016576 <_strtoul_l.isra.0+0x2a>
 8016624:	2d30      	cmp	r5, #48	; 0x30
 8016626:	d124      	bne.n	8016672 <_strtoul_l.isra.0+0x126>
 8016628:	f89c 0000 	ldrb.w	r0, [ip]
 801662c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016630:	2858      	cmp	r0, #88	; 0x58
 8016632:	d118      	bne.n	8016666 <_strtoul_l.isra.0+0x11a>
 8016634:	f04f 0910 	mov.w	r9, #16
 8016638:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801663c:	464b      	mov	r3, r9
 801663e:	f04f 0a0f 	mov.w	sl, #15
 8016642:	f10c 0c02 	add.w	ip, ip, #2
 8016646:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 801664a:	e7a9      	b.n	80165a0 <_strtoul_l.isra.0+0x54>
 801664c:	f89c 3000 	ldrb.w	r3, [ip]
 8016650:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016654:	2b58      	cmp	r3, #88	; 0x58
 8016656:	d0ed      	beq.n	8016634 <_strtoul_l.isra.0+0xe8>
 8016658:	2308      	movs	r3, #8
 801665a:	4699      	mov	r9, r3
 801665c:	f04f 0a07 	mov.w	sl, #7
 8016660:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8016664:	e79c      	b.n	80165a0 <_strtoul_l.isra.0+0x54>
 8016666:	4699      	mov	r9, r3
 8016668:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 801666c:	f04f 0a0f 	mov.w	sl, #15
 8016670:	e796      	b.n	80165a0 <_strtoul_l.isra.0+0x54>
 8016672:	f04f 0a0f 	mov.w	sl, #15
 8016676:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 801667a:	4699      	mov	r9, r3
 801667c:	e790      	b.n	80165a0 <_strtoul_l.isra.0+0x54>
 801667e:	bf00      	nop
 8016680:	0802041d 	.word	0x0802041d
 8016684:	19999999 	.word	0x19999999

08016688 <strtoul>:
 8016688:	b430      	push	{r4, r5}
 801668a:	4c04      	ldr	r4, [pc, #16]	; (801669c <strtoul+0x14>)
 801668c:	460d      	mov	r5, r1
 801668e:	4613      	mov	r3, r2
 8016690:	4601      	mov	r1, r0
 8016692:	462a      	mov	r2, r5
 8016694:	6820      	ldr	r0, [r4, #0]
 8016696:	bc30      	pop	{r4, r5}
 8016698:	f7ff bf58 	b.w	801654c <_strtoul_l.isra.0>
 801669c:	20000208 	.word	0x20000208

080166a0 <_svfprintf_r>:
 80166a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a4:	ed2d 8b06 	vpush	{d8-d10}
 80166a8:	b0d3      	sub	sp, #332	; 0x14c
 80166aa:	468b      	mov	fp, r1
 80166ac:	4617      	mov	r7, r2
 80166ae:	930c      	str	r3, [sp, #48]	; 0x30
 80166b0:	4681      	mov	r9, r0
 80166b2:	f005 f8e9 	bl	801b888 <_localeconv_r>
 80166b6:	6803      	ldr	r3, [r0, #0]
 80166b8:	9315      	str	r3, [sp, #84]	; 0x54
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7e9 ffe0 	bl	8000680 <strlen>
 80166c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80166c4:	9014      	str	r0, [sp, #80]	; 0x50
 80166c6:	061e      	lsls	r6, r3, #24
 80166c8:	d504      	bpl.n	80166d4 <_svfprintf_r+0x34>
 80166ca:	f8db 3010 	ldr.w	r3, [fp, #16]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	f001 8018 	beq.w	8017704 <_svfprintf_r+0x1064>
 80166d4:	2300      	movs	r3, #0
 80166d6:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80168a8 <_svfprintf_r+0x208>
 80166da:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 80166de:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80166e2:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80166e6:	9310      	str	r3, [sp, #64]	; 0x40
 80166e8:	9316      	str	r3, [sp, #88]	; 0x58
 80166ea:	9308      	str	r3, [sp, #32]
 80166ec:	ab29      	add	r3, sp, #164	; 0xa4
 80166ee:	9326      	str	r3, [sp, #152]	; 0x98
 80166f0:	4698      	mov	r8, r3
 80166f2:	783b      	ldrb	r3, [r7, #0]
 80166f4:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80166f8:	ee08 ba10 	vmov	s16, fp
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	f000 8159 	beq.w	80169b4 <_svfprintf_r+0x314>
 8016702:	463c      	mov	r4, r7
 8016704:	e004      	b.n	8016710 <_svfprintf_r+0x70>
 8016706:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801670a:	2b00      	cmp	r3, #0
 801670c:	f000 80a8 	beq.w	8016860 <_svfprintf_r+0x1c0>
 8016710:	2b25      	cmp	r3, #37	; 0x25
 8016712:	d1f8      	bne.n	8016706 <_svfprintf_r+0x66>
 8016714:	1be5      	subs	r5, r4, r7
 8016716:	f040 80a6 	bne.w	8016866 <_svfprintf_r+0x1c6>
 801671a:	7823      	ldrb	r3, [r4, #0]
 801671c:	2b00      	cmp	r3, #0
 801671e:	f000 8149 	beq.w	80169b4 <_svfprintf_r+0x314>
 8016722:	2300      	movs	r3, #0
 8016724:	9309      	str	r3, [sp, #36]	; 0x24
 8016726:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801672a:	9306      	str	r3, [sp, #24]
 801672c:	1c66      	adds	r6, r4, #1
 801672e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016732:	7864      	ldrb	r4, [r4, #1]
 8016734:	9307      	str	r3, [sp, #28]
 8016736:	252b      	movs	r5, #43	; 0x2b
 8016738:	f04f 0a20 	mov.w	sl, #32
 801673c:	3601      	adds	r6, #1
 801673e:	f1a4 0320 	sub.w	r3, r4, #32
 8016742:	2b5a      	cmp	r3, #90	; 0x5a
 8016744:	f200 80b4 	bhi.w	80168b0 <_svfprintf_r+0x210>
 8016748:	e8df f013 	tbh	[pc, r3, lsl #1]
 801674c:	00b20294 	.word	0x00b20294
 8016750:	028e00b2 	.word	0x028e00b2
 8016754:	00b200b2 	.word	0x00b200b2
 8016758:	006a00b2 	.word	0x006a00b2
 801675c:	00b200b2 	.word	0x00b200b2
 8016760:	020301f2 	.word	0x020301f2
 8016764:	01fd00b2 	.word	0x01fd00b2
 8016768:	00b202a3 	.word	0x00b202a3
 801676c:	005b029d 	.word	0x005b029d
 8016770:	005b005b 	.word	0x005b005b
 8016774:	005b005b 	.word	0x005b005b
 8016778:	005b005b 	.word	0x005b005b
 801677c:	005b005b 	.word	0x005b005b
 8016780:	00b200b2 	.word	0x00b200b2
 8016784:	00b200b2 	.word	0x00b200b2
 8016788:	00b200b2 	.word	0x00b200b2
 801678c:	014900b2 	.word	0x014900b2
 8016790:	019500b2 	.word	0x019500b2
 8016794:	014902c6 	.word	0x014902c6
 8016798:	01490149 	.word	0x01490149
 801679c:	00b200b2 	.word	0x00b200b2
 80167a0:	00b200b2 	.word	0x00b200b2
 80167a4:	00b20288 	.word	0x00b20288
 80167a8:	020700b2 	.word	0x020700b2
 80167ac:	00b200b2 	.word	0x00b200b2
 80167b0:	01a300b2 	.word	0x01a300b2
 80167b4:	027800b2 	.word	0x027800b2
 80167b8:	00b200b2 	.word	0x00b200b2
 80167bc:	00b207bc 	.word	0x00b207bc
 80167c0:	00b200b2 	.word	0x00b200b2
 80167c4:	00b200b2 	.word	0x00b200b2
 80167c8:	00b200b2 	.word	0x00b200b2
 80167cc:	014900b2 	.word	0x014900b2
 80167d0:	019500b2 	.word	0x019500b2
 80167d4:	014901c9 	.word	0x014901c9
 80167d8:	01490149 	.word	0x01490149
 80167dc:	01c9023a 	.word	0x01c9023a
 80167e0:	00b20084 	.word	0x00b20084
 80167e4:	00b2025b 	.word	0x00b2025b
 80167e8:	07b50243 	.word	0x07b50243
 80167ec:	00840264 	.word	0x00840264
 80167f0:	01a300b2 	.word	0x01a300b2
 80167f4:	07b80082 	.word	0x07b80082
 80167f8:	00b200b2 	.word	0x00b200b2
 80167fc:	00b20793 	.word	0x00b20793
 8016800:	0082      	.short	0x0082
 8016802:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016806:	2200      	movs	r2, #0
 8016808:	f816 4b01 	ldrb.w	r4, [r6], #1
 801680c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016810:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016814:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016818:	2b09      	cmp	r3, #9
 801681a:	d9f5      	bls.n	8016808 <_svfprintf_r+0x168>
 801681c:	9209      	str	r2, [sp, #36]	; 0x24
 801681e:	e78e      	b.n	801673e <_svfprintf_r+0x9e>
 8016820:	4648      	mov	r0, r9
 8016822:	f005 f831 	bl	801b888 <_localeconv_r>
 8016826:	6843      	ldr	r3, [r0, #4]
 8016828:	9319      	str	r3, [sp, #100]	; 0x64
 801682a:	4618      	mov	r0, r3
 801682c:	f7e9 ff28 	bl	8000680 <strlen>
 8016830:	4603      	mov	r3, r0
 8016832:	4648      	mov	r0, r9
 8016834:	461c      	mov	r4, r3
 8016836:	931a      	str	r3, [sp, #104]	; 0x68
 8016838:	f005 f826 	bl	801b888 <_localeconv_r>
 801683c:	6882      	ldr	r2, [r0, #8]
 801683e:	9217      	str	r2, [sp, #92]	; 0x5c
 8016840:	b134      	cbz	r4, 8016850 <_svfprintf_r+0x1b0>
 8016842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016844:	b123      	cbz	r3, 8016850 <_svfprintf_r+0x1b0>
 8016846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	2b00      	cmp	r3, #0
 801684c:	f041 8191 	bne.w	8017b72 <_svfprintf_r+0x14d2>
 8016850:	7834      	ldrb	r4, [r6, #0]
 8016852:	e773      	b.n	801673c <_svfprintf_r+0x9c>
 8016854:	9b06      	ldr	r3, [sp, #24]
 8016856:	7834      	ldrb	r4, [r6, #0]
 8016858:	f043 0320 	orr.w	r3, r3, #32
 801685c:	9306      	str	r3, [sp, #24]
 801685e:	e76d      	b.n	801673c <_svfprintf_r+0x9c>
 8016860:	1be5      	subs	r5, r4, r7
 8016862:	f000 80a7 	beq.w	80169b4 <_svfprintf_r+0x314>
 8016866:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801686a:	3301      	adds	r3, #1
 801686c:	442a      	add	r2, r5
 801686e:	2b07      	cmp	r3, #7
 8016870:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016874:	f8c8 7000 	str.w	r7, [r8]
 8016878:	f8c8 5004 	str.w	r5, [r8, #4]
 801687c:	dc06      	bgt.n	801688c <_svfprintf_r+0x1ec>
 801687e:	f108 0808 	add.w	r8, r8, #8
 8016882:	9a08      	ldr	r2, [sp, #32]
 8016884:	7823      	ldrb	r3, [r4, #0]
 8016886:	442a      	add	r2, r5
 8016888:	9208      	str	r2, [sp, #32]
 801688a:	e747      	b.n	801671c <_svfprintf_r+0x7c>
 801688c:	ee18 1a10 	vmov	r1, s16
 8016890:	aa26      	add	r2, sp, #152	; 0x98
 8016892:	4648      	mov	r0, r9
 8016894:	f005 fca6 	bl	801c1e4 <__ssprint_r>
 8016898:	2800      	cmp	r0, #0
 801689a:	f041 83ed 	bne.w	8018078 <_svfprintf_r+0x19d8>
 801689e:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80168a2:	e7ee      	b.n	8016882 <_svfprintf_r+0x1e2>
 80168a4:	f3af 8000 	nop.w
	...
 80168b0:	960d      	str	r6, [sp, #52]	; 0x34
 80168b2:	2c00      	cmp	r4, #0
 80168b4:	d07e      	beq.n	80169b4 <_svfprintf_r+0x314>
 80168b6:	2300      	movs	r3, #0
 80168b8:	461a      	mov	r2, r3
 80168ba:	f04f 0a01 	mov.w	sl, #1
 80168be:	f88d 40e4 	strb.w	r4, [sp, #228]	; 0xe4
 80168c2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80168c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80168c8:	9207      	str	r2, [sp, #28]
 80168ca:	920e      	str	r2, [sp, #56]	; 0x38
 80168cc:	9211      	str	r2, [sp, #68]	; 0x44
 80168ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80168d0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80168d4:	af39      	add	r7, sp, #228	; 0xe4
 80168d6:	9b06      	ldr	r3, [sp, #24]
 80168d8:	9906      	ldr	r1, [sp, #24]
 80168da:	f013 0302 	ands.w	r3, r3, #2
 80168de:	bf18      	it	ne
 80168e0:	f10a 0a02 	addne.w	sl, sl, #2
 80168e4:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
 80168e8:	d105      	bne.n	80168f6 <_svfprintf_r+0x256>
 80168ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168ec:	eba1 060a 	sub.w	r6, r1, sl
 80168f0:	2e00      	cmp	r6, #0
 80168f2:	f300 83b5 	bgt.w	8017060 <_svfprintf_r+0x9c0>
 80168f6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80168f8:	b172      	cbz	r2, 8016918 <_svfprintf_r+0x278>
 80168fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80168fc:	3201      	adds	r2, #1
 80168fe:	3501      	adds	r5, #1
 8016900:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8016904:	2101      	movs	r1, #1
 8016906:	2a07      	cmp	r2, #7
 8016908:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801690c:	e9c8 0100 	strd	r0, r1, [r8]
 8016910:	f300 83e5 	bgt.w	80170de <_svfprintf_r+0xa3e>
 8016914:	f108 0808 	add.w	r8, r8, #8
 8016918:	b16b      	cbz	r3, 8016936 <_svfprintf_r+0x296>
 801691a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801691c:	3301      	adds	r3, #1
 801691e:	3502      	adds	r5, #2
 8016920:	a91f      	add	r1, sp, #124	; 0x7c
 8016922:	2202      	movs	r2, #2
 8016924:	2b07      	cmp	r3, #7
 8016926:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801692a:	e9c8 1200 	strd	r1, r2, [r8]
 801692e:	f300 83e5 	bgt.w	80170fc <_svfprintf_r+0xa5c>
 8016932:	f108 0808 	add.w	r8, r8, #8
 8016936:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 801693a:	f000 829b 	beq.w	8016e74 <_svfprintf_r+0x7d4>
 801693e:	9b07      	ldr	r3, [sp, #28]
 8016940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016942:	1a9e      	subs	r6, r3, r2
 8016944:	2e00      	cmp	r6, #0
 8016946:	f300 82dd 	bgt.w	8016f04 <_svfprintf_r+0x864>
 801694a:	9b06      	ldr	r3, [sp, #24]
 801694c:	05db      	lsls	r3, r3, #23
 801694e:	f100 8235 	bmi.w	8016dbc <_svfprintf_r+0x71c>
 8016952:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016956:	f8c8 7000 	str.w	r7, [r8]
 801695a:	3301      	adds	r3, #1
 801695c:	4415      	add	r5, r2
 801695e:	2b07      	cmp	r3, #7
 8016960:	9528      	str	r5, [sp, #160]	; 0xa0
 8016962:	f8c8 2004 	str.w	r2, [r8, #4]
 8016966:	9327      	str	r3, [sp, #156]	; 0x9c
 8016968:	f300 8359 	bgt.w	801701e <_svfprintf_r+0x97e>
 801696c:	f108 0808 	add.w	r8, r8, #8
 8016970:	9b06      	ldr	r3, [sp, #24]
 8016972:	0759      	lsls	r1, r3, #29
 8016974:	d505      	bpl.n	8016982 <_svfprintf_r+0x2e2>
 8016976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016978:	eba3 040a 	sub.w	r4, r3, sl
 801697c:	2c00      	cmp	r4, #0
 801697e:	f300 83ca 	bgt.w	8017116 <_svfprintf_r+0xa76>
 8016982:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8016986:	4552      	cmp	r2, sl
 8016988:	bfac      	ite	ge
 801698a:	189b      	addge	r3, r3, r2
 801698c:	4453      	addlt	r3, sl
 801698e:	9308      	str	r3, [sp, #32]
 8016990:	2d00      	cmp	r5, #0
 8016992:	f040 82f4 	bne.w	8016f7e <_svfprintf_r+0x8de>
 8016996:	2300      	movs	r3, #0
 8016998:	9327      	str	r3, [sp, #156]	; 0x9c
 801699a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801699c:	b11b      	cbz	r3, 80169a6 <_svfprintf_r+0x306>
 801699e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169a0:	4648      	mov	r0, r9
 80169a2:	f004 fcd9 	bl	801b358 <_free_r>
 80169a6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80169aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80169ac:	783b      	ldrb	r3, [r7, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	f47f aea7 	bne.w	8016702 <_svfprintf_r+0x62>
 80169b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169b6:	ee18 ba10 	vmov	fp, s16
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	f041 82b1 	bne.w	8017f22 <_svfprintf_r+0x1882>
 80169c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80169c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80169c8:	9b08      	ldr	r3, [sp, #32]
 80169ca:	bf18      	it	ne
 80169cc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80169d0:	9308      	str	r3, [sp, #32]
 80169d2:	9808      	ldr	r0, [sp, #32]
 80169d4:	b053      	add	sp, #332	; 0x14c
 80169d6:	ecbd 8b06 	vpop	{d8-d10}
 80169da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169e0:	960d      	str	r6, [sp, #52]	; 0x34
 80169e2:	3307      	adds	r3, #7
 80169e4:	f023 0307 	bic.w	r3, r3, #7
 80169e8:	ecb3 7b02 	vldmia	r3!, {d7}
 80169ec:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80169f0:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	; 0x48
 80169f4:	930c      	str	r3, [sp, #48]	; 0x30
 80169f6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80169fa:	ee09 3a90 	vmov	s19, r3
 80169fe:	ee09 5a10 	vmov	s18, r5
 8016a02:	ec5b ab19 	vmov	sl, fp, d9
 8016a06:	4bb0      	ldr	r3, [pc, #704]	; (8016cc8 <_svfprintf_r+0x628>)
 8016a08:	4650      	mov	r0, sl
 8016a0a:	4659      	mov	r1, fp
 8016a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a10:	f7ea fb4c 	bl	80010ac <__aeabi_dcmpun>
 8016a14:	2800      	cmp	r0, #0
 8016a16:	f040 850b 	bne.w	8017430 <_svfprintf_r+0xd90>
 8016a1a:	4bab      	ldr	r3, [pc, #684]	; (8016cc8 <_svfprintf_r+0x628>)
 8016a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a20:	4650      	mov	r0, sl
 8016a22:	4659      	mov	r1, fp
 8016a24:	f7ea fb24 	bl	8001070 <__aeabi_dcmple>
 8016a28:	2800      	cmp	r0, #0
 8016a2a:	f040 8501 	bne.w	8017430 <_svfprintf_r+0xd90>
 8016a2e:	2200      	movs	r2, #0
 8016a30:	2300      	movs	r3, #0
 8016a32:	4628      	mov	r0, r5
 8016a34:	4631      	mov	r1, r6
 8016a36:	f7ea fb11 	bl	800105c <__aeabi_dcmplt>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	f041 8071 	bne.w	8017b22 <_svfprintf_r+0x1482>
 8016a40:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8016a44:	4fa1      	ldr	r7, [pc, #644]	; (8016ccc <_svfprintf_r+0x62c>)
 8016a46:	4ba2      	ldr	r3, [pc, #648]	; (8016cd0 <_svfprintf_r+0x630>)
 8016a48:	9806      	ldr	r0, [sp, #24]
 8016a4a:	2100      	movs	r1, #0
 8016a4c:	f04f 0a03 	mov.w	sl, #3
 8016a50:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016a54:	910b      	str	r1, [sp, #44]	; 0x2c
 8016a56:	9006      	str	r0, [sp, #24]
 8016a58:	2c47      	cmp	r4, #71	; 0x47
 8016a5a:	bfc8      	it	gt
 8016a5c:	461f      	movgt	r7, r3
 8016a5e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8016a62:	9107      	str	r1, [sp, #28]
 8016a64:	910e      	str	r1, [sp, #56]	; 0x38
 8016a66:	9111      	str	r1, [sp, #68]	; 0x44
 8016a68:	910f      	str	r1, [sp, #60]	; 0x3c
 8016a6a:	2a00      	cmp	r2, #0
 8016a6c:	f43f af33 	beq.w	80168d6 <_svfprintf_r+0x236>
 8016a70:	f10a 0a01 	add.w	sl, sl, #1
 8016a74:	e72f      	b.n	80168d6 <_svfprintf_r+0x236>
 8016a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a78:	960d      	str	r6, [sp, #52]	; 0x34
 8016a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a7e:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
 8016a82:	2100      	movs	r1, #0
 8016a84:	460a      	mov	r2, r1
 8016a86:	f04f 0a01 	mov.w	sl, #1
 8016a8a:	930c      	str	r3, [sp, #48]	; 0x30
 8016a8c:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 8016a90:	e719      	b.n	80168c6 <_svfprintf_r+0x226>
 8016a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a94:	960d      	str	r6, [sp, #52]	; 0x34
 8016a96:	f855 7b04 	ldr.w	r7, [r5], #4
 8016a9a:	2600      	movs	r6, #0
 8016a9c:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8016aa0:	2f00      	cmp	r7, #0
 8016aa2:	f000 863f 	beq.w	8017724 <_svfprintf_r+0x1084>
 8016aa6:	9a07      	ldr	r2, [sp, #28]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	3301      	adds	r3, #1
 8016aac:	f000 87f2 	beq.w	8017a94 <_svfprintf_r+0x13f4>
 8016ab0:	4631      	mov	r1, r6
 8016ab2:	4638      	mov	r0, r7
 8016ab4:	f7e9 fe54 	bl	8000760 <memchr>
 8016ab8:	900b      	str	r0, [sp, #44]	; 0x2c
 8016aba:	2800      	cmp	r0, #0
 8016abc:	f001 814a 	beq.w	8017d54 <_svfprintf_r+0x16b4>
 8016ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ac2:	9607      	str	r6, [sp, #28]
 8016ac4:	1bda      	subs	r2, r3, r7
 8016ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8016ac8:	4633      	mov	r3, r6
 8016aca:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
 8016ace:	950c      	str	r5, [sp, #48]	; 0x30
 8016ad0:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8016ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ad6:	930e      	str	r3, [sp, #56]	; 0x38
 8016ad8:	9311      	str	r3, [sp, #68]	; 0x44
 8016ada:	930f      	str	r3, [sp, #60]	; 0x3c
 8016adc:	e7c5      	b.n	8016a6a <_svfprintf_r+0x3ca>
 8016ade:	9b06      	ldr	r3, [sp, #24]
 8016ae0:	960d      	str	r6, [sp, #52]	; 0x34
 8016ae2:	069d      	lsls	r5, r3, #26
 8016ae4:	f140 8101 	bpl.w	8016cea <_svfprintf_r+0x64a>
 8016ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016aea:	3307      	adds	r3, #7
 8016aec:	f023 0307 	bic.w	r3, r3, #7
 8016af0:	4619      	mov	r1, r3
 8016af2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8016af6:	910c      	str	r1, [sp, #48]	; 0x30
 8016af8:	4692      	mov	sl, r2
 8016afa:	469b      	mov	fp, r3
 8016afc:	2a00      	cmp	r2, #0
 8016afe:	f173 0300 	sbcs.w	r3, r3, #0
 8016b02:	f2c0 8103 	blt.w	8016d0c <_svfprintf_r+0x66c>
 8016b06:	9b07      	ldr	r3, [sp, #28]
 8016b08:	3301      	adds	r3, #1
 8016b0a:	f000 856c 	beq.w	80175e6 <_svfprintf_r+0xf46>
 8016b0e:	9b06      	ldr	r3, [sp, #24]
 8016b10:	f023 0580 	bic.w	r5, r3, #128	; 0x80
 8016b14:	ea5a 030b 	orrs.w	r3, sl, fp
 8016b18:	f040 8291 	bne.w	801703e <_svfprintf_r+0x99e>
 8016b1c:	9b07      	ldr	r3, [sp, #28]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	f040 8294 	bne.w	801704c <_svfprintf_r+0x9ac>
 8016b24:	9506      	str	r5, [sp, #24]
 8016b26:	2300      	movs	r3, #0
 8016b28:	9307      	str	r3, [sp, #28]
 8016b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8016b2c:	af52      	add	r7, sp, #328	; 0x148
 8016b2e:	e118      	b.n	8016d62 <_svfprintf_r+0x6c2>
 8016b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b36:	9209      	str	r2, [sp, #36]	; 0x24
 8016b38:	2a00      	cmp	r2, #0
 8016b3a:	f280 8456 	bge.w	80173ea <_svfprintf_r+0xd4a>
 8016b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b40:	930c      	str	r3, [sp, #48]	; 0x30
 8016b42:	4252      	negs	r2, r2
 8016b44:	9209      	str	r2, [sp, #36]	; 0x24
 8016b46:	9b06      	ldr	r3, [sp, #24]
 8016b48:	7834      	ldrb	r4, [r6, #0]
 8016b4a:	f043 0304 	orr.w	r3, r3, #4
 8016b4e:	9306      	str	r3, [sp, #24]
 8016b50:	e5f4      	b.n	801673c <_svfprintf_r+0x9c>
 8016b52:	7834      	ldrb	r4, [r6, #0]
 8016b54:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8016b58:	e5f0      	b.n	801673c <_svfprintf_r+0x9c>
 8016b5a:	9b06      	ldr	r3, [sp, #24]
 8016b5c:	960d      	str	r6, [sp, #52]	; 0x34
 8016b5e:	f043 0310 	orr.w	r3, r3, #16
 8016b62:	9306      	str	r3, [sp, #24]
 8016b64:	9b06      	ldr	r3, [sp, #24]
 8016b66:	0699      	lsls	r1, r3, #26
 8016b68:	f140 840c 	bpl.w	8017384 <_svfprintf_r+0xce4>
 8016b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b6e:	3307      	adds	r3, #7
 8016b70:	f023 0307 	bic.w	r3, r3, #7
 8016b74:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
 8016b78:	930c      	str	r3, [sp, #48]	; 0x30
 8016b7a:	9b06      	ldr	r3, [sp, #24]
 8016b7c:	f423 6580 	bic.w	r5, r3, #1024	; 0x400
 8016b80:	2300      	movs	r3, #0
 8016b82:	2200      	movs	r2, #0
 8016b84:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8016b88:	9a07      	ldr	r2, [sp, #28]
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	3101      	adds	r1, #1
 8016b8e:	f000 80cd 	beq.w	8016d2c <_svfprintf_r+0x68c>
 8016b92:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8016b96:	9106      	str	r1, [sp, #24]
 8016b98:	ea5a 010b 	orrs.w	r1, sl, fp
 8016b9c:	f040 824b 	bne.w	8017036 <_svfprintf_r+0x996>
 8016ba0:	2a00      	cmp	r2, #0
 8016ba2:	f040 8723 	bne.w	80179ec <_svfprintf_r+0x134c>
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d1bd      	bne.n	8016b26 <_svfprintf_r+0x486>
 8016baa:	f015 0301 	ands.w	r3, r5, #1
 8016bae:	930a      	str	r3, [sp, #40]	; 0x28
 8016bb0:	f000 841f 	beq.w	80173f2 <_svfprintf_r+0xd52>
 8016bb4:	2330      	movs	r3, #48	; 0x30
 8016bb6:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8016bba:	f20d 1747 	addw	r7, sp, #327	; 0x147
 8016bbe:	e0d0      	b.n	8016d62 <_svfprintf_r+0x6c2>
 8016bc0:	7834      	ldrb	r4, [r6, #0]
 8016bc2:	9b06      	ldr	r3, [sp, #24]
 8016bc4:	2c68      	cmp	r4, #104	; 0x68
 8016bc6:	f000 8596 	beq.w	80176f6 <_svfprintf_r+0x1056>
 8016bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bce:	9306      	str	r3, [sp, #24]
 8016bd0:	e5b4      	b.n	801673c <_svfprintf_r+0x9c>
 8016bd2:	9b06      	ldr	r3, [sp, #24]
 8016bd4:	960d      	str	r6, [sp, #52]	; 0x34
 8016bd6:	069e      	lsls	r6, r3, #26
 8016bd8:	f100 84f9 	bmi.w	80175ce <_svfprintf_r+0xf2e>
 8016bdc:	9b06      	ldr	r3, [sp, #24]
 8016bde:	06dd      	lsls	r5, r3, #27
 8016be0:	f100 870a 	bmi.w	80179f8 <_svfprintf_r+0x1358>
 8016be4:	9b06      	ldr	r3, [sp, #24]
 8016be6:	065c      	lsls	r4, r3, #25
 8016be8:	f100 87d4 	bmi.w	8017b94 <_svfprintf_r+0x14f4>
 8016bec:	9b06      	ldr	r3, [sp, #24]
 8016bee:	0598      	lsls	r0, r3, #22
 8016bf0:	f140 8702 	bpl.w	80179f8 <_svfprintf_r+0x1358>
 8016bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bf6:	9908      	ldr	r1, [sp, #32]
 8016bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8016bfe:	7011      	strb	r1, [r2, #0]
 8016c00:	e6d3      	b.n	80169aa <_svfprintf_r+0x30a>
 8016c02:	7834      	ldrb	r4, [r6, #0]
 8016c04:	9b06      	ldr	r3, [sp, #24]
 8016c06:	2c6c      	cmp	r4, #108	; 0x6c
 8016c08:	f000 856e 	beq.w	80176e8 <_svfprintf_r+0x1048>
 8016c0c:	f043 0310 	orr.w	r3, r3, #16
 8016c10:	9306      	str	r3, [sp, #24]
 8016c12:	e593      	b.n	801673c <_svfprintf_r+0x9c>
 8016c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c16:	960d      	str	r6, [sp, #52]	; 0x34
 8016c18:	f647 0130 	movw	r1, #30768	; 0x7830
 8016c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c20:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
 8016c24:	9906      	ldr	r1, [sp, #24]
 8016c26:	930c      	str	r3, [sp, #48]	; 0x30
 8016c28:	4b2a      	ldr	r3, [pc, #168]	; (8016cd4 <_svfprintf_r+0x634>)
 8016c2a:	9316      	str	r3, [sp, #88]	; 0x58
 8016c2c:	f041 0502 	orr.w	r5, r1, #2
 8016c30:	4692      	mov	sl, r2
 8016c32:	f04f 0b00 	mov.w	fp, #0
 8016c36:	2302      	movs	r3, #2
 8016c38:	2478      	movs	r4, #120	; 0x78
 8016c3a:	e7a2      	b.n	8016b82 <_svfprintf_r+0x4e2>
 8016c3c:	9b06      	ldr	r3, [sp, #24]
 8016c3e:	960d      	str	r6, [sp, #52]	; 0x34
 8016c40:	f043 0510 	orr.w	r5, r3, #16
 8016c44:	06af      	lsls	r7, r5, #26
 8016c46:	f140 838d 	bpl.w	8017364 <_svfprintf_r+0xcc4>
 8016c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c4c:	3307      	adds	r3, #7
 8016c4e:	f023 0307 	bic.w	r3, r3, #7
 8016c52:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
 8016c56:	930c      	str	r3, [sp, #48]	; 0x30
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e792      	b.n	8016b82 <_svfprintf_r+0x4e2>
 8016c5c:	9b06      	ldr	r3, [sp, #24]
 8016c5e:	7834      	ldrb	r4, [r6, #0]
 8016c60:	f043 0308 	orr.w	r3, r3, #8
 8016c64:	9306      	str	r3, [sp, #24]
 8016c66:	e569      	b.n	801673c <_svfprintf_r+0x9c>
 8016c68:	9b06      	ldr	r3, [sp, #24]
 8016c6a:	7834      	ldrb	r4, [r6, #0]
 8016c6c:	f043 0301 	orr.w	r3, r3, #1
 8016c70:	9306      	str	r3, [sp, #24]
 8016c72:	e563      	b.n	801673c <_svfprintf_r+0x9c>
 8016c74:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	f47f ade9 	bne.w	8016850 <_svfprintf_r+0x1b0>
 8016c7e:	7834      	ldrb	r4, [r6, #0]
 8016c80:	f88d a07b 	strb.w	sl, [sp, #123]	; 0x7b
 8016c84:	e55a      	b.n	801673c <_svfprintf_r+0x9c>
 8016c86:	9b06      	ldr	r3, [sp, #24]
 8016c88:	7834      	ldrb	r4, [r6, #0]
 8016c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c8e:	9306      	str	r3, [sp, #24]
 8016c90:	e554      	b.n	801673c <_svfprintf_r+0x9c>
 8016c92:	4632      	mov	r2, r6
 8016c94:	f812 4b01 	ldrb.w	r4, [r2], #1
 8016c98:	2c2a      	cmp	r4, #42	; 0x2a
 8016c9a:	f001 8275 	beq.w	8018188 <_svfprintf_r+0x1ae8>
 8016c9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016ca2:	2b09      	cmp	r3, #9
 8016ca4:	4616      	mov	r6, r2
 8016ca6:	bf98      	it	ls
 8016ca8:	2200      	movls	r2, #0
 8016caa:	f201 8136 	bhi.w	8017f1a <_svfprintf_r+0x187a>
 8016cae:	f816 4b01 	ldrb.w	r4, [r6], #1
 8016cb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016cb6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016cba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016cbe:	2b09      	cmp	r3, #9
 8016cc0:	d9f5      	bls.n	8016cae <_svfprintf_r+0x60e>
 8016cc2:	9207      	str	r2, [sp, #28]
 8016cc4:	e53b      	b.n	801673e <_svfprintf_r+0x9e>
 8016cc6:	bf00      	nop
 8016cc8:	7fefffff 	.word	0x7fefffff
 8016ccc:	08020524 	.word	0x08020524
 8016cd0:	08020528 	.word	0x08020528
 8016cd4:	08020534 	.word	0x08020534
 8016cd8:	9b06      	ldr	r3, [sp, #24]
 8016cda:	960d      	str	r6, [sp, #52]	; 0x34
 8016cdc:	f043 0310 	orr.w	r3, r3, #16
 8016ce0:	9306      	str	r3, [sp, #24]
 8016ce2:	9b06      	ldr	r3, [sp, #24]
 8016ce4:	069d      	lsls	r5, r3, #26
 8016ce6:	f53f aeff 	bmi.w	8016ae8 <_svfprintf_r+0x448>
 8016cea:	9b06      	ldr	r3, [sp, #24]
 8016cec:	06d8      	lsls	r0, r3, #27
 8016cee:	f140 838a 	bpl.w	8017406 <_svfprintf_r+0xd66>
 8016cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cf8:	930c      	str	r3, [sp, #48]	; 0x30
 8016cfa:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8016cfe:	465b      	mov	r3, fp
 8016d00:	2a00      	cmp	r2, #0
 8016d02:	f173 0300 	sbcs.w	r3, r3, #0
 8016d06:	4692      	mov	sl, r2
 8016d08:	f6bf aefd 	bge.w	8016b06 <_svfprintf_r+0x466>
 8016d0c:	9a07      	ldr	r2, [sp, #28]
 8016d0e:	9d06      	ldr	r5, [sp, #24]
 8016d10:	f1da 0a00 	rsbs	sl, sl, #0
 8016d14:	4611      	mov	r1, r2
 8016d16:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8016d1a:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
 8016d1e:	3101      	adds	r1, #1
 8016d20:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8016d24:	f04f 0301 	mov.w	r3, #1
 8016d28:	f47f af33 	bne.w	8016b92 <_svfprintf_r+0x4f2>
 8016d2c:	2b01      	cmp	r3, #1
 8016d2e:	f000 8186 	beq.w	801703e <_svfprintf_r+0x99e>
 8016d32:	2b02      	cmp	r3, #2
 8016d34:	af52      	add	r7, sp, #328	; 0x148
 8016d36:	d122      	bne.n	8016d7e <_svfprintf_r+0x6de>
 8016d38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016d3a:	ea4f 131a 	mov.w	r3, sl, lsr #4
 8016d3e:	f00a 010f 	and.w	r1, sl, #15
 8016d42:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
 8016d46:	ea4f 121b 	mov.w	r2, fp, lsr #4
 8016d4a:	469a      	mov	sl, r3
 8016d4c:	4693      	mov	fp, r2
 8016d4e:	5c43      	ldrb	r3, [r0, r1]
 8016d50:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8016d54:	ea5a 030b 	orrs.w	r3, sl, fp
 8016d58:	d1ef      	bne.n	8016d3a <_svfprintf_r+0x69a>
 8016d5a:	ab52      	add	r3, sp, #328	; 0x148
 8016d5c:	1bdb      	subs	r3, r3, r7
 8016d5e:	9506      	str	r5, [sp, #24]
 8016d60:	930a      	str	r3, [sp, #40]	; 0x28
 8016d62:	2300      	movs	r3, #0
 8016d64:	9907      	ldr	r1, [sp, #28]
 8016d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d68:	930e      	str	r3, [sp, #56]	; 0x38
 8016d6a:	9311      	str	r3, [sp, #68]	; 0x44
 8016d6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d70:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8016d74:	428b      	cmp	r3, r1
 8016d76:	bfb8      	it	lt
 8016d78:	460b      	movlt	r3, r1
 8016d7a:	469a      	mov	sl, r3
 8016d7c:	e675      	b.n	8016a6a <_svfprintf_r+0x3ca>
 8016d7e:	ea4f 02da 	mov.w	r2, sl, lsr #3
 8016d82:	ea42 724b 	orr.w	r2, r2, fp, lsl #29
 8016d86:	ea4f 01db 	mov.w	r1, fp, lsr #3
 8016d8a:	f00a 0307 	and.w	r3, sl, #7
 8016d8e:	468b      	mov	fp, r1
 8016d90:	4692      	mov	sl, r2
 8016d92:	3330      	adds	r3, #48	; 0x30
 8016d94:	ea5a 010b 	orrs.w	r1, sl, fp
 8016d98:	463a      	mov	r2, r7
 8016d9a:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8016d9e:	d1ee      	bne.n	8016d7e <_svfprintf_r+0x6de>
 8016da0:	07e9      	lsls	r1, r5, #31
 8016da2:	d5da      	bpl.n	8016d5a <_svfprintf_r+0x6ba>
 8016da4:	2b30      	cmp	r3, #48	; 0x30
 8016da6:	d0d8      	beq.n	8016d5a <_svfprintf_r+0x6ba>
 8016da8:	2330      	movs	r3, #48	; 0x30
 8016daa:	3a02      	subs	r2, #2
 8016dac:	f807 3c01 	strb.w	r3, [r7, #-1]
 8016db0:	ab52      	add	r3, sp, #328	; 0x148
 8016db2:	1a9b      	subs	r3, r3, r2
 8016db4:	9506      	str	r5, [sp, #24]
 8016db6:	930a      	str	r3, [sp, #40]	; 0x28
 8016db8:	4617      	mov	r7, r2
 8016dba:	e7d2      	b.n	8016d62 <_svfprintf_r+0x6c2>
 8016dbc:	2c65      	cmp	r4, #101	; 0x65
 8016dbe:	f340 80ea 	ble.w	8016f96 <_svfprintf_r+0x8f6>
 8016dc2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	2300      	movs	r3, #0
 8016dca:	f7ea f93d 	bl	8001048 <__aeabi_dcmpeq>
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	f000 81e3 	beq.w	801719a <_svfprintf_r+0xafa>
 8016dd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016dd6:	4ad3      	ldr	r2, [pc, #844]	; (8017124 <_svfprintf_r+0xa84>)
 8016dd8:	f8c8 2000 	str.w	r2, [r8]
 8016ddc:	3301      	adds	r3, #1
 8016dde:	3501      	adds	r5, #1
 8016de0:	2201      	movs	r2, #1
 8016de2:	2b07      	cmp	r3, #7
 8016de4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016de8:	f8c8 2004 	str.w	r2, [r8, #4]
 8016dec:	f300 85c6 	bgt.w	801797c <_svfprintf_r+0x12dc>
 8016df0:	f108 0808 	add.w	r8, r8, #8
 8016df4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016df6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016df8:	4293      	cmp	r3, r2
 8016dfa:	f280 82f1 	bge.w	80173e0 <_svfprintf_r+0xd40>
 8016dfe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016e00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016e02:	f8c8 2000 	str.w	r2, [r8]
 8016e06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e08:	f8c8 2004 	str.w	r2, [r8, #4]
 8016e0c:	3301      	adds	r3, #1
 8016e0e:	4415      	add	r5, r2
 8016e10:	2b07      	cmp	r3, #7
 8016e12:	9528      	str	r5, [sp, #160]	; 0xa0
 8016e14:	9327      	str	r3, [sp, #156]	; 0x9c
 8016e16:	f300 8459 	bgt.w	80176cc <_svfprintf_r+0x102c>
 8016e1a:	f108 0808 	add.w	r8, r8, #8
 8016e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e20:	1e5c      	subs	r4, r3, #1
 8016e22:	2c00      	cmp	r4, #0
 8016e24:	f77f ada4 	ble.w	8016970 <_svfprintf_r+0x2d0>
 8016e28:	2c10      	cmp	r4, #16
 8016e2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016e2c:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 801712c <_svfprintf_r+0xa8c>
 8016e30:	f340 85b5 	ble.w	801799e <_svfprintf_r+0x12fe>
 8016e34:	465f      	mov	r7, fp
 8016e36:	2610      	movs	r6, #16
 8016e38:	ee18 ba10 	vmov	fp, s16
 8016e3c:	e005      	b.n	8016e4a <_svfprintf_r+0x7aa>
 8016e3e:	f108 0808 	add.w	r8, r8, #8
 8016e42:	3c10      	subs	r4, #16
 8016e44:	2c10      	cmp	r4, #16
 8016e46:	f340 85a9 	ble.w	801799c <_svfprintf_r+0x12fc>
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	3510      	adds	r5, #16
 8016e4e:	2b07      	cmp	r3, #7
 8016e50:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016e54:	e9c8 7600 	strd	r7, r6, [r8]
 8016e58:	ddf1      	ble.n	8016e3e <_svfprintf_r+0x79e>
 8016e5a:	aa26      	add	r2, sp, #152	; 0x98
 8016e5c:	4659      	mov	r1, fp
 8016e5e:	4648      	mov	r0, r9
 8016e60:	f005 f9c0 	bl	801c1e4 <__ssprint_r>
 8016e64:	2800      	cmp	r0, #0
 8016e66:	f040 821d 	bne.w	80172a4 <_svfprintf_r+0xc04>
 8016e6a:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8016e6e:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8016e72:	e7e6      	b.n	8016e42 <_svfprintf_r+0x7a2>
 8016e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e76:	eba3 060a 	sub.w	r6, r3, sl
 8016e7a:	2e00      	cmp	r6, #0
 8016e7c:	f77f ad5f 	ble.w	801693e <_svfprintf_r+0x29e>
 8016e80:	2e10      	cmp	r6, #16
 8016e82:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016e84:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 801712c <_svfprintf_r+0xa8c>
 8016e88:	dd29      	ble.n	8016ede <_svfprintf_r+0x83e>
 8016e8a:	4658      	mov	r0, fp
 8016e8c:	4629      	mov	r1, r5
 8016e8e:	46a3      	mov	fp, r4
 8016e90:	ee18 5a10 	vmov	r5, s16
 8016e94:	2310      	movs	r3, #16
 8016e96:	4604      	mov	r4, r0
 8016e98:	e004      	b.n	8016ea4 <_svfprintf_r+0x804>
 8016e9a:	3e10      	subs	r6, #16
 8016e9c:	2e10      	cmp	r6, #16
 8016e9e:	f108 0808 	add.w	r8, r8, #8
 8016ea2:	dd18      	ble.n	8016ed6 <_svfprintf_r+0x836>
 8016ea4:	3201      	adds	r2, #1
 8016ea6:	3110      	adds	r1, #16
 8016ea8:	2a07      	cmp	r2, #7
 8016eaa:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8016eae:	e9c8 4300 	strd	r4, r3, [r8]
 8016eb2:	ddf2      	ble.n	8016e9a <_svfprintf_r+0x7fa>
 8016eb4:	aa26      	add	r2, sp, #152	; 0x98
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	4648      	mov	r0, r9
 8016eba:	f005 f993 	bl	801c1e4 <__ssprint_r>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f040 81ef 	bne.w	80172a2 <_svfprintf_r+0xc02>
 8016ec4:	3e10      	subs	r6, #16
 8016ec6:	2e10      	cmp	r6, #16
 8016ec8:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8016ecc:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8016ed0:	f04f 0310 	mov.w	r3, #16
 8016ed4:	dce6      	bgt.n	8016ea4 <_svfprintf_r+0x804>
 8016ed6:	4623      	mov	r3, r4
 8016ed8:	460d      	mov	r5, r1
 8016eda:	465c      	mov	r4, fp
 8016edc:	469b      	mov	fp, r3
 8016ede:	3201      	adds	r2, #1
 8016ee0:	4435      	add	r5, r6
 8016ee2:	2a07      	cmp	r2, #7
 8016ee4:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8016ee8:	f8c8 b000 	str.w	fp, [r8]
 8016eec:	f8c8 6004 	str.w	r6, [r8, #4]
 8016ef0:	f300 856e 	bgt.w	80179d0 <_svfprintf_r+0x1330>
 8016ef4:	9b07      	ldr	r3, [sp, #28]
 8016ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ef8:	1a9e      	subs	r6, r3, r2
 8016efa:	2e00      	cmp	r6, #0
 8016efc:	f108 0808 	add.w	r8, r8, #8
 8016f00:	f77f ad23 	ble.w	801694a <_svfprintf_r+0x2aa>
 8016f04:	2e10      	cmp	r6, #16
 8016f06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016f08:	f8df b220 	ldr.w	fp, [pc, #544]	; 801712c <_svfprintf_r+0xa8c>
 8016f0c:	dd29      	ble.n	8016f62 <_svfprintf_r+0x8c2>
 8016f0e:	4658      	mov	r0, fp
 8016f10:	4629      	mov	r1, r5
 8016f12:	46a3      	mov	fp, r4
 8016f14:	ee18 5a10 	vmov	r5, s16
 8016f18:	2310      	movs	r3, #16
 8016f1a:	4604      	mov	r4, r0
 8016f1c:	e004      	b.n	8016f28 <_svfprintf_r+0x888>
 8016f1e:	3e10      	subs	r6, #16
 8016f20:	2e10      	cmp	r6, #16
 8016f22:	f108 0808 	add.w	r8, r8, #8
 8016f26:	dd18      	ble.n	8016f5a <_svfprintf_r+0x8ba>
 8016f28:	3201      	adds	r2, #1
 8016f2a:	3110      	adds	r1, #16
 8016f2c:	2a07      	cmp	r2, #7
 8016f2e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8016f32:	e9c8 4300 	strd	r4, r3, [r8]
 8016f36:	ddf2      	ble.n	8016f1e <_svfprintf_r+0x87e>
 8016f38:	aa26      	add	r2, sp, #152	; 0x98
 8016f3a:	4629      	mov	r1, r5
 8016f3c:	4648      	mov	r0, r9
 8016f3e:	f005 f951 	bl	801c1e4 <__ssprint_r>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	f040 81ad 	bne.w	80172a2 <_svfprintf_r+0xc02>
 8016f48:	3e10      	subs	r6, #16
 8016f4a:	2e10      	cmp	r6, #16
 8016f4c:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8016f50:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8016f54:	f04f 0310 	mov.w	r3, #16
 8016f58:	dce6      	bgt.n	8016f28 <_svfprintf_r+0x888>
 8016f5a:	4623      	mov	r3, r4
 8016f5c:	460d      	mov	r5, r1
 8016f5e:	465c      	mov	r4, fp
 8016f60:	469b      	mov	fp, r3
 8016f62:	3201      	adds	r2, #1
 8016f64:	4435      	add	r5, r6
 8016f66:	2a07      	cmp	r2, #7
 8016f68:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8016f6c:	f8c8 b000 	str.w	fp, [r8]
 8016f70:	f8c8 6004 	str.w	r6, [r8, #4]
 8016f74:	f300 81e8 	bgt.w	8017348 <_svfprintf_r+0xca8>
 8016f78:	f108 0808 	add.w	r8, r8, #8
 8016f7c:	e4e5      	b.n	801694a <_svfprintf_r+0x2aa>
 8016f7e:	ee18 1a10 	vmov	r1, s16
 8016f82:	aa26      	add	r2, sp, #152	; 0x98
 8016f84:	4648      	mov	r0, r9
 8016f86:	f005 f92d 	bl	801c1e4 <__ssprint_r>
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	f43f ad03 	beq.w	8016996 <_svfprintf_r+0x2f6>
 8016f90:	ee18 ba10 	vmov	fp, s16
 8016f94:	e186      	b.n	80172a4 <_svfprintf_r+0xc04>
 8016f96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	f340 818c 	ble.w	80172b8 <_svfprintf_r+0xc18>
 8016fa0:	3401      	adds	r4, #1
 8016fa2:	3501      	adds	r5, #1
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	2c07      	cmp	r4, #7
 8016fa8:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8016fac:	f8c8 7000 	str.w	r7, [r8]
 8016fb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8016fb4:	f300 81f8 	bgt.w	80173a8 <_svfprintf_r+0xd08>
 8016fb8:	f108 0808 	add.w	r8, r8, #8
 8016fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016fc0:	3401      	adds	r4, #1
 8016fc2:	441d      	add	r5, r3
 8016fc4:	2c07      	cmp	r4, #7
 8016fc6:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8016fca:	e9c8 2300 	strd	r2, r3, [r8]
 8016fce:	f300 81f9 	bgt.w	80173c4 <_svfprintf_r+0xd24>
 8016fd2:	f108 0808 	add.w	r8, r8, #8
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8016fdc:	2200      	movs	r2, #0
 8016fde:	f7ea f833 	bl	8001048 <__aeabi_dcmpeq>
 8016fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	f040 8185 	bne.w	80172f4 <_svfprintf_r+0xc54>
 8016fea:	3b01      	subs	r3, #1
 8016fec:	3401      	adds	r4, #1
 8016fee:	3701      	adds	r7, #1
 8016ff0:	441d      	add	r5, r3
 8016ff2:	2c07      	cmp	r4, #7
 8016ff4:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8016ff8:	f8c8 7000 	str.w	r7, [r8]
 8016ffc:	f8c8 3004 	str.w	r3, [r8, #4]
 8017000:	f300 816a 	bgt.w	80172d8 <_svfprintf_r+0xc38>
 8017004:	f108 0808 	add.w	r8, r8, #8
 8017008:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801700a:	3401      	adds	r4, #1
 801700c:	4415      	add	r5, r2
 801700e:	ab22      	add	r3, sp, #136	; 0x88
 8017010:	2c07      	cmp	r4, #7
 8017012:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8017016:	e9c8 3200 	strd	r3, r2, [r8]
 801701a:	f77f aca7 	ble.w	801696c <_svfprintf_r+0x2cc>
 801701e:	ee18 1a10 	vmov	r1, s16
 8017022:	aa26      	add	r2, sp, #152	; 0x98
 8017024:	4648      	mov	r0, r9
 8017026:	f005 f8dd 	bl	801c1e4 <__ssprint_r>
 801702a:	2800      	cmp	r0, #0
 801702c:	d1b0      	bne.n	8016f90 <_svfprintf_r+0x8f0>
 801702e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017030:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017034:	e49c      	b.n	8016970 <_svfprintf_r+0x2d0>
 8017036:	2b01      	cmp	r3, #1
 8017038:	9d06      	ldr	r5, [sp, #24]
 801703a:	f47f ae7a 	bne.w	8016d32 <_svfprintf_r+0x692>
 801703e:	f1bb 0f00 	cmp.w	fp, #0
 8017042:	bf08      	it	eq
 8017044:	f1ba 0f0a 	cmpeq.w	sl, #10
 8017048:	f080 82d5 	bcs.w	80175f6 <_svfprintf_r+0xf56>
 801704c:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8017050:	2301      	movs	r3, #1
 8017052:	f88d a147 	strb.w	sl, [sp, #327]	; 0x147
 8017056:	9506      	str	r5, [sp, #24]
 8017058:	930a      	str	r3, [sp, #40]	; 0x28
 801705a:	f20d 1747 	addw	r7, sp, #327	; 0x147
 801705e:	e680      	b.n	8016d62 <_svfprintf_r+0x6c2>
 8017060:	2e10      	cmp	r6, #16
 8017062:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8017066:	dd29      	ble.n	80170bc <_svfprintf_r+0xa1c>
 8017068:	931b      	str	r3, [sp, #108]	; 0x6c
 801706a:	2510      	movs	r5, #16
 801706c:	4643      	mov	r3, r8
 801706e:	4608      	mov	r0, r1
 8017070:	46b8      	mov	r8, r7
 8017072:	4627      	mov	r7, r4
 8017074:	ee18 4a10 	vmov	r4, s16
 8017078:	e004      	b.n	8017084 <_svfprintf_r+0x9e4>
 801707a:	3e10      	subs	r6, #16
 801707c:	2e10      	cmp	r6, #16
 801707e:	f103 0308 	add.w	r3, r3, #8
 8017082:	dd16      	ble.n	80170b2 <_svfprintf_r+0xa12>
 8017084:	3201      	adds	r2, #1
 8017086:	4928      	ldr	r1, [pc, #160]	; (8017128 <_svfprintf_r+0xa88>)
 8017088:	3010      	adds	r0, #16
 801708a:	2a07      	cmp	r2, #7
 801708c:	e9cd 2027 	strd	r2, r0, [sp, #156]	; 0x9c
 8017090:	e9c3 1500 	strd	r1, r5, [r3]
 8017094:	ddf1      	ble.n	801707a <_svfprintf_r+0x9da>
 8017096:	aa26      	add	r2, sp, #152	; 0x98
 8017098:	4621      	mov	r1, r4
 801709a:	4648      	mov	r0, r9
 801709c:	f005 f8a2 	bl	801c1e4 <__ssprint_r>
 80170a0:	2800      	cmp	r0, #0
 80170a2:	f040 8450 	bne.w	8017946 <_svfprintf_r+0x12a6>
 80170a6:	3e10      	subs	r6, #16
 80170a8:	2e10      	cmp	r6, #16
 80170aa:	e9dd 2027 	ldrd	r2, r0, [sp, #156]	; 0x9c
 80170ae:	ab29      	add	r3, sp, #164	; 0xa4
 80170b0:	dce8      	bgt.n	8017084 <_svfprintf_r+0x9e4>
 80170b2:	463c      	mov	r4, r7
 80170b4:	4647      	mov	r7, r8
 80170b6:	4698      	mov	r8, r3
 80170b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170ba:	4601      	mov	r1, r0
 80170bc:	3201      	adds	r2, #1
 80170be:	481a      	ldr	r0, [pc, #104]	; (8017128 <_svfprintf_r+0xa88>)
 80170c0:	f8c8 0000 	str.w	r0, [r8]
 80170c4:	198d      	adds	r5, r1, r6
 80170c6:	2a07      	cmp	r2, #7
 80170c8:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 80170cc:	f8c8 6004 	str.w	r6, [r8, #4]
 80170d0:	f300 8427 	bgt.w	8017922 <_svfprintf_r+0x1282>
 80170d4:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 80170d8:	f108 0808 	add.w	r8, r8, #8
 80170dc:	e40c      	b.n	80168f8 <_svfprintf_r+0x258>
 80170de:	ee18 1a10 	vmov	r1, s16
 80170e2:	aa26      	add	r2, sp, #152	; 0x98
 80170e4:	4648      	mov	r0, r9
 80170e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80170e8:	f005 f87c 	bl	801c1e4 <__ssprint_r>
 80170ec:	2800      	cmp	r0, #0
 80170ee:	f47f af4f 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 80170f2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80170f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170f6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80170fa:	e40d      	b.n	8016918 <_svfprintf_r+0x278>
 80170fc:	ee18 1a10 	vmov	r1, s16
 8017100:	aa26      	add	r2, sp, #152	; 0x98
 8017102:	4648      	mov	r0, r9
 8017104:	f005 f86e 	bl	801c1e4 <__ssprint_r>
 8017108:	2800      	cmp	r0, #0
 801710a:	f47f af41 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 801710e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017110:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017114:	e40f      	b.n	8016936 <_svfprintf_r+0x296>
 8017116:	2c10      	cmp	r4, #16
 8017118:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801711a:	dd26      	ble.n	801716a <_svfprintf_r+0xaca>
 801711c:	ee18 7a10 	vmov	r7, s16
 8017120:	2610      	movs	r6, #16
 8017122:	e00a      	b.n	801713a <_svfprintf_r+0xa9a>
 8017124:	08020564 	.word	0x08020564
 8017128:	08020568 	.word	0x08020568
 801712c:	08020578 	.word	0x08020578
 8017130:	3c10      	subs	r4, #16
 8017132:	2c10      	cmp	r4, #16
 8017134:	f108 0808 	add.w	r8, r8, #8
 8017138:	dd17      	ble.n	801716a <_svfprintf_r+0xaca>
 801713a:	3301      	adds	r3, #1
 801713c:	4aba      	ldr	r2, [pc, #744]	; (8017428 <_svfprintf_r+0xd88>)
 801713e:	3510      	adds	r5, #16
 8017140:	2b07      	cmp	r3, #7
 8017142:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8017146:	e9c8 2600 	strd	r2, r6, [r8]
 801714a:	ddf1      	ble.n	8017130 <_svfprintf_r+0xa90>
 801714c:	aa26      	add	r2, sp, #152	; 0x98
 801714e:	4639      	mov	r1, r7
 8017150:	4648      	mov	r0, r9
 8017152:	f005 f847 	bl	801c1e4 <__ssprint_r>
 8017156:	2800      	cmp	r0, #0
 8017158:	f040 841e 	bne.w	8017998 <_svfprintf_r+0x12f8>
 801715c:	3c10      	subs	r4, #16
 801715e:	2c10      	cmp	r4, #16
 8017160:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8017164:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017168:	dce7      	bgt.n	801713a <_svfprintf_r+0xa9a>
 801716a:	3301      	adds	r3, #1
 801716c:	4aae      	ldr	r2, [pc, #696]	; (8017428 <_svfprintf_r+0xd88>)
 801716e:	f8c8 2000 	str.w	r2, [r8]
 8017172:	4425      	add	r5, r4
 8017174:	2b07      	cmp	r3, #7
 8017176:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801717a:	f8c8 4004 	str.w	r4, [r8, #4]
 801717e:	f77f ac00 	ble.w	8016982 <_svfprintf_r+0x2e2>
 8017182:	ee18 1a10 	vmov	r1, s16
 8017186:	aa26      	add	r2, sp, #152	; 0x98
 8017188:	4648      	mov	r0, r9
 801718a:	f005 f82b 	bl	801c1e4 <__ssprint_r>
 801718e:	2800      	cmp	r0, #0
 8017190:	f47f aefe 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017194:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017196:	f7ff bbf4 	b.w	8016982 <_svfprintf_r+0x2e2>
 801719a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801719c:	2a00      	cmp	r2, #0
 801719e:	f340 838a 	ble.w	80178b6 <_svfprintf_r+0x1216>
 80171a2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80171a6:	4293      	cmp	r3, r2
 80171a8:	bfa8      	it	ge
 80171aa:	4613      	movge	r3, r2
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	461c      	mov	r4, r3
 80171b0:	dd0d      	ble.n	80171ce <_svfprintf_r+0xb2e>
 80171b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80171b4:	f8c8 7000 	str.w	r7, [r8]
 80171b8:	3301      	adds	r3, #1
 80171ba:	4425      	add	r5, r4
 80171bc:	2b07      	cmp	r3, #7
 80171be:	9528      	str	r5, [sp, #160]	; 0xa0
 80171c0:	f8c8 4004 	str.w	r4, [r8, #4]
 80171c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80171c6:	f300 855b 	bgt.w	8017c80 <_svfprintf_r+0x15e0>
 80171ca:	f108 0808 	add.w	r8, r8, #8
 80171ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171d0:	2c00      	cmp	r4, #0
 80171d2:	bfa8      	it	ge
 80171d4:	1b1b      	subge	r3, r3, r4
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	461c      	mov	r4, r3
 80171da:	f300 82b3 	bgt.w	8017744 <_svfprintf_r+0x10a4>
 80171de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171e0:	443b      	add	r3, r7
 80171e2:	469b      	mov	fp, r3
 80171e4:	9b06      	ldr	r3, [sp, #24]
 80171e6:	055e      	lsls	r6, r3, #21
 80171e8:	f100 82d3 	bmi.w	8017792 <_svfprintf_r+0x10f2>
 80171ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80171ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171f0:	4293      	cmp	r3, r2
 80171f2:	db03      	blt.n	80171fc <_svfprintf_r+0xb5c>
 80171f4:	9a06      	ldr	r2, [sp, #24]
 80171f6:	07d4      	lsls	r4, r2, #31
 80171f8:	f140 84c2 	bpl.w	8017b80 <_svfprintf_r+0x14e0>
 80171fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80171fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017200:	f8c8 1000 	str.w	r1, [r8]
 8017204:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017206:	f8c8 1004 	str.w	r1, [r8, #4]
 801720a:	3201      	adds	r2, #1
 801720c:	440d      	add	r5, r1
 801720e:	2a07      	cmp	r2, #7
 8017210:	9528      	str	r5, [sp, #160]	; 0xa0
 8017212:	9227      	str	r2, [sp, #156]	; 0x9c
 8017214:	f300 854f 	bgt.w	8017cb6 <_svfprintf_r+0x1616>
 8017218:	f108 0808 	add.w	r8, r8, #8
 801721c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801721e:	18bc      	adds	r4, r7, r2
 8017220:	eba4 040b 	sub.w	r4, r4, fp
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	429c      	cmp	r4, r3
 8017228:	bfa8      	it	ge
 801722a:	461c      	movge	r4, r3
 801722c:	2c00      	cmp	r4, #0
 801722e:	dd0d      	ble.n	801724c <_svfprintf_r+0xbac>
 8017230:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017232:	f8c8 b000 	str.w	fp, [r8]
 8017236:	3201      	adds	r2, #1
 8017238:	4425      	add	r5, r4
 801723a:	2a07      	cmp	r2, #7
 801723c:	9528      	str	r5, [sp, #160]	; 0xa0
 801723e:	f8c8 4004 	str.w	r4, [r8, #4]
 8017242:	9227      	str	r2, [sp, #156]	; 0x9c
 8017244:	f300 8658 	bgt.w	8017ef8 <_svfprintf_r+0x1858>
 8017248:	f108 0808 	add.w	r8, r8, #8
 801724c:	2c00      	cmp	r4, #0
 801724e:	bfac      	ite	ge
 8017250:	1b1c      	subge	r4, r3, r4
 8017252:	461c      	movlt	r4, r3
 8017254:	2c00      	cmp	r4, #0
 8017256:	f77f ab8b 	ble.w	8016970 <_svfprintf_r+0x2d0>
 801725a:	2c10      	cmp	r4, #16
 801725c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801725e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 801742c <_svfprintf_r+0xd8c>
 8017262:	f340 839c 	ble.w	801799e <_svfprintf_r+0x12fe>
 8017266:	465f      	mov	r7, fp
 8017268:	2610      	movs	r6, #16
 801726a:	ee18 ba10 	vmov	fp, s16
 801726e:	e005      	b.n	801727c <_svfprintf_r+0xbdc>
 8017270:	f108 0808 	add.w	r8, r8, #8
 8017274:	3c10      	subs	r4, #16
 8017276:	2c10      	cmp	r4, #16
 8017278:	f340 8390 	ble.w	801799c <_svfprintf_r+0x12fc>
 801727c:	3301      	adds	r3, #1
 801727e:	3510      	adds	r5, #16
 8017280:	2b07      	cmp	r3, #7
 8017282:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8017286:	e9c8 7600 	strd	r7, r6, [r8]
 801728a:	ddf1      	ble.n	8017270 <_svfprintf_r+0xbd0>
 801728c:	aa26      	add	r2, sp, #152	; 0x98
 801728e:	4659      	mov	r1, fp
 8017290:	4648      	mov	r0, r9
 8017292:	f004 ffa7 	bl	801c1e4 <__ssprint_r>
 8017296:	b928      	cbnz	r0, 80172a4 <_svfprintf_r+0xc04>
 8017298:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 801729c:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80172a0:	e7e8      	b.n	8017274 <_svfprintf_r+0xbd4>
 80172a2:	46ab      	mov	fp, r5
 80172a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	f43f ab8a 	beq.w	80169c0 <_svfprintf_r+0x320>
 80172ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80172ae:	4648      	mov	r0, r9
 80172b0:	f004 f852 	bl	801b358 <_free_r>
 80172b4:	f7ff bb84 	b.w	80169c0 <_svfprintf_r+0x320>
 80172b8:	9b06      	ldr	r3, [sp, #24]
 80172ba:	07d8      	lsls	r0, r3, #31
 80172bc:	f53f ae70 	bmi.w	8016fa0 <_svfprintf_r+0x900>
 80172c0:	3401      	adds	r4, #1
 80172c2:	3501      	adds	r5, #1
 80172c4:	2301      	movs	r3, #1
 80172c6:	2c07      	cmp	r4, #7
 80172c8:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 80172cc:	f8c8 7000 	str.w	r7, [r8]
 80172d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80172d4:	f77f ae96 	ble.w	8017004 <_svfprintf_r+0x964>
 80172d8:	ee18 1a10 	vmov	r1, s16
 80172dc:	aa26      	add	r2, sp, #152	; 0x98
 80172de:	4648      	mov	r0, r9
 80172e0:	f004 ff80 	bl	801c1e4 <__ssprint_r>
 80172e4:	2800      	cmp	r0, #0
 80172e6:	f47f ae53 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 80172ea:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 80172ee:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80172f2:	e689      	b.n	8017008 <_svfprintf_r+0x968>
 80172f4:	1e5e      	subs	r6, r3, #1
 80172f6:	2e00      	cmp	r6, #0
 80172f8:	f77f ae86 	ble.w	8017008 <_svfprintf_r+0x968>
 80172fc:	2e10      	cmp	r6, #16
 80172fe:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801742c <_svfprintf_r+0xd8c>
 8017302:	f340 83bd 	ble.w	8017a80 <_svfprintf_r+0x13e0>
 8017306:	f8cd a01c 	str.w	sl, [sp, #28]
 801730a:	2710      	movs	r7, #16
 801730c:	ee18 aa10 	vmov	sl, s16
 8017310:	e005      	b.n	801731e <_svfprintf_r+0xc7e>
 8017312:	f108 0808 	add.w	r8, r8, #8
 8017316:	3e10      	subs	r6, #16
 8017318:	2e10      	cmp	r6, #16
 801731a:	f340 83af 	ble.w	8017a7c <_svfprintf_r+0x13dc>
 801731e:	3401      	adds	r4, #1
 8017320:	3510      	adds	r5, #16
 8017322:	2c07      	cmp	r4, #7
 8017324:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8017328:	e9c8 b700 	strd	fp, r7, [r8]
 801732c:	ddf1      	ble.n	8017312 <_svfprintf_r+0xc72>
 801732e:	aa26      	add	r2, sp, #152	; 0x98
 8017330:	4651      	mov	r1, sl
 8017332:	4648      	mov	r0, r9
 8017334:	f004 ff56 	bl	801c1e4 <__ssprint_r>
 8017338:	2800      	cmp	r0, #0
 801733a:	f040 85fc 	bne.w	8017f36 <_svfprintf_r+0x1896>
 801733e:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 8017342:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017346:	e7e6      	b.n	8017316 <_svfprintf_r+0xc76>
 8017348:	ee18 1a10 	vmov	r1, s16
 801734c:	aa26      	add	r2, sp, #152	; 0x98
 801734e:	4648      	mov	r0, r9
 8017350:	f004 ff48 	bl	801c1e4 <__ssprint_r>
 8017354:	2800      	cmp	r0, #0
 8017356:	f47f ae1b 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 801735a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 801735c:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017360:	f7ff baf3 	b.w	801694a <_svfprintf_r+0x2aa>
 8017364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017366:	06ee      	lsls	r6, r5, #27
 8017368:	f852 1b04 	ldr.w	r1, [r2], #4
 801736c:	920c      	str	r2, [sp, #48]	; 0x30
 801736e:	f04f 0301 	mov.w	r3, #1
 8017372:	d443      	bmi.n	80173fc <_svfprintf_r+0xd5c>
 8017374:	0668      	lsls	r0, r5, #25
 8017376:	d53e      	bpl.n	80173f6 <_svfprintf_r+0xd56>
 8017378:	fa1f fa81 	uxth.w	sl, r1
 801737c:	f04f 0b00 	mov.w	fp, #0
 8017380:	f7ff bbff 	b.w	8016b82 <_svfprintf_r+0x4e2>
 8017384:	9b06      	ldr	r3, [sp, #24]
 8017386:	06da      	lsls	r2, r3, #27
 8017388:	f100 8118 	bmi.w	80175bc <_svfprintf_r+0xf1c>
 801738c:	9b06      	ldr	r3, [sp, #24]
 801738e:	065b      	lsls	r3, r3, #25
 8017390:	f140 8389 	bpl.w	8017aa6 <_svfprintf_r+0x1406>
 8017394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017396:	f853 2b04 	ldr.w	r2, [r3], #4
 801739a:	930c      	str	r3, [sp, #48]	; 0x30
 801739c:	fa1f fa82 	uxth.w	sl, r2
 80173a0:	f04f 0b00 	mov.w	fp, #0
 80173a4:	f7ff bbe9 	b.w	8016b7a <_svfprintf_r+0x4da>
 80173a8:	ee18 1a10 	vmov	r1, s16
 80173ac:	aa26      	add	r2, sp, #152	; 0x98
 80173ae:	4648      	mov	r0, r9
 80173b0:	f004 ff18 	bl	801c1e4 <__ssprint_r>
 80173b4:	2800      	cmp	r0, #0
 80173b6:	f47f adeb 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 80173ba:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 80173be:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80173c2:	e5fb      	b.n	8016fbc <_svfprintf_r+0x91c>
 80173c4:	ee18 1a10 	vmov	r1, s16
 80173c8:	aa26      	add	r2, sp, #152	; 0x98
 80173ca:	4648      	mov	r0, r9
 80173cc:	f004 ff0a 	bl	801c1e4 <__ssprint_r>
 80173d0:	2800      	cmp	r0, #0
 80173d2:	f47f addd 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 80173d6:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 80173da:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80173de:	e5fa      	b.n	8016fd6 <_svfprintf_r+0x936>
 80173e0:	9b06      	ldr	r3, [sp, #24]
 80173e2:	07df      	lsls	r7, r3, #31
 80173e4:	f57f aac4 	bpl.w	8016970 <_svfprintf_r+0x2d0>
 80173e8:	e509      	b.n	8016dfe <_svfprintf_r+0x75e>
 80173ea:	7834      	ldrb	r4, [r6, #0]
 80173ec:	930c      	str	r3, [sp, #48]	; 0x30
 80173ee:	f7ff b9a5 	b.w	801673c <_svfprintf_r+0x9c>
 80173f2:	af52      	add	r7, sp, #328	; 0x148
 80173f4:	e4b5      	b.n	8016d62 <_svfprintf_r+0x6c2>
 80173f6:	05aa      	lsls	r2, r5, #22
 80173f8:	f100 83d4 	bmi.w	8017ba4 <_svfprintf_r+0x1504>
 80173fc:	468a      	mov	sl, r1
 80173fe:	f04f 0b00 	mov.w	fp, #0
 8017402:	f7ff bbbe 	b.w	8016b82 <_svfprintf_r+0x4e2>
 8017406:	9b06      	ldr	r3, [sp, #24]
 8017408:	0659      	lsls	r1, r3, #25
 801740a:	f140 8369 	bpl.w	8017ae0 <_svfprintf_r+0x1440>
 801740e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017410:	f853 2b04 	ldr.w	r2, [r3], #4
 8017414:	930c      	str	r3, [sp, #48]	; 0x30
 8017416:	fa0f fa82 	sxth.w	sl, r2
 801741a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801741e:	4652      	mov	r2, sl
 8017420:	465b      	mov	r3, fp
 8017422:	f7ff bb6b 	b.w	8016afc <_svfprintf_r+0x45c>
 8017426:	bf00      	nop
 8017428:	08020568 	.word	0x08020568
 801742c:	08020578 	.word	0x08020578
 8017430:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8017434:	460b      	mov	r3, r1
 8017436:	4602      	mov	r2, r0
 8017438:	f7e9 fe38 	bl	80010ac <__aeabi_dcmpun>
 801743c:	4601      	mov	r1, r0
 801743e:	2800      	cmp	r0, #0
 8017440:	f040 860d 	bne.w	801805e <_svfprintf_r+0x19be>
 8017444:	2c61      	cmp	r4, #97	; 0x61
 8017446:	f000 85c1 	beq.w	8017fcc <_svfprintf_r+0x192c>
 801744a:	2c41      	cmp	r4, #65	; 0x41
 801744c:	f000 84af 	beq.w	8017dae <_svfprintf_r+0x170e>
 8017450:	9b07      	ldr	r3, [sp, #28]
 8017452:	f024 0620 	bic.w	r6, r4, #32
 8017456:	1c5a      	adds	r2, r3, #1
 8017458:	960a      	str	r6, [sp, #40]	; 0x28
 801745a:	f000 83c6 	beq.w	8017bea <_svfprintf_r+0x154a>
 801745e:	2e47      	cmp	r6, #71	; 0x47
 8017460:	f000 85b9 	beq.w	8017fd6 <_svfprintf_r+0x1936>
 8017464:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8017468:	9a06      	ldr	r2, [sp, #24]
 801746a:	2900      	cmp	r1, #0
 801746c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017470:	920e      	str	r2, [sp, #56]	; 0x38
 8017472:	f04f 0300 	mov.w	r3, #0
 8017476:	f2c0 85d4 	blt.w	8018022 <_svfprintf_r+0x1982>
 801747a:	ec41 0b1a 	vmov	d10, r0, r1
 801747e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017480:	930b      	str	r3, [sp, #44]	; 0x2c
 8017482:	2e46      	cmp	r6, #70	; 0x46
 8017484:	f000 8444 	beq.w	8017d10 <_svfprintf_r+0x1670>
 8017488:	2e45      	cmp	r6, #69	; 0x45
 801748a:	f040 8423 	bne.w	8017cd4 <_svfprintf_r+0x1634>
 801748e:	9b07      	ldr	r3, [sp, #28]
 8017490:	a824      	add	r0, sp, #144	; 0x90
 8017492:	1c5d      	adds	r5, r3, #1
 8017494:	a921      	add	r1, sp, #132	; 0x84
 8017496:	aa20      	add	r2, sp, #128	; 0x80
 8017498:	2302      	movs	r3, #2
 801749a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801749e:	9501      	str	r5, [sp, #4]
 80174a0:	9202      	str	r2, [sp, #8]
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	4648      	mov	r0, r9
 80174a6:	ec53 2b1a 	vmov	r2, r3, d10
 80174aa:	f002 fe15 	bl	801a0d8 <_dtoa_r>
 80174ae:	4607      	mov	r7, r0
 80174b0:	4405      	add	r5, r0
 80174b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174b4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80174b8:	9306      	str	r3, [sp, #24]
 80174ba:	ec51 0b1a 	vmov	r0, r1, d10
 80174be:	2200      	movs	r2, #0
 80174c0:	2300      	movs	r3, #0
 80174c2:	f7e9 fdc1 	bl	8001048 <__aeabi_dcmpeq>
 80174c6:	2800      	cmp	r0, #0
 80174c8:	f000 83ce 	beq.w	8017c68 <_svfprintf_r+0x15c8>
 80174cc:	462b      	mov	r3, r5
 80174ce:	1bdb      	subs	r3, r3, r7
 80174d0:	9310      	str	r3, [sp, #64]	; 0x40
 80174d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174d4:	2b47      	cmp	r3, #71	; 0x47
 80174d6:	f000 8399 	beq.w	8017c0c <_svfprintf_r+0x156c>
 80174da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174dc:	2b46      	cmp	r3, #70	; 0x46
 80174de:	f000 8446 	beq.w	8017d6e <_svfprintf_r+0x16ce>
 80174e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80174e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174ea:	3b01      	subs	r3, #1
 80174ec:	2a41      	cmp	r2, #65	; 0x41
 80174ee:	9320      	str	r3, [sp, #128]	; 0x80
 80174f0:	f000 85af 	beq.w	8018052 <_svfprintf_r+0x19b2>
 80174f4:	b2e2      	uxtb	r2, r4
 80174f6:	2100      	movs	r1, #0
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	bfb8      	it	lt
 80174fc:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 80174fe:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8017502:	bfba      	itte	lt
 8017504:	f1c3 0301 	rsblt	r3, r3, #1
 8017508:	222d      	movlt	r2, #45	; 0x2d
 801750a:	222b      	movge	r2, #43	; 0x2b
 801750c:	2b09      	cmp	r3, #9
 801750e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8017512:	f340 85b7 	ble.w	8018084 <_svfprintf_r+0x19e4>
 8017516:	f10d 0e97 	add.w	lr, sp, #151	; 0x97
 801751a:	f8df c45c 	ldr.w	ip, [pc, #1116]	; 8017978 <_svfprintf_r+0x12d8>
 801751e:	4675      	mov	r5, lr
 8017520:	fb8c 2103 	smull	r2, r1, ip, r3
 8017524:	17da      	asrs	r2, r3, #31
 8017526:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801752a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801752e:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8017532:	461e      	mov	r6, r3
 8017534:	3130      	adds	r1, #48	; 0x30
 8017536:	2e63      	cmp	r6, #99	; 0x63
 8017538:	4628      	mov	r0, r5
 801753a:	f805 1c01 	strb.w	r1, [r5, #-1]
 801753e:	4613      	mov	r3, r2
 8017540:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8017544:	dcec      	bgt.n	8017520 <_svfprintf_r+0xe80>
 8017546:	3330      	adds	r3, #48	; 0x30
 8017548:	b2da      	uxtb	r2, r3
 801754a:	1e83      	subs	r3, r0, #2
 801754c:	459e      	cmp	lr, r3
 801754e:	4629      	mov	r1, r5
 8017550:	f805 2c01 	strb.w	r2, [r5, #-1]
 8017554:	f240 8639 	bls.w	80181ca <_svfprintf_r+0x1b2a>
 8017558:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801755c:	e001      	b.n	8017562 <_svfprintf_r+0xec2>
 801755e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017562:	f803 2b01 	strb.w	r2, [r3], #1
 8017566:	458e      	cmp	lr, r1
 8017568:	d1f9      	bne.n	801755e <_svfprintf_r+0xebe>
 801756a:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 801756e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8017572:	1a1b      	subs	r3, r3, r0
 8017574:	4413      	add	r3, r2
 8017576:	aa22      	add	r2, sp, #136	; 0x88
 8017578:	1a9b      	subs	r3, r3, r2
 801757a:	9318      	str	r3, [sp, #96]	; 0x60
 801757c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801757e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017580:	2b01      	cmp	r3, #1
 8017582:	441a      	add	r2, r3
 8017584:	920a      	str	r2, [sp, #40]	; 0x28
 8017586:	f340 85e1 	ble.w	801814c <_svfprintf_r+0x1aac>
 801758a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801758c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801758e:	4413      	add	r3, r2
 8017590:	930a      	str	r3, [sp, #40]	; 0x28
 8017592:	2300      	movs	r3, #0
 8017594:	f42b 6680 	bic.w	r6, fp, #1024	; 0x400
 8017598:	930e      	str	r3, [sp, #56]	; 0x38
 801759a:	9311      	str	r3, [sp, #68]	; 0x44
 801759c:	930f      	str	r3, [sp, #60]	; 0x3c
 801759e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175a0:	f446 7280 	orr.w	r2, r6, #256	; 0x100
 80175a4:	9206      	str	r2, [sp, #24]
 80175a6:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 80175aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	f040 8354 	bne.w	8017c5a <_svfprintf_r+0x15ba>
 80175b2:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 80175b6:	9307      	str	r3, [sp, #28]
 80175b8:	f7ff ba57 	b.w	8016a6a <_svfprintf_r+0x3ca>
 80175bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175be:	f853 2b04 	ldr.w	r2, [r3], #4
 80175c2:	930c      	str	r3, [sp, #48]	; 0x30
 80175c4:	4692      	mov	sl, r2
 80175c6:	f04f 0b00 	mov.w	fp, #0
 80175ca:	f7ff bad6 	b.w	8016b7a <_svfprintf_r+0x4da>
 80175ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175d0:	f853 1b04 	ldr.w	r1, [r3], #4
 80175d4:	930c      	str	r3, [sp, #48]	; 0x30
 80175d6:	9b08      	ldr	r3, [sp, #32]
 80175d8:	17dd      	asrs	r5, r3, #31
 80175da:	461a      	mov	r2, r3
 80175dc:	462b      	mov	r3, r5
 80175de:	e9c1 2300 	strd	r2, r3, [r1]
 80175e2:	f7ff b9e2 	b.w	80169aa <_svfprintf_r+0x30a>
 80175e6:	f1bb 0f00 	cmp.w	fp, #0
 80175ea:	bf08      	it	eq
 80175ec:	f1ba 0f0a 	cmpeq.w	sl, #10
 80175f0:	9d06      	ldr	r5, [sp, #24]
 80175f2:	f4ff ad2b 	bcc.w	801704c <_svfprintf_r+0x9ac>
 80175f6:	f405 6680 	and.w	r6, r5, #1024	; 0x400
 80175fa:	2300      	movs	r3, #0
 80175fc:	9506      	str	r5, [sp, #24]
 80175fe:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8017602:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8017604:	46a0      	mov	r8, r4
 8017606:	af52      	add	r7, sp, #328	; 0x148
 8017608:	4634      	mov	r4, r6
 801760a:	461e      	mov	r6, r3
 801760c:	e009      	b.n	8017622 <_svfprintf_r+0xf82>
 801760e:	f7e9 fee9 	bl	80013e4 <__aeabi_uldivmod>
 8017612:	f1bb 0f00 	cmp.w	fp, #0
 8017616:	bf08      	it	eq
 8017618:	f1ba 0f0a 	cmpeq.w	sl, #10
 801761c:	d31f      	bcc.n	801765e <_svfprintf_r+0xfbe>
 801761e:	4682      	mov	sl, r0
 8017620:	468b      	mov	fp, r1
 8017622:	220a      	movs	r2, #10
 8017624:	2300      	movs	r3, #0
 8017626:	4650      	mov	r0, sl
 8017628:	4659      	mov	r1, fp
 801762a:	f7e9 fedb 	bl	80013e4 <__aeabi_uldivmod>
 801762e:	4694      	mov	ip, r2
 8017630:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8017634:	f807 cc01 	strb.w	ip, [r7, #-1]
 8017638:	4650      	mov	r0, sl
 801763a:	4659      	mov	r1, fp
 801763c:	220a      	movs	r2, #10
 801763e:	2300      	movs	r3, #0
 8017640:	3601      	adds	r6, #1
 8017642:	3f01      	subs	r7, #1
 8017644:	2c00      	cmp	r4, #0
 8017646:	d0e2      	beq.n	801760e <_svfprintf_r+0xf6e>
 8017648:	f895 c000 	ldrb.w	ip, [r5]
 801764c:	4566      	cmp	r6, ip
 801764e:	d1de      	bne.n	801760e <_svfprintf_r+0xf6e>
 8017650:	2eff      	cmp	r6, #255	; 0xff
 8017652:	d0dc      	beq.n	801760e <_svfprintf_r+0xf6e>
 8017654:	459b      	cmp	fp, r3
 8017656:	bf08      	it	eq
 8017658:	4592      	cmpeq	sl, r2
 801765a:	f080 8267 	bcs.w	8017b2c <_svfprintf_r+0x148c>
 801765e:	ab52      	add	r3, sp, #328	; 0x148
 8017660:	1bdb      	subs	r3, r3, r7
 8017662:	4644      	mov	r4, r8
 8017664:	9517      	str	r5, [sp, #92]	; 0x5c
 8017666:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801766a:	9610      	str	r6, [sp, #64]	; 0x40
 801766c:	930a      	str	r3, [sp, #40]	; 0x28
 801766e:	f7ff bb78 	b.w	8016d62 <_svfprintf_r+0x6c2>
 8017672:	4bbc      	ldr	r3, [pc, #752]	; (8017964 <_svfprintf_r+0x12c4>)
 8017674:	960d      	str	r6, [sp, #52]	; 0x34
 8017676:	9316      	str	r3, [sp, #88]	; 0x58
 8017678:	9b06      	ldr	r3, [sp, #24]
 801767a:	069f      	lsls	r7, r3, #26
 801767c:	f140 8105 	bpl.w	801788a <_svfprintf_r+0x11ea>
 8017680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017682:	3307      	adds	r3, #7
 8017684:	f023 0307 	bic.w	r3, r3, #7
 8017688:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
 801768c:	930c      	str	r3, [sp, #48]	; 0x30
 801768e:	9a06      	ldr	r2, [sp, #24]
 8017690:	07d0      	lsls	r0, r2, #31
 8017692:	d50a      	bpl.n	80176aa <_svfprintf_r+0x100a>
 8017694:	ea5a 030b 	orrs.w	r3, sl, fp
 8017698:	d007      	beq.n	80176aa <_svfprintf_r+0x100a>
 801769a:	2330      	movs	r3, #48	; 0x30
 801769c:	f042 0202 	orr.w	r2, r2, #2
 80176a0:	f88d 407d 	strb.w	r4, [sp, #125]	; 0x7d
 80176a4:	9206      	str	r2, [sp, #24]
 80176a6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80176aa:	9b06      	ldr	r3, [sp, #24]
 80176ac:	f423 6580 	bic.w	r5, r3, #1024	; 0x400
 80176b0:	2302      	movs	r3, #2
 80176b2:	f7ff ba66 	b.w	8016b82 <_svfprintf_r+0x4e2>
 80176b6:	960d      	str	r6, [sp, #52]	; 0x34
 80176b8:	f7ff ba54 	b.w	8016b64 <_svfprintf_r+0x4c4>
 80176bc:	9d06      	ldr	r5, [sp, #24]
 80176be:	960d      	str	r6, [sp, #52]	; 0x34
 80176c0:	f7ff bac0 	b.w	8016c44 <_svfprintf_r+0x5a4>
 80176c4:	4ba8      	ldr	r3, [pc, #672]	; (8017968 <_svfprintf_r+0x12c8>)
 80176c6:	960d      	str	r6, [sp, #52]	; 0x34
 80176c8:	9316      	str	r3, [sp, #88]	; 0x58
 80176ca:	e7d5      	b.n	8017678 <_svfprintf_r+0xfd8>
 80176cc:	ee18 1a10 	vmov	r1, s16
 80176d0:	aa26      	add	r2, sp, #152	; 0x98
 80176d2:	4648      	mov	r0, r9
 80176d4:	f004 fd86 	bl	801c1e4 <__ssprint_r>
 80176d8:	2800      	cmp	r0, #0
 80176da:	f47f ac59 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 80176de:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80176e0:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80176e4:	f7ff bb9b 	b.w	8016e1e <_svfprintf_r+0x77e>
 80176e8:	f043 0320 	orr.w	r3, r3, #32
 80176ec:	7874      	ldrb	r4, [r6, #1]
 80176ee:	9306      	str	r3, [sp, #24]
 80176f0:	3601      	adds	r6, #1
 80176f2:	f7ff b823 	b.w	801673c <_svfprintf_r+0x9c>
 80176f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80176fa:	7874      	ldrb	r4, [r6, #1]
 80176fc:	9306      	str	r3, [sp, #24]
 80176fe:	3601      	adds	r6, #1
 8017700:	f7ff b81c 	b.w	801673c <_svfprintf_r+0x9c>
 8017704:	2140      	movs	r1, #64	; 0x40
 8017706:	4648      	mov	r0, r9
 8017708:	f7fd fd70 	bl	80151ec <_malloc_r>
 801770c:	f8cb 0000 	str.w	r0, [fp]
 8017710:	f8cb 0010 	str.w	r0, [fp, #16]
 8017714:	2800      	cmp	r0, #0
 8017716:	f000 8542 	beq.w	801819e <_svfprintf_r+0x1afe>
 801771a:	2340      	movs	r3, #64	; 0x40
 801771c:	f8cb 3014 	str.w	r3, [fp, #20]
 8017720:	f7fe bfd8 	b.w	80166d4 <_svfprintf_r+0x34>
 8017724:	9b07      	ldr	r3, [sp, #28]
 8017726:	970e      	str	r7, [sp, #56]	; 0x38
 8017728:	2b06      	cmp	r3, #6
 801772a:	bf28      	it	cs
 801772c:	2306      	movcs	r3, #6
 801772e:	9707      	str	r7, [sp, #28]
 8017730:	9711      	str	r7, [sp, #68]	; 0x44
 8017732:	970f      	str	r7, [sp, #60]	; 0x3c
 8017734:	970b      	str	r7, [sp, #44]	; 0x2c
 8017736:	463a      	mov	r2, r7
 8017738:	469a      	mov	sl, r3
 801773a:	4f8c      	ldr	r7, [pc, #560]	; (801796c <_svfprintf_r+0x12cc>)
 801773c:	950c      	str	r5, [sp, #48]	; 0x30
 801773e:	930a      	str	r3, [sp, #40]	; 0x28
 8017740:	f7ff b993 	b.w	8016a6a <_svfprintf_r+0x3ca>
 8017744:	2c10      	cmp	r4, #16
 8017746:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017748:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017970 <_svfprintf_r+0x12d0>
 801774c:	f340 81db 	ble.w	8017b06 <_svfprintf_r+0x1466>
 8017750:	462a      	mov	r2, r5
 8017752:	2610      	movs	r6, #16
 8017754:	465d      	mov	r5, fp
 8017756:	ee18 ba10 	vmov	fp, s16
 801775a:	e005      	b.n	8017768 <_svfprintf_r+0x10c8>
 801775c:	f108 0808 	add.w	r8, r8, #8
 8017760:	3c10      	subs	r4, #16
 8017762:	2c10      	cmp	r4, #16
 8017764:	f340 81cd 	ble.w	8017b02 <_svfprintf_r+0x1462>
 8017768:	3301      	adds	r3, #1
 801776a:	3210      	adds	r2, #16
 801776c:	2b07      	cmp	r3, #7
 801776e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8017772:	e9c8 5600 	strd	r5, r6, [r8]
 8017776:	ddf1      	ble.n	801775c <_svfprintf_r+0x10bc>
 8017778:	aa26      	add	r2, sp, #152	; 0x98
 801777a:	4659      	mov	r1, fp
 801777c:	4648      	mov	r0, r9
 801777e:	f004 fd31 	bl	801c1e4 <__ssprint_r>
 8017782:	2800      	cmp	r0, #0
 8017784:	f47f ad8e 	bne.w	80172a4 <_svfprintf_r+0xc04>
 8017788:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801778c:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017790:	e7e6      	b.n	8017760 <_svfprintf_r+0x10c0>
 8017792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017794:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8017798:	465e      	mov	r6, fp
 801779a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801779e:	970f      	str	r7, [sp, #60]	; 0x3c
 80177a0:	18fb      	adds	r3, r7, r3
 80177a2:	9307      	str	r3, [sp, #28]
 80177a4:	4642      	mov	r2, r8
 80177a6:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80177aa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80177ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177ae:	ee18 8a10 	vmov	r8, s16
 80177b2:	4628      	mov	r0, r5
 80177b4:	f1bb 0f00 	cmp.w	fp, #0
 80177b8:	d02f      	beq.n	801781a <_svfprintf_r+0x117a>
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d130      	bne.n	8017820 <_svfprintf_r+0x1180>
 80177be:	3f01      	subs	r7, #1
 80177c0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80177c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80177c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80177c8:	6011      	str	r1, [r2, #0]
 80177ca:	3301      	adds	r3, #1
 80177cc:	4450      	add	r0, sl
 80177ce:	2b07      	cmp	r3, #7
 80177d0:	9028      	str	r0, [sp, #160]	; 0xa0
 80177d2:	f8c2 a004 	str.w	sl, [r2, #4]
 80177d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80177d8:	dc62      	bgt.n	80178a0 <_svfprintf_r+0x1200>
 80177da:	3208      	adds	r2, #8
 80177dc:	9907      	ldr	r1, [sp, #28]
 80177de:	783b      	ldrb	r3, [r7, #0]
 80177e0:	1b8c      	subs	r4, r1, r6
 80177e2:	429c      	cmp	r4, r3
 80177e4:	bfa8      	it	ge
 80177e6:	461c      	movge	r4, r3
 80177e8:	2c00      	cmp	r4, #0
 80177ea:	dd0b      	ble.n	8017804 <_svfprintf_r+0x1164>
 80177ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80177ee:	6016      	str	r6, [r2, #0]
 80177f0:	3301      	adds	r3, #1
 80177f2:	4420      	add	r0, r4
 80177f4:	2b07      	cmp	r3, #7
 80177f6:	9028      	str	r0, [sp, #160]	; 0xa0
 80177f8:	6054      	str	r4, [r2, #4]
 80177fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80177fc:	f300 80dc 	bgt.w	80179b8 <_svfprintf_r+0x1318>
 8017800:	783b      	ldrb	r3, [r7, #0]
 8017802:	3208      	adds	r2, #8
 8017804:	2c00      	cmp	r4, #0
 8017806:	bfac      	ite	ge
 8017808:	1b1c      	subge	r4, r3, r4
 801780a:	461c      	movlt	r4, r3
 801780c:	2c00      	cmp	r4, #0
 801780e:	dc0b      	bgt.n	8017828 <_svfprintf_r+0x1188>
 8017810:	441e      	add	r6, r3
 8017812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017814:	f1bb 0f00 	cmp.w	fp, #0
 8017818:	d1cf      	bne.n	80177ba <_svfprintf_r+0x111a>
 801781a:	2b00      	cmp	r3, #0
 801781c:	f000 81e8 	beq.w	8017bf0 <_svfprintf_r+0x1550>
 8017820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017822:	3b01      	subs	r3, #1
 8017824:	930e      	str	r3, [sp, #56]	; 0x38
 8017826:	e7cd      	b.n	80177c4 <_svfprintf_r+0x1124>
 8017828:	2c10      	cmp	r4, #16
 801782a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801782c:	dd1f      	ble.n	801786e <_svfprintf_r+0x11ce>
 801782e:	2510      	movs	r5, #16
 8017830:	460b      	mov	r3, r1
 8017832:	e004      	b.n	801783e <_svfprintf_r+0x119e>
 8017834:	3c10      	subs	r4, #16
 8017836:	2c10      	cmp	r4, #16
 8017838:	f102 0208 	add.w	r2, r2, #8
 801783c:	dd16      	ble.n	801786c <_svfprintf_r+0x11cc>
 801783e:	3301      	adds	r3, #1
 8017840:	494b      	ldr	r1, [pc, #300]	; (8017970 <_svfprintf_r+0x12d0>)
 8017842:	3010      	adds	r0, #16
 8017844:	2b07      	cmp	r3, #7
 8017846:	e9cd 3027 	strd	r3, r0, [sp, #156]	; 0x9c
 801784a:	e9c2 1500 	strd	r1, r5, [r2]
 801784e:	ddf1      	ble.n	8017834 <_svfprintf_r+0x1194>
 8017850:	aa26      	add	r2, sp, #152	; 0x98
 8017852:	4641      	mov	r1, r8
 8017854:	4648      	mov	r0, r9
 8017856:	f004 fcc5 	bl	801c1e4 <__ssprint_r>
 801785a:	2800      	cmp	r0, #0
 801785c:	f040 8186 	bne.w	8017b6c <_svfprintf_r+0x14cc>
 8017860:	3c10      	subs	r4, #16
 8017862:	2c10      	cmp	r4, #16
 8017864:	e9dd 3027 	ldrd	r3, r0, [sp, #156]	; 0x9c
 8017868:	aa29      	add	r2, sp, #164	; 0xa4
 801786a:	dce8      	bgt.n	801783e <_svfprintf_r+0x119e>
 801786c:	4619      	mov	r1, r3
 801786e:	4b40      	ldr	r3, [pc, #256]	; (8017970 <_svfprintf_r+0x12d0>)
 8017870:	6013      	str	r3, [r2, #0]
 8017872:	1c4b      	adds	r3, r1, #1
 8017874:	4420      	add	r0, r4
 8017876:	2b07      	cmp	r3, #7
 8017878:	e9cd 3027 	strd	r3, r0, [sp, #156]	; 0x9c
 801787c:	6054      	str	r4, [r2, #4]
 801787e:	f300 820d 	bgt.w	8017c9c <_svfprintf_r+0x15fc>
 8017882:	783b      	ldrb	r3, [r7, #0]
 8017884:	3208      	adds	r2, #8
 8017886:	441e      	add	r6, r3
 8017888:	e7c3      	b.n	8017812 <_svfprintf_r+0x1172>
 801788a:	9b06      	ldr	r3, [sp, #24]
 801788c:	06de      	lsls	r6, r3, #27
 801788e:	d55c      	bpl.n	801794a <_svfprintf_r+0x12aa>
 8017890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017892:	f853 2b04 	ldr.w	r2, [r3], #4
 8017896:	930c      	str	r3, [sp, #48]	; 0x30
 8017898:	4692      	mov	sl, r2
 801789a:	f04f 0b00 	mov.w	fp, #0
 801789e:	e6f6      	b.n	801768e <_svfprintf_r+0xfee>
 80178a0:	aa26      	add	r2, sp, #152	; 0x98
 80178a2:	4641      	mov	r1, r8
 80178a4:	4648      	mov	r0, r9
 80178a6:	f004 fc9d 	bl	801c1e4 <__ssprint_r>
 80178aa:	2800      	cmp	r0, #0
 80178ac:	f040 815e 	bne.w	8017b6c <_svfprintf_r+0x14cc>
 80178b0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80178b2:	aa29      	add	r2, sp, #164	; 0xa4
 80178b4:	e792      	b.n	80177dc <_svfprintf_r+0x113c>
 80178b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80178b8:	492e      	ldr	r1, [pc, #184]	; (8017974 <_svfprintf_r+0x12d4>)
 80178ba:	f8c8 1000 	str.w	r1, [r8]
 80178be:	3301      	adds	r3, #1
 80178c0:	3501      	adds	r5, #1
 80178c2:	2101      	movs	r1, #1
 80178c4:	2b07      	cmp	r3, #7
 80178c6:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80178ca:	f8c8 1004 	str.w	r1, [r8, #4]
 80178ce:	f300 813f 	bgt.w	8017b50 <_svfprintf_r+0x14b0>
 80178d2:	f108 0808 	add.w	r8, r8, #8
 80178d6:	2a00      	cmp	r2, #0
 80178d8:	f040 8096 	bne.w	8017a08 <_svfprintf_r+0x1368>
 80178dc:	9b06      	ldr	r3, [sp, #24]
 80178de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178e0:	f003 0301 	and.w	r3, r3, #1
 80178e4:	4313      	orrs	r3, r2
 80178e6:	f43f a843 	beq.w	8016970 <_svfprintf_r+0x2d0>
 80178ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80178ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80178ee:	f8c8 2000 	str.w	r2, [r8]
 80178f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80178f4:	f8c8 2004 	str.w	r2, [r8, #4]
 80178f8:	3301      	adds	r3, #1
 80178fa:	4415      	add	r5, r2
 80178fc:	2b07      	cmp	r3, #7
 80178fe:	9528      	str	r5, [sp, #160]	; 0xa0
 8017900:	9327      	str	r3, [sp, #156]	; 0x9c
 8017902:	f300 8155 	bgt.w	8017bb0 <_svfprintf_r+0x1510>
 8017906:	f108 0808 	add.w	r8, r8, #8
 801790a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801790c:	3301      	adds	r3, #1
 801790e:	4415      	add	r5, r2
 8017910:	2b07      	cmp	r3, #7
 8017912:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8017916:	e9c8 7200 	strd	r7, r2, [r8]
 801791a:	f77f a827 	ble.w	801696c <_svfprintf_r+0x2cc>
 801791e:	f7ff bb7e 	b.w	801701e <_svfprintf_r+0x97e>
 8017922:	ee18 1a10 	vmov	r1, s16
 8017926:	aa26      	add	r2, sp, #152	; 0x98
 8017928:	4648      	mov	r0, r9
 801792a:	931b      	str	r3, [sp, #108]	; 0x6c
 801792c:	f004 fc5a 	bl	801c1e4 <__ssprint_r>
 8017930:	2800      	cmp	r0, #0
 8017932:	f47f ab2d 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017936:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 801793a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 801793c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801793e:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017942:	f7fe bfd9 	b.w	80168f8 <_svfprintf_r+0x258>
 8017946:	46a3      	mov	fp, r4
 8017948:	e4ac      	b.n	80172a4 <_svfprintf_r+0xc04>
 801794a:	9b06      	ldr	r3, [sp, #24]
 801794c:	065d      	lsls	r5, r3, #25
 801794e:	f140 80b9 	bpl.w	8017ac4 <_svfprintf_r+0x1424>
 8017952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017954:	f853 2b04 	ldr.w	r2, [r3], #4
 8017958:	930c      	str	r3, [sp, #48]	; 0x30
 801795a:	fa1f fa82 	uxth.w	sl, r2
 801795e:	f04f 0b00 	mov.w	fp, #0
 8017962:	e694      	b.n	801768e <_svfprintf_r+0xfee>
 8017964:	08020534 	.word	0x08020534
 8017968:	08020548 	.word	0x08020548
 801796c:	0802055c 	.word	0x0802055c
 8017970:	08020578 	.word	0x08020578
 8017974:	08020564 	.word	0x08020564
 8017978:	66666667 	.word	0x66666667
 801797c:	ee18 1a10 	vmov	r1, s16
 8017980:	aa26      	add	r2, sp, #152	; 0x98
 8017982:	4648      	mov	r0, r9
 8017984:	f004 fc2e 	bl	801c1e4 <__ssprint_r>
 8017988:	2800      	cmp	r0, #0
 801798a:	f47f ab01 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 801798e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017990:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017994:	f7ff ba2e 	b.w	8016df4 <_svfprintf_r+0x754>
 8017998:	46bb      	mov	fp, r7
 801799a:	e483      	b.n	80172a4 <_svfprintf_r+0xc04>
 801799c:	46bb      	mov	fp, r7
 801799e:	3301      	adds	r3, #1
 80179a0:	4425      	add	r5, r4
 80179a2:	2b07      	cmp	r3, #7
 80179a4:	f8c8 b000 	str.w	fp, [r8]
 80179a8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80179ac:	f8c8 4004 	str.w	r4, [r8, #4]
 80179b0:	f77e afdc 	ble.w	801696c <_svfprintf_r+0x2cc>
 80179b4:	f7ff bb33 	b.w	801701e <_svfprintf_r+0x97e>
 80179b8:	aa26      	add	r2, sp, #152	; 0x98
 80179ba:	4641      	mov	r1, r8
 80179bc:	4648      	mov	r0, r9
 80179be:	f004 fc11 	bl	801c1e4 <__ssprint_r>
 80179c2:	2800      	cmp	r0, #0
 80179c4:	f040 80d2 	bne.w	8017b6c <_svfprintf_r+0x14cc>
 80179c8:	783b      	ldrb	r3, [r7, #0]
 80179ca:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80179cc:	aa29      	add	r2, sp, #164	; 0xa4
 80179ce:	e719      	b.n	8017804 <_svfprintf_r+0x1164>
 80179d0:	ee18 1a10 	vmov	r1, s16
 80179d4:	aa26      	add	r2, sp, #152	; 0x98
 80179d6:	4648      	mov	r0, r9
 80179d8:	f004 fc04 	bl	801c1e4 <__ssprint_r>
 80179dc:	2800      	cmp	r0, #0
 80179de:	f47f aad7 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 80179e2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80179e4:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80179e8:	f7fe bfa9 	b.w	801693e <_svfprintf_r+0x29e>
 80179ec:	2b01      	cmp	r3, #1
 80179ee:	9d06      	ldr	r5, [sp, #24]
 80179f0:	f47f a99f 	bne.w	8016d32 <_svfprintf_r+0x692>
 80179f4:	f7ff bb2a 	b.w	801704c <_svfprintf_r+0x9ac>
 80179f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179fa:	9908      	ldr	r1, [sp, #32]
 80179fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a00:	6011      	str	r1, [r2, #0]
 8017a02:	930c      	str	r3, [sp, #48]	; 0x30
 8017a04:	f7fe bfd1 	b.w	80169aa <_svfprintf_r+0x30a>
 8017a08:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017a0a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017a0c:	f8c8 1000 	str.w	r1, [r8]
 8017a10:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017a12:	f8c8 1004 	str.w	r1, [r8, #4]
 8017a16:	3301      	adds	r3, #1
 8017a18:	440d      	add	r5, r1
 8017a1a:	2b07      	cmp	r3, #7
 8017a1c:	9528      	str	r5, [sp, #160]	; 0xa0
 8017a1e:	9327      	str	r3, [sp, #156]	; 0x9c
 8017a20:	f300 80c6 	bgt.w	8017bb0 <_svfprintf_r+0x1510>
 8017a24:	f108 0808 	add.w	r8, r8, #8
 8017a28:	2a00      	cmp	r2, #0
 8017a2a:	f6bf af6e 	bge.w	801790a <_svfprintf_r+0x126a>
 8017a2e:	4254      	negs	r4, r2
 8017a30:	3210      	adds	r2, #16
 8017a32:	f8df b6e8 	ldr.w	fp, [pc, #1768]	; 801811c <_svfprintf_r+0x1a7c>
 8017a36:	f280 82b2 	bge.w	8017f9e <_svfprintf_r+0x18fe>
 8017a3a:	462a      	mov	r2, r5
 8017a3c:	2610      	movs	r6, #16
 8017a3e:	465d      	mov	r5, fp
 8017a40:	ee18 ba10 	vmov	fp, s16
 8017a44:	e005      	b.n	8017a52 <_svfprintf_r+0x13b2>
 8017a46:	f108 0808 	add.w	r8, r8, #8
 8017a4a:	3c10      	subs	r4, #16
 8017a4c:	2c10      	cmp	r4, #16
 8017a4e:	f340 82a4 	ble.w	8017f9a <_svfprintf_r+0x18fa>
 8017a52:	3301      	adds	r3, #1
 8017a54:	3210      	adds	r2, #16
 8017a56:	2b07      	cmp	r3, #7
 8017a58:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8017a5c:	e9c8 5600 	strd	r5, r6, [r8]
 8017a60:	ddf1      	ble.n	8017a46 <_svfprintf_r+0x13a6>
 8017a62:	aa26      	add	r2, sp, #152	; 0x98
 8017a64:	4659      	mov	r1, fp
 8017a66:	4648      	mov	r0, r9
 8017a68:	f004 fbbc 	bl	801c1e4 <__ssprint_r>
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	f47f ac19 	bne.w	80172a4 <_svfprintf_r+0xc04>
 8017a72:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8017a76:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017a7a:	e7e6      	b.n	8017a4a <_svfprintf_r+0x13aa>
 8017a7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017a80:	3401      	adds	r4, #1
 8017a82:	4435      	add	r5, r6
 8017a84:	2c07      	cmp	r4, #7
 8017a86:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8017a8a:	e9c8 b600 	strd	fp, r6, [r8]
 8017a8e:	f77f aab9 	ble.w	8017004 <_svfprintf_r+0x964>
 8017a92:	e421      	b.n	80172d8 <_svfprintf_r+0xc38>
 8017a94:	4638      	mov	r0, r7
 8017a96:	f7e8 fdf3 	bl	8000680 <strlen>
 8017a9a:	4633      	mov	r3, r6
 8017a9c:	9607      	str	r6, [sp, #28]
 8017a9e:	4602      	mov	r2, r0
 8017aa0:	900a      	str	r0, [sp, #40]	; 0x28
 8017aa2:	f7ff b812 	b.w	8016aca <_svfprintf_r+0x42a>
 8017aa6:	9b06      	ldr	r3, [sp, #24]
 8017aa8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8017ab4:	bf14      	ite	ne
 8017ab6:	fa5f fa82 	uxtbne.w	sl, r2
 8017aba:	4692      	moveq	sl, r2
 8017abc:	f04f 0b00 	mov.w	fp, #0
 8017ac0:	f7ff b85b 	b.w	8016b7a <_svfprintf_r+0x4da>
 8017ac4:	9b06      	ldr	r3, [sp, #24]
 8017ac6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8017ad2:	bf14      	ite	ne
 8017ad4:	fa5f fa82 	uxtbne.w	sl, r2
 8017ad8:	4692      	moveq	sl, r2
 8017ada:	f04f 0b00 	mov.w	fp, #0
 8017ade:	e5d6      	b.n	801768e <_svfprintf_r+0xfee>
 8017ae0:	9b06      	ldr	r3, [sp, #24]
 8017ae2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017aec:	f43f a904 	beq.w	8016cf8 <_svfprintf_r+0x658>
 8017af0:	fa4f fa82 	sxtb.w	sl, r2
 8017af4:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8017af8:	930c      	str	r3, [sp, #48]	; 0x30
 8017afa:	4652      	mov	r2, sl
 8017afc:	465b      	mov	r3, fp
 8017afe:	f7fe bffd 	b.w	8016afc <_svfprintf_r+0x45c>
 8017b02:	46ab      	mov	fp, r5
 8017b04:	4615      	mov	r5, r2
 8017b06:	3301      	adds	r3, #1
 8017b08:	4425      	add	r5, r4
 8017b0a:	2b07      	cmp	r3, #7
 8017b0c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8017b10:	f8c8 b000 	str.w	fp, [r8]
 8017b14:	f8c8 4004 	str.w	r4, [r8, #4]
 8017b18:	dc59      	bgt.n	8017bce <_svfprintf_r+0x152e>
 8017b1a:	f108 0808 	add.w	r8, r8, #8
 8017b1e:	f7ff bb5e 	b.w	80171de <_svfprintf_r+0xb3e>
 8017b22:	222d      	movs	r2, #45	; 0x2d
 8017b24:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8017b28:	f7fe bf8c 	b.w	8016a44 <_svfprintf_r+0x3a4>
 8017b2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017b2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017b30:	1aff      	subs	r7, r7, r3
 8017b32:	461a      	mov	r2, r3
 8017b34:	4638      	mov	r0, r7
 8017b36:	f004 fb21 	bl	801c17c <strncpy>
 8017b3a:	786b      	ldrb	r3, [r5, #1]
 8017b3c:	b103      	cbz	r3, 8017b40 <_svfprintf_r+0x14a0>
 8017b3e:	3501      	adds	r5, #1
 8017b40:	220a      	movs	r2, #10
 8017b42:	2300      	movs	r3, #0
 8017b44:	4650      	mov	r0, sl
 8017b46:	4659      	mov	r1, fp
 8017b48:	2600      	movs	r6, #0
 8017b4a:	f7e9 fc4b 	bl	80013e4 <__aeabi_uldivmod>
 8017b4e:	e566      	b.n	801761e <_svfprintf_r+0xf7e>
 8017b50:	ee18 1a10 	vmov	r1, s16
 8017b54:	aa26      	add	r2, sp, #152	; 0x98
 8017b56:	4648      	mov	r0, r9
 8017b58:	f004 fb44 	bl	801c1e4 <__ssprint_r>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	f47f aa17 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017b62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b64:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017b66:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017b6a:	e6b4      	b.n	80178d6 <_svfprintf_r+0x1236>
 8017b6c:	46c3      	mov	fp, r8
 8017b6e:	f7ff bb99 	b.w	80172a4 <_svfprintf_r+0xc04>
 8017b72:	9b06      	ldr	r3, [sp, #24]
 8017b74:	7834      	ldrb	r4, [r6, #0]
 8017b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017b7a:	9306      	str	r3, [sp, #24]
 8017b7c:	f7fe bdde 	b.w	801673c <_svfprintf_r+0x9c>
 8017b80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017b82:	18bc      	adds	r4, r7, r2
 8017b84:	eba4 040b 	sub.w	r4, r4, fp
 8017b88:	1ad3      	subs	r3, r2, r3
 8017b8a:	429c      	cmp	r4, r3
 8017b8c:	bfa8      	it	ge
 8017b8e:	461c      	movge	r4, r3
 8017b90:	f7ff bb5c 	b.w	801724c <_svfprintf_r+0xbac>
 8017b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b96:	9908      	ldr	r1, [sp, #32]
 8017b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8017b9e:	8011      	strh	r1, [r2, #0]
 8017ba0:	f7fe bf03 	b.w	80169aa <_svfprintf_r+0x30a>
 8017ba4:	fa5f fa81 	uxtb.w	sl, r1
 8017ba8:	f04f 0b00 	mov.w	fp, #0
 8017bac:	f7fe bfe9 	b.w	8016b82 <_svfprintf_r+0x4e2>
 8017bb0:	ee18 1a10 	vmov	r1, s16
 8017bb4:	aa26      	add	r2, sp, #152	; 0x98
 8017bb6:	4648      	mov	r0, r9
 8017bb8:	f004 fb14 	bl	801c1e4 <__ssprint_r>
 8017bbc:	2800      	cmp	r0, #0
 8017bbe:	f47f a9e7 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017bc2:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8017bc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017bc8:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017bcc:	e72c      	b.n	8017a28 <_svfprintf_r+0x1388>
 8017bce:	ee18 1a10 	vmov	r1, s16
 8017bd2:	aa26      	add	r2, sp, #152	; 0x98
 8017bd4:	4648      	mov	r0, r9
 8017bd6:	f004 fb05 	bl	801c1e4 <__ssprint_r>
 8017bda:	2800      	cmp	r0, #0
 8017bdc:	f47f a9d8 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017be0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017be2:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017be6:	f7ff bafa 	b.w	80171de <_svfprintf_r+0xb3e>
 8017bea:	2306      	movs	r3, #6
 8017bec:	9307      	str	r3, [sp, #28]
 8017bee:	e439      	b.n	8017464 <_svfprintf_r+0xdc4>
 8017bf0:	9717      	str	r7, [sp, #92]	; 0x5c
 8017bf2:	e9dd 730f 	ldrd	r7, r3, [sp, #60]	; 0x3c
 8017bf6:	18fb      	adds	r3, r7, r3
 8017bf8:	429e      	cmp	r6, r3
 8017bfa:	46b3      	mov	fp, r6
 8017bfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017c00:	4605      	mov	r5, r0
 8017c02:	4690      	mov	r8, r2
 8017c04:	bf28      	it	cs
 8017c06:	469b      	movcs	fp, r3
 8017c08:	f7ff baf0 	b.w	80171ec <_svfprintf_r+0xb4c>
 8017c0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c10:	1cda      	adds	r2, r3, #3
 8017c12:	db02      	blt.n	8017c1a <_svfprintf_r+0x157a>
 8017c14:	9a07      	ldr	r2, [sp, #28]
 8017c16:	4293      	cmp	r3, r2
 8017c18:	dd04      	ble.n	8017c24 <_svfprintf_r+0x1584>
 8017c1a:	3c02      	subs	r4, #2
 8017c1c:	f024 0320 	bic.w	r3, r4, #32
 8017c20:	930a      	str	r3, [sp, #40]	; 0x28
 8017c22:	e460      	b.n	80174e6 <_svfprintf_r+0xe46>
 8017c24:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8017c28:	428b      	cmp	r3, r1
 8017c2a:	f2c0 80b6 	blt.w	8017d9a <_svfprintf_r+0x16fa>
 8017c2e:	f01b 0f01 	tst.w	fp, #1
 8017c32:	f000 8236 	beq.w	80180a2 <_svfprintf_r+0x1a02>
 8017c36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c38:	4413      	add	r3, r2
 8017c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8017c3c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8017c40:	d003      	beq.n	8017c4a <_svfprintf_r+0x15aa>
 8017c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	f300 8236 	bgt.w	80180b6 <_svfprintf_r+0x1a16>
 8017c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c4c:	2467      	movs	r4, #103	; 0x67
 8017c4e:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8017c52:	2300      	movs	r3, #0
 8017c54:	930e      	str	r3, [sp, #56]	; 0x38
 8017c56:	9311      	str	r3, [sp, #68]	; 0x44
 8017c58:	e4a7      	b.n	80175aa <_svfprintf_r+0xf0a>
 8017c5a:	222d      	movs	r2, #45	; 0x2d
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8017c62:	9307      	str	r3, [sp, #28]
 8017c64:	f7fe bf04 	b.w	8016a70 <_svfprintf_r+0x3d0>
 8017c68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017c6a:	42ab      	cmp	r3, r5
 8017c6c:	f4bf ac2f 	bcs.w	80174ce <_svfprintf_r+0xe2e>
 8017c70:	2130      	movs	r1, #48	; 0x30
 8017c72:	1c5a      	adds	r2, r3, #1
 8017c74:	9224      	str	r2, [sp, #144]	; 0x90
 8017c76:	7019      	strb	r1, [r3, #0]
 8017c78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017c7a:	429d      	cmp	r5, r3
 8017c7c:	d8f9      	bhi.n	8017c72 <_svfprintf_r+0x15d2>
 8017c7e:	e426      	b.n	80174ce <_svfprintf_r+0xe2e>
 8017c80:	ee18 1a10 	vmov	r1, s16
 8017c84:	aa26      	add	r2, sp, #152	; 0x98
 8017c86:	4648      	mov	r0, r9
 8017c88:	f004 faac 	bl	801c1e4 <__ssprint_r>
 8017c8c:	2800      	cmp	r0, #0
 8017c8e:	f47f a97f 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017c92:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017c94:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017c98:	f7ff ba99 	b.w	80171ce <_svfprintf_r+0xb2e>
 8017c9c:	aa26      	add	r2, sp, #152	; 0x98
 8017c9e:	4641      	mov	r1, r8
 8017ca0:	4648      	mov	r0, r9
 8017ca2:	f004 fa9f 	bl	801c1e4 <__ssprint_r>
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	f47f af60 	bne.w	8017b6c <_svfprintf_r+0x14cc>
 8017cac:	783b      	ldrb	r3, [r7, #0]
 8017cae:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017cb0:	aa29      	add	r2, sp, #164	; 0xa4
 8017cb2:	441e      	add	r6, r3
 8017cb4:	e5ad      	b.n	8017812 <_svfprintf_r+0x1172>
 8017cb6:	ee18 1a10 	vmov	r1, s16
 8017cba:	aa26      	add	r2, sp, #152	; 0x98
 8017cbc:	4648      	mov	r0, r9
 8017cbe:	f004 fa91 	bl	801c1e4 <__ssprint_r>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	f47f a964 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017cc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017cca:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017ccc:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017cd0:	f7ff baa4 	b.w	801721c <_svfprintf_r+0xb7c>
 8017cd4:	9d07      	ldr	r5, [sp, #28]
 8017cd6:	9501      	str	r5, [sp, #4]
 8017cd8:	a824      	add	r0, sp, #144	; 0x90
 8017cda:	a921      	add	r1, sp, #132	; 0x84
 8017cdc:	aa20      	add	r2, sp, #128	; 0x80
 8017cde:	2302      	movs	r3, #2
 8017ce0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8017ce4:	9202      	str	r2, [sp, #8]
 8017ce6:	9300      	str	r3, [sp, #0]
 8017ce8:	4648      	mov	r0, r9
 8017cea:	ec53 2b1a 	vmov	r2, r3, d10
 8017cee:	f002 f9f3 	bl	801a0d8 <_dtoa_r>
 8017cf2:	2e47      	cmp	r6, #71	; 0x47
 8017cf4:	4607      	mov	r7, r0
 8017cf6:	d11b      	bne.n	8017d30 <_svfprintf_r+0x1690>
 8017cf8:	9b06      	ldr	r3, [sp, #24]
 8017cfa:	07da      	lsls	r2, r3, #31
 8017cfc:	f100 811e 	bmi.w	8017f3c <_svfprintf_r+0x189c>
 8017d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d02:	9206      	str	r2, [sp, #24]
 8017d04:	2247      	movs	r2, #71	; 0x47
 8017d06:	469b      	mov	fp, r3
 8017d08:	920a      	str	r2, [sp, #40]	; 0x28
 8017d0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017d0c:	f7ff bbdf 	b.w	80174ce <_svfprintf_r+0xe2e>
 8017d10:	9d07      	ldr	r5, [sp, #28]
 8017d12:	9501      	str	r5, [sp, #4]
 8017d14:	a824      	add	r0, sp, #144	; 0x90
 8017d16:	a921      	add	r1, sp, #132	; 0x84
 8017d18:	aa20      	add	r2, sp, #128	; 0x80
 8017d1a:	2303      	movs	r3, #3
 8017d1c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8017d20:	9202      	str	r2, [sp, #8]
 8017d22:	9300      	str	r3, [sp, #0]
 8017d24:	4648      	mov	r0, r9
 8017d26:	ec53 2b1a 	vmov	r2, r3, d10
 8017d2a:	f002 f9d5 	bl	801a0d8 <_dtoa_r>
 8017d2e:	4607      	mov	r7, r0
 8017d30:	9b07      	ldr	r3, [sp, #28]
 8017d32:	2e46      	cmp	r6, #70	; 0x46
 8017d34:	eb07 0503 	add.w	r5, r7, r3
 8017d38:	f47f abbb 	bne.w	80174b2 <_svfprintf_r+0xe12>
 8017d3c:	783b      	ldrb	r3, [r7, #0]
 8017d3e:	2b30      	cmp	r3, #48	; 0x30
 8017d40:	f000 81f6 	beq.w	8018130 <_svfprintf_r+0x1a90>
 8017d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017d46:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017d4a:	441d      	add	r5, r3
 8017d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d4e:	9306      	str	r3, [sp, #24]
 8017d50:	f7ff bbb3 	b.w	80174ba <_svfprintf_r+0xe1a>
 8017d54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017d58:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8017d5c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8017d60:	9007      	str	r0, [sp, #28]
 8017d62:	950c      	str	r5, [sp, #48]	; 0x30
 8017d64:	900e      	str	r0, [sp, #56]	; 0x38
 8017d66:	9011      	str	r0, [sp, #68]	; 0x44
 8017d68:	900f      	str	r0, [sp, #60]	; 0x3c
 8017d6a:	f7fe be7e 	b.w	8016a6a <_svfprintf_r+0x3ca>
 8017d6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017d70:	920f      	str	r2, [sp, #60]	; 0x3c
 8017d72:	2a00      	cmp	r2, #0
 8017d74:	f340 81f3 	ble.w	801815e <_svfprintf_r+0x1abe>
 8017d78:	9907      	ldr	r1, [sp, #28]
 8017d7a:	f00b 0301 	and.w	r3, fp, #1
 8017d7e:	430b      	orrs	r3, r1
 8017d80:	f040 8192 	bne.w	80180a8 <_svfprintf_r+0x1a08>
 8017d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d86:	930a      	str	r3, [sp, #40]	; 0x28
 8017d88:	2466      	movs	r4, #102	; 0x66
 8017d8a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8017d8e:	f040 8193 	bne.w	80180b8 <_svfprintf_r+0x1a18>
 8017d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d94:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8017d98:	e75b      	b.n	8017c52 <_svfprintf_r+0x15b2>
 8017d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d9e:	189a      	adds	r2, r3, r2
 8017da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017da2:	920a      	str	r2, [sp, #40]	; 0x28
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	f340 81bb 	ble.w	8018120 <_svfprintf_r+0x1a80>
 8017daa:	2467      	movs	r4, #103	; 0x67
 8017dac:	e7ed      	b.n	8017d8a <_svfprintf_r+0x16ea>
 8017dae:	2330      	movs	r3, #48	; 0x30
 8017db0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017db4:	2358      	movs	r3, #88	; 0x58
 8017db6:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8017dba:	9b06      	ldr	r3, [sp, #24]
 8017dbc:	f043 0502 	orr.w	r5, r3, #2
 8017dc0:	9b07      	ldr	r3, [sp, #28]
 8017dc2:	2b63      	cmp	r3, #99	; 0x63
 8017dc4:	f300 80df 	bgt.w	8017f86 <_svfprintf_r+0x18e6>
 8017dc8:	2300      	movs	r3, #0
 8017dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dcc:	af39      	add	r7, sp, #228	; 0xe4
 8017dce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8017dd2:	9a06      	ldr	r2, [sp, #24]
 8017dd4:	9506      	str	r5, [sp, #24]
 8017dd6:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8017dda:	f024 0620 	bic.w	r6, r4, #32
 8017dde:	2900      	cmp	r1, #0
 8017de0:	920e      	str	r2, [sp, #56]	; 0x38
 8017de2:	960a      	str	r6, [sp, #40]	; 0x28
 8017de4:	db7d      	blt.n	8017ee2 <_svfprintf_r+0x1842>
 8017de6:	2300      	movs	r3, #0
 8017de8:	ec41 0b1a 	vmov	d10, r0, r1
 8017dec:	931b      	str	r3, [sp, #108]	; 0x6c
 8017dee:	2c61      	cmp	r4, #97	; 0x61
 8017df0:	f000 8119 	beq.w	8018026 <_svfprintf_r+0x1986>
 8017df4:	2c41      	cmp	r4, #65	; 0x41
 8017df6:	f47f ab44 	bne.w	8017482 <_svfprintf_r+0xde2>
 8017dfa:	aa20      	add	r2, sp, #128	; 0x80
 8017dfc:	ec51 0b1a 	vmov	r0, r1, d10
 8017e00:	f004 f93e 	bl	801c080 <frexp>
 8017e04:	2200      	movs	r2, #0
 8017e06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017e0a:	f7e8 feb5 	bl	8000b78 <__aeabi_dmul>
 8017e0e:	2200      	movs	r2, #0
 8017e10:	2300      	movs	r3, #0
 8017e12:	4682      	mov	sl, r0
 8017e14:	468b      	mov	fp, r1
 8017e16:	f7e9 f917 	bl	8001048 <__aeabi_dcmpeq>
 8017e1a:	b108      	cbz	r0, 8017e20 <_svfprintf_r+0x1780>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	9320      	str	r3, [sp, #128]	; 0x80
 8017e20:	4bb8      	ldr	r3, [pc, #736]	; (8018104 <_svfprintf_r+0x1a64>)
 8017e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e24:	9b07      	ldr	r3, [sp, #28]
 8017e26:	971d      	str	r7, [sp, #116]	; 0x74
 8017e28:	463e      	mov	r6, r7
 8017e2a:	ee08 9a90 	vmov	s17, r9
 8017e2e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017e30:	941c      	str	r4, [sp, #112]	; 0x70
 8017e32:	1e5d      	subs	r5, r3, #1
 8017e34:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017e38:	e003      	b.n	8017e42 <_svfprintf_r+0x17a2>
 8017e3a:	f7e9 f905 	bl	8001048 <__aeabi_dcmpeq>
 8017e3e:	3d01      	subs	r5, #1
 8017e40:	bb08      	cbnz	r0, 8017e86 <_svfprintf_r+0x17e6>
 8017e42:	4bb1      	ldr	r3, [pc, #708]	; (8018108 <_svfprintf_r+0x1a68>)
 8017e44:	2200      	movs	r2, #0
 8017e46:	4650      	mov	r0, sl
 8017e48:	4659      	mov	r1, fp
 8017e4a:	f7e8 fe95 	bl	8000b78 <__aeabi_dmul>
 8017e4e:	4689      	mov	r9, r1
 8017e50:	4680      	mov	r8, r0
 8017e52:	f7e9 f941 	bl	80010d8 <__aeabi_d2iz>
 8017e56:	4604      	mov	r4, r0
 8017e58:	f7e8 fe24 	bl	8000aa4 <__aeabi_i2d>
 8017e5c:	4602      	mov	r2, r0
 8017e5e:	460b      	mov	r3, r1
 8017e60:	4640      	mov	r0, r8
 8017e62:	4649      	mov	r1, r9
 8017e64:	f7e8 fcd0 	bl	8000808 <__aeabi_dsub>
 8017e68:	f817 c004 	ldrb.w	ip, [r7, r4]
 8017e6c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8017e70:	46b1      	mov	r9, r6
 8017e72:	4682      	mov	sl, r0
 8017e74:	f806 cb01 	strb.w	ip, [r6], #1
 8017e78:	468b      	mov	fp, r1
 8017e7a:	f04f 0200 	mov.w	r2, #0
 8017e7e:	f04f 0300 	mov.w	r3, #0
 8017e82:	46a8      	mov	r8, r5
 8017e84:	d1d9      	bne.n	8017e3a <_svfprintf_r+0x179a>
 8017e86:	4ba1      	ldr	r3, [pc, #644]	; (801810c <_svfprintf_r+0x1a6c>)
 8017e88:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	4650      	mov	r0, sl
 8017e8e:	4659      	mov	r1, fp
 8017e90:	4645      	mov	r5, r8
 8017e92:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017e96:	e9cd 9410 	strd	r9, r4, [sp, #64]	; 0x40
 8017e9a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017e9c:	ee18 9a90 	vmov	r9, s17
 8017ea0:	f7e9 f8fa 	bl	8001098 <__aeabi_dcmpgt>
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	d152      	bne.n	8017f4e <_svfprintf_r+0x18ae>
 8017ea8:	4b98      	ldr	r3, [pc, #608]	; (801810c <_svfprintf_r+0x1a6c>)
 8017eaa:	4650      	mov	r0, sl
 8017eac:	4659      	mov	r1, fp
 8017eae:	2200      	movs	r2, #0
 8017eb0:	f7e9 f8ca 	bl	8001048 <__aeabi_dcmpeq>
 8017eb4:	b110      	cbz	r0, 8017ebc <_svfprintf_r+0x181c>
 8017eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017eb8:	07d9      	lsls	r1, r3, #31
 8017eba:	d448      	bmi.n	8017f4e <_svfprintf_r+0x18ae>
 8017ebc:	2d00      	cmp	r5, #0
 8017ebe:	462b      	mov	r3, r5
 8017ec0:	db06      	blt.n	8017ed0 <_svfprintf_r+0x1830>
 8017ec2:	3301      	adds	r3, #1
 8017ec4:	4433      	add	r3, r6
 8017ec6:	2230      	movs	r2, #48	; 0x30
 8017ec8:	f806 2b01 	strb.w	r2, [r6], #1
 8017ecc:	42b3      	cmp	r3, r6
 8017ece:	d1fb      	bne.n	8017ec8 <_svfprintf_r+0x1828>
 8017ed0:	1bf3      	subs	r3, r6, r7
 8017ed2:	9310      	str	r3, [sp, #64]	; 0x40
 8017ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ed6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017eda:	9306      	str	r3, [sp, #24]
 8017edc:	f7ff baf9 	b.w	80174d2 <_svfprintf_r+0xe32>
 8017ee0:	900b      	str	r0, [sp, #44]	; 0x2c
 8017ee2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8017ee6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8017eea:	ee0a 3a90 	vmov	s21, r3
 8017eee:	232d      	movs	r3, #45	; 0x2d
 8017ef0:	ee0a 1a10 	vmov	s20, r1
 8017ef4:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ef6:	e77a      	b.n	8017dee <_svfprintf_r+0x174e>
 8017ef8:	ee18 1a10 	vmov	r1, s16
 8017efc:	aa26      	add	r2, sp, #152	; 0x98
 8017efe:	4648      	mov	r0, r9
 8017f00:	f004 f970 	bl	801c1e4 <__ssprint_r>
 8017f04:	2800      	cmp	r0, #0
 8017f06:	f47f a843 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017f0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f0e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8017f10:	1ad3      	subs	r3, r2, r3
 8017f12:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017f16:	f7ff b999 	b.w	801724c <_svfprintf_r+0xbac>
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	9307      	str	r3, [sp, #28]
 8017f1e:	f7fe bc0e 	b.w	801673e <_svfprintf_r+0x9e>
 8017f22:	ee18 1a10 	vmov	r1, s16
 8017f26:	4648      	mov	r0, r9
 8017f28:	aa26      	add	r2, sp, #152	; 0x98
 8017f2a:	f004 f95b 	bl	801c1e4 <__ssprint_r>
 8017f2e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8017f32:	f7fe bd47 	b.w	80169c4 <_svfprintf_r+0x324>
 8017f36:	46d3      	mov	fp, sl
 8017f38:	f7ff b9b4 	b.w	80172a4 <_svfprintf_r+0xc04>
 8017f3c:	e9dd b306 	ldrd	fp, r3, [sp, #24]
 8017f40:	18fd      	adds	r5, r7, r3
 8017f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f44:	9306      	str	r3, [sp, #24]
 8017f46:	2347      	movs	r3, #71	; 0x47
 8017f48:	930a      	str	r3, [sp, #40]	; 0x28
 8017f4a:	f7ff bab6 	b.w	80174ba <_svfprintf_r+0xe1a>
 8017f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f50:	9324      	str	r3, [sp, #144]	; 0x90
 8017f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017f58:	7bd9      	ldrb	r1, [r3, #15]
 8017f5a:	428a      	cmp	r2, r1
 8017f5c:	4633      	mov	r3, r6
 8017f5e:	d109      	bne.n	8017f74 <_svfprintf_r+0x18d4>
 8017f60:	2030      	movs	r0, #48	; 0x30
 8017f62:	f803 0c01 	strb.w	r0, [r3, #-1]
 8017f66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017f68:	1e5a      	subs	r2, r3, #1
 8017f6a:	9224      	str	r2, [sp, #144]	; 0x90
 8017f6c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8017f70:	4291      	cmp	r1, r2
 8017f72:	d0f6      	beq.n	8017f62 <_svfprintf_r+0x18c2>
 8017f74:	2a39      	cmp	r2, #57	; 0x39
 8017f76:	bf0b      	itete	eq
 8017f78:	9a0f      	ldreq	r2, [sp, #60]	; 0x3c
 8017f7a:	3201      	addne	r2, #1
 8017f7c:	7a92      	ldrbeq	r2, [r2, #10]
 8017f7e:	b2d2      	uxtbne	r2, r2
 8017f80:	f803 2c01 	strb.w	r2, [r3, #-1]
 8017f84:	e7a4      	b.n	8017ed0 <_svfprintf_r+0x1830>
 8017f86:	1c59      	adds	r1, r3, #1
 8017f88:	4648      	mov	r0, r9
 8017f8a:	f7fd f92f 	bl	80151ec <_malloc_r>
 8017f8e:	4607      	mov	r7, r0
 8017f90:	2800      	cmp	r0, #0
 8017f92:	f000 8110 	beq.w	80181b6 <_svfprintf_r+0x1b16>
 8017f96:	900b      	str	r0, [sp, #44]	; 0x2c
 8017f98:	e719      	b.n	8017dce <_svfprintf_r+0x172e>
 8017f9a:	46ab      	mov	fp, r5
 8017f9c:	4615      	mov	r5, r2
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	4425      	add	r5, r4
 8017fa2:	2b07      	cmp	r3, #7
 8017fa4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8017fa8:	e9c8 b400 	strd	fp, r4, [r8]
 8017fac:	f77f acab 	ble.w	8017906 <_svfprintf_r+0x1266>
 8017fb0:	ee18 1a10 	vmov	r1, s16
 8017fb4:	aa26      	add	r2, sp, #152	; 0x98
 8017fb6:	4648      	mov	r0, r9
 8017fb8:	f004 f914 	bl	801c1e4 <__ssprint_r>
 8017fbc:	2800      	cmp	r0, #0
 8017fbe:	f47e afe7 	bne.w	8016f90 <_svfprintf_r+0x8f0>
 8017fc2:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8017fc6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8017fca:	e49e      	b.n	801790a <_svfprintf_r+0x126a>
 8017fcc:	2330      	movs	r3, #48	; 0x30
 8017fce:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017fd2:	2378      	movs	r3, #120	; 0x78
 8017fd4:	e6ef      	b.n	8017db6 <_svfprintf_r+0x1716>
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	461a      	mov	r2, r3
 8017fda:	bf08      	it	eq
 8017fdc:	2201      	moveq	r2, #1
 8017fde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017fe0:	9207      	str	r2, [sp, #28]
 8017fe2:	9a06      	ldr	r2, [sp, #24]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017fea:	920e      	str	r2, [sp, #56]	; 0x38
 8017fec:	f6ff af78 	blt.w	8017ee0 <_svfprintf_r+0x1840>
 8017ff0:	9e07      	ldr	r6, [sp, #28]
 8017ff2:	9601      	str	r6, [sp, #4]
 8017ff4:	ad24      	add	r5, sp, #144	; 0x90
 8017ff6:	a821      	add	r0, sp, #132	; 0x84
 8017ff8:	e9cd 0503 	strd	r0, r5, [sp, #12]
 8017ffc:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	; 0x48
 8018000:	aa20      	add	r2, sp, #128	; 0x80
 8018002:	2302      	movs	r3, #2
 8018004:	9202      	str	r2, [sp, #8]
 8018006:	9300      	str	r3, [sp, #0]
 8018008:	462a      	mov	r2, r5
 801800a:	4633      	mov	r3, r6
 801800c:	4648      	mov	r0, r9
 801800e:	468a      	mov	sl, r1
 8018010:	911b      	str	r1, [sp, #108]	; 0x6c
 8018012:	f002 f861 	bl	801a0d8 <_dtoa_r>
 8018016:	ec46 5b1a 	vmov	d10, r5, r6
 801801a:	4607      	mov	r7, r0
 801801c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018020:	e66a      	b.n	8017cf8 <_svfprintf_r+0x1658>
 8018022:	930b      	str	r3, [sp, #44]	; 0x2c
 8018024:	e75d      	b.n	8017ee2 <_svfprintf_r+0x1842>
 8018026:	aa20      	add	r2, sp, #128	; 0x80
 8018028:	ec51 0b1a 	vmov	r0, r1, d10
 801802c:	f004 f828 	bl	801c080 <frexp>
 8018030:	2200      	movs	r2, #0
 8018032:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018036:	f7e8 fd9f 	bl	8000b78 <__aeabi_dmul>
 801803a:	2200      	movs	r2, #0
 801803c:	2300      	movs	r3, #0
 801803e:	4682      	mov	sl, r0
 8018040:	468b      	mov	fp, r1
 8018042:	f7e9 f801 	bl	8001048 <__aeabi_dcmpeq>
 8018046:	b108      	cbz	r0, 801804c <_svfprintf_r+0x19ac>
 8018048:	2301      	movs	r3, #1
 801804a:	9320      	str	r3, [sp, #128]	; 0x80
 801804c:	4b30      	ldr	r3, [pc, #192]	; (8018110 <_svfprintf_r+0x1a70>)
 801804e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018050:	e6e8      	b.n	8017e24 <_svfprintf_r+0x1784>
 8018052:	f104 020f 	add.w	r2, r4, #15
 8018056:	b2d2      	uxtb	r2, r2
 8018058:	2101      	movs	r1, #1
 801805a:	f7ff ba4d 	b.w	80174f8 <_svfprintf_r+0xe58>
 801805e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018060:	4f2c      	ldr	r7, [pc, #176]	; (8018114 <_svfprintf_r+0x1a74>)
 8018062:	2b00      	cmp	r3, #0
 8018064:	bfb4      	ite	lt
 8018066:	222d      	movlt	r2, #45	; 0x2d
 8018068:	f89d 207b 	ldrbge.w	r2, [sp, #123]	; 0x7b
 801806c:	4b2a      	ldr	r3, [pc, #168]	; (8018118 <_svfprintf_r+0x1a78>)
 801806e:	bfb8      	it	lt
 8018070:	f88d 207b 	strblt.w	r2, [sp, #123]	; 0x7b
 8018074:	f7fe bce8 	b.w	8016a48 <_svfprintf_r+0x3a8>
 8018078:	ee18 ba10 	vmov	fp, s16
 801807c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8018080:	f7fe bca0 	b.w	80169c4 <_svfprintf_r+0x324>
 8018084:	2900      	cmp	r1, #0
 8018086:	d167      	bne.n	8018158 <_svfprintf_r+0x1ab8>
 8018088:	2230      	movs	r2, #48	; 0x30
 801808a:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801808e:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8018092:	3330      	adds	r3, #48	; 0x30
 8018094:	f802 3b01 	strb.w	r3, [r2], #1
 8018098:	ab22      	add	r3, sp, #136	; 0x88
 801809a:	1ad3      	subs	r3, r2, r3
 801809c:	9318      	str	r3, [sp, #96]	; 0x60
 801809e:	f7ff ba6d 	b.w	801757c <_svfprintf_r+0xedc>
 80180a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180a4:	930a      	str	r3, [sp, #40]	; 0x28
 80180a6:	e5c9      	b.n	8017c3c <_svfprintf_r+0x159c>
 80180a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180aa:	eb02 0a03 	add.w	sl, r2, r3
 80180ae:	4451      	add	r1, sl
 80180b0:	910a      	str	r1, [sp, #40]	; 0x28
 80180b2:	2466      	movs	r4, #102	; 0x66
 80180b4:	e669      	b.n	8017d8a <_svfprintf_r+0x16ea>
 80180b6:	2467      	movs	r4, #103	; 0x67
 80180b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80180ba:	780b      	ldrb	r3, [r1, #0]
 80180bc:	2bff      	cmp	r3, #255	; 0xff
 80180be:	d076      	beq.n	80181ae <_svfprintf_r+0x1b0e>
 80180c0:	2500      	movs	r5, #0
 80180c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180c4:	4628      	mov	r0, r5
 80180c6:	e003      	b.n	80180d0 <_svfprintf_r+0x1a30>
 80180c8:	3001      	adds	r0, #1
 80180ca:	3101      	adds	r1, #1
 80180cc:	2bff      	cmp	r3, #255	; 0xff
 80180ce:	d008      	beq.n	80180e2 <_svfprintf_r+0x1a42>
 80180d0:	4293      	cmp	r3, r2
 80180d2:	da06      	bge.n	80180e2 <_svfprintf_r+0x1a42>
 80180d4:	1ad2      	subs	r2, r2, r3
 80180d6:	784b      	ldrb	r3, [r1, #1]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d1f5      	bne.n	80180c8 <_svfprintf_r+0x1a28>
 80180dc:	780b      	ldrb	r3, [r1, #0]
 80180de:	3501      	adds	r5, #1
 80180e0:	e7f4      	b.n	80180cc <_svfprintf_r+0x1a2c>
 80180e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80180e4:	920f      	str	r2, [sp, #60]	; 0x3c
 80180e6:	9011      	str	r0, [sp, #68]	; 0x44
 80180e8:	950e      	str	r5, [sp, #56]	; 0x38
 80180ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80180ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80180f0:	4413      	add	r3, r2
 80180f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80180f4:	fb02 1303 	mla	r3, r2, r3, r1
 80180f8:	930a      	str	r3, [sp, #40]	; 0x28
 80180fa:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 80180fe:	f7ff ba54 	b.w	80175aa <_svfprintf_r+0xf0a>
 8018102:	bf00      	nop
 8018104:	08020548 	.word	0x08020548
 8018108:	40300000 	.word	0x40300000
 801810c:	3fe00000 	.word	0x3fe00000
 8018110:	08020534 	.word	0x08020534
 8018114:	0802052c 	.word	0x0802052c
 8018118:	08020530 	.word	0x08020530
 801811c:	08020578 	.word	0x08020578
 8018120:	f1c3 0301 	rsb	r3, r3, #1
 8018124:	441a      	add	r2, r3
 8018126:	920a      	str	r2, [sp, #40]	; 0x28
 8018128:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
 801812c:	2467      	movs	r4, #103	; 0x67
 801812e:	e590      	b.n	8017c52 <_svfprintf_r+0x15b2>
 8018130:	ec51 0b1a 	vmov	r0, r1, d10
 8018134:	2200      	movs	r2, #0
 8018136:	2300      	movs	r3, #0
 8018138:	f7e8 ff86 	bl	8001048 <__aeabi_dcmpeq>
 801813c:	2800      	cmp	r0, #0
 801813e:	f47f ae01 	bne.w	8017d44 <_svfprintf_r+0x16a4>
 8018142:	9b07      	ldr	r3, [sp, #28]
 8018144:	f1c3 0301 	rsb	r3, r3, #1
 8018148:	9320      	str	r3, [sp, #128]	; 0x80
 801814a:	e5fc      	b.n	8017d46 <_svfprintf_r+0x16a6>
 801814c:	f01b 0f01 	tst.w	fp, #1
 8018150:	f43f aa1f 	beq.w	8017592 <_svfprintf_r+0xef2>
 8018154:	f7ff ba19 	b.w	801758a <_svfprintf_r+0xeea>
 8018158:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801815c:	e799      	b.n	8018092 <_svfprintf_r+0x19f2>
 801815e:	9b07      	ldr	r3, [sp, #28]
 8018160:	f00b 0601 	and.w	r6, fp, #1
 8018164:	ea56 0203 	orrs.w	r2, r6, r3
 8018168:	d105      	bne.n	8018176 <_svfprintf_r+0x1ad6>
 801816a:	f04f 0a01 	mov.w	sl, #1
 801816e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8018172:	2466      	movs	r4, #102	; 0x66
 8018174:	e56d      	b.n	8017c52 <_svfprintf_r+0x15b2>
 8018176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018178:	f102 0a01 	add.w	sl, r2, #1
 801817c:	4453      	add	r3, sl
 801817e:	930a      	str	r3, [sp, #40]	; 0x28
 8018180:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8018184:	2466      	movs	r4, #102	; 0x66
 8018186:	e564      	b.n	8017c52 <_svfprintf_r+0x15b2>
 8018188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801818a:	7874      	ldrb	r4, [r6, #1]
 801818c:	f853 1b04 	ldr.w	r1, [r3], #4
 8018190:	930c      	str	r3, [sp, #48]	; 0x30
 8018192:	4616      	mov	r6, r2
 8018194:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
 8018198:	9207      	str	r2, [sp, #28]
 801819a:	f7fe bacf 	b.w	801673c <_svfprintf_r+0x9c>
 801819e:	230c      	movs	r3, #12
 80181a0:	f8c9 3000 	str.w	r3, [r9]
 80181a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181a8:	9308      	str	r3, [sp, #32]
 80181aa:	f7fe bc12 	b.w	80169d2 <_svfprintf_r+0x332>
 80181ae:	2300      	movs	r3, #0
 80181b0:	930e      	str	r3, [sp, #56]	; 0x38
 80181b2:	9311      	str	r3, [sp, #68]	; 0x44
 80181b4:	e799      	b.n	80180ea <_svfprintf_r+0x1a4a>
 80181b6:	ee18 ba10 	vmov	fp, s16
 80181ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80181be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181c2:	f8ab 300c 	strh.w	r3, [fp, #12]
 80181c6:	f7fe bbfd 	b.w	80169c4 <_svfprintf_r+0x324>
 80181ca:	2302      	movs	r3, #2
 80181cc:	9318      	str	r3, [sp, #96]	; 0x60
 80181ce:	f7ff b9d5 	b.w	801757c <_svfprintf_r+0xedc>
 80181d2:	bf00      	nop
 80181d4:	0000      	movs	r0, r0
	...

080181d8 <_vfprintf_r>:
 80181d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181dc:	ed2d 8b06 	vpush	{d8-d10}
 80181e0:	b0d3      	sub	sp, #332	; 0x14c
 80181e2:	461c      	mov	r4, r3
 80181e4:	468b      	mov	fp, r1
 80181e6:	4617      	mov	r7, r2
 80181e8:	4681      	mov	r9, r0
 80181ea:	f003 fb4d 	bl	801b888 <_localeconv_r>
 80181ee:	6803      	ldr	r3, [r0, #0]
 80181f0:	940c      	str	r4, [sp, #48]	; 0x30
 80181f2:	4618      	mov	r0, r3
 80181f4:	9315      	str	r3, [sp, #84]	; 0x54
 80181f6:	f7e8 fa43 	bl	8000680 <strlen>
 80181fa:	9014      	str	r0, [sp, #80]	; 0x50
 80181fc:	f1b9 0f00 	cmp.w	r9, #0
 8018200:	d004      	beq.n	801820c <_vfprintf_r+0x34>
 8018202:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8018206:	2b00      	cmp	r3, #0
 8018208:	f000 820a 	beq.w	8018620 <_vfprintf_r+0x448>
 801820c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8018210:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 8018214:	f013 0f01 	tst.w	r3, #1
 8018218:	b293      	uxth	r3, r2
 801821a:	d102      	bne.n	8018222 <_vfprintf_r+0x4a>
 801821c:	0591      	lsls	r1, r2, #22
 801821e:	f140 86d5 	bpl.w	8018fcc <_vfprintf_r+0xdf4>
 8018222:	049e      	lsls	r6, r3, #18
 8018224:	d40a      	bmi.n	801823c <_vfprintf_r+0x64>
 8018226:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
 801822a:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 801822e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8018232:	f8ab 300c 	strh.w	r3, [fp, #12]
 8018236:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
 801823a:	b29b      	uxth	r3, r3
 801823c:	071d      	lsls	r5, r3, #28
 801823e:	f140 80ca 	bpl.w	80183d6 <_vfprintf_r+0x1fe>
 8018242:	f8db 2010 	ldr.w	r2, [fp, #16]
 8018246:	2a00      	cmp	r2, #0
 8018248:	f000 80c5 	beq.w	80183d6 <_vfprintf_r+0x1fe>
 801824c:	f003 021a 	and.w	r2, r3, #26
 8018250:	2a0a      	cmp	r2, #10
 8018252:	f000 80ce 	beq.w	80183f2 <_vfprintf_r+0x21a>
 8018256:	2300      	movs	r3, #0
 8018258:	ed9f 7b83 	vldr	d7, [pc, #524]	; 8018468 <_vfprintf_r+0x290>
 801825c:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8018260:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8018264:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8018268:	9310      	str	r3, [sp, #64]	; 0x40
 801826a:	9316      	str	r3, [sp, #88]	; 0x58
 801826c:	9308      	str	r3, [sp, #32]
 801826e:	ab29      	add	r3, sp, #164	; 0xa4
 8018270:	9326      	str	r3, [sp, #152]	; 0x98
 8018272:	4698      	mov	r8, r3
 8018274:	783b      	ldrb	r3, [r7, #0]
 8018276:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801827a:	ee08 ba10 	vmov	s16, fp
 801827e:	2b00      	cmp	r3, #0
 8018280:	f000 8178 	beq.w	8018574 <_vfprintf_r+0x39c>
 8018284:	463c      	mov	r4, r7
 8018286:	e004      	b.n	8018292 <_vfprintf_r+0xba>
 8018288:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801828c:	2b00      	cmp	r3, #0
 801828e:	f000 80c9 	beq.w	8018424 <_vfprintf_r+0x24c>
 8018292:	2b25      	cmp	r3, #37	; 0x25
 8018294:	d1f8      	bne.n	8018288 <_vfprintf_r+0xb0>
 8018296:	1be5      	subs	r5, r4, r7
 8018298:	f040 80c7 	bne.w	801842a <_vfprintf_r+0x252>
 801829c:	7823      	ldrb	r3, [r4, #0]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	f000 8168 	beq.w	8018574 <_vfprintf_r+0x39c>
 80182a4:	2300      	movs	r3, #0
 80182a6:	9309      	str	r3, [sp, #36]	; 0x24
 80182a8:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80182ac:	9306      	str	r3, [sp, #24]
 80182ae:	1c66      	adds	r6, r4, #1
 80182b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182b4:	7864      	ldrb	r4, [r4, #1]
 80182b6:	9307      	str	r3, [sp, #28]
 80182b8:	252b      	movs	r5, #43	; 0x2b
 80182ba:	f04f 0a20 	mov.w	sl, #32
 80182be:	3601      	adds	r6, #1
 80182c0:	f1a4 0320 	sub.w	r3, r4, #32
 80182c4:	2b5a      	cmp	r3, #90	; 0x5a
 80182c6:	f200 80d3 	bhi.w	8018470 <_vfprintf_r+0x298>
 80182ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80182ce:	0278      	.short	0x0278
 80182d0:	00d100d1 	.word	0x00d100d1
 80182d4:	00d10272 	.word	0x00d10272
 80182d8:	00d100d1 	.word	0x00d100d1
 80182dc:	00d1006a 	.word	0x00d1006a
 80182e0:	021000d1 	.word	0x021000d1
 80182e4:	00d10221 	.word	0x00d10221
 80182e8:	0258021b 	.word	0x0258021b
 80182ec:	025200d1 	.word	0x025200d1
 80182f0:	005b005b 	.word	0x005b005b
 80182f4:	005b005b 	.word	0x005b005b
 80182f8:	005b005b 	.word	0x005b005b
 80182fc:	005b005b 	.word	0x005b005b
 8018300:	00d1005b 	.word	0x00d1005b
 8018304:	00d100d1 	.word	0x00d100d1
 8018308:	00d100d1 	.word	0x00d100d1
 801830c:	00d100d1 	.word	0x00d100d1
 8018310:	00d1015d 	.word	0x00d1015d
 8018314:	029001b3 	.word	0x029001b3
 8018318:	015d015d 	.word	0x015d015d
 801831c:	00d1015d 	.word	0x00d1015d
 8018320:	00d100d1 	.word	0x00d100d1
 8018324:	028a00d1 	.word	0x028a00d1
 8018328:	00d100d1 	.word	0x00d100d1
 801832c:	00d102e9 	.word	0x00d102e9
 8018330:	00d100d1 	.word	0x00d100d1
 8018334:	00d101c1 	.word	0x00d101c1
 8018338:	00d10225 	.word	0x00d10225
 801833c:	082000d1 	.word	0x082000d1
 8018340:	00d100d1 	.word	0x00d100d1
 8018344:	00d100d1 	.word	0x00d100d1
 8018348:	00d100d1 	.word	0x00d100d1
 801834c:	00d100d1 	.word	0x00d100d1
 8018350:	00d1015d 	.word	0x00d1015d
 8018354:	01e701b3 	.word	0x01e701b3
 8018358:	015d015d 	.word	0x015d015d
 801835c:	02fe015d 	.word	0x02fe015d
 8018360:	01ad01e7 	.word	0x01ad01e7
 8018364:	028100d1 	.word	0x028100d1
 8018368:	031b00d1 	.word	0x031b00d1
 801836c:	0307081d 	.word	0x0307081d
 8018370:	00d101ad 	.word	0x00d101ad
 8018374:	008201c1 	.word	0x008201c1
 8018378:	00d10813 	.word	0x00d10813
 801837c:	07f200d1 	.word	0x07f200d1
 8018380:	008200d1 	.word	0x008200d1
 8018384:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018388:	2200      	movs	r2, #0
 801838a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801838e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018392:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018396:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801839a:	2b09      	cmp	r3, #9
 801839c:	d9f5      	bls.n	801838a <_vfprintf_r+0x1b2>
 801839e:	9209      	str	r2, [sp, #36]	; 0x24
 80183a0:	e78e      	b.n	80182c0 <_vfprintf_r+0xe8>
 80183a2:	4648      	mov	r0, r9
 80183a4:	f003 fa70 	bl	801b888 <_localeconv_r>
 80183a8:	6843      	ldr	r3, [r0, #4]
 80183aa:	9319      	str	r3, [sp, #100]	; 0x64
 80183ac:	4618      	mov	r0, r3
 80183ae:	f7e8 f967 	bl	8000680 <strlen>
 80183b2:	4603      	mov	r3, r0
 80183b4:	4648      	mov	r0, r9
 80183b6:	461c      	mov	r4, r3
 80183b8:	931a      	str	r3, [sp, #104]	; 0x68
 80183ba:	f003 fa65 	bl	801b888 <_localeconv_r>
 80183be:	6882      	ldr	r2, [r0, #8]
 80183c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80183c2:	b134      	cbz	r4, 80183d2 <_vfprintf_r+0x1fa>
 80183c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183c6:	b123      	cbz	r3, 80183d2 <_vfprintf_r+0x1fa>
 80183c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	f041 80d8 	bne.w	8019582 <_vfprintf_r+0x13aa>
 80183d2:	7834      	ldrb	r4, [r6, #0]
 80183d4:	e773      	b.n	80182be <_vfprintf_r+0xe6>
 80183d6:	4659      	mov	r1, fp
 80183d8:	4648      	mov	r0, r9
 80183da:	f001 fd75 	bl	8019ec8 <__swsetup_r>
 80183de:	2800      	cmp	r0, #0
 80183e0:	f041 8372 	bne.w	8019ac8 <_vfprintf_r+0x18f0>
 80183e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80183e8:	f003 021a 	and.w	r2, r3, #26
 80183ec:	2a0a      	cmp	r2, #10
 80183ee:	f47f af32 	bne.w	8018256 <_vfprintf_r+0x7e>
 80183f2:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80183f6:	2a00      	cmp	r2, #0
 80183f8:	f6ff af2d 	blt.w	8018256 <_vfprintf_r+0x7e>
 80183fc:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8018400:	07d2      	lsls	r2, r2, #31
 8018402:	d402      	bmi.n	801840a <_vfprintf_r+0x232>
 8018404:	059e      	lsls	r6, r3, #22
 8018406:	f141 818d 	bpl.w	8019724 <_vfprintf_r+0x154c>
 801840a:	4623      	mov	r3, r4
 801840c:	463a      	mov	r2, r7
 801840e:	4659      	mov	r1, fp
 8018410:	4648      	mov	r0, r9
 8018412:	f001 fccf 	bl	8019db4 <__sbprintf>
 8018416:	9008      	str	r0, [sp, #32]
 8018418:	9808      	ldr	r0, [sp, #32]
 801841a:	b053      	add	sp, #332	; 0x14c
 801841c:	ecbd 8b06 	vpop	{d8-d10}
 8018420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018424:	1be5      	subs	r5, r4, r7
 8018426:	f000 80a5 	beq.w	8018574 <_vfprintf_r+0x39c>
 801842a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801842e:	3301      	adds	r3, #1
 8018430:	442a      	add	r2, r5
 8018432:	2b07      	cmp	r3, #7
 8018434:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8018438:	f8c8 7000 	str.w	r7, [r8]
 801843c:	f8c8 5004 	str.w	r5, [r8, #4]
 8018440:	dc06      	bgt.n	8018450 <_vfprintf_r+0x278>
 8018442:	f108 0808 	add.w	r8, r8, #8
 8018446:	9a08      	ldr	r2, [sp, #32]
 8018448:	7823      	ldrb	r3, [r4, #0]
 801844a:	442a      	add	r2, r5
 801844c:	9208      	str	r2, [sp, #32]
 801844e:	e726      	b.n	801829e <_vfprintf_r+0xc6>
 8018450:	ee18 1a10 	vmov	r1, s16
 8018454:	aa26      	add	r2, sp, #152	; 0x98
 8018456:	4648      	mov	r0, r9
 8018458:	f003 ff7c 	bl	801c354 <__sprint_r>
 801845c:	2800      	cmp	r0, #0
 801845e:	f041 844c 	bne.w	8019cfa <_vfprintf_r+0x1b22>
 8018462:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018466:	e7ee      	b.n	8018446 <_vfprintf_r+0x26e>
	...
 8018470:	960d      	str	r6, [sp, #52]	; 0x34
 8018472:	2c00      	cmp	r4, #0
 8018474:	d07e      	beq.n	8018574 <_vfprintf_r+0x39c>
 8018476:	2300      	movs	r3, #0
 8018478:	461a      	mov	r2, r3
 801847a:	f04f 0a01 	mov.w	sl, #1
 801847e:	f88d 40e4 	strb.w	r4, [sp, #228]	; 0xe4
 8018482:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8018486:	920b      	str	r2, [sp, #44]	; 0x2c
 8018488:	9207      	str	r2, [sp, #28]
 801848a:	920e      	str	r2, [sp, #56]	; 0x38
 801848c:	9211      	str	r2, [sp, #68]	; 0x44
 801848e:	920f      	str	r2, [sp, #60]	; 0x3c
 8018490:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8018494:	af39      	add	r7, sp, #228	; 0xe4
 8018496:	9b06      	ldr	r3, [sp, #24]
 8018498:	9906      	ldr	r1, [sp, #24]
 801849a:	f013 0302 	ands.w	r3, r3, #2
 801849e:	bf18      	it	ne
 80184a0:	f10a 0a02 	addne.w	sl, sl, #2
 80184a4:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
 80184a8:	d105      	bne.n	80184b6 <_vfprintf_r+0x2de>
 80184aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184ac:	eba1 060a 	sub.w	r6, r1, sl
 80184b0:	2e00      	cmp	r6, #0
 80184b2:	f300 83d4 	bgt.w	8018c5e <_vfprintf_r+0xa86>
 80184b6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80184b8:	b172      	cbz	r2, 80184d8 <_vfprintf_r+0x300>
 80184ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80184bc:	3201      	adds	r2, #1
 80184be:	3501      	adds	r5, #1
 80184c0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80184c4:	2101      	movs	r1, #1
 80184c6:	2a07      	cmp	r2, #7
 80184c8:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 80184cc:	e9c8 0100 	strd	r0, r1, [r8]
 80184d0:	f300 8405 	bgt.w	8018cde <_vfprintf_r+0xb06>
 80184d4:	f108 0808 	add.w	r8, r8, #8
 80184d8:	b16b      	cbz	r3, 80184f6 <_vfprintf_r+0x31e>
 80184da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184dc:	3301      	adds	r3, #1
 80184de:	3502      	adds	r5, #2
 80184e0:	a91f      	add	r1, sp, #124	; 0x7c
 80184e2:	2202      	movs	r2, #2
 80184e4:	2b07      	cmp	r3, #7
 80184e6:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80184ea:	e9c8 1200 	strd	r1, r2, [r8]
 80184ee:	f300 8406 	bgt.w	8018cfe <_vfprintf_r+0xb26>
 80184f2:	f108 0808 	add.w	r8, r8, #8
 80184f6:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 80184fa:	f000 8296 	beq.w	8018a2a <_vfprintf_r+0x852>
 80184fe:	9b07      	ldr	r3, [sp, #28]
 8018500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018502:	1a9e      	subs	r6, r3, r2
 8018504:	2e00      	cmp	r6, #0
 8018506:	f300 82d8 	bgt.w	8018aba <_vfprintf_r+0x8e2>
 801850a:	9b06      	ldr	r3, [sp, #24]
 801850c:	05de      	lsls	r6, r3, #23
 801850e:	f100 8230 	bmi.w	8018972 <_vfprintf_r+0x79a>
 8018512:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018516:	f8c8 7000 	str.w	r7, [r8]
 801851a:	3301      	adds	r3, #1
 801851c:	4415      	add	r5, r2
 801851e:	2b07      	cmp	r3, #7
 8018520:	9528      	str	r5, [sp, #160]	; 0xa0
 8018522:	f8c8 2004 	str.w	r2, [r8, #4]
 8018526:	9327      	str	r3, [sp, #156]	; 0x9c
 8018528:	f300 832d 	bgt.w	8018b86 <_vfprintf_r+0x9ae>
 801852c:	f108 0808 	add.w	r8, r8, #8
 8018530:	9b06      	ldr	r3, [sp, #24]
 8018532:	075c      	lsls	r4, r3, #29
 8018534:	d505      	bpl.n	8018542 <_vfprintf_r+0x36a>
 8018536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018538:	eba3 040a 	sub.w	r4, r3, sl
 801853c:	2c00      	cmp	r4, #0
 801853e:	f300 83ec 	bgt.w	8018d1a <_vfprintf_r+0xb42>
 8018542:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8018546:	4552      	cmp	r2, sl
 8018548:	bfac      	ite	ge
 801854a:	189b      	addge	r3, r3, r2
 801854c:	4453      	addlt	r3, sl
 801854e:	9308      	str	r3, [sp, #32]
 8018550:	2d00      	cmp	r5, #0
 8018552:	f040 82ef 	bne.w	8018b34 <_vfprintf_r+0x95c>
 8018556:	2300      	movs	r3, #0
 8018558:	9327      	str	r3, [sp, #156]	; 0x9c
 801855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801855c:	b11b      	cbz	r3, 8018566 <_vfprintf_r+0x38e>
 801855e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018560:	4648      	mov	r0, r9
 8018562:	f002 fef9 	bl	801b358 <_free_r>
 8018566:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 801856a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801856c:	783b      	ldrb	r3, [r7, #0]
 801856e:	2b00      	cmp	r3, #0
 8018570:	f47f ae88 	bne.w	8018284 <_vfprintf_r+0xac>
 8018574:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018576:	ee18 ba10 	vmov	fp, s16
 801857a:	2b00      	cmp	r3, #0
 801857c:	f040 87f7 	bne.w	801956e <_vfprintf_r+0x1396>
 8018580:	2300      	movs	r3, #0
 8018582:	9327      	str	r3, [sp, #156]	; 0x9c
 8018584:	f000 bc8f 	b.w	8018ea6 <_vfprintf_r+0xcce>
 8018588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801858a:	960d      	str	r6, [sp, #52]	; 0x34
 801858c:	3307      	adds	r3, #7
 801858e:	f023 0307 	bic.w	r3, r3, #7
 8018592:	ecb3 7b02 	vldmia	r3!, {d7}
 8018596:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801859a:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	; 0x48
 801859e:	930c      	str	r3, [sp, #48]	; 0x30
 80185a0:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80185a4:	ee09 3a90 	vmov	s19, r3
 80185a8:	ee09 5a10 	vmov	s18, r5
 80185ac:	ec5b ab19 	vmov	sl, fp, d9
 80185b0:	4bb8      	ldr	r3, [pc, #736]	; (8018894 <_vfprintf_r+0x6bc>)
 80185b2:	4650      	mov	r0, sl
 80185b4:	4659      	mov	r1, fp
 80185b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80185ba:	f7e8 fd77 	bl	80010ac <__aeabi_dcmpun>
 80185be:	2800      	cmp	r0, #0
 80185c0:	f040 8552 	bne.w	8019068 <_vfprintf_r+0xe90>
 80185c4:	4bb3      	ldr	r3, [pc, #716]	; (8018894 <_vfprintf_r+0x6bc>)
 80185c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80185ca:	4650      	mov	r0, sl
 80185cc:	4659      	mov	r1, fp
 80185ce:	f7e8 fd4f 	bl	8001070 <__aeabi_dcmple>
 80185d2:	2800      	cmp	r0, #0
 80185d4:	f040 8548 	bne.w	8019068 <_vfprintf_r+0xe90>
 80185d8:	2200      	movs	r2, #0
 80185da:	2300      	movs	r3, #0
 80185dc:	4628      	mov	r0, r5
 80185de:	4631      	mov	r1, r6
 80185e0:	f7e8 fd3c 	bl	800105c <__aeabi_dcmplt>
 80185e4:	2800      	cmp	r0, #0
 80185e6:	f041 8196 	bne.w	8019916 <_vfprintf_r+0x173e>
 80185ea:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 80185ee:	4faa      	ldr	r7, [pc, #680]	; (8018898 <_vfprintf_r+0x6c0>)
 80185f0:	4baa      	ldr	r3, [pc, #680]	; (801889c <_vfprintf_r+0x6c4>)
 80185f2:	9806      	ldr	r0, [sp, #24]
 80185f4:	2100      	movs	r1, #0
 80185f6:	f04f 0a03 	mov.w	sl, #3
 80185fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80185fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8018600:	9006      	str	r0, [sp, #24]
 8018602:	2c47      	cmp	r4, #71	; 0x47
 8018604:	bfc8      	it	gt
 8018606:	461f      	movgt	r7, r3
 8018608:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 801860c:	9107      	str	r1, [sp, #28]
 801860e:	910e      	str	r1, [sp, #56]	; 0x38
 8018610:	9111      	str	r1, [sp, #68]	; 0x44
 8018612:	910f      	str	r1, [sp, #60]	; 0x3c
 8018614:	2a00      	cmp	r2, #0
 8018616:	f43f af3e 	beq.w	8018496 <_vfprintf_r+0x2be>
 801861a:	f10a 0a01 	add.w	sl, sl, #1
 801861e:	e73a      	b.n	8018496 <_vfprintf_r+0x2be>
 8018620:	4648      	mov	r0, r9
 8018622:	f002 fdfd 	bl	801b220 <__sinit>
 8018626:	e5f1      	b.n	801820c <_vfprintf_r+0x34>
 8018628:	9b06      	ldr	r3, [sp, #24]
 801862a:	7834      	ldrb	r4, [r6, #0]
 801862c:	f043 0320 	orr.w	r3, r3, #32
 8018630:	9306      	str	r3, [sp, #24]
 8018632:	e644      	b.n	80182be <_vfprintf_r+0xe6>
 8018634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018636:	960d      	str	r6, [sp, #52]	; 0x34
 8018638:	f853 2b04 	ldr.w	r2, [r3], #4
 801863c:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
 8018640:	2100      	movs	r1, #0
 8018642:	460a      	mov	r2, r1
 8018644:	f04f 0a01 	mov.w	sl, #1
 8018648:	930c      	str	r3, [sp, #48]	; 0x30
 801864a:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 801864e:	e71a      	b.n	8018486 <_vfprintf_r+0x2ae>
 8018650:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018652:	960d      	str	r6, [sp, #52]	; 0x34
 8018654:	f855 7b04 	ldr.w	r7, [r5], #4
 8018658:	2600      	movs	r6, #0
 801865a:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 801865e:	2f00      	cmp	r7, #0
 8018660:	f000 8683 	beq.w	801936a <_vfprintf_r+0x1192>
 8018664:	9a07      	ldr	r2, [sp, #28]
 8018666:	4613      	mov	r3, r2
 8018668:	3301      	adds	r3, #1
 801866a:	f000 872d 	beq.w	80194c8 <_vfprintf_r+0x12f0>
 801866e:	4631      	mov	r1, r6
 8018670:	4638      	mov	r0, r7
 8018672:	f7e8 f875 	bl	8000760 <memchr>
 8018676:	900b      	str	r0, [sp, #44]	; 0x2c
 8018678:	2800      	cmp	r0, #0
 801867a:	f001 81e0 	beq.w	8019a3e <_vfprintf_r+0x1866>
 801867e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018680:	9607      	str	r6, [sp, #28]
 8018682:	1bda      	subs	r2, r3, r7
 8018684:	920a      	str	r2, [sp, #40]	; 0x28
 8018686:	4633      	mov	r3, r6
 8018688:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
 801868c:	950c      	str	r5, [sp, #48]	; 0x30
 801868e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8018692:	930b      	str	r3, [sp, #44]	; 0x2c
 8018694:	930e      	str	r3, [sp, #56]	; 0x38
 8018696:	9311      	str	r3, [sp, #68]	; 0x44
 8018698:	930f      	str	r3, [sp, #60]	; 0x3c
 801869a:	e7bb      	b.n	8018614 <_vfprintf_r+0x43c>
 801869c:	9b06      	ldr	r3, [sp, #24]
 801869e:	960d      	str	r6, [sp, #52]	; 0x34
 80186a0:	069d      	lsls	r5, r3, #26
 80186a2:	f140 80ad 	bpl.w	8018800 <_vfprintf_r+0x628>
 80186a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186a8:	3307      	adds	r3, #7
 80186aa:	f023 0307 	bic.w	r3, r3, #7
 80186ae:	4619      	mov	r1, r3
 80186b0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80186b4:	910c      	str	r1, [sp, #48]	; 0x30
 80186b6:	4692      	mov	sl, r2
 80186b8:	469b      	mov	fp, r3
 80186ba:	2a00      	cmp	r2, #0
 80186bc:	f173 0300 	sbcs.w	r3, r3, #0
 80186c0:	f2c0 80af 	blt.w	8018822 <_vfprintf_r+0x64a>
 80186c4:	9b07      	ldr	r3, [sp, #28]
 80186c6:	3301      	adds	r3, #1
 80186c8:	f000 85ad 	beq.w	8019226 <_vfprintf_r+0x104e>
 80186cc:	9b06      	ldr	r3, [sp, #24]
 80186ce:	f023 0580 	bic.w	r5, r3, #128	; 0x80
 80186d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80186d6:	f040 82b1 	bne.w	8018c3c <_vfprintf_r+0xa64>
 80186da:	9b07      	ldr	r3, [sp, #28]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	f040 82b4 	bne.w	8018c4a <_vfprintf_r+0xa72>
 80186e2:	9506      	str	r5, [sp, #24]
 80186e4:	2300      	movs	r3, #0
 80186e6:	9307      	str	r3, [sp, #28]
 80186e8:	930a      	str	r3, [sp, #40]	; 0x28
 80186ea:	af52      	add	r7, sp, #328	; 0x148
 80186ec:	e0c3      	b.n	8018876 <_vfprintf_r+0x69e>
 80186ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80186f4:	9209      	str	r2, [sp, #36]	; 0x24
 80186f6:	2a00      	cmp	r2, #0
 80186f8:	f280 8471 	bge.w	8018fde <_vfprintf_r+0xe06>
 80186fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186fe:	930c      	str	r3, [sp, #48]	; 0x30
 8018700:	4252      	negs	r2, r2
 8018702:	9209      	str	r2, [sp, #36]	; 0x24
 8018704:	9b06      	ldr	r3, [sp, #24]
 8018706:	7834      	ldrb	r4, [r6, #0]
 8018708:	f043 0304 	orr.w	r3, r3, #4
 801870c:	9306      	str	r3, [sp, #24]
 801870e:	e5d6      	b.n	80182be <_vfprintf_r+0xe6>
 8018710:	7834      	ldrb	r4, [r6, #0]
 8018712:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8018716:	e5d2      	b.n	80182be <_vfprintf_r+0xe6>
 8018718:	9b06      	ldr	r3, [sp, #24]
 801871a:	960d      	str	r6, [sp, #52]	; 0x34
 801871c:	f043 0510 	orr.w	r5, r3, #16
 8018720:	06af      	lsls	r7, r5, #26
 8018722:	f140 8429 	bpl.w	8018f78 <_vfprintf_r+0xda0>
 8018726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018728:	3307      	adds	r3, #7
 801872a:	f023 0307 	bic.w	r3, r3, #7
 801872e:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
 8018732:	930c      	str	r3, [sp, #48]	; 0x30
 8018734:	2301      	movs	r3, #1
 8018736:	2200      	movs	r2, #0
 8018738:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801873c:	9a07      	ldr	r2, [sp, #28]
 801873e:	4611      	mov	r1, r2
 8018740:	3101      	adds	r1, #1
 8018742:	d07d      	beq.n	8018840 <_vfprintf_r+0x668>
 8018744:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8018748:	9106      	str	r1, [sp, #24]
 801874a:	ea5a 010b 	orrs.w	r1, sl, fp
 801874e:	f040 8271 	bne.w	8018c34 <_vfprintf_r+0xa5c>
 8018752:	2a00      	cmp	r2, #0
 8018754:	f040 8685 	bne.w	8019462 <_vfprintf_r+0x128a>
 8018758:	2b00      	cmp	r3, #0
 801875a:	d1c3      	bne.n	80186e4 <_vfprintf_r+0x50c>
 801875c:	f015 0301 	ands.w	r3, r5, #1
 8018760:	930a      	str	r3, [sp, #40]	; 0x28
 8018762:	f000 846b 	beq.w	801903c <_vfprintf_r+0xe64>
 8018766:	2330      	movs	r3, #48	; 0x30
 8018768:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801876c:	f20d 1747 	addw	r7, sp, #327	; 0x147
 8018770:	e081      	b.n	8018876 <_vfprintf_r+0x69e>
 8018772:	9b06      	ldr	r3, [sp, #24]
 8018774:	7834      	ldrb	r4, [r6, #0]
 8018776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801877a:	9306      	str	r3, [sp, #24]
 801877c:	e59f      	b.n	80182be <_vfprintf_r+0xe6>
 801877e:	4632      	mov	r2, r6
 8018780:	f812 4b01 	ldrb.w	r4, [r2], #1
 8018784:	2c2a      	cmp	r4, #42	; 0x2a
 8018786:	f001 82f0 	beq.w	8019d6a <_vfprintf_r+0x1b92>
 801878a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801878e:	2b09      	cmp	r3, #9
 8018790:	4616      	mov	r6, r2
 8018792:	bf98      	it	ls
 8018794:	2200      	movls	r2, #0
 8018796:	f201 8190 	bhi.w	8019aba <_vfprintf_r+0x18e2>
 801879a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801879e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80187a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80187a6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80187aa:	2b09      	cmp	r3, #9
 80187ac:	d9f5      	bls.n	801879a <_vfprintf_r+0x5c2>
 80187ae:	9207      	str	r2, [sp, #28]
 80187b0:	e586      	b.n	80182c0 <_vfprintf_r+0xe8>
 80187b2:	9b06      	ldr	r3, [sp, #24]
 80187b4:	7834      	ldrb	r4, [r6, #0]
 80187b6:	f043 0301 	orr.w	r3, r3, #1
 80187ba:	9306      	str	r3, [sp, #24]
 80187bc:	e57f      	b.n	80182be <_vfprintf_r+0xe6>
 80187be:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f47f ae05 	bne.w	80183d2 <_vfprintf_r+0x1fa>
 80187c8:	7834      	ldrb	r4, [r6, #0]
 80187ca:	f88d a07b 	strb.w	sl, [sp, #123]	; 0x7b
 80187ce:	e576      	b.n	80182be <_vfprintf_r+0xe6>
 80187d0:	7834      	ldrb	r4, [r6, #0]
 80187d2:	9b06      	ldr	r3, [sp, #24]
 80187d4:	2c6c      	cmp	r4, #108	; 0x6c
 80187d6:	f000 85c1 	beq.w	801935c <_vfprintf_r+0x1184>
 80187da:	f043 0310 	orr.w	r3, r3, #16
 80187de:	9306      	str	r3, [sp, #24]
 80187e0:	e56d      	b.n	80182be <_vfprintf_r+0xe6>
 80187e2:	9b06      	ldr	r3, [sp, #24]
 80187e4:	7834      	ldrb	r4, [r6, #0]
 80187e6:	f043 0308 	orr.w	r3, r3, #8
 80187ea:	9306      	str	r3, [sp, #24]
 80187ec:	e567      	b.n	80182be <_vfprintf_r+0xe6>
 80187ee:	9b06      	ldr	r3, [sp, #24]
 80187f0:	960d      	str	r6, [sp, #52]	; 0x34
 80187f2:	f043 0310 	orr.w	r3, r3, #16
 80187f6:	9306      	str	r3, [sp, #24]
 80187f8:	9b06      	ldr	r3, [sp, #24]
 80187fa:	069d      	lsls	r5, r3, #26
 80187fc:	f53f af53 	bmi.w	80186a6 <_vfprintf_r+0x4ce>
 8018800:	9b06      	ldr	r3, [sp, #24]
 8018802:	06d8      	lsls	r0, r3, #27
 8018804:	f140 84f6 	bpl.w	80191f4 <_vfprintf_r+0x101c>
 8018808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801880a:	f853 2b04 	ldr.w	r2, [r3], #4
 801880e:	930c      	str	r3, [sp, #48]	; 0x30
 8018810:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8018814:	465b      	mov	r3, fp
 8018816:	2a00      	cmp	r2, #0
 8018818:	f173 0300 	sbcs.w	r3, r3, #0
 801881c:	4692      	mov	sl, r2
 801881e:	f6bf af51 	bge.w	80186c4 <_vfprintf_r+0x4ec>
 8018822:	9a07      	ldr	r2, [sp, #28]
 8018824:	9d06      	ldr	r5, [sp, #24]
 8018826:	f1da 0a00 	rsbs	sl, sl, #0
 801882a:	4611      	mov	r1, r2
 801882c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8018830:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
 8018834:	3101      	adds	r1, #1
 8018836:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801883a:	f04f 0301 	mov.w	r3, #1
 801883e:	d181      	bne.n	8018744 <_vfprintf_r+0x56c>
 8018840:	2b01      	cmp	r3, #1
 8018842:	f000 81fb 	beq.w	8018c3c <_vfprintf_r+0xa64>
 8018846:	2b02      	cmp	r3, #2
 8018848:	af52      	add	r7, sp, #328	; 0x148
 801884a:	d173      	bne.n	8018934 <_vfprintf_r+0x75c>
 801884c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801884e:	ea4f 131a 	mov.w	r3, sl, lsr #4
 8018852:	f00a 010f 	and.w	r1, sl, #15
 8018856:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
 801885a:	ea4f 121b 	mov.w	r2, fp, lsr #4
 801885e:	469a      	mov	sl, r3
 8018860:	4693      	mov	fp, r2
 8018862:	5c43      	ldrb	r3, [r0, r1]
 8018864:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8018868:	ea5a 030b 	orrs.w	r3, sl, fp
 801886c:	d1ef      	bne.n	801884e <_vfprintf_r+0x676>
 801886e:	ab52      	add	r3, sp, #328	; 0x148
 8018870:	1bdb      	subs	r3, r3, r7
 8018872:	9506      	str	r5, [sp, #24]
 8018874:	930a      	str	r3, [sp, #40]	; 0x28
 8018876:	2300      	movs	r3, #0
 8018878:	9907      	ldr	r1, [sp, #28]
 801887a:	930b      	str	r3, [sp, #44]	; 0x2c
 801887c:	930e      	str	r3, [sp, #56]	; 0x38
 801887e:	9311      	str	r3, [sp, #68]	; 0x44
 8018880:	930f      	str	r3, [sp, #60]	; 0x3c
 8018882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018884:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8018888:	428b      	cmp	r3, r1
 801888a:	bfb8      	it	lt
 801888c:	460b      	movlt	r3, r1
 801888e:	469a      	mov	sl, r3
 8018890:	e6c0      	b.n	8018614 <_vfprintf_r+0x43c>
 8018892:	bf00      	nop
 8018894:	7fefffff 	.word	0x7fefffff
 8018898:	08020524 	.word	0x08020524
 801889c:	08020528 	.word	0x08020528
 80188a0:	9b06      	ldr	r3, [sp, #24]
 80188a2:	960d      	str	r6, [sp, #52]	; 0x34
 80188a4:	f043 0310 	orr.w	r3, r3, #16
 80188a8:	9306      	str	r3, [sp, #24]
 80188aa:	9b06      	ldr	r3, [sp, #24]
 80188ac:	0699      	lsls	r1, r3, #26
 80188ae:	f140 8377 	bpl.w	8018fa0 <_vfprintf_r+0xdc8>
 80188b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188b4:	3307      	adds	r3, #7
 80188b6:	f023 0307 	bic.w	r3, r3, #7
 80188ba:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
 80188be:	930c      	str	r3, [sp, #48]	; 0x30
 80188c0:	9b06      	ldr	r3, [sp, #24]
 80188c2:	f423 6580 	bic.w	r5, r3, #1024	; 0x400
 80188c6:	2300      	movs	r3, #0
 80188c8:	e735      	b.n	8018736 <_vfprintf_r+0x55e>
 80188ca:	7834      	ldrb	r4, [r6, #0]
 80188cc:	9b06      	ldr	r3, [sp, #24]
 80188ce:	2c68      	cmp	r4, #104	; 0x68
 80188d0:	f000 853d 	beq.w	801934e <_vfprintf_r+0x1176>
 80188d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188d8:	9306      	str	r3, [sp, #24]
 80188da:	e4f0      	b.n	80182be <_vfprintf_r+0xe6>
 80188dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188de:	960d      	str	r6, [sp, #52]	; 0x34
 80188e0:	f647 0130 	movw	r1, #30768	; 0x7830
 80188e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80188e8:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
 80188ec:	9906      	ldr	r1, [sp, #24]
 80188ee:	930c      	str	r3, [sp, #48]	; 0x30
 80188f0:	4bcd      	ldr	r3, [pc, #820]	; (8018c28 <_vfprintf_r+0xa50>)
 80188f2:	9316      	str	r3, [sp, #88]	; 0x58
 80188f4:	f041 0502 	orr.w	r5, r1, #2
 80188f8:	4692      	mov	sl, r2
 80188fa:	f04f 0b00 	mov.w	fp, #0
 80188fe:	2302      	movs	r3, #2
 8018900:	2478      	movs	r4, #120	; 0x78
 8018902:	e718      	b.n	8018736 <_vfprintf_r+0x55e>
 8018904:	9b06      	ldr	r3, [sp, #24]
 8018906:	960d      	str	r6, [sp, #52]	; 0x34
 8018908:	069e      	lsls	r6, r3, #26
 801890a:	f100 83a1 	bmi.w	8019050 <_vfprintf_r+0xe78>
 801890e:	9b06      	ldr	r3, [sp, #24]
 8018910:	06dd      	lsls	r5, r3, #27
 8018912:	f100 85ac 	bmi.w	801946e <_vfprintf_r+0x1296>
 8018916:	9b06      	ldr	r3, [sp, #24]
 8018918:	065c      	lsls	r4, r3, #25
 801891a:	f100 8648 	bmi.w	80195ae <_vfprintf_r+0x13d6>
 801891e:	9b06      	ldr	r3, [sp, #24]
 8018920:	0598      	lsls	r0, r3, #22
 8018922:	f140 85a4 	bpl.w	801946e <_vfprintf_r+0x1296>
 8018926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018928:	9908      	ldr	r1, [sp, #32]
 801892a:	f853 2b04 	ldr.w	r2, [r3], #4
 801892e:	930c      	str	r3, [sp, #48]	; 0x30
 8018930:	7011      	strb	r1, [r2, #0]
 8018932:	e61a      	b.n	801856a <_vfprintf_r+0x392>
 8018934:	ea4f 02da 	mov.w	r2, sl, lsr #3
 8018938:	ea42 724b 	orr.w	r2, r2, fp, lsl #29
 801893c:	ea4f 01db 	mov.w	r1, fp, lsr #3
 8018940:	f00a 0307 	and.w	r3, sl, #7
 8018944:	468b      	mov	fp, r1
 8018946:	4692      	mov	sl, r2
 8018948:	3330      	adds	r3, #48	; 0x30
 801894a:	ea5a 010b 	orrs.w	r1, sl, fp
 801894e:	463a      	mov	r2, r7
 8018950:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8018954:	d1ee      	bne.n	8018934 <_vfprintf_r+0x75c>
 8018956:	07e9      	lsls	r1, r5, #31
 8018958:	d589      	bpl.n	801886e <_vfprintf_r+0x696>
 801895a:	2b30      	cmp	r3, #48	; 0x30
 801895c:	d087      	beq.n	801886e <_vfprintf_r+0x696>
 801895e:	2330      	movs	r3, #48	; 0x30
 8018960:	3a02      	subs	r2, #2
 8018962:	f807 3c01 	strb.w	r3, [r7, #-1]
 8018966:	ab52      	add	r3, sp, #328	; 0x148
 8018968:	1a9b      	subs	r3, r3, r2
 801896a:	9506      	str	r5, [sp, #24]
 801896c:	930a      	str	r3, [sp, #40]	; 0x28
 801896e:	4617      	mov	r7, r2
 8018970:	e781      	b.n	8018876 <_vfprintf_r+0x69e>
 8018972:	2c65      	cmp	r4, #101	; 0x65
 8018974:	f340 8113 	ble.w	8018b9e <_vfprintf_r+0x9c6>
 8018978:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801897c:	2200      	movs	r2, #0
 801897e:	2300      	movs	r3, #0
 8018980:	f7e8 fb62 	bl	8001048 <__aeabi_dcmpeq>
 8018984:	2800      	cmp	r0, #0
 8018986:	f000 8204 	beq.w	8018d92 <_vfprintf_r+0xbba>
 801898a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801898c:	4aa7      	ldr	r2, [pc, #668]	; (8018c2c <_vfprintf_r+0xa54>)
 801898e:	f8c8 2000 	str.w	r2, [r8]
 8018992:	3301      	adds	r3, #1
 8018994:	3501      	adds	r5, #1
 8018996:	2201      	movs	r2, #1
 8018998:	2b07      	cmp	r3, #7
 801899a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801899e:	f8c8 2004 	str.w	r2, [r8, #4]
 80189a2:	f300 8540 	bgt.w	8019426 <_vfprintf_r+0x124e>
 80189a6:	f108 0808 	add.w	r8, r8, #8
 80189aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80189ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80189ae:	4293      	cmp	r3, r2
 80189b0:	f280 8307 	bge.w	8018fc2 <_vfprintf_r+0xdea>
 80189b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80189b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80189b8:	f8c8 2000 	str.w	r2, [r8]
 80189bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189be:	f8c8 2004 	str.w	r2, [r8, #4]
 80189c2:	3301      	adds	r3, #1
 80189c4:	4415      	add	r5, r2
 80189c6:	2b07      	cmp	r3, #7
 80189c8:	9528      	str	r5, [sp, #160]	; 0xa0
 80189ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80189cc:	f300 84b1 	bgt.w	8019332 <_vfprintf_r+0x115a>
 80189d0:	f108 0808 	add.w	r8, r8, #8
 80189d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189d6:	1e5c      	subs	r4, r3, #1
 80189d8:	2c00      	cmp	r4, #0
 80189da:	f77f ada9 	ble.w	8018530 <_vfprintf_r+0x358>
 80189de:	2c10      	cmp	r4, #16
 80189e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80189e2:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8018c30 <_vfprintf_r+0xa58>
 80189e6:	f340 852f 	ble.w	8019448 <_vfprintf_r+0x1270>
 80189ea:	465f      	mov	r7, fp
 80189ec:	2610      	movs	r6, #16
 80189ee:	ee18 ba10 	vmov	fp, s16
 80189f2:	e005      	b.n	8018a00 <_vfprintf_r+0x828>
 80189f4:	f108 0808 	add.w	r8, r8, #8
 80189f8:	3c10      	subs	r4, #16
 80189fa:	2c10      	cmp	r4, #16
 80189fc:	f340 8523 	ble.w	8019446 <_vfprintf_r+0x126e>
 8018a00:	3301      	adds	r3, #1
 8018a02:	3510      	adds	r5, #16
 8018a04:	2b07      	cmp	r3, #7
 8018a06:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018a0a:	e9c8 7600 	strd	r7, r6, [r8]
 8018a0e:	ddf1      	ble.n	80189f4 <_vfprintf_r+0x81c>
 8018a10:	aa26      	add	r2, sp, #152	; 0x98
 8018a12:	4659      	mov	r1, fp
 8018a14:	4648      	mov	r0, r9
 8018a16:	f003 fc9d 	bl	801c354 <__sprint_r>
 8018a1a:	2800      	cmp	r0, #0
 8018a1c:	f040 823e 	bne.w	8018e9c <_vfprintf_r+0xcc4>
 8018a20:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8018a24:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018a28:	e7e6      	b.n	80189f8 <_vfprintf_r+0x820>
 8018a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a2c:	eba3 060a 	sub.w	r6, r3, sl
 8018a30:	2e00      	cmp	r6, #0
 8018a32:	f77f ad64 	ble.w	80184fe <_vfprintf_r+0x326>
 8018a36:	2e10      	cmp	r6, #16
 8018a38:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018a3a:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8018c30 <_vfprintf_r+0xa58>
 8018a3e:	dd29      	ble.n	8018a94 <_vfprintf_r+0x8bc>
 8018a40:	4658      	mov	r0, fp
 8018a42:	4629      	mov	r1, r5
 8018a44:	46a3      	mov	fp, r4
 8018a46:	ee18 5a10 	vmov	r5, s16
 8018a4a:	2310      	movs	r3, #16
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	e004      	b.n	8018a5a <_vfprintf_r+0x882>
 8018a50:	3e10      	subs	r6, #16
 8018a52:	2e10      	cmp	r6, #16
 8018a54:	f108 0808 	add.w	r8, r8, #8
 8018a58:	dd18      	ble.n	8018a8c <_vfprintf_r+0x8b4>
 8018a5a:	3201      	adds	r2, #1
 8018a5c:	3110      	adds	r1, #16
 8018a5e:	2a07      	cmp	r2, #7
 8018a60:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8018a64:	e9c8 4300 	strd	r4, r3, [r8]
 8018a68:	ddf2      	ble.n	8018a50 <_vfprintf_r+0x878>
 8018a6a:	aa26      	add	r2, sp, #152	; 0x98
 8018a6c:	4629      	mov	r1, r5
 8018a6e:	4648      	mov	r0, r9
 8018a70:	f003 fc70 	bl	801c354 <__sprint_r>
 8018a74:	2800      	cmp	r0, #0
 8018a76:	f040 8210 	bne.w	8018e9a <_vfprintf_r+0xcc2>
 8018a7a:	3e10      	subs	r6, #16
 8018a7c:	2e10      	cmp	r6, #16
 8018a7e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8018a82:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018a86:	f04f 0310 	mov.w	r3, #16
 8018a8a:	dce6      	bgt.n	8018a5a <_vfprintf_r+0x882>
 8018a8c:	4623      	mov	r3, r4
 8018a8e:	460d      	mov	r5, r1
 8018a90:	465c      	mov	r4, fp
 8018a92:	469b      	mov	fp, r3
 8018a94:	3201      	adds	r2, #1
 8018a96:	4435      	add	r5, r6
 8018a98:	2a07      	cmp	r2, #7
 8018a9a:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8018a9e:	f8c8 b000 	str.w	fp, [r8]
 8018aa2:	f8c8 6004 	str.w	r6, [r8, #4]
 8018aa6:	f300 8436 	bgt.w	8019316 <_vfprintf_r+0x113e>
 8018aaa:	9b07      	ldr	r3, [sp, #28]
 8018aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018aae:	1a9e      	subs	r6, r3, r2
 8018ab0:	2e00      	cmp	r6, #0
 8018ab2:	f108 0808 	add.w	r8, r8, #8
 8018ab6:	f77f ad28 	ble.w	801850a <_vfprintf_r+0x332>
 8018aba:	2e10      	cmp	r6, #16
 8018abc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018abe:	f8df b170 	ldr.w	fp, [pc, #368]	; 8018c30 <_vfprintf_r+0xa58>
 8018ac2:	dd29      	ble.n	8018b18 <_vfprintf_r+0x940>
 8018ac4:	4658      	mov	r0, fp
 8018ac6:	4629      	mov	r1, r5
 8018ac8:	46a3      	mov	fp, r4
 8018aca:	ee18 5a10 	vmov	r5, s16
 8018ace:	2310      	movs	r3, #16
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	e004      	b.n	8018ade <_vfprintf_r+0x906>
 8018ad4:	3e10      	subs	r6, #16
 8018ad6:	2e10      	cmp	r6, #16
 8018ad8:	f108 0808 	add.w	r8, r8, #8
 8018adc:	dd18      	ble.n	8018b10 <_vfprintf_r+0x938>
 8018ade:	3201      	adds	r2, #1
 8018ae0:	3110      	adds	r1, #16
 8018ae2:	2a07      	cmp	r2, #7
 8018ae4:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8018ae8:	e9c8 4300 	strd	r4, r3, [r8]
 8018aec:	ddf2      	ble.n	8018ad4 <_vfprintf_r+0x8fc>
 8018aee:	aa26      	add	r2, sp, #152	; 0x98
 8018af0:	4629      	mov	r1, r5
 8018af2:	4648      	mov	r0, r9
 8018af4:	f003 fc2e 	bl	801c354 <__sprint_r>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	f040 81ce 	bne.w	8018e9a <_vfprintf_r+0xcc2>
 8018afe:	3e10      	subs	r6, #16
 8018b00:	2e10      	cmp	r6, #16
 8018b02:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8018b06:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018b0a:	f04f 0310 	mov.w	r3, #16
 8018b0e:	dce6      	bgt.n	8018ade <_vfprintf_r+0x906>
 8018b10:	4623      	mov	r3, r4
 8018b12:	460d      	mov	r5, r1
 8018b14:	465c      	mov	r4, fp
 8018b16:	469b      	mov	fp, r3
 8018b18:	3201      	adds	r2, #1
 8018b1a:	4435      	add	r5, r6
 8018b1c:	2a07      	cmp	r2, #7
 8018b1e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8018b22:	f8c8 b000 	str.w	fp, [r8]
 8018b26:	f8c8 6004 	str.w	r6, [r8, #4]
 8018b2a:	f300 8217 	bgt.w	8018f5c <_vfprintf_r+0xd84>
 8018b2e:	f108 0808 	add.w	r8, r8, #8
 8018b32:	e4ea      	b.n	801850a <_vfprintf_r+0x332>
 8018b34:	ee18 1a10 	vmov	r1, s16
 8018b38:	aa26      	add	r2, sp, #152	; 0x98
 8018b3a:	4648      	mov	r0, r9
 8018b3c:	f003 fc0a 	bl	801c354 <__sprint_r>
 8018b40:	2800      	cmp	r0, #0
 8018b42:	f43f ad08 	beq.w	8018556 <_vfprintf_r+0x37e>
 8018b46:	ee18 ba10 	vmov	fp, s16
 8018b4a:	e1a7      	b.n	8018e9c <_vfprintf_r+0xcc4>
 8018b4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018b4e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018b50:	f8c8 1000 	str.w	r1, [r8]
 8018b54:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018b56:	f8c8 1004 	str.w	r1, [r8, #4]
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	440d      	add	r5, r1
 8018b5e:	2b07      	cmp	r3, #7
 8018b60:	9528      	str	r5, [sp, #160]	; 0xa0
 8018b62:	9327      	str	r3, [sp, #156]	; 0x9c
 8018b64:	f300 85ce 	bgt.w	8019704 <_vfprintf_r+0x152c>
 8018b68:	f108 0808 	add.w	r8, r8, #8
 8018b6c:	2a00      	cmp	r2, #0
 8018b6e:	f2c0 87c5 	blt.w	8019afc <_vfprintf_r+0x1924>
 8018b72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018b74:	3301      	adds	r3, #1
 8018b76:	4415      	add	r5, r2
 8018b78:	2b07      	cmp	r3, #7
 8018b7a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018b7e:	e9c8 7200 	strd	r7, r2, [r8]
 8018b82:	f77f acd3 	ble.w	801852c <_vfprintf_r+0x354>
 8018b86:	ee18 1a10 	vmov	r1, s16
 8018b8a:	aa26      	add	r2, sp, #152	; 0x98
 8018b8c:	4648      	mov	r0, r9
 8018b8e:	f003 fbe1 	bl	801c354 <__sprint_r>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	d1d7      	bne.n	8018b46 <_vfprintf_r+0x96e>
 8018b96:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8018b98:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018b9c:	e4c8      	b.n	8018530 <_vfprintf_r+0x358>
 8018b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ba0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8018ba2:	2b01      	cmp	r3, #1
 8018ba4:	f340 8192 	ble.w	8018ecc <_vfprintf_r+0xcf4>
 8018ba8:	3401      	adds	r4, #1
 8018baa:	3501      	adds	r5, #1
 8018bac:	2301      	movs	r3, #1
 8018bae:	2c07      	cmp	r4, #7
 8018bb0:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8018bb4:	f8c8 7000 	str.w	r7, [r8]
 8018bb8:	f8c8 3004 	str.w	r3, [r8, #4]
 8018bbc:	f300 83f0 	bgt.w	80193a0 <_vfprintf_r+0x11c8>
 8018bc0:	f108 0808 	add.w	r8, r8, #8
 8018bc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018bc8:	3401      	adds	r4, #1
 8018bca:	441d      	add	r5, r3
 8018bcc:	2c07      	cmp	r4, #7
 8018bce:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8018bd2:	e9c8 2300 	strd	r2, r3, [r8]
 8018bd6:	f300 83f1 	bgt.w	80193bc <_vfprintf_r+0x11e4>
 8018bda:	f108 0808 	add.w	r8, r8, #8
 8018bde:	2300      	movs	r3, #0
 8018be0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8018be4:	2200      	movs	r2, #0
 8018be6:	f7e8 fa2f 	bl	8001048 <__aeabi_dcmpeq>
 8018bea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018bec:	2800      	cmp	r0, #0
 8018bee:	f040 818b 	bne.w	8018f08 <_vfprintf_r+0xd30>
 8018bf2:	3b01      	subs	r3, #1
 8018bf4:	3401      	adds	r4, #1
 8018bf6:	3701      	adds	r7, #1
 8018bf8:	441d      	add	r5, r3
 8018bfa:	2c07      	cmp	r4, #7
 8018bfc:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8018c00:	f8c8 7000 	str.w	r7, [r8]
 8018c04:	f8c8 3004 	str.w	r3, [r8, #4]
 8018c08:	f300 8170 	bgt.w	8018eec <_vfprintf_r+0xd14>
 8018c0c:	f108 0808 	add.w	r8, r8, #8
 8018c10:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018c12:	3401      	adds	r4, #1
 8018c14:	4415      	add	r5, r2
 8018c16:	ab22      	add	r3, sp, #136	; 0x88
 8018c18:	2c07      	cmp	r4, #7
 8018c1a:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8018c1e:	e9c8 3200 	strd	r3, r2, [r8]
 8018c22:	f77f ac83 	ble.w	801852c <_vfprintf_r+0x354>
 8018c26:	e7ae      	b.n	8018b86 <_vfprintf_r+0x9ae>
 8018c28:	08020534 	.word	0x08020534
 8018c2c:	08020564 	.word	0x08020564
 8018c30:	08020598 	.word	0x08020598
 8018c34:	2b01      	cmp	r3, #1
 8018c36:	9d06      	ldr	r5, [sp, #24]
 8018c38:	f47f ae05 	bne.w	8018846 <_vfprintf_r+0x66e>
 8018c3c:	f1bb 0f00 	cmp.w	fp, #0
 8018c40:	bf08      	it	eq
 8018c42:	f1ba 0f0a 	cmpeq.w	sl, #10
 8018c46:	f080 82f6 	bcs.w	8019236 <_vfprintf_r+0x105e>
 8018c4a:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8018c4e:	2301      	movs	r3, #1
 8018c50:	f88d a147 	strb.w	sl, [sp, #327]	; 0x147
 8018c54:	9506      	str	r5, [sp, #24]
 8018c56:	930a      	str	r3, [sp, #40]	; 0x28
 8018c58:	f20d 1747 	addw	r7, sp, #327	; 0x147
 8018c5c:	e60b      	b.n	8018876 <_vfprintf_r+0x69e>
 8018c5e:	2e10      	cmp	r6, #16
 8018c60:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8018c64:	dd29      	ble.n	8018cba <_vfprintf_r+0xae2>
 8018c66:	931b      	str	r3, [sp, #108]	; 0x6c
 8018c68:	2510      	movs	r5, #16
 8018c6a:	4643      	mov	r3, r8
 8018c6c:	4608      	mov	r0, r1
 8018c6e:	46b8      	mov	r8, r7
 8018c70:	4627      	mov	r7, r4
 8018c72:	ee18 4a10 	vmov	r4, s16
 8018c76:	e004      	b.n	8018c82 <_vfprintf_r+0xaaa>
 8018c78:	3e10      	subs	r6, #16
 8018c7a:	2e10      	cmp	r6, #16
 8018c7c:	f103 0308 	add.w	r3, r3, #8
 8018c80:	dd16      	ble.n	8018cb0 <_vfprintf_r+0xad8>
 8018c82:	3201      	adds	r2, #1
 8018c84:	49c4      	ldr	r1, [pc, #784]	; (8018f98 <_vfprintf_r+0xdc0>)
 8018c86:	3010      	adds	r0, #16
 8018c88:	2a07      	cmp	r2, #7
 8018c8a:	e9cd 2027 	strd	r2, r0, [sp, #156]	; 0x9c
 8018c8e:	e9c3 1500 	strd	r1, r5, [r3]
 8018c92:	ddf1      	ble.n	8018c78 <_vfprintf_r+0xaa0>
 8018c94:	aa26      	add	r2, sp, #152	; 0x98
 8018c96:	4621      	mov	r1, r4
 8018c98:	4648      	mov	r0, r9
 8018c9a:	f003 fb5b 	bl	801c354 <__sprint_r>
 8018c9e:	2800      	cmp	r0, #0
 8018ca0:	f040 83b3 	bne.w	801940a <_vfprintf_r+0x1232>
 8018ca4:	3e10      	subs	r6, #16
 8018ca6:	2e10      	cmp	r6, #16
 8018ca8:	e9dd 2027 	ldrd	r2, r0, [sp, #156]	; 0x9c
 8018cac:	ab29      	add	r3, sp, #164	; 0xa4
 8018cae:	dce8      	bgt.n	8018c82 <_vfprintf_r+0xaaa>
 8018cb0:	463c      	mov	r4, r7
 8018cb2:	4647      	mov	r7, r8
 8018cb4:	4698      	mov	r8, r3
 8018cb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018cb8:	4601      	mov	r1, r0
 8018cba:	3201      	adds	r2, #1
 8018cbc:	48b6      	ldr	r0, [pc, #728]	; (8018f98 <_vfprintf_r+0xdc0>)
 8018cbe:	f8c8 0000 	str.w	r0, [r8]
 8018cc2:	1875      	adds	r5, r6, r1
 8018cc4:	2a07      	cmp	r2, #7
 8018cc6:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8018cca:	f8c8 6004 	str.w	r6, [r8, #4]
 8018cce:	f300 838a 	bgt.w	80193e6 <_vfprintf_r+0x120e>
 8018cd2:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8018cd6:	f108 0808 	add.w	r8, r8, #8
 8018cda:	f7ff bbed 	b.w	80184b8 <_vfprintf_r+0x2e0>
 8018cde:	ee18 1a10 	vmov	r1, s16
 8018ce2:	aa26      	add	r2, sp, #152	; 0x98
 8018ce4:	4648      	mov	r0, r9
 8018ce6:	931b      	str	r3, [sp, #108]	; 0x6c
 8018ce8:	f003 fb34 	bl	801c354 <__sprint_r>
 8018cec:	2800      	cmp	r0, #0
 8018cee:	f47f af2a 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8018cf2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8018cf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018cf6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018cfa:	f7ff bbed 	b.w	80184d8 <_vfprintf_r+0x300>
 8018cfe:	ee18 1a10 	vmov	r1, s16
 8018d02:	aa26      	add	r2, sp, #152	; 0x98
 8018d04:	4648      	mov	r0, r9
 8018d06:	f003 fb25 	bl	801c354 <__sprint_r>
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	f47f af1b 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8018d10:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8018d12:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018d16:	f7ff bbee 	b.w	80184f6 <_vfprintf_r+0x31e>
 8018d1a:	2c10      	cmp	r4, #16
 8018d1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018d1e:	dd20      	ble.n	8018d62 <_vfprintf_r+0xb8a>
 8018d20:	ee18 7a10 	vmov	r7, s16
 8018d24:	2610      	movs	r6, #16
 8018d26:	e004      	b.n	8018d32 <_vfprintf_r+0xb5a>
 8018d28:	3c10      	subs	r4, #16
 8018d2a:	2c10      	cmp	r4, #16
 8018d2c:	f108 0808 	add.w	r8, r8, #8
 8018d30:	dd17      	ble.n	8018d62 <_vfprintf_r+0xb8a>
 8018d32:	3301      	adds	r3, #1
 8018d34:	4a98      	ldr	r2, [pc, #608]	; (8018f98 <_vfprintf_r+0xdc0>)
 8018d36:	3510      	adds	r5, #16
 8018d38:	2b07      	cmp	r3, #7
 8018d3a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018d3e:	e9c8 2600 	strd	r2, r6, [r8]
 8018d42:	ddf1      	ble.n	8018d28 <_vfprintf_r+0xb50>
 8018d44:	aa26      	add	r2, sp, #152	; 0x98
 8018d46:	4639      	mov	r1, r7
 8018d48:	4648      	mov	r0, r9
 8018d4a:	f003 fb03 	bl	801c354 <__sprint_r>
 8018d4e:	2800      	cmp	r0, #0
 8018d50:	f040 8377 	bne.w	8019442 <_vfprintf_r+0x126a>
 8018d54:	3c10      	subs	r4, #16
 8018d56:	2c10      	cmp	r4, #16
 8018d58:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8018d5c:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018d60:	dce7      	bgt.n	8018d32 <_vfprintf_r+0xb5a>
 8018d62:	3301      	adds	r3, #1
 8018d64:	4a8c      	ldr	r2, [pc, #560]	; (8018f98 <_vfprintf_r+0xdc0>)
 8018d66:	f8c8 2000 	str.w	r2, [r8]
 8018d6a:	4425      	add	r5, r4
 8018d6c:	2b07      	cmp	r3, #7
 8018d6e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018d72:	f8c8 4004 	str.w	r4, [r8, #4]
 8018d76:	f77f abe4 	ble.w	8018542 <_vfprintf_r+0x36a>
 8018d7a:	ee18 1a10 	vmov	r1, s16
 8018d7e:	aa26      	add	r2, sp, #152	; 0x98
 8018d80:	4648      	mov	r0, r9
 8018d82:	f003 fae7 	bl	801c354 <__sprint_r>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	f47f aedd 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8018d8c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8018d8e:	f7ff bbd8 	b.w	8018542 <_vfprintf_r+0x36a>
 8018d92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018d94:	2a00      	cmp	r2, #0
 8018d96:	f340 8126 	ble.w	8018fe6 <_vfprintf_r+0xe0e>
 8018d9a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8018d9e:	4293      	cmp	r3, r2
 8018da0:	bfa8      	it	ge
 8018da2:	4613      	movge	r3, r2
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	461c      	mov	r4, r3
 8018da8:	dd0d      	ble.n	8018dc6 <_vfprintf_r+0xbee>
 8018daa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018dac:	f8c8 7000 	str.w	r7, [r8]
 8018db0:	3301      	adds	r3, #1
 8018db2:	4425      	add	r5, r4
 8018db4:	2b07      	cmp	r3, #7
 8018db6:	9528      	str	r5, [sp, #160]	; 0xa0
 8018db8:	f8c8 4004 	str.w	r4, [r8, #4]
 8018dbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8018dbe:	f300 85d5 	bgt.w	801996c <_vfprintf_r+0x1794>
 8018dc2:	f108 0808 	add.w	r8, r8, #8
 8018dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018dc8:	2c00      	cmp	r4, #0
 8018dca:	bfa8      	it	ge
 8018dcc:	1b1b      	subge	r3, r3, r4
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	461c      	mov	r4, r3
 8018dd2:	f300 8354 	bgt.w	801947e <_vfprintf_r+0x12a6>
 8018dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018dd8:	443b      	add	r3, r7
 8018dda:	469b      	mov	fp, r3
 8018ddc:	9b06      	ldr	r3, [sp, #24]
 8018dde:	0559      	lsls	r1, r3, #21
 8018de0:	f100 8500 	bmi.w	80197e4 <_vfprintf_r+0x160c>
 8018de4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018de8:	4293      	cmp	r3, r2
 8018dea:	db03      	blt.n	8018df4 <_vfprintf_r+0xc1c>
 8018dec:	9a06      	ldr	r2, [sp, #24]
 8018dee:	07d2      	lsls	r2, r2, #31
 8018df0:	f140 83ce 	bpl.w	8019590 <_vfprintf_r+0x13b8>
 8018df4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018df6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018df8:	f8c8 1000 	str.w	r1, [r8]
 8018dfc:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018dfe:	f8c8 1004 	str.w	r1, [r8, #4]
 8018e02:	3201      	adds	r2, #1
 8018e04:	440d      	add	r5, r1
 8018e06:	2a07      	cmp	r2, #7
 8018e08:	9528      	str	r5, [sp, #160]	; 0xa0
 8018e0a:	9227      	str	r2, [sp, #156]	; 0x9c
 8018e0c:	f300 85e6 	bgt.w	80199dc <_vfprintf_r+0x1804>
 8018e10:	f108 0808 	add.w	r8, r8, #8
 8018e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e16:	18bc      	adds	r4, r7, r2
 8018e18:	eba4 040b 	sub.w	r4, r4, fp
 8018e1c:	1ad3      	subs	r3, r2, r3
 8018e1e:	429c      	cmp	r4, r3
 8018e20:	bfa8      	it	ge
 8018e22:	461c      	movge	r4, r3
 8018e24:	2c00      	cmp	r4, #0
 8018e26:	dd0d      	ble.n	8018e44 <_vfprintf_r+0xc6c>
 8018e28:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018e2a:	f8c8 b000 	str.w	fp, [r8]
 8018e2e:	3201      	adds	r2, #1
 8018e30:	4425      	add	r5, r4
 8018e32:	2a07      	cmp	r2, #7
 8018e34:	9528      	str	r5, [sp, #160]	; 0xa0
 8018e36:	f8c8 4004 	str.w	r4, [r8, #4]
 8018e3a:	9227      	str	r2, [sp, #156]	; 0x9c
 8018e3c:	f300 862c 	bgt.w	8019a98 <_vfprintf_r+0x18c0>
 8018e40:	f108 0808 	add.w	r8, r8, #8
 8018e44:	2c00      	cmp	r4, #0
 8018e46:	bfac      	ite	ge
 8018e48:	1b1c      	subge	r4, r3, r4
 8018e4a:	461c      	movlt	r4, r3
 8018e4c:	2c00      	cmp	r4, #0
 8018e4e:	f77f ab6f 	ble.w	8018530 <_vfprintf_r+0x358>
 8018e52:	2c10      	cmp	r4, #16
 8018e54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018e56:	f8df b144 	ldr.w	fp, [pc, #324]	; 8018f9c <_vfprintf_r+0xdc4>
 8018e5a:	f340 82f5 	ble.w	8019448 <_vfprintf_r+0x1270>
 8018e5e:	465f      	mov	r7, fp
 8018e60:	2610      	movs	r6, #16
 8018e62:	ee18 ba10 	vmov	fp, s16
 8018e66:	e005      	b.n	8018e74 <_vfprintf_r+0xc9c>
 8018e68:	f108 0808 	add.w	r8, r8, #8
 8018e6c:	3c10      	subs	r4, #16
 8018e6e:	2c10      	cmp	r4, #16
 8018e70:	f340 82e9 	ble.w	8019446 <_vfprintf_r+0x126e>
 8018e74:	3301      	adds	r3, #1
 8018e76:	3510      	adds	r5, #16
 8018e78:	2b07      	cmp	r3, #7
 8018e7a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018e7e:	e9c8 7600 	strd	r7, r6, [r8]
 8018e82:	ddf1      	ble.n	8018e68 <_vfprintf_r+0xc90>
 8018e84:	aa26      	add	r2, sp, #152	; 0x98
 8018e86:	4659      	mov	r1, fp
 8018e88:	4648      	mov	r0, r9
 8018e8a:	f003 fa63 	bl	801c354 <__sprint_r>
 8018e8e:	b928      	cbnz	r0, 8018e9c <_vfprintf_r+0xcc4>
 8018e90:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8018e94:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018e98:	e7e8      	b.n	8018e6c <_vfprintf_r+0xc94>
 8018e9a:	46ab      	mov	fp, r5
 8018e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018e9e:	b111      	cbz	r1, 8018ea6 <_vfprintf_r+0xcce>
 8018ea0:	4648      	mov	r0, r9
 8018ea2:	f002 fa59 	bl	801b358 <_free_r>
 8018ea6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8018eaa:	f013 0f01 	tst.w	r3, #1
 8018eae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8018eb2:	d102      	bne.n	8018eba <_vfprintf_r+0xce2>
 8018eb4:	0598      	lsls	r0, r3, #22
 8018eb6:	f140 828f 	bpl.w	80193d8 <_vfprintf_r+0x1200>
 8018eba:	0659      	lsls	r1, r3, #25
 8018ebc:	f100 8610 	bmi.w	8019ae0 <_vfprintf_r+0x1908>
 8018ec0:	9808      	ldr	r0, [sp, #32]
 8018ec2:	b053      	add	sp, #332	; 0x14c
 8018ec4:	ecbd 8b06 	vpop	{d8-d10}
 8018ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ecc:	9b06      	ldr	r3, [sp, #24]
 8018ece:	07de      	lsls	r6, r3, #31
 8018ed0:	f53f ae6a 	bmi.w	8018ba8 <_vfprintf_r+0x9d0>
 8018ed4:	3401      	adds	r4, #1
 8018ed6:	3501      	adds	r5, #1
 8018ed8:	2301      	movs	r3, #1
 8018eda:	2c07      	cmp	r4, #7
 8018edc:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8018ee0:	f8c8 7000 	str.w	r7, [r8]
 8018ee4:	f8c8 3004 	str.w	r3, [r8, #4]
 8018ee8:	f77f ae90 	ble.w	8018c0c <_vfprintf_r+0xa34>
 8018eec:	ee18 1a10 	vmov	r1, s16
 8018ef0:	aa26      	add	r2, sp, #152	; 0x98
 8018ef2:	4648      	mov	r0, r9
 8018ef4:	f003 fa2e 	bl	801c354 <__sprint_r>
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	f47f ae24 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8018efe:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 8018f02:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018f06:	e683      	b.n	8018c10 <_vfprintf_r+0xa38>
 8018f08:	1e5e      	subs	r6, r3, #1
 8018f0a:	2e00      	cmp	r6, #0
 8018f0c:	f77f ae80 	ble.w	8018c10 <_vfprintf_r+0xa38>
 8018f10:	2e10      	cmp	r6, #16
 8018f12:	f8df b088 	ldr.w	fp, [pc, #136]	; 8018f9c <_vfprintf_r+0xdc4>
 8018f16:	f340 82e2 	ble.w	80194de <_vfprintf_r+0x1306>
 8018f1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8018f1e:	2710      	movs	r7, #16
 8018f20:	ee18 aa10 	vmov	sl, s16
 8018f24:	e005      	b.n	8018f32 <_vfprintf_r+0xd5a>
 8018f26:	f108 0808 	add.w	r8, r8, #8
 8018f2a:	3e10      	subs	r6, #16
 8018f2c:	2e10      	cmp	r6, #16
 8018f2e:	f340 82d4 	ble.w	80194da <_vfprintf_r+0x1302>
 8018f32:	3401      	adds	r4, #1
 8018f34:	3510      	adds	r5, #16
 8018f36:	2c07      	cmp	r4, #7
 8018f38:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 8018f3c:	e9c8 b700 	strd	fp, r7, [r8]
 8018f40:	ddf1      	ble.n	8018f26 <_vfprintf_r+0xd4e>
 8018f42:	aa26      	add	r2, sp, #152	; 0x98
 8018f44:	4651      	mov	r1, sl
 8018f46:	4648      	mov	r0, r9
 8018f48:	f003 fa04 	bl	801c354 <__sprint_r>
 8018f4c:	2800      	cmp	r0, #0
 8018f4e:	f040 85b8 	bne.w	8019ac2 <_vfprintf_r+0x18ea>
 8018f52:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 8018f56:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018f5a:	e7e6      	b.n	8018f2a <_vfprintf_r+0xd52>
 8018f5c:	ee18 1a10 	vmov	r1, s16
 8018f60:	aa26      	add	r2, sp, #152	; 0x98
 8018f62:	4648      	mov	r0, r9
 8018f64:	f003 f9f6 	bl	801c354 <__sprint_r>
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	f47f adec 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8018f6e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8018f70:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8018f74:	f7ff bac9 	b.w	801850a <_vfprintf_r+0x332>
 8018f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f7a:	06ee      	lsls	r6, r5, #27
 8018f7c:	f852 1b04 	ldr.w	r1, [r2], #4
 8018f80:	920c      	str	r2, [sp, #48]	; 0x30
 8018f82:	f04f 0301 	mov.w	r3, #1
 8018f86:	d45e      	bmi.n	8019046 <_vfprintf_r+0xe6e>
 8018f88:	0668      	lsls	r0, r5, #25
 8018f8a:	d559      	bpl.n	8019040 <_vfprintf_r+0xe68>
 8018f8c:	fa1f fa81 	uxth.w	sl, r1
 8018f90:	f04f 0b00 	mov.w	fp, #0
 8018f94:	f7ff bbcf 	b.w	8018736 <_vfprintf_r+0x55e>
 8018f98:	08020588 	.word	0x08020588
 8018f9c:	08020598 	.word	0x08020598
 8018fa0:	9b06      	ldr	r3, [sp, #24]
 8018fa2:	06da      	lsls	r2, r3, #27
 8018fa4:	f100 8136 	bmi.w	8019214 <_vfprintf_r+0x103c>
 8018fa8:	9b06      	ldr	r3, [sp, #24]
 8018faa:	065b      	lsls	r3, r3, #25
 8018fac:	f140 82af 	bpl.w	801950e <_vfprintf_r+0x1336>
 8018fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8018fb8:	fa1f fa82 	uxth.w	sl, r2
 8018fbc:	f04f 0b00 	mov.w	fp, #0
 8018fc0:	e47e      	b.n	80188c0 <_vfprintf_r+0x6e8>
 8018fc2:	9b06      	ldr	r3, [sp, #24]
 8018fc4:	07d8      	lsls	r0, r3, #31
 8018fc6:	f57f aab3 	bpl.w	8018530 <_vfprintf_r+0x358>
 8018fca:	e4f3      	b.n	80189b4 <_vfprintf_r+0x7dc>
 8018fcc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8018fd0:	f7fc f8f8 	bl	80151c4 <__retarget_lock_acquire_recursive>
 8018fd4:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 8018fd8:	b293      	uxth	r3, r2
 8018fda:	f7ff b922 	b.w	8018222 <_vfprintf_r+0x4a>
 8018fde:	7834      	ldrb	r4, [r6, #0]
 8018fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8018fe2:	f7ff b96c 	b.w	80182be <_vfprintf_r+0xe6>
 8018fe6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018fe8:	49c4      	ldr	r1, [pc, #784]	; (80192fc <_vfprintf_r+0x1124>)
 8018fea:	f8c8 1000 	str.w	r1, [r8]
 8018fee:	3301      	adds	r3, #1
 8018ff0:	3501      	adds	r5, #1
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	2b07      	cmp	r3, #7
 8018ff6:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018ffa:	f8c8 1004 	str.w	r1, [r8, #4]
 8018ffe:	f300 8497 	bgt.w	8019930 <_vfprintf_r+0x1758>
 8019002:	f108 0808 	add.w	r8, r8, #8
 8019006:	2a00      	cmp	r2, #0
 8019008:	f47f ada0 	bne.w	8018b4c <_vfprintf_r+0x974>
 801900c:	9b06      	ldr	r3, [sp, #24]
 801900e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019010:	f003 0301 	and.w	r3, r3, #1
 8019014:	4313      	orrs	r3, r2
 8019016:	f43f aa8b 	beq.w	8018530 <_vfprintf_r+0x358>
 801901a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801901c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801901e:	f8c8 2000 	str.w	r2, [r8]
 8019022:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019024:	f8c8 2004 	str.w	r2, [r8, #4]
 8019028:	3301      	adds	r3, #1
 801902a:	4415      	add	r5, r2
 801902c:	2b07      	cmp	r3, #7
 801902e:	9528      	str	r5, [sp, #160]	; 0xa0
 8019030:	9327      	str	r3, [sp, #156]	; 0x9c
 8019032:	f300 8367 	bgt.w	8019704 <_vfprintf_r+0x152c>
 8019036:	f108 0808 	add.w	r8, r8, #8
 801903a:	e59a      	b.n	8018b72 <_vfprintf_r+0x99a>
 801903c:	af52      	add	r7, sp, #328	; 0x148
 801903e:	e41a      	b.n	8018876 <_vfprintf_r+0x69e>
 8019040:	05aa      	lsls	r2, r5, #22
 8019042:	f100 82ae 	bmi.w	80195a2 <_vfprintf_r+0x13ca>
 8019046:	468a      	mov	sl, r1
 8019048:	f04f 0b00 	mov.w	fp, #0
 801904c:	f7ff bb73 	b.w	8018736 <_vfprintf_r+0x55e>
 8019050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019052:	f853 1b04 	ldr.w	r1, [r3], #4
 8019056:	930c      	str	r3, [sp, #48]	; 0x30
 8019058:	9b08      	ldr	r3, [sp, #32]
 801905a:	17dd      	asrs	r5, r3, #31
 801905c:	461a      	mov	r2, r3
 801905e:	462b      	mov	r3, r5
 8019060:	e9c1 2300 	strd	r2, r3, [r1]
 8019064:	f7ff ba81 	b.w	801856a <_vfprintf_r+0x392>
 8019068:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801906c:	460b      	mov	r3, r1
 801906e:	4602      	mov	r2, r0
 8019070:	f7e8 f81c 	bl	80010ac <__aeabi_dcmpun>
 8019074:	4601      	mov	r1, r0
 8019076:	2800      	cmp	r0, #0
 8019078:	f040 862f 	bne.w	8019cda <_vfprintf_r+0x1b02>
 801907c:	2c61      	cmp	r4, #97	; 0x61
 801907e:	f000 85a2 	beq.w	8019bc6 <_vfprintf_r+0x19ee>
 8019082:	2c41      	cmp	r4, #65	; 0x41
 8019084:	f000 82a2 	beq.w	80195cc <_vfprintf_r+0x13f4>
 8019088:	9b07      	ldr	r3, [sp, #28]
 801908a:	f024 0620 	bic.w	r6, r4, #32
 801908e:	1c5a      	adds	r2, r3, #1
 8019090:	960a      	str	r6, [sp, #40]	; 0x28
 8019092:	f000 85c3 	beq.w	8019c1c <_vfprintf_r+0x1a44>
 8019096:	2e47      	cmp	r6, #71	; 0x47
 8019098:	f000 859a 	beq.w	8019bd0 <_vfprintf_r+0x19f8>
 801909c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80190a0:	9a06      	ldr	r2, [sp, #24]
 80190a2:	2900      	cmp	r1, #0
 80190a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80190a8:	920e      	str	r2, [sp, #56]	; 0x38
 80190aa:	f04f 0300 	mov.w	r3, #0
 80190ae:	f2c0 85e4 	blt.w	8019c7a <_vfprintf_r+0x1aa2>
 80190b2:	ec41 0b1a 	vmov	d10, r0, r1
 80190b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80190b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80190ba:	2e46      	cmp	r6, #70	; 0x46
 80190bc:	f000 849d 	beq.w	80199fa <_vfprintf_r+0x1822>
 80190c0:	2e45      	cmp	r6, #69	; 0x45
 80190c2:	f040 846d 	bne.w	80199a0 <_vfprintf_r+0x17c8>
 80190c6:	9b07      	ldr	r3, [sp, #28]
 80190c8:	a824      	add	r0, sp, #144	; 0x90
 80190ca:	1c5d      	adds	r5, r3, #1
 80190cc:	a921      	add	r1, sp, #132	; 0x84
 80190ce:	aa20      	add	r2, sp, #128	; 0x80
 80190d0:	2302      	movs	r3, #2
 80190d2:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80190d6:	9501      	str	r5, [sp, #4]
 80190d8:	9202      	str	r2, [sp, #8]
 80190da:	9300      	str	r3, [sp, #0]
 80190dc:	4648      	mov	r0, r9
 80190de:	ec53 2b1a 	vmov	r2, r3, d10
 80190e2:	f000 fff9 	bl	801a0d8 <_dtoa_r>
 80190e6:	4607      	mov	r7, r0
 80190e8:	4405      	add	r5, r0
 80190ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190ec:	f8dd b018 	ldr.w	fp, [sp, #24]
 80190f0:	9306      	str	r3, [sp, #24]
 80190f2:	ec51 0b1a 	vmov	r0, r1, d10
 80190f6:	2200      	movs	r2, #0
 80190f8:	2300      	movs	r3, #0
 80190fa:	f7e7 ffa5 	bl	8001048 <__aeabi_dcmpeq>
 80190fe:	2800      	cmp	r0, #0
 8019100:	f000 8352 	beq.w	80197a8 <_vfprintf_r+0x15d0>
 8019104:	462b      	mov	r3, r5
 8019106:	1bdb      	subs	r3, r3, r7
 8019108:	9310      	str	r3, [sp, #64]	; 0x40
 801910a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801910c:	2b47      	cmp	r3, #71	; 0x47
 801910e:	f000 831d 	beq.w	801974c <_vfprintf_r+0x1574>
 8019112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019114:	2b46      	cmp	r3, #70	; 0x46
 8019116:	f000 849f 	beq.w	8019a58 <_vfprintf_r+0x1880>
 801911a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801911c:	930f      	str	r3, [sp, #60]	; 0x3c
 801911e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019122:	3b01      	subs	r3, #1
 8019124:	2a41      	cmp	r2, #65	; 0x41
 8019126:	9320      	str	r3, [sp, #128]	; 0x80
 8019128:	f000 85a1 	beq.w	8019c6e <_vfprintf_r+0x1a96>
 801912c:	b2e2      	uxtb	r2, r4
 801912e:	2100      	movs	r1, #0
 8019130:	2b00      	cmp	r3, #0
 8019132:	bfb8      	it	lt
 8019134:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8019136:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801913a:	bfba      	itte	lt
 801913c:	f1c3 0301 	rsblt	r3, r3, #1
 8019140:	222d      	movlt	r2, #45	; 0x2d
 8019142:	222b      	movge	r2, #43	; 0x2b
 8019144:	2b09      	cmp	r3, #9
 8019146:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801914a:	f340 8581 	ble.w	8019c50 <_vfprintf_r+0x1a78>
 801914e:	f10d 0e97 	add.w	lr, sp, #151	; 0x97
 8019152:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8019304 <_vfprintf_r+0x112c>
 8019156:	4675      	mov	r5, lr
 8019158:	fb8c 2103 	smull	r2, r1, ip, r3
 801915c:	17da      	asrs	r2, r3, #31
 801915e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8019162:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8019166:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 801916a:	461e      	mov	r6, r3
 801916c:	3130      	adds	r1, #48	; 0x30
 801916e:	2e63      	cmp	r6, #99	; 0x63
 8019170:	4628      	mov	r0, r5
 8019172:	f805 1c01 	strb.w	r1, [r5, #-1]
 8019176:	4613      	mov	r3, r2
 8019178:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 801917c:	dcec      	bgt.n	8019158 <_vfprintf_r+0xf80>
 801917e:	3330      	adds	r3, #48	; 0x30
 8019180:	b2da      	uxtb	r2, r3
 8019182:	1e83      	subs	r3, r0, #2
 8019184:	459e      	cmp	lr, r3
 8019186:	4629      	mov	r1, r5
 8019188:	f805 2c01 	strb.w	r2, [r5, #-1]
 801918c:	f240 85f8 	bls.w	8019d80 <_vfprintf_r+0x1ba8>
 8019190:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8019194:	e001      	b.n	801919a <_vfprintf_r+0xfc2>
 8019196:	f811 2b01 	ldrb.w	r2, [r1], #1
 801919a:	f803 2b01 	strb.w	r2, [r3], #1
 801919e:	458e      	cmp	lr, r1
 80191a0:	d1f9      	bne.n	8019196 <_vfprintf_r+0xfbe>
 80191a2:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 80191a6:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80191aa:	1a1b      	subs	r3, r3, r0
 80191ac:	4413      	add	r3, r2
 80191ae:	aa22      	add	r2, sp, #136	; 0x88
 80191b0:	1a9b      	subs	r3, r3, r2
 80191b2:	9318      	str	r3, [sp, #96]	; 0x60
 80191b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80191b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191b8:	2b01      	cmp	r3, #1
 80191ba:	441a      	add	r2, r3
 80191bc:	920a      	str	r2, [sp, #40]	; 0x28
 80191be:	f340 85ae 	ble.w	8019d1e <_vfprintf_r+0x1b46>
 80191c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191c6:	4413      	add	r3, r2
 80191c8:	930a      	str	r3, [sp, #40]	; 0x28
 80191ca:	2300      	movs	r3, #0
 80191cc:	f42b 6680 	bic.w	r6, fp, #1024	; 0x400
 80191d0:	930e      	str	r3, [sp, #56]	; 0x38
 80191d2:	9311      	str	r3, [sp, #68]	; 0x44
 80191d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80191d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191d8:	f446 7280 	orr.w	r2, r6, #256	; 0x100
 80191dc:	9206      	str	r2, [sp, #24]
 80191de:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 80191e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f040 82d8 	bne.w	801979a <_vfprintf_r+0x15c2>
 80191ea:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 80191ee:	9307      	str	r3, [sp, #28]
 80191f0:	f7ff ba10 	b.w	8018614 <_vfprintf_r+0x43c>
 80191f4:	9b06      	ldr	r3, [sp, #24]
 80191f6:	0659      	lsls	r1, r3, #25
 80191f8:	f140 8198 	bpl.w	801952c <_vfprintf_r+0x1354>
 80191fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019202:	930c      	str	r3, [sp, #48]	; 0x30
 8019204:	fa0f fa82 	sxth.w	sl, r2
 8019208:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801920c:	4652      	mov	r2, sl
 801920e:	465b      	mov	r3, fp
 8019210:	f7ff ba53 	b.w	80186ba <_vfprintf_r+0x4e2>
 8019214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019216:	f853 2b04 	ldr.w	r2, [r3], #4
 801921a:	930c      	str	r3, [sp, #48]	; 0x30
 801921c:	4692      	mov	sl, r2
 801921e:	f04f 0b00 	mov.w	fp, #0
 8019222:	f7ff bb4d 	b.w	80188c0 <_vfprintf_r+0x6e8>
 8019226:	f1bb 0f00 	cmp.w	fp, #0
 801922a:	bf08      	it	eq
 801922c:	f1ba 0f0a 	cmpeq.w	sl, #10
 8019230:	9d06      	ldr	r5, [sp, #24]
 8019232:	f4ff ad0a 	bcc.w	8018c4a <_vfprintf_r+0xa72>
 8019236:	f405 6680 	and.w	r6, r5, #1024	; 0x400
 801923a:	2300      	movs	r3, #0
 801923c:	9506      	str	r5, [sp, #24]
 801923e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8019242:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019244:	46a0      	mov	r8, r4
 8019246:	af52      	add	r7, sp, #328	; 0x148
 8019248:	4634      	mov	r4, r6
 801924a:	461e      	mov	r6, r3
 801924c:	e009      	b.n	8019262 <_vfprintf_r+0x108a>
 801924e:	f7e8 f8c9 	bl	80013e4 <__aeabi_uldivmod>
 8019252:	f1bb 0f00 	cmp.w	fp, #0
 8019256:	bf08      	it	eq
 8019258:	f1ba 0f0a 	cmpeq.w	sl, #10
 801925c:	d31f      	bcc.n	801929e <_vfprintf_r+0x10c6>
 801925e:	4682      	mov	sl, r0
 8019260:	468b      	mov	fp, r1
 8019262:	220a      	movs	r2, #10
 8019264:	2300      	movs	r3, #0
 8019266:	4650      	mov	r0, sl
 8019268:	4659      	mov	r1, fp
 801926a:	f7e8 f8bb 	bl	80013e4 <__aeabi_uldivmod>
 801926e:	4694      	mov	ip, r2
 8019270:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8019274:	f807 cc01 	strb.w	ip, [r7, #-1]
 8019278:	4650      	mov	r0, sl
 801927a:	4659      	mov	r1, fp
 801927c:	220a      	movs	r2, #10
 801927e:	2300      	movs	r3, #0
 8019280:	3601      	adds	r6, #1
 8019282:	3f01      	subs	r7, #1
 8019284:	2c00      	cmp	r4, #0
 8019286:	d0e2      	beq.n	801924e <_vfprintf_r+0x1076>
 8019288:	f895 c000 	ldrb.w	ip, [r5]
 801928c:	4566      	cmp	r6, ip
 801928e:	d1de      	bne.n	801924e <_vfprintf_r+0x1076>
 8019290:	2eff      	cmp	r6, #255	; 0xff
 8019292:	d0dc      	beq.n	801924e <_vfprintf_r+0x1076>
 8019294:	459b      	cmp	fp, r3
 8019296:	bf08      	it	eq
 8019298:	4592      	cmpeq	sl, r2
 801929a:	f080 8291 	bcs.w	80197c0 <_vfprintf_r+0x15e8>
 801929e:	ab52      	add	r3, sp, #328	; 0x148
 80192a0:	1bdb      	subs	r3, r3, r7
 80192a2:	4644      	mov	r4, r8
 80192a4:	9517      	str	r5, [sp, #92]	; 0x5c
 80192a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80192aa:	9610      	str	r6, [sp, #64]	; 0x40
 80192ac:	930a      	str	r3, [sp, #40]	; 0x28
 80192ae:	f7ff bae2 	b.w	8018876 <_vfprintf_r+0x69e>
 80192b2:	4b13      	ldr	r3, [pc, #76]	; (8019300 <_vfprintf_r+0x1128>)
 80192b4:	960d      	str	r6, [sp, #52]	; 0x34
 80192b6:	9316      	str	r3, [sp, #88]	; 0x58
 80192b8:	9b06      	ldr	r3, [sp, #24]
 80192ba:	069f      	lsls	r7, r3, #26
 80192bc:	d565      	bpl.n	801938a <_vfprintf_r+0x11b2>
 80192be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192c0:	3307      	adds	r3, #7
 80192c2:	f023 0307 	bic.w	r3, r3, #7
 80192c6:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
 80192ca:	930c      	str	r3, [sp, #48]	; 0x30
 80192cc:	9a06      	ldr	r2, [sp, #24]
 80192ce:	07d0      	lsls	r0, r2, #31
 80192d0:	d50a      	bpl.n	80192e8 <_vfprintf_r+0x1110>
 80192d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80192d6:	d007      	beq.n	80192e8 <_vfprintf_r+0x1110>
 80192d8:	2330      	movs	r3, #48	; 0x30
 80192da:	f042 0202 	orr.w	r2, r2, #2
 80192de:	f88d 407d 	strb.w	r4, [sp, #125]	; 0x7d
 80192e2:	9206      	str	r2, [sp, #24]
 80192e4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80192e8:	9b06      	ldr	r3, [sp, #24]
 80192ea:	f423 6580 	bic.w	r5, r3, #1024	; 0x400
 80192ee:	2302      	movs	r3, #2
 80192f0:	f7ff ba21 	b.w	8018736 <_vfprintf_r+0x55e>
 80192f4:	9d06      	ldr	r5, [sp, #24]
 80192f6:	960d      	str	r6, [sp, #52]	; 0x34
 80192f8:	f7ff ba12 	b.w	8018720 <_vfprintf_r+0x548>
 80192fc:	08020564 	.word	0x08020564
 8019300:	08020534 	.word	0x08020534
 8019304:	66666667 	.word	0x66666667
 8019308:	960d      	str	r6, [sp, #52]	; 0x34
 801930a:	f7ff bace 	b.w	80188aa <_vfprintf_r+0x6d2>
 801930e:	4bac      	ldr	r3, [pc, #688]	; (80195c0 <_vfprintf_r+0x13e8>)
 8019310:	960d      	str	r6, [sp, #52]	; 0x34
 8019312:	9316      	str	r3, [sp, #88]	; 0x58
 8019314:	e7d0      	b.n	80192b8 <_vfprintf_r+0x10e0>
 8019316:	ee18 1a10 	vmov	r1, s16
 801931a:	aa26      	add	r2, sp, #152	; 0x98
 801931c:	4648      	mov	r0, r9
 801931e:	f003 f819 	bl	801c354 <__sprint_r>
 8019322:	2800      	cmp	r0, #0
 8019324:	f47f ac0f 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019328:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 801932a:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 801932e:	f7ff b8e6 	b.w	80184fe <_vfprintf_r+0x326>
 8019332:	ee18 1a10 	vmov	r1, s16
 8019336:	aa26      	add	r2, sp, #152	; 0x98
 8019338:	4648      	mov	r0, r9
 801933a:	f003 f80b 	bl	801c354 <__sprint_r>
 801933e:	2800      	cmp	r0, #0
 8019340:	f47f ac01 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019344:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8019346:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 801934a:	f7ff bb43 	b.w	80189d4 <_vfprintf_r+0x7fc>
 801934e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019352:	7874      	ldrb	r4, [r6, #1]
 8019354:	9306      	str	r3, [sp, #24]
 8019356:	3601      	adds	r6, #1
 8019358:	f7fe bfb1 	b.w	80182be <_vfprintf_r+0xe6>
 801935c:	f043 0320 	orr.w	r3, r3, #32
 8019360:	7874      	ldrb	r4, [r6, #1]
 8019362:	9306      	str	r3, [sp, #24]
 8019364:	3601      	adds	r6, #1
 8019366:	f7fe bfaa 	b.w	80182be <_vfprintf_r+0xe6>
 801936a:	9b07      	ldr	r3, [sp, #28]
 801936c:	970e      	str	r7, [sp, #56]	; 0x38
 801936e:	2b06      	cmp	r3, #6
 8019370:	bf28      	it	cs
 8019372:	2306      	movcs	r3, #6
 8019374:	9707      	str	r7, [sp, #28]
 8019376:	9711      	str	r7, [sp, #68]	; 0x44
 8019378:	970f      	str	r7, [sp, #60]	; 0x3c
 801937a:	970b      	str	r7, [sp, #44]	; 0x2c
 801937c:	463a      	mov	r2, r7
 801937e:	469a      	mov	sl, r3
 8019380:	4f90      	ldr	r7, [pc, #576]	; (80195c4 <_vfprintf_r+0x13ec>)
 8019382:	950c      	str	r5, [sp, #48]	; 0x30
 8019384:	930a      	str	r3, [sp, #40]	; 0x28
 8019386:	f7ff b945 	b.w	8018614 <_vfprintf_r+0x43c>
 801938a:	9b06      	ldr	r3, [sp, #24]
 801938c:	06de      	lsls	r6, r3, #27
 801938e:	d53e      	bpl.n	801940e <_vfprintf_r+0x1236>
 8019390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019392:	f853 2b04 	ldr.w	r2, [r3], #4
 8019396:	930c      	str	r3, [sp, #48]	; 0x30
 8019398:	4692      	mov	sl, r2
 801939a:	f04f 0b00 	mov.w	fp, #0
 801939e:	e795      	b.n	80192cc <_vfprintf_r+0x10f4>
 80193a0:	ee18 1a10 	vmov	r1, s16
 80193a4:	aa26      	add	r2, sp, #152	; 0x98
 80193a6:	4648      	mov	r0, r9
 80193a8:	f002 ffd4 	bl	801c354 <__sprint_r>
 80193ac:	2800      	cmp	r0, #0
 80193ae:	f47f abca 	bne.w	8018b46 <_vfprintf_r+0x96e>
 80193b2:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 80193b6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80193ba:	e403      	b.n	8018bc4 <_vfprintf_r+0x9ec>
 80193bc:	ee18 1a10 	vmov	r1, s16
 80193c0:	aa26      	add	r2, sp, #152	; 0x98
 80193c2:	4648      	mov	r0, r9
 80193c4:	f002 ffc6 	bl	801c354 <__sprint_r>
 80193c8:	2800      	cmp	r0, #0
 80193ca:	f47f abbc 	bne.w	8018b46 <_vfprintf_r+0x96e>
 80193ce:	e9dd 4527 	ldrd	r4, r5, [sp, #156]	; 0x9c
 80193d2:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80193d6:	e402      	b.n	8018bde <_vfprintf_r+0xa06>
 80193d8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80193dc:	f7fb fef4 	bl	80151c8 <__retarget_lock_release_recursive>
 80193e0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80193e4:	e569      	b.n	8018eba <_vfprintf_r+0xce2>
 80193e6:	ee18 1a10 	vmov	r1, s16
 80193ea:	aa26      	add	r2, sp, #152	; 0x98
 80193ec:	4648      	mov	r0, r9
 80193ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80193f0:	f002 ffb0 	bl	801c354 <__sprint_r>
 80193f4:	2800      	cmp	r0, #0
 80193f6:	f47f aba6 	bne.w	8018b46 <_vfprintf_r+0x96e>
 80193fa:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 80193fe:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8019400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019402:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019406:	f7ff b857 	b.w	80184b8 <_vfprintf_r+0x2e0>
 801940a:	46a3      	mov	fp, r4
 801940c:	e546      	b.n	8018e9c <_vfprintf_r+0xcc4>
 801940e:	9b06      	ldr	r3, [sp, #24]
 8019410:	065d      	lsls	r5, r3, #25
 8019412:	d56e      	bpl.n	80194f2 <_vfprintf_r+0x131a>
 8019414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019416:	f853 2b04 	ldr.w	r2, [r3], #4
 801941a:	930c      	str	r3, [sp, #48]	; 0x30
 801941c:	fa1f fa82 	uxth.w	sl, r2
 8019420:	f04f 0b00 	mov.w	fp, #0
 8019424:	e752      	b.n	80192cc <_vfprintf_r+0x10f4>
 8019426:	ee18 1a10 	vmov	r1, s16
 801942a:	aa26      	add	r2, sp, #152	; 0x98
 801942c:	4648      	mov	r0, r9
 801942e:	f002 ff91 	bl	801c354 <__sprint_r>
 8019432:	2800      	cmp	r0, #0
 8019434:	f47f ab87 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019438:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 801943a:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 801943e:	f7ff bab4 	b.w	80189aa <_vfprintf_r+0x7d2>
 8019442:	46bb      	mov	fp, r7
 8019444:	e52a      	b.n	8018e9c <_vfprintf_r+0xcc4>
 8019446:	46bb      	mov	fp, r7
 8019448:	3301      	adds	r3, #1
 801944a:	4425      	add	r5, r4
 801944c:	2b07      	cmp	r3, #7
 801944e:	f8c8 b000 	str.w	fp, [r8]
 8019452:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8019456:	f8c8 4004 	str.w	r4, [r8, #4]
 801945a:	f77f a867 	ble.w	801852c <_vfprintf_r+0x354>
 801945e:	f7ff bb92 	b.w	8018b86 <_vfprintf_r+0x9ae>
 8019462:	2b01      	cmp	r3, #1
 8019464:	9d06      	ldr	r5, [sp, #24]
 8019466:	f47f a9ee 	bne.w	8018846 <_vfprintf_r+0x66e>
 801946a:	f7ff bbee 	b.w	8018c4a <_vfprintf_r+0xa72>
 801946e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019470:	9908      	ldr	r1, [sp, #32]
 8019472:	f853 2b04 	ldr.w	r2, [r3], #4
 8019476:	6011      	str	r1, [r2, #0]
 8019478:	930c      	str	r3, [sp, #48]	; 0x30
 801947a:	f7ff b876 	b.w	801856a <_vfprintf_r+0x392>
 801947e:	2c10      	cmp	r4, #16
 8019480:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019482:	f8df b144 	ldr.w	fp, [pc, #324]	; 80195c8 <_vfprintf_r+0x13f0>
 8019486:	dd64      	ble.n	8019552 <_vfprintf_r+0x137a>
 8019488:	462a      	mov	r2, r5
 801948a:	2610      	movs	r6, #16
 801948c:	465d      	mov	r5, fp
 801948e:	ee18 ba10 	vmov	fp, s16
 8019492:	e004      	b.n	801949e <_vfprintf_r+0x12c6>
 8019494:	f108 0808 	add.w	r8, r8, #8
 8019498:	3c10      	subs	r4, #16
 801949a:	2c10      	cmp	r4, #16
 801949c:	dd57      	ble.n	801954e <_vfprintf_r+0x1376>
 801949e:	3301      	adds	r3, #1
 80194a0:	3210      	adds	r2, #16
 80194a2:	2b07      	cmp	r3, #7
 80194a4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80194a8:	e9c8 5600 	strd	r5, r6, [r8]
 80194ac:	ddf2      	ble.n	8019494 <_vfprintf_r+0x12bc>
 80194ae:	aa26      	add	r2, sp, #152	; 0x98
 80194b0:	4659      	mov	r1, fp
 80194b2:	4648      	mov	r0, r9
 80194b4:	f002 ff4e 	bl	801c354 <__sprint_r>
 80194b8:	2800      	cmp	r0, #0
 80194ba:	f47f acef 	bne.w	8018e9c <_vfprintf_r+0xcc4>
 80194be:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80194c2:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80194c6:	e7e7      	b.n	8019498 <_vfprintf_r+0x12c0>
 80194c8:	4638      	mov	r0, r7
 80194ca:	f7e7 f8d9 	bl	8000680 <strlen>
 80194ce:	4633      	mov	r3, r6
 80194d0:	9607      	str	r6, [sp, #28]
 80194d2:	4602      	mov	r2, r0
 80194d4:	900a      	str	r0, [sp, #40]	; 0x28
 80194d6:	f7ff b8d7 	b.w	8018688 <_vfprintf_r+0x4b0>
 80194da:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80194de:	3401      	adds	r4, #1
 80194e0:	4435      	add	r5, r6
 80194e2:	2c07      	cmp	r4, #7
 80194e4:	e9cd 4527 	strd	r4, r5, [sp, #156]	; 0x9c
 80194e8:	e9c8 b600 	strd	fp, r6, [r8]
 80194ec:	f77f ab8e 	ble.w	8018c0c <_vfprintf_r+0xa34>
 80194f0:	e4fc      	b.n	8018eec <_vfprintf_r+0xd14>
 80194f2:	9b06      	ldr	r3, [sp, #24]
 80194f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80194f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80194fe:	930c      	str	r3, [sp, #48]	; 0x30
 8019500:	bf14      	ite	ne
 8019502:	fa5f fa82 	uxtbne.w	sl, r2
 8019506:	4692      	moveq	sl, r2
 8019508:	f04f 0b00 	mov.w	fp, #0
 801950c:	e6de      	b.n	80192cc <_vfprintf_r+0x10f4>
 801950e:	9b06      	ldr	r3, [sp, #24]
 8019510:	f413 7f00 	tst.w	r3, #512	; 0x200
 8019514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019516:	f853 2b04 	ldr.w	r2, [r3], #4
 801951a:	930c      	str	r3, [sp, #48]	; 0x30
 801951c:	bf14      	ite	ne
 801951e:	fa5f fa82 	uxtbne.w	sl, r2
 8019522:	4692      	moveq	sl, r2
 8019524:	f04f 0b00 	mov.w	fp, #0
 8019528:	f7ff b9ca 	b.w	80188c0 <_vfprintf_r+0x6e8>
 801952c:	9b06      	ldr	r3, [sp, #24]
 801952e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8019532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019534:	f853 2b04 	ldr.w	r2, [r3], #4
 8019538:	f43f a969 	beq.w	801880e <_vfprintf_r+0x636>
 801953c:	fa4f fa82 	sxtb.w	sl, r2
 8019540:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8019544:	930c      	str	r3, [sp, #48]	; 0x30
 8019546:	4652      	mov	r2, sl
 8019548:	465b      	mov	r3, fp
 801954a:	f7ff b8b6 	b.w	80186ba <_vfprintf_r+0x4e2>
 801954e:	46ab      	mov	fp, r5
 8019550:	4615      	mov	r5, r2
 8019552:	3301      	adds	r3, #1
 8019554:	4425      	add	r5, r4
 8019556:	2b07      	cmp	r3, #7
 8019558:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801955c:	f8c8 b000 	str.w	fp, [r8]
 8019560:	f8c8 4004 	str.w	r4, [r8, #4]
 8019564:	f300 80e4 	bgt.w	8019730 <_vfprintf_r+0x1558>
 8019568:	f108 0808 	add.w	r8, r8, #8
 801956c:	e433      	b.n	8018dd6 <_vfprintf_r+0xbfe>
 801956e:	ee18 1a10 	vmov	r1, s16
 8019572:	4648      	mov	r0, r9
 8019574:	aa26      	add	r2, sp, #152	; 0x98
 8019576:	f002 feed 	bl	801c354 <__sprint_r>
 801957a:	2800      	cmp	r0, #0
 801957c:	f43f a800 	beq.w	8018580 <_vfprintf_r+0x3a8>
 8019580:	e491      	b.n	8018ea6 <_vfprintf_r+0xcce>
 8019582:	9b06      	ldr	r3, [sp, #24]
 8019584:	7834      	ldrb	r4, [r6, #0]
 8019586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801958a:	9306      	str	r3, [sp, #24]
 801958c:	f7fe be97 	b.w	80182be <_vfprintf_r+0xe6>
 8019590:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019592:	18bc      	adds	r4, r7, r2
 8019594:	eba4 040b 	sub.w	r4, r4, fp
 8019598:	1ad3      	subs	r3, r2, r3
 801959a:	429c      	cmp	r4, r3
 801959c:	bfa8      	it	ge
 801959e:	461c      	movge	r4, r3
 80195a0:	e450      	b.n	8018e44 <_vfprintf_r+0xc6c>
 80195a2:	fa5f fa81 	uxtb.w	sl, r1
 80195a6:	f04f 0b00 	mov.w	fp, #0
 80195aa:	f7ff b8c4 	b.w	8018736 <_vfprintf_r+0x55e>
 80195ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195b0:	9908      	ldr	r1, [sp, #32]
 80195b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80195b6:	930c      	str	r3, [sp, #48]	; 0x30
 80195b8:	8011      	strh	r1, [r2, #0]
 80195ba:	f7fe bfd6 	b.w	801856a <_vfprintf_r+0x392>
 80195be:	bf00      	nop
 80195c0:	08020548 	.word	0x08020548
 80195c4:	0802055c 	.word	0x0802055c
 80195c8:	08020598 	.word	0x08020598
 80195cc:	2330      	movs	r3, #48	; 0x30
 80195ce:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80195d2:	2358      	movs	r3, #88	; 0x58
 80195d4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80195d8:	9b06      	ldr	r3, [sp, #24]
 80195da:	f043 0502 	orr.w	r5, r3, #2
 80195de:	9b07      	ldr	r3, [sp, #28]
 80195e0:	2b63      	cmp	r3, #99	; 0x63
 80195e2:	f300 82ca 	bgt.w	8019b7a <_vfprintf_r+0x19a2>
 80195e6:	2300      	movs	r3, #0
 80195e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80195ea:	af39      	add	r7, sp, #228	; 0xe4
 80195ec:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80195f0:	9a06      	ldr	r2, [sp, #24]
 80195f2:	9506      	str	r5, [sp, #24]
 80195f4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80195f8:	f024 0620 	bic.w	r6, r4, #32
 80195fc:	2900      	cmp	r1, #0
 80195fe:	920e      	str	r2, [sp, #56]	; 0x38
 8019600:	960a      	str	r6, [sp, #40]	; 0x28
 8019602:	f2c0 81a8 	blt.w	8019956 <_vfprintf_r+0x177e>
 8019606:	2300      	movs	r3, #0
 8019608:	ec41 0b1a 	vmov	d10, r0, r1
 801960c:	931b      	str	r3, [sp, #108]	; 0x6c
 801960e:	2c61      	cmp	r4, #97	; 0x61
 8019610:	f000 8308 	beq.w	8019c24 <_vfprintf_r+0x1a4c>
 8019614:	2c41      	cmp	r4, #65	; 0x41
 8019616:	f47f ad50 	bne.w	80190ba <_vfprintf_r+0xee2>
 801961a:	aa20      	add	r2, sp, #128	; 0x80
 801961c:	ec51 0b1a 	vmov	r0, r1, d10
 8019620:	f002 fd2e 	bl	801c080 <frexp>
 8019624:	2200      	movs	r2, #0
 8019626:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801962a:	f7e7 faa5 	bl	8000b78 <__aeabi_dmul>
 801962e:	2200      	movs	r2, #0
 8019630:	2300      	movs	r3, #0
 8019632:	4682      	mov	sl, r0
 8019634:	468b      	mov	fp, r1
 8019636:	f7e7 fd07 	bl	8001048 <__aeabi_dcmpeq>
 801963a:	b108      	cbz	r0, 8019640 <_vfprintf_r+0x1468>
 801963c:	2301      	movs	r3, #1
 801963e:	9320      	str	r3, [sp, #128]	; 0x80
 8019640:	4bb7      	ldr	r3, [pc, #732]	; (8019920 <_vfprintf_r+0x1748>)
 8019642:	930f      	str	r3, [sp, #60]	; 0x3c
 8019644:	9b07      	ldr	r3, [sp, #28]
 8019646:	971d      	str	r7, [sp, #116]	; 0x74
 8019648:	463e      	mov	r6, r7
 801964a:	ee08 9a90 	vmov	s17, r9
 801964e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019650:	941c      	str	r4, [sp, #112]	; 0x70
 8019652:	1e5d      	subs	r5, r3, #1
 8019654:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8019658:	e003      	b.n	8019662 <_vfprintf_r+0x148a>
 801965a:	f7e7 fcf5 	bl	8001048 <__aeabi_dcmpeq>
 801965e:	3d01      	subs	r5, #1
 8019660:	bb08      	cbnz	r0, 80196a6 <_vfprintf_r+0x14ce>
 8019662:	4bb0      	ldr	r3, [pc, #704]	; (8019924 <_vfprintf_r+0x174c>)
 8019664:	2200      	movs	r2, #0
 8019666:	4650      	mov	r0, sl
 8019668:	4659      	mov	r1, fp
 801966a:	f7e7 fa85 	bl	8000b78 <__aeabi_dmul>
 801966e:	4689      	mov	r9, r1
 8019670:	4680      	mov	r8, r0
 8019672:	f7e7 fd31 	bl	80010d8 <__aeabi_d2iz>
 8019676:	4604      	mov	r4, r0
 8019678:	f7e7 fa14 	bl	8000aa4 <__aeabi_i2d>
 801967c:	4602      	mov	r2, r0
 801967e:	460b      	mov	r3, r1
 8019680:	4640      	mov	r0, r8
 8019682:	4649      	mov	r1, r9
 8019684:	f7e7 f8c0 	bl	8000808 <__aeabi_dsub>
 8019688:	f817 c004 	ldrb.w	ip, [r7, r4]
 801968c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8019690:	46b0      	mov	r8, r6
 8019692:	4682      	mov	sl, r0
 8019694:	f806 cb01 	strb.w	ip, [r6], #1
 8019698:	468b      	mov	fp, r1
 801969a:	f04f 0200 	mov.w	r2, #0
 801969e:	f04f 0300 	mov.w	r3, #0
 80196a2:	46a9      	mov	r9, r5
 80196a4:	d1d9      	bne.n	801965a <_vfprintf_r+0x1482>
 80196a6:	4ba0      	ldr	r3, [pc, #640]	; (8019928 <_vfprintf_r+0x1750>)
 80196a8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80196ac:	2200      	movs	r2, #0
 80196ae:	4650      	mov	r0, sl
 80196b0:	4659      	mov	r1, fp
 80196b2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80196b6:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80196b8:	9411      	str	r4, [sp, #68]	; 0x44
 80196ba:	464d      	mov	r5, r9
 80196bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80196be:	ee18 9a90 	vmov	r9, s17
 80196c2:	f7e7 fce9 	bl	8001098 <__aeabi_dcmpgt>
 80196c6:	2800      	cmp	r0, #0
 80196c8:	f040 8261 	bne.w	8019b8e <_vfprintf_r+0x19b6>
 80196cc:	4b96      	ldr	r3, [pc, #600]	; (8019928 <_vfprintf_r+0x1750>)
 80196ce:	4650      	mov	r0, sl
 80196d0:	4659      	mov	r1, fp
 80196d2:	2200      	movs	r2, #0
 80196d4:	f7e7 fcb8 	bl	8001048 <__aeabi_dcmpeq>
 80196d8:	b118      	cbz	r0, 80196e2 <_vfprintf_r+0x150a>
 80196da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80196dc:	07d9      	lsls	r1, r3, #31
 80196de:	f100 8256 	bmi.w	8019b8e <_vfprintf_r+0x19b6>
 80196e2:	2d00      	cmp	r5, #0
 80196e4:	462b      	mov	r3, r5
 80196e6:	db06      	blt.n	80196f6 <_vfprintf_r+0x151e>
 80196e8:	3301      	adds	r3, #1
 80196ea:	4433      	add	r3, r6
 80196ec:	2230      	movs	r2, #48	; 0x30
 80196ee:	f806 2b01 	strb.w	r2, [r6], #1
 80196f2:	42b3      	cmp	r3, r6
 80196f4:	d1fb      	bne.n	80196ee <_vfprintf_r+0x1516>
 80196f6:	1bf3      	subs	r3, r6, r7
 80196f8:	9310      	str	r3, [sp, #64]	; 0x40
 80196fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196fc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8019700:	9306      	str	r3, [sp, #24]
 8019702:	e502      	b.n	801910a <_vfprintf_r+0xf32>
 8019704:	ee18 1a10 	vmov	r1, s16
 8019708:	aa26      	add	r2, sp, #152	; 0x98
 801970a:	4648      	mov	r0, r9
 801970c:	f002 fe22 	bl	801c354 <__sprint_r>
 8019710:	2800      	cmp	r0, #0
 8019712:	f47f aa18 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019716:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 801971a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801971c:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019720:	f7ff ba24 	b.w	8018b6c <_vfprintf_r+0x994>
 8019724:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8019728:	f7fb fd4e 	bl	80151c8 <__retarget_lock_release_recursive>
 801972c:	f7fe be6d 	b.w	801840a <_vfprintf_r+0x232>
 8019730:	ee18 1a10 	vmov	r1, s16
 8019734:	aa26      	add	r2, sp, #152	; 0x98
 8019736:	4648      	mov	r0, r9
 8019738:	f002 fe0c 	bl	801c354 <__sprint_r>
 801973c:	2800      	cmp	r0, #0
 801973e:	f47f aa02 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019742:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8019744:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019748:	f7ff bb45 	b.w	8018dd6 <_vfprintf_r+0xbfe>
 801974c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801974e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019750:	1cda      	adds	r2, r3, #3
 8019752:	db02      	blt.n	801975a <_vfprintf_r+0x1582>
 8019754:	9a07      	ldr	r2, [sp, #28]
 8019756:	4293      	cmp	r3, r2
 8019758:	dd04      	ble.n	8019764 <_vfprintf_r+0x158c>
 801975a:	3c02      	subs	r4, #2
 801975c:	f024 0320 	bic.w	r3, r4, #32
 8019760:	930a      	str	r3, [sp, #40]	; 0x28
 8019762:	e4dc      	b.n	801911e <_vfprintf_r+0xf46>
 8019764:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8019768:	428b      	cmp	r3, r1
 801976a:	f2c0 818b 	blt.w	8019a84 <_vfprintf_r+0x18ac>
 801976e:	f01b 0f01 	tst.w	fp, #1
 8019772:	f000 82bf 	beq.w	8019cf4 <_vfprintf_r+0x1b1c>
 8019776:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019778:	4413      	add	r3, r2
 801977a:	930a      	str	r3, [sp, #40]	; 0x28
 801977c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8019780:	d003      	beq.n	801978a <_vfprintf_r+0x15b2>
 8019782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019784:	2b00      	cmp	r3, #0
 8019786:	f300 827a 	bgt.w	8019c7e <_vfprintf_r+0x1aa6>
 801978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801978c:	2467      	movs	r4, #103	; 0x67
 801978e:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8019792:	2300      	movs	r3, #0
 8019794:	930e      	str	r3, [sp, #56]	; 0x38
 8019796:	9311      	str	r3, [sp, #68]	; 0x44
 8019798:	e523      	b.n	80191e2 <_vfprintf_r+0x100a>
 801979a:	222d      	movs	r2, #45	; 0x2d
 801979c:	2300      	movs	r3, #0
 801979e:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80197a2:	9307      	str	r3, [sp, #28]
 80197a4:	f7fe bf39 	b.w	801861a <_vfprintf_r+0x442>
 80197a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80197aa:	42ab      	cmp	r3, r5
 80197ac:	f4bf acab 	bcs.w	8019106 <_vfprintf_r+0xf2e>
 80197b0:	2130      	movs	r1, #48	; 0x30
 80197b2:	1c5a      	adds	r2, r3, #1
 80197b4:	9224      	str	r2, [sp, #144]	; 0x90
 80197b6:	7019      	strb	r1, [r3, #0]
 80197b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80197ba:	429d      	cmp	r5, r3
 80197bc:	d8f9      	bhi.n	80197b2 <_vfprintf_r+0x15da>
 80197be:	e4a2      	b.n	8019106 <_vfprintf_r+0xf2e>
 80197c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80197c2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80197c4:	1aff      	subs	r7, r7, r3
 80197c6:	461a      	mov	r2, r3
 80197c8:	4638      	mov	r0, r7
 80197ca:	f002 fcd7 	bl	801c17c <strncpy>
 80197ce:	786b      	ldrb	r3, [r5, #1]
 80197d0:	b103      	cbz	r3, 80197d4 <_vfprintf_r+0x15fc>
 80197d2:	3501      	adds	r5, #1
 80197d4:	220a      	movs	r2, #10
 80197d6:	2300      	movs	r3, #0
 80197d8:	4650      	mov	r0, sl
 80197da:	4659      	mov	r1, fp
 80197dc:	2600      	movs	r6, #0
 80197de:	f7e7 fe01 	bl	80013e4 <__aeabi_uldivmod>
 80197e2:	e53c      	b.n	801925e <_vfprintf_r+0x1086>
 80197e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80197e6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80197ea:	465e      	mov	r6, fp
 80197ec:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80197f0:	970f      	str	r7, [sp, #60]	; 0x3c
 80197f2:	18fb      	adds	r3, r7, r3
 80197f4:	9307      	str	r3, [sp, #28]
 80197f6:	4642      	mov	r2, r8
 80197f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80197fc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80197fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019800:	ee18 8a10 	vmov	r8, s16
 8019804:	4628      	mov	r0, r5
 8019806:	f1bb 0f00 	cmp.w	fp, #0
 801980a:	d02e      	beq.n	801986a <_vfprintf_r+0x1692>
 801980c:	2b00      	cmp	r3, #0
 801980e:	d16b      	bne.n	80198e8 <_vfprintf_r+0x1710>
 8019810:	3f01      	subs	r7, #1
 8019812:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019816:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019818:	9919      	ldr	r1, [sp, #100]	; 0x64
 801981a:	6011      	str	r1, [r2, #0]
 801981c:	3301      	adds	r3, #1
 801981e:	4450      	add	r0, sl
 8019820:	2b07      	cmp	r3, #7
 8019822:	9028      	str	r0, [sp, #160]	; 0xa0
 8019824:	f8c2 a004 	str.w	sl, [r2, #4]
 8019828:	9327      	str	r3, [sp, #156]	; 0x9c
 801982a:	dc61      	bgt.n	80198f0 <_vfprintf_r+0x1718>
 801982c:	3208      	adds	r2, #8
 801982e:	9907      	ldr	r1, [sp, #28]
 8019830:	783b      	ldrb	r3, [r7, #0]
 8019832:	1b8c      	subs	r4, r1, r6
 8019834:	429c      	cmp	r4, r3
 8019836:	bfa8      	it	ge
 8019838:	461c      	movge	r4, r3
 801983a:	2c00      	cmp	r4, #0
 801983c:	dd0a      	ble.n	8019854 <_vfprintf_r+0x167c>
 801983e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019840:	6016      	str	r6, [r2, #0]
 8019842:	3301      	adds	r3, #1
 8019844:	4420      	add	r0, r4
 8019846:	2b07      	cmp	r3, #7
 8019848:	9028      	str	r0, [sp, #160]	; 0xa0
 801984a:	6054      	str	r4, [r2, #4]
 801984c:	9327      	str	r3, [sp, #156]	; 0x9c
 801984e:	dc58      	bgt.n	8019902 <_vfprintf_r+0x172a>
 8019850:	783b      	ldrb	r3, [r7, #0]
 8019852:	3208      	adds	r2, #8
 8019854:	2c00      	cmp	r4, #0
 8019856:	bfac      	ite	ge
 8019858:	1b1c      	subge	r4, r3, r4
 801985a:	461c      	movlt	r4, r3
 801985c:	2c00      	cmp	r4, #0
 801985e:	dc14      	bgt.n	801988a <_vfprintf_r+0x16b2>
 8019860:	441e      	add	r6, r3
 8019862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019864:	f1bb 0f00 	cmp.w	fp, #0
 8019868:	d1d0      	bne.n	801980c <_vfprintf_r+0x1634>
 801986a:	2b00      	cmp	r3, #0
 801986c:	d13c      	bne.n	80198e8 <_vfprintf_r+0x1710>
 801986e:	9717      	str	r7, [sp, #92]	; 0x5c
 8019870:	e9dd 730f 	ldrd	r7, r3, [sp, #60]	; 0x3c
 8019874:	18fb      	adds	r3, r7, r3
 8019876:	429e      	cmp	r6, r3
 8019878:	46b3      	mov	fp, r6
 801987a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801987e:	4690      	mov	r8, r2
 8019880:	4605      	mov	r5, r0
 8019882:	bf28      	it	cs
 8019884:	469b      	movcs	fp, r3
 8019886:	f7ff baad 	b.w	8018de4 <_vfprintf_r+0xc0c>
 801988a:	2c10      	cmp	r4, #16
 801988c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801988e:	dd1e      	ble.n	80198ce <_vfprintf_r+0x16f6>
 8019890:	2510      	movs	r5, #16
 8019892:	460b      	mov	r3, r1
 8019894:	e004      	b.n	80198a0 <_vfprintf_r+0x16c8>
 8019896:	3c10      	subs	r4, #16
 8019898:	2c10      	cmp	r4, #16
 801989a:	f102 0208 	add.w	r2, r2, #8
 801989e:	dd15      	ble.n	80198cc <_vfprintf_r+0x16f4>
 80198a0:	3301      	adds	r3, #1
 80198a2:	4922      	ldr	r1, [pc, #136]	; (801992c <_vfprintf_r+0x1754>)
 80198a4:	3010      	adds	r0, #16
 80198a6:	2b07      	cmp	r3, #7
 80198a8:	e9cd 3027 	strd	r3, r0, [sp, #156]	; 0x9c
 80198ac:	e9c2 1500 	strd	r1, r5, [r2]
 80198b0:	ddf1      	ble.n	8019896 <_vfprintf_r+0x16be>
 80198b2:	aa26      	add	r2, sp, #152	; 0x98
 80198b4:	4641      	mov	r1, r8
 80198b6:	4648      	mov	r0, r9
 80198b8:	f002 fd4c 	bl	801c354 <__sprint_r>
 80198bc:	2800      	cmp	r0, #0
 80198be:	d146      	bne.n	801994e <_vfprintf_r+0x1776>
 80198c0:	3c10      	subs	r4, #16
 80198c2:	2c10      	cmp	r4, #16
 80198c4:	e9dd 3027 	ldrd	r3, r0, [sp, #156]	; 0x9c
 80198c8:	aa29      	add	r2, sp, #164	; 0xa4
 80198ca:	dce9      	bgt.n	80198a0 <_vfprintf_r+0x16c8>
 80198cc:	4619      	mov	r1, r3
 80198ce:	4b17      	ldr	r3, [pc, #92]	; (801992c <_vfprintf_r+0x1754>)
 80198d0:	6013      	str	r3, [r2, #0]
 80198d2:	1c4b      	adds	r3, r1, #1
 80198d4:	4420      	add	r0, r4
 80198d6:	2b07      	cmp	r3, #7
 80198d8:	e9cd 3027 	strd	r3, r0, [sp, #156]	; 0x9c
 80198dc:	6054      	str	r4, [r2, #4]
 80198de:	dc53      	bgt.n	8019988 <_vfprintf_r+0x17b0>
 80198e0:	783b      	ldrb	r3, [r7, #0]
 80198e2:	3208      	adds	r2, #8
 80198e4:	441e      	add	r6, r3
 80198e6:	e7bc      	b.n	8019862 <_vfprintf_r+0x168a>
 80198e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198ea:	3b01      	subs	r3, #1
 80198ec:	930e      	str	r3, [sp, #56]	; 0x38
 80198ee:	e792      	b.n	8019816 <_vfprintf_r+0x163e>
 80198f0:	aa26      	add	r2, sp, #152	; 0x98
 80198f2:	4641      	mov	r1, r8
 80198f4:	4648      	mov	r0, r9
 80198f6:	f002 fd2d 	bl	801c354 <__sprint_r>
 80198fa:	bb40      	cbnz	r0, 801994e <_vfprintf_r+0x1776>
 80198fc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80198fe:	aa29      	add	r2, sp, #164	; 0xa4
 8019900:	e795      	b.n	801982e <_vfprintf_r+0x1656>
 8019902:	aa26      	add	r2, sp, #152	; 0x98
 8019904:	4641      	mov	r1, r8
 8019906:	4648      	mov	r0, r9
 8019908:	f002 fd24 	bl	801c354 <__sprint_r>
 801990c:	b9f8      	cbnz	r0, 801994e <_vfprintf_r+0x1776>
 801990e:	783b      	ldrb	r3, [r7, #0]
 8019910:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8019912:	aa29      	add	r2, sp, #164	; 0xa4
 8019914:	e79e      	b.n	8019854 <_vfprintf_r+0x167c>
 8019916:	222d      	movs	r2, #45	; 0x2d
 8019918:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801991c:	f7fe be67 	b.w	80185ee <_vfprintf_r+0x416>
 8019920:	08020548 	.word	0x08020548
 8019924:	40300000 	.word	0x40300000
 8019928:	3fe00000 	.word	0x3fe00000
 801992c:	08020598 	.word	0x08020598
 8019930:	ee18 1a10 	vmov	r1, s16
 8019934:	aa26      	add	r2, sp, #152	; 0x98
 8019936:	4648      	mov	r0, r9
 8019938:	f002 fd0c 	bl	801c354 <__sprint_r>
 801993c:	2800      	cmp	r0, #0
 801993e:	f47f a902 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019942:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019944:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8019946:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 801994a:	f7ff bb5c 	b.w	8019006 <_vfprintf_r+0xe2e>
 801994e:	46c3      	mov	fp, r8
 8019950:	f7ff baa4 	b.w	8018e9c <_vfprintf_r+0xcc4>
 8019954:	900b      	str	r0, [sp, #44]	; 0x2c
 8019956:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 801995a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 801995e:	ee0a 3a90 	vmov	s21, r3
 8019962:	232d      	movs	r3, #45	; 0x2d
 8019964:	ee0a 1a10 	vmov	s20, r1
 8019968:	931b      	str	r3, [sp, #108]	; 0x6c
 801996a:	e650      	b.n	801960e <_vfprintf_r+0x1436>
 801996c:	ee18 1a10 	vmov	r1, s16
 8019970:	aa26      	add	r2, sp, #152	; 0x98
 8019972:	4648      	mov	r0, r9
 8019974:	f002 fcee 	bl	801c354 <__sprint_r>
 8019978:	2800      	cmp	r0, #0
 801997a:	f47f a8e4 	bne.w	8018b46 <_vfprintf_r+0x96e>
 801997e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8019980:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019984:	f7ff ba1f 	b.w	8018dc6 <_vfprintf_r+0xbee>
 8019988:	aa26      	add	r2, sp, #152	; 0x98
 801998a:	4641      	mov	r1, r8
 801998c:	4648      	mov	r0, r9
 801998e:	f002 fce1 	bl	801c354 <__sprint_r>
 8019992:	2800      	cmp	r0, #0
 8019994:	d1db      	bne.n	801994e <_vfprintf_r+0x1776>
 8019996:	783b      	ldrb	r3, [r7, #0]
 8019998:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801999a:	aa29      	add	r2, sp, #164	; 0xa4
 801999c:	441e      	add	r6, r3
 801999e:	e760      	b.n	8019862 <_vfprintf_r+0x168a>
 80199a0:	9d07      	ldr	r5, [sp, #28]
 80199a2:	9501      	str	r5, [sp, #4]
 80199a4:	a824      	add	r0, sp, #144	; 0x90
 80199a6:	a921      	add	r1, sp, #132	; 0x84
 80199a8:	aa20      	add	r2, sp, #128	; 0x80
 80199aa:	2302      	movs	r3, #2
 80199ac:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80199b0:	9202      	str	r2, [sp, #8]
 80199b2:	9300      	str	r3, [sp, #0]
 80199b4:	4648      	mov	r0, r9
 80199b6:	ec53 2b1a 	vmov	r2, r3, d10
 80199ba:	f000 fb8d 	bl	801a0d8 <_dtoa_r>
 80199be:	2e47      	cmp	r6, #71	; 0x47
 80199c0:	4607      	mov	r7, r0
 80199c2:	d12a      	bne.n	8019a1a <_vfprintf_r+0x1842>
 80199c4:	9b06      	ldr	r3, [sp, #24]
 80199c6:	07da      	lsls	r2, r3, #31
 80199c8:	f100 808f 	bmi.w	8019aea <_vfprintf_r+0x1912>
 80199cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80199ce:	9206      	str	r2, [sp, #24]
 80199d0:	2247      	movs	r2, #71	; 0x47
 80199d2:	469b      	mov	fp, r3
 80199d4:	920a      	str	r2, [sp, #40]	; 0x28
 80199d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80199d8:	f7ff bb95 	b.w	8019106 <_vfprintf_r+0xf2e>
 80199dc:	ee18 1a10 	vmov	r1, s16
 80199e0:	aa26      	add	r2, sp, #152	; 0x98
 80199e2:	4648      	mov	r0, r9
 80199e4:	f002 fcb6 	bl	801c354 <__sprint_r>
 80199e8:	2800      	cmp	r0, #0
 80199ea:	f47f a8ac 	bne.w	8018b46 <_vfprintf_r+0x96e>
 80199ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80199f0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80199f2:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80199f6:	f7ff ba0d 	b.w	8018e14 <_vfprintf_r+0xc3c>
 80199fa:	9d07      	ldr	r5, [sp, #28]
 80199fc:	9501      	str	r5, [sp, #4]
 80199fe:	a824      	add	r0, sp, #144	; 0x90
 8019a00:	a921      	add	r1, sp, #132	; 0x84
 8019a02:	aa20      	add	r2, sp, #128	; 0x80
 8019a04:	2303      	movs	r3, #3
 8019a06:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8019a0a:	9202      	str	r2, [sp, #8]
 8019a0c:	9300      	str	r3, [sp, #0]
 8019a0e:	4648      	mov	r0, r9
 8019a10:	ec53 2b1a 	vmov	r2, r3, d10
 8019a14:	f000 fb60 	bl	801a0d8 <_dtoa_r>
 8019a18:	4607      	mov	r7, r0
 8019a1a:	9b07      	ldr	r3, [sp, #28]
 8019a1c:	2e46      	cmp	r6, #70	; 0x46
 8019a1e:	eb07 0503 	add.w	r5, r7, r3
 8019a22:	f47f ab62 	bne.w	80190ea <_vfprintf_r+0xf12>
 8019a26:	783b      	ldrb	r3, [r7, #0]
 8019a28:	2b30      	cmp	r3, #48	; 0x30
 8019a2a:	f000 816a 	beq.w	8019d02 <_vfprintf_r+0x1b2a>
 8019a2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019a30:	f8dd b018 	ldr.w	fp, [sp, #24]
 8019a34:	441d      	add	r5, r3
 8019a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a38:	9306      	str	r3, [sp, #24]
 8019a3a:	f7ff bb5a 	b.w	80190f2 <_vfprintf_r+0xf1a>
 8019a3e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019a42:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8019a46:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8019a4a:	9007      	str	r0, [sp, #28]
 8019a4c:	950c      	str	r5, [sp, #48]	; 0x30
 8019a4e:	900e      	str	r0, [sp, #56]	; 0x38
 8019a50:	9011      	str	r0, [sp, #68]	; 0x44
 8019a52:	900f      	str	r0, [sp, #60]	; 0x3c
 8019a54:	f7fe bdde 	b.w	8018614 <_vfprintf_r+0x43c>
 8019a58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019a5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8019a5c:	2a00      	cmp	r2, #0
 8019a5e:	f340 816f 	ble.w	8019d40 <_vfprintf_r+0x1b68>
 8019a62:	9907      	ldr	r1, [sp, #28]
 8019a64:	f00b 0301 	and.w	r3, fp, #1
 8019a68:	430b      	orrs	r3, r1
 8019a6a:	f040 812f 	bne.w	8019ccc <_vfprintf_r+0x1af4>
 8019a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a70:	930a      	str	r3, [sp, #40]	; 0x28
 8019a72:	2466      	movs	r4, #102	; 0x66
 8019a74:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8019a78:	f040 8102 	bne.w	8019c80 <_vfprintf_r+0x1aa8>
 8019a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a7e:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8019a82:	e686      	b.n	8019792 <_vfprintf_r+0x15ba>
 8019a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a88:	189a      	adds	r2, r3, r2
 8019a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	f340 814b 	ble.w	8019d2a <_vfprintf_r+0x1b52>
 8019a94:	2467      	movs	r4, #103	; 0x67
 8019a96:	e7ed      	b.n	8019a74 <_vfprintf_r+0x189c>
 8019a98:	ee18 1a10 	vmov	r1, s16
 8019a9c:	aa26      	add	r2, sp, #152	; 0x98
 8019a9e:	4648      	mov	r0, r9
 8019aa0:	f002 fc58 	bl	801c354 <__sprint_r>
 8019aa4:	2800      	cmp	r0, #0
 8019aa6:	f47f a84e 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019aaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019aae:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8019ab0:	1ad3      	subs	r3, r2, r3
 8019ab2:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019ab6:	f7ff b9c5 	b.w	8018e44 <_vfprintf_r+0xc6c>
 8019aba:	2300      	movs	r3, #0
 8019abc:	9307      	str	r3, [sp, #28]
 8019abe:	f7fe bbff 	b.w	80182c0 <_vfprintf_r+0xe8>
 8019ac2:	46d3      	mov	fp, sl
 8019ac4:	f7ff b9ea 	b.w	8018e9c <_vfprintf_r+0xcc4>
 8019ac8:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8019acc:	07d8      	lsls	r0, r3, #31
 8019ace:	d407      	bmi.n	8019ae0 <_vfprintf_r+0x1908>
 8019ad0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8019ad4:	0599      	lsls	r1, r3, #22
 8019ad6:	d403      	bmi.n	8019ae0 <_vfprintf_r+0x1908>
 8019ad8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8019adc:	f7fb fb74 	bl	80151c8 <__retarget_lock_release_recursive>
 8019ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ae4:	9308      	str	r3, [sp, #32]
 8019ae6:	f7ff b9eb 	b.w	8018ec0 <_vfprintf_r+0xce8>
 8019aea:	e9dd b306 	ldrd	fp, r3, [sp, #24]
 8019aee:	18fd      	adds	r5, r7, r3
 8019af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019af2:	9306      	str	r3, [sp, #24]
 8019af4:	2347      	movs	r3, #71	; 0x47
 8019af6:	930a      	str	r3, [sp, #40]	; 0x28
 8019af8:	f7ff bafb 	b.w	80190f2 <_vfprintf_r+0xf1a>
 8019afc:	4254      	negs	r4, r2
 8019afe:	3210      	adds	r2, #16
 8019b00:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8019db0 <_vfprintf_r+0x1bd8>
 8019b04:	da21      	bge.n	8019b4a <_vfprintf_r+0x1972>
 8019b06:	462a      	mov	r2, r5
 8019b08:	2610      	movs	r6, #16
 8019b0a:	465d      	mov	r5, fp
 8019b0c:	ee18 ba10 	vmov	fp, s16
 8019b10:	e004      	b.n	8019b1c <_vfprintf_r+0x1944>
 8019b12:	f108 0808 	add.w	r8, r8, #8
 8019b16:	3c10      	subs	r4, #16
 8019b18:	2c10      	cmp	r4, #16
 8019b1a:	dd14      	ble.n	8019b46 <_vfprintf_r+0x196e>
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	3210      	adds	r2, #16
 8019b20:	2b07      	cmp	r3, #7
 8019b22:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019b26:	e9c8 5600 	strd	r5, r6, [r8]
 8019b2a:	ddf2      	ble.n	8019b12 <_vfprintf_r+0x193a>
 8019b2c:	aa26      	add	r2, sp, #152	; 0x98
 8019b2e:	4659      	mov	r1, fp
 8019b30:	4648      	mov	r0, r9
 8019b32:	f002 fc0f 	bl	801c354 <__sprint_r>
 8019b36:	2800      	cmp	r0, #0
 8019b38:	f47f a9b0 	bne.w	8018e9c <_vfprintf_r+0xcc4>
 8019b3c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019b40:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019b44:	e7e7      	b.n	8019b16 <_vfprintf_r+0x193e>
 8019b46:	46ab      	mov	fp, r5
 8019b48:	4615      	mov	r5, r2
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	4425      	add	r5, r4
 8019b4e:	2b07      	cmp	r3, #7
 8019b50:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8019b54:	e9c8 b400 	strd	fp, r4, [r8]
 8019b58:	f77f aa6d 	ble.w	8019036 <_vfprintf_r+0xe5e>
 8019b5c:	ee18 1a10 	vmov	r1, s16
 8019b60:	aa26      	add	r2, sp, #152	; 0x98
 8019b62:	4648      	mov	r0, r9
 8019b64:	f002 fbf6 	bl	801c354 <__sprint_r>
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	f47e afec 	bne.w	8018b46 <_vfprintf_r+0x96e>
 8019b6e:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8019b72:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 8019b76:	f7fe bffc 	b.w	8018b72 <_vfprintf_r+0x99a>
 8019b7a:	1c59      	adds	r1, r3, #1
 8019b7c:	4648      	mov	r0, r9
 8019b7e:	f7fb fb35 	bl	80151ec <_malloc_r>
 8019b82:	4607      	mov	r7, r0
 8019b84:	2800      	cmp	r0, #0
 8019b86:	f000 80ff 	beq.w	8019d88 <_vfprintf_r+0x1bb0>
 8019b8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8019b8c:	e52e      	b.n	80195ec <_vfprintf_r+0x1414>
 8019b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019b90:	9324      	str	r3, [sp, #144]	; 0x90
 8019b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019b98:	7bd9      	ldrb	r1, [r3, #15]
 8019b9a:	428a      	cmp	r2, r1
 8019b9c:	4633      	mov	r3, r6
 8019b9e:	d109      	bne.n	8019bb4 <_vfprintf_r+0x19dc>
 8019ba0:	2030      	movs	r0, #48	; 0x30
 8019ba2:	f803 0c01 	strb.w	r0, [r3, #-1]
 8019ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019ba8:	1e5a      	subs	r2, r3, #1
 8019baa:	9224      	str	r2, [sp, #144]	; 0x90
 8019bac:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8019bb0:	4291      	cmp	r1, r2
 8019bb2:	d0f6      	beq.n	8019ba2 <_vfprintf_r+0x19ca>
 8019bb4:	2a39      	cmp	r2, #57	; 0x39
 8019bb6:	bf0b      	itete	eq
 8019bb8:	9a0f      	ldreq	r2, [sp, #60]	; 0x3c
 8019bba:	3201      	addne	r2, #1
 8019bbc:	7a92      	ldrbeq	r2, [r2, #10]
 8019bbe:	b2d2      	uxtbne	r2, r2
 8019bc0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8019bc4:	e597      	b.n	80196f6 <_vfprintf_r+0x151e>
 8019bc6:	2330      	movs	r3, #48	; 0x30
 8019bc8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019bcc:	2378      	movs	r3, #120	; 0x78
 8019bce:	e501      	b.n	80195d4 <_vfprintf_r+0x13fc>
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	bf08      	it	eq
 8019bd6:	2201      	moveq	r2, #1
 8019bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019bda:	9207      	str	r2, [sp, #28]
 8019bdc:	9a06      	ldr	r2, [sp, #24]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019be4:	920e      	str	r2, [sp, #56]	; 0x38
 8019be6:	f6ff aeb5 	blt.w	8019954 <_vfprintf_r+0x177c>
 8019bea:	9e07      	ldr	r6, [sp, #28]
 8019bec:	9601      	str	r6, [sp, #4]
 8019bee:	ad24      	add	r5, sp, #144	; 0x90
 8019bf0:	a821      	add	r0, sp, #132	; 0x84
 8019bf2:	e9cd 0503 	strd	r0, r5, [sp, #12]
 8019bf6:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	; 0x48
 8019bfa:	aa20      	add	r2, sp, #128	; 0x80
 8019bfc:	2302      	movs	r3, #2
 8019bfe:	9202      	str	r2, [sp, #8]
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	462a      	mov	r2, r5
 8019c04:	4633      	mov	r3, r6
 8019c06:	4648      	mov	r0, r9
 8019c08:	468a      	mov	sl, r1
 8019c0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8019c0c:	f000 fa64 	bl	801a0d8 <_dtoa_r>
 8019c10:	ec46 5b1a 	vmov	d10, r5, r6
 8019c14:	4607      	mov	r7, r0
 8019c16:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8019c1a:	e6d3      	b.n	80199c4 <_vfprintf_r+0x17ec>
 8019c1c:	2306      	movs	r3, #6
 8019c1e:	9307      	str	r3, [sp, #28]
 8019c20:	f7ff ba3c 	b.w	801909c <_vfprintf_r+0xec4>
 8019c24:	aa20      	add	r2, sp, #128	; 0x80
 8019c26:	ec51 0b1a 	vmov	r0, r1, d10
 8019c2a:	f002 fa29 	bl	801c080 <frexp>
 8019c2e:	2200      	movs	r2, #0
 8019c30:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019c34:	f7e6 ffa0 	bl	8000b78 <__aeabi_dmul>
 8019c38:	2200      	movs	r2, #0
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	4682      	mov	sl, r0
 8019c3e:	468b      	mov	fp, r1
 8019c40:	f7e7 fa02 	bl	8001048 <__aeabi_dcmpeq>
 8019c44:	b108      	cbz	r0, 8019c4a <_vfprintf_r+0x1a72>
 8019c46:	2301      	movs	r3, #1
 8019c48:	9320      	str	r3, [sp, #128]	; 0x80
 8019c4a:	4b56      	ldr	r3, [pc, #344]	; (8019da4 <_vfprintf_r+0x1bcc>)
 8019c4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c4e:	e4f9      	b.n	8019644 <_vfprintf_r+0x146c>
 8019c50:	2900      	cmp	r1, #0
 8019c52:	d172      	bne.n	8019d3a <_vfprintf_r+0x1b62>
 8019c54:	2230      	movs	r2, #48	; 0x30
 8019c56:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8019c5a:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8019c5e:	3330      	adds	r3, #48	; 0x30
 8019c60:	f802 3b01 	strb.w	r3, [r2], #1
 8019c64:	ab22      	add	r3, sp, #136	; 0x88
 8019c66:	1ad3      	subs	r3, r2, r3
 8019c68:	9318      	str	r3, [sp, #96]	; 0x60
 8019c6a:	f7ff baa3 	b.w	80191b4 <_vfprintf_r+0xfdc>
 8019c6e:	f104 020f 	add.w	r2, r4, #15
 8019c72:	b2d2      	uxtb	r2, r2
 8019c74:	2101      	movs	r1, #1
 8019c76:	f7ff ba5b 	b.w	8019130 <_vfprintf_r+0xf58>
 8019c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8019c7c:	e66b      	b.n	8019956 <_vfprintf_r+0x177e>
 8019c7e:	2467      	movs	r4, #103	; 0x67
 8019c80:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019c82:	780b      	ldrb	r3, [r1, #0]
 8019c84:	2bff      	cmp	r3, #255	; 0xff
 8019c86:	f000 8089 	beq.w	8019d9c <_vfprintf_r+0x1bc4>
 8019c8a:	2500      	movs	r5, #0
 8019c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019c8e:	4628      	mov	r0, r5
 8019c90:	e003      	b.n	8019c9a <_vfprintf_r+0x1ac2>
 8019c92:	3001      	adds	r0, #1
 8019c94:	3101      	adds	r1, #1
 8019c96:	2bff      	cmp	r3, #255	; 0xff
 8019c98:	d008      	beq.n	8019cac <_vfprintf_r+0x1ad4>
 8019c9a:	4293      	cmp	r3, r2
 8019c9c:	da06      	bge.n	8019cac <_vfprintf_r+0x1ad4>
 8019c9e:	1ad2      	subs	r2, r2, r3
 8019ca0:	784b      	ldrb	r3, [r1, #1]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d1f5      	bne.n	8019c92 <_vfprintf_r+0x1aba>
 8019ca6:	780b      	ldrb	r3, [r1, #0]
 8019ca8:	3501      	adds	r5, #1
 8019caa:	e7f4      	b.n	8019c96 <_vfprintf_r+0x1abe>
 8019cac:	9117      	str	r1, [sp, #92]	; 0x5c
 8019cae:	920f      	str	r2, [sp, #60]	; 0x3c
 8019cb0:	9011      	str	r0, [sp, #68]	; 0x44
 8019cb2:	950e      	str	r5, [sp, #56]	; 0x38
 8019cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019cba:	4413      	add	r3, r2
 8019cbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019cbe:	fb02 1303 	mla	r3, r2, r3, r1
 8019cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8019cc4:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8019cc8:	f7ff ba8b 	b.w	80191e2 <_vfprintf_r+0x100a>
 8019ccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019cce:	eb02 0a03 	add.w	sl, r2, r3
 8019cd2:	4451      	add	r1, sl
 8019cd4:	910a      	str	r1, [sp, #40]	; 0x28
 8019cd6:	2466      	movs	r4, #102	; 0x66
 8019cd8:	e6cc      	b.n	8019a74 <_vfprintf_r+0x189c>
 8019cda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019cdc:	4f32      	ldr	r7, [pc, #200]	; (8019da8 <_vfprintf_r+0x1bd0>)
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	bfb4      	ite	lt
 8019ce2:	222d      	movlt	r2, #45	; 0x2d
 8019ce4:	f89d 207b 	ldrbge.w	r2, [sp, #123]	; 0x7b
 8019ce8:	4b30      	ldr	r3, [pc, #192]	; (8019dac <_vfprintf_r+0x1bd4>)
 8019cea:	bfb8      	it	lt
 8019cec:	f88d 207b 	strblt.w	r2, [sp, #123]	; 0x7b
 8019cf0:	f7fe bc7f 	b.w	80185f2 <_vfprintf_r+0x41a>
 8019cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8019cf8:	e540      	b.n	801977c <_vfprintf_r+0x15a4>
 8019cfa:	ee18 ba10 	vmov	fp, s16
 8019cfe:	f7ff b8d2 	b.w	8018ea6 <_vfprintf_r+0xcce>
 8019d02:	ec51 0b1a 	vmov	r0, r1, d10
 8019d06:	2200      	movs	r2, #0
 8019d08:	2300      	movs	r3, #0
 8019d0a:	f7e7 f99d 	bl	8001048 <__aeabi_dcmpeq>
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	f47f ae8d 	bne.w	8019a2e <_vfprintf_r+0x1856>
 8019d14:	9b07      	ldr	r3, [sp, #28]
 8019d16:	f1c3 0301 	rsb	r3, r3, #1
 8019d1a:	9320      	str	r3, [sp, #128]	; 0x80
 8019d1c:	e688      	b.n	8019a30 <_vfprintf_r+0x1858>
 8019d1e:	f01b 0f01 	tst.w	fp, #1
 8019d22:	f43f aa52 	beq.w	80191ca <_vfprintf_r+0xff2>
 8019d26:	f7ff ba4c 	b.w	80191c2 <_vfprintf_r+0xfea>
 8019d2a:	f1c3 0301 	rsb	r3, r3, #1
 8019d2e:	441a      	add	r2, r3
 8019d30:	920a      	str	r2, [sp, #40]	; 0x28
 8019d32:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
 8019d36:	2467      	movs	r4, #103	; 0x67
 8019d38:	e52b      	b.n	8019792 <_vfprintf_r+0x15ba>
 8019d3a:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8019d3e:	e78e      	b.n	8019c5e <_vfprintf_r+0x1a86>
 8019d40:	9b07      	ldr	r3, [sp, #28]
 8019d42:	f00b 0601 	and.w	r6, fp, #1
 8019d46:	ea56 0203 	orrs.w	r2, r6, r3
 8019d4a:	d105      	bne.n	8019d58 <_vfprintf_r+0x1b80>
 8019d4c:	f04f 0a01 	mov.w	sl, #1
 8019d50:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8019d54:	2466      	movs	r4, #102	; 0x66
 8019d56:	e51c      	b.n	8019792 <_vfprintf_r+0x15ba>
 8019d58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d5a:	f102 0a01 	add.w	sl, r2, #1
 8019d5e:	4453      	add	r3, sl
 8019d60:	930a      	str	r3, [sp, #40]	; 0x28
 8019d62:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 8019d66:	2466      	movs	r4, #102	; 0x66
 8019d68:	e513      	b.n	8019792 <_vfprintf_r+0x15ba>
 8019d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d6c:	7874      	ldrb	r4, [r6, #1]
 8019d6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019d72:	930c      	str	r3, [sp, #48]	; 0x30
 8019d74:	4616      	mov	r6, r2
 8019d76:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
 8019d7a:	9207      	str	r2, [sp, #28]
 8019d7c:	f7fe ba9f 	b.w	80182be <_vfprintf_r+0xe6>
 8019d80:	2302      	movs	r3, #2
 8019d82:	9318      	str	r3, [sp, #96]	; 0x60
 8019d84:	f7ff ba16 	b.w	80191b4 <_vfprintf_r+0xfdc>
 8019d88:	ee18 ba10 	vmov	fp, s16
 8019d8c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8019d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d94:	f8ab 300c 	strh.w	r3, [fp, #12]
 8019d98:	f7ff b885 	b.w	8018ea6 <_vfprintf_r+0xcce>
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8019da0:	9311      	str	r3, [sp, #68]	; 0x44
 8019da2:	e787      	b.n	8019cb4 <_vfprintf_r+0x1adc>
 8019da4:	08020534 	.word	0x08020534
 8019da8:	0802052c 	.word	0x0802052c
 8019dac:	08020530 	.word	0x08020530
 8019db0:	08020598 	.word	0x08020598

08019db4 <__sbprintf>:
 8019db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019db6:	460c      	mov	r4, r1
 8019db8:	8989      	ldrh	r1, [r1, #12]
 8019dba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8019dbc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8019dc0:	69e7      	ldr	r7, [r4, #28]
 8019dc2:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8019dc6:	f021 0102 	bic.w	r1, r1, #2
 8019dca:	4606      	mov	r6, r0
 8019dcc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019dd0:	2000      	movs	r0, #0
 8019dd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019dd4:	951b      	str	r5, [sp, #108]	; 0x6c
 8019dd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8019dd8:	ad1c      	add	r5, sp, #112	; 0x70
 8019dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019dde:	9008      	str	r0, [sp, #32]
 8019de0:	a818      	add	r0, sp, #96	; 0x60
 8019de2:	e9cd 3200 	strd	r3, r2, [sp]
 8019de6:	f8ad c016 	strh.w	ip, [sp, #22]
 8019dea:	9502      	str	r5, [sp, #8]
 8019dec:	9506      	str	r5, [sp, #24]
 8019dee:	9104      	str	r1, [sp, #16]
 8019df0:	9107      	str	r1, [sp, #28]
 8019df2:	9709      	str	r7, [sp, #36]	; 0x24
 8019df4:	f7fb f9e2 	bl	80151bc <__retarget_lock_init_recursive>
 8019df8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019dfc:	a902      	add	r1, sp, #8
 8019dfe:	4630      	mov	r0, r6
 8019e00:	f7fe f9ea 	bl	80181d8 <_vfprintf_r>
 8019e04:	1e05      	subs	r5, r0, #0
 8019e06:	db07      	blt.n	8019e18 <__sbprintf+0x64>
 8019e08:	4630      	mov	r0, r6
 8019e0a:	a902      	add	r1, sp, #8
 8019e0c:	f001 f9ac 	bl	801b168 <_fflush_r>
 8019e10:	2800      	cmp	r0, #0
 8019e12:	bf18      	it	ne
 8019e14:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8019e18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019e1c:	065b      	lsls	r3, r3, #25
 8019e1e:	d503      	bpl.n	8019e28 <__sbprintf+0x74>
 8019e20:	89a3      	ldrh	r3, [r4, #12]
 8019e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e26:	81a3      	strh	r3, [r4, #12]
 8019e28:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019e2a:	f7fb f9c9 	bl	80151c0 <__retarget_lock_close_recursive>
 8019e2e:	4628      	mov	r0, r5
 8019e30:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 8019e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e36:	bf00      	nop

08019e38 <_vsnprintf_r>:
 8019e38:	b570      	push	{r4, r5, r6, lr}
 8019e3a:	1e14      	subs	r4, r2, #0
 8019e3c:	b09a      	sub	sp, #104	; 0x68
 8019e3e:	4605      	mov	r5, r0
 8019e40:	db2c      	blt.n	8019e9c <_vsnprintf_r+0x64>
 8019e42:	f44f 7202 	mov.w	r2, #520	; 0x208
 8019e46:	9100      	str	r1, [sp, #0]
 8019e48:	9104      	str	r1, [sp, #16]
 8019e4a:	f8ad 200c 	strh.w	r2, [sp, #12]
 8019e4e:	d014      	beq.n	8019e7a <_vsnprintf_r+0x42>
 8019e50:	461a      	mov	r2, r3
 8019e52:	3c01      	subs	r4, #1
 8019e54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019e56:	9402      	str	r4, [sp, #8]
 8019e58:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019e5c:	4669      	mov	r1, sp
 8019e5e:	9405      	str	r4, [sp, #20]
 8019e60:	f8ad 600e 	strh.w	r6, [sp, #14]
 8019e64:	f7fc fc1c 	bl	80166a0 <_svfprintf_r>
 8019e68:	1c42      	adds	r2, r0, #1
 8019e6a:	da01      	bge.n	8019e70 <_vsnprintf_r+0x38>
 8019e6c:	238b      	movs	r3, #139	; 0x8b
 8019e6e:	602b      	str	r3, [r5, #0]
 8019e70:	9b00      	ldr	r3, [sp, #0]
 8019e72:	2200      	movs	r2, #0
 8019e74:	701a      	strb	r2, [r3, #0]
 8019e76:	b01a      	add	sp, #104	; 0x68
 8019e78:	bd70      	pop	{r4, r5, r6, pc}
 8019e7a:	461a      	mov	r2, r3
 8019e7c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019e80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019e82:	9402      	str	r4, [sp, #8]
 8019e84:	4669      	mov	r1, sp
 8019e86:	9405      	str	r4, [sp, #20]
 8019e88:	f8ad 600e 	strh.w	r6, [sp, #14]
 8019e8c:	f7fc fc08 	bl	80166a0 <_svfprintf_r>
 8019e90:	1c43      	adds	r3, r0, #1
 8019e92:	da01      	bge.n	8019e98 <_vsnprintf_r+0x60>
 8019e94:	238b      	movs	r3, #139	; 0x8b
 8019e96:	602b      	str	r3, [r5, #0]
 8019e98:	b01a      	add	sp, #104	; 0x68
 8019e9a:	bd70      	pop	{r4, r5, r6, pc}
 8019e9c:	238b      	movs	r3, #139	; 0x8b
 8019e9e:	6003      	str	r3, [r0, #0]
 8019ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ea4:	e7f8      	b.n	8019e98 <_vsnprintf_r+0x60>
 8019ea6:	bf00      	nop

08019ea8 <vsnprintf>:
 8019ea8:	b570      	push	{r4, r5, r6, lr}
 8019eaa:	4c06      	ldr	r4, [pc, #24]	; (8019ec4 <vsnprintf+0x1c>)
 8019eac:	b082      	sub	sp, #8
 8019eae:	460e      	mov	r6, r1
 8019eb0:	4615      	mov	r5, r2
 8019eb2:	4601      	mov	r1, r0
 8019eb4:	9300      	str	r3, [sp, #0]
 8019eb6:	6820      	ldr	r0, [r4, #0]
 8019eb8:	4632      	mov	r2, r6
 8019eba:	462b      	mov	r3, r5
 8019ebc:	f7ff ffbc 	bl	8019e38 <_vsnprintf_r>
 8019ec0:	b002      	add	sp, #8
 8019ec2:	bd70      	pop	{r4, r5, r6, pc}
 8019ec4:	20000208 	.word	0x20000208

08019ec8 <__swsetup_r>:
 8019ec8:	b538      	push	{r3, r4, r5, lr}
 8019eca:	4b32      	ldr	r3, [pc, #200]	; (8019f94 <__swsetup_r+0xcc>)
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	4605      	mov	r5, r0
 8019ed0:	460c      	mov	r4, r1
 8019ed2:	b113      	cbz	r3, 8019eda <__swsetup_r+0x12>
 8019ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ed6:	2a00      	cmp	r2, #0
 8019ed8:	d03c      	beq.n	8019f54 <__swsetup_r+0x8c>
 8019eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ede:	0718      	lsls	r0, r3, #28
 8019ee0:	b29a      	uxth	r2, r3
 8019ee2:	d50c      	bpl.n	8019efe <__swsetup_r+0x36>
 8019ee4:	6921      	ldr	r1, [r4, #16]
 8019ee6:	b1a9      	cbz	r1, 8019f14 <__swsetup_r+0x4c>
 8019ee8:	f012 0001 	ands.w	r0, r2, #1
 8019eec:	d022      	beq.n	8019f34 <__swsetup_r+0x6c>
 8019eee:	6960      	ldr	r0, [r4, #20]
 8019ef0:	2500      	movs	r5, #0
 8019ef2:	4240      	negs	r0, r0
 8019ef4:	61a0      	str	r0, [r4, #24]
 8019ef6:	60a5      	str	r5, [r4, #8]
 8019ef8:	b311      	cbz	r1, 8019f40 <__swsetup_r+0x78>
 8019efa:	2000      	movs	r0, #0
 8019efc:	bd38      	pop	{r3, r4, r5, pc}
 8019efe:	06d1      	lsls	r1, r2, #27
 8019f00:	d540      	bpl.n	8019f84 <__swsetup_r+0xbc>
 8019f02:	0752      	lsls	r2, r2, #29
 8019f04:	d42a      	bmi.n	8019f5c <__swsetup_r+0x94>
 8019f06:	6921      	ldr	r1, [r4, #16]
 8019f08:	f043 0308 	orr.w	r3, r3, #8
 8019f0c:	81a3      	strh	r3, [r4, #12]
 8019f0e:	b29a      	uxth	r2, r3
 8019f10:	2900      	cmp	r1, #0
 8019f12:	d1e9      	bne.n	8019ee8 <__swsetup_r+0x20>
 8019f14:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8019f18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8019f1c:	d0e4      	beq.n	8019ee8 <__swsetup_r+0x20>
 8019f1e:	4628      	mov	r0, r5
 8019f20:	4621      	mov	r1, r4
 8019f22:	f001 fce3 	bl	801b8ec <__smakebuf_r>
 8019f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f2a:	6921      	ldr	r1, [r4, #16]
 8019f2c:	b29a      	uxth	r2, r3
 8019f2e:	f012 0001 	ands.w	r0, r2, #1
 8019f32:	d1dc      	bne.n	8019eee <__swsetup_r+0x26>
 8019f34:	0795      	lsls	r5, r2, #30
 8019f36:	bf58      	it	pl
 8019f38:	6960      	ldrpl	r0, [r4, #20]
 8019f3a:	60a0      	str	r0, [r4, #8]
 8019f3c:	2900      	cmp	r1, #0
 8019f3e:	d1dc      	bne.n	8019efa <__swsetup_r+0x32>
 8019f40:	0612      	lsls	r2, r2, #24
 8019f42:	bf58      	it	pl
 8019f44:	4608      	movpl	r0, r1
 8019f46:	d5d9      	bpl.n	8019efc <__swsetup_r+0x34>
 8019f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f4c:	81a3      	strh	r3, [r4, #12]
 8019f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f52:	bd38      	pop	{r3, r4, r5, pc}
 8019f54:	4618      	mov	r0, r3
 8019f56:	f001 f963 	bl	801b220 <__sinit>
 8019f5a:	e7be      	b.n	8019eda <__swsetup_r+0x12>
 8019f5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019f5e:	b151      	cbz	r1, 8019f76 <__swsetup_r+0xae>
 8019f60:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8019f64:	4291      	cmp	r1, r2
 8019f66:	d004      	beq.n	8019f72 <__swsetup_r+0xaa>
 8019f68:	4628      	mov	r0, r5
 8019f6a:	f001 f9f5 	bl	801b358 <_free_r>
 8019f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f72:	2200      	movs	r2, #0
 8019f74:	6322      	str	r2, [r4, #48]	; 0x30
 8019f76:	6921      	ldr	r1, [r4, #16]
 8019f78:	6021      	str	r1, [r4, #0]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	6062      	str	r2, [r4, #4]
 8019f7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f82:	e7c1      	b.n	8019f08 <__swsetup_r+0x40>
 8019f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f88:	2209      	movs	r2, #9
 8019f8a:	602a      	str	r2, [r5, #0]
 8019f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f90:	81a3      	strh	r3, [r4, #12]
 8019f92:	bd38      	pop	{r3, r4, r5, pc}
 8019f94:	20000208 	.word	0x20000208

08019f98 <register_fini>:
 8019f98:	4b02      	ldr	r3, [pc, #8]	; (8019fa4 <register_fini+0xc>)
 8019f9a:	b113      	cbz	r3, 8019fa2 <register_fini+0xa>
 8019f9c:	4802      	ldr	r0, [pc, #8]	; (8019fa8 <register_fini+0x10>)
 8019f9e:	f000 b805 	b.w	8019fac <atexit>
 8019fa2:	4770      	bx	lr
 8019fa4:	00000000 	.word	0x00000000
 8019fa8:	0801b28d 	.word	0x0801b28d

08019fac <atexit>:
 8019fac:	2300      	movs	r3, #0
 8019fae:	4601      	mov	r1, r0
 8019fb0:	461a      	mov	r2, r3
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f003 b8d8 	b.w	801d168 <__register_exitproc>

08019fb8 <quorem>:
 8019fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fbc:	6903      	ldr	r3, [r0, #16]
 8019fbe:	690e      	ldr	r6, [r1, #16]
 8019fc0:	42b3      	cmp	r3, r6
 8019fc2:	b083      	sub	sp, #12
 8019fc4:	f2c0 8082 	blt.w	801a0cc <quorem+0x114>
 8019fc8:	3e01      	subs	r6, #1
 8019fca:	f101 0714 	add.w	r7, r1, #20
 8019fce:	f100 0a14 	add.w	sl, r0, #20
 8019fd2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8019fd6:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
 8019fda:	3301      	adds	r3, #1
 8019fdc:	4683      	mov	fp, r0
 8019fde:	00b0      	lsls	r0, r6, #2
 8019fe0:	9000      	str	r0, [sp, #0]
 8019fe2:	429a      	cmp	r2, r3
 8019fe4:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 8019fe8:	eb07 0986 	add.w	r9, r7, r6, lsl #2
 8019fec:	9001      	str	r0, [sp, #4]
 8019fee:	fbb2 f8f3 	udiv	r8, r2, r3
 8019ff2:	d336      	bcc.n	801a062 <quorem+0xaa>
 8019ff4:	2500      	movs	r5, #0
 8019ff6:	462a      	mov	r2, r5
 8019ff8:	46bc      	mov	ip, r7
 8019ffa:	4650      	mov	r0, sl
 8019ffc:	f85c 4b04 	ldr.w	r4, [ip], #4
 801a000:	6803      	ldr	r3, [r0, #0]
 801a002:	fa1f fe84 	uxth.w	lr, r4
 801a006:	fb08 550e 	mla	r5, r8, lr, r5
 801a00a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801a00e:	0c24      	lsrs	r4, r4, #16
 801a010:	fb08 e404 	mla	r4, r8, r4, lr
 801a014:	b2ad      	uxth	r5, r5
 801a016:	1b55      	subs	r5, r2, r5
 801a018:	b2a2      	uxth	r2, r4
 801a01a:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801a01e:	fa15 f383 	uxtah	r3, r5, r3
 801a022:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a026:	b29b      	uxth	r3, r3
 801a028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a02c:	45e1      	cmp	r9, ip
 801a02e:	f840 3b04 	str.w	r3, [r0], #4
 801a032:	ea4f 4514 	mov.w	r5, r4, lsr #16
 801a036:	ea4f 4222 	mov.w	r2, r2, asr #16
 801a03a:	d2df      	bcs.n	8019ffc <quorem+0x44>
 801a03c:	9b00      	ldr	r3, [sp, #0]
 801a03e:	f85a 3003 	ldr.w	r3, [sl, r3]
 801a042:	b973      	cbnz	r3, 801a062 <quorem+0xaa>
 801a044:	9b01      	ldr	r3, [sp, #4]
 801a046:	3b04      	subs	r3, #4
 801a048:	459a      	cmp	sl, r3
 801a04a:	d304      	bcc.n	801a056 <quorem+0x9e>
 801a04c:	e007      	b.n	801a05e <quorem+0xa6>
 801a04e:	459a      	cmp	sl, r3
 801a050:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801a054:	d203      	bcs.n	801a05e <quorem+0xa6>
 801a056:	f853 2904 	ldr.w	r2, [r3], #-4
 801a05a:	2a00      	cmp	r2, #0
 801a05c:	d0f7      	beq.n	801a04e <quorem+0x96>
 801a05e:	f8cb 6010 	str.w	r6, [fp, #16]
 801a062:	4658      	mov	r0, fp
 801a064:	f001 feea 	bl	801be3c <__mcmp>
 801a068:	2800      	cmp	r0, #0
 801a06a:	db2b      	blt.n	801a0c4 <quorem+0x10c>
 801a06c:	f108 0801 	add.w	r8, r8, #1
 801a070:	4650      	mov	r0, sl
 801a072:	2300      	movs	r3, #0
 801a074:	f857 1b04 	ldr.w	r1, [r7], #4
 801a078:	6804      	ldr	r4, [r0, #0]
 801a07a:	b28a      	uxth	r2, r1
 801a07c:	1a9a      	subs	r2, r3, r2
 801a07e:	0c0b      	lsrs	r3, r1, #16
 801a080:	fa12 f284 	uxtah	r2, r2, r4
 801a084:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
 801a088:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801a08c:	b292      	uxth	r2, r2
 801a08e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a092:	45b9      	cmp	r9, r7
 801a094:	f840 2b04 	str.w	r2, [r0], #4
 801a098:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a09c:	d2ea      	bcs.n	801a074 <quorem+0xbc>
 801a09e:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
 801a0a2:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801a0a6:	b96a      	cbnz	r2, 801a0c4 <quorem+0x10c>
 801a0a8:	3b04      	subs	r3, #4
 801a0aa:	459a      	cmp	sl, r3
 801a0ac:	d304      	bcc.n	801a0b8 <quorem+0x100>
 801a0ae:	e007      	b.n	801a0c0 <quorem+0x108>
 801a0b0:	459a      	cmp	sl, r3
 801a0b2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801a0b6:	d203      	bcs.n	801a0c0 <quorem+0x108>
 801a0b8:	f853 2904 	ldr.w	r2, [r3], #-4
 801a0bc:	2a00      	cmp	r2, #0
 801a0be:	d0f7      	beq.n	801a0b0 <quorem+0xf8>
 801a0c0:	f8cb 6010 	str.w	r6, [fp, #16]
 801a0c4:	4640      	mov	r0, r8
 801a0c6:	b003      	add	sp, #12
 801a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0cc:	2000      	movs	r0, #0
 801a0ce:	b003      	add	sp, #12
 801a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d4:	0000      	movs	r0, r0
	...

0801a0d8 <_dtoa_r>:
 801a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0dc:	ed2d 8b04 	vpush	{d8-d9}
 801a0e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801a0e2:	b097      	sub	sp, #92	; 0x5c
 801a0e4:	4690      	mov	r8, r2
 801a0e6:	4699      	mov	r9, r3
 801a0e8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801a0ec:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	b141      	cbz	r1, 801a104 <_dtoa_r+0x2c>
 801a0f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a0f4:	604a      	str	r2, [r1, #4]
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	4093      	lsls	r3, r2
 801a0fa:	608b      	str	r3, [r1, #8]
 801a0fc:	f001 fc68 	bl	801b9d0 <_Bfree>
 801a100:	2300      	movs	r3, #0
 801a102:	6423      	str	r3, [r4, #64]	; 0x40
 801a104:	f1b9 0a00 	subs.w	sl, r9, #0
 801a108:	bfb4      	ite	lt
 801a10a:	2301      	movlt	r3, #1
 801a10c:	2300      	movge	r3, #0
 801a10e:	602b      	str	r3, [r5, #0]
 801a110:	4b77      	ldr	r3, [pc, #476]	; (801a2f0 <_dtoa_r+0x218>)
 801a112:	bfbc      	itt	lt
 801a114:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 801a118:	f8cd a01c 	strlt.w	sl, [sp, #28]
 801a11c:	ea33 030a 	bics.w	r3, r3, sl
 801a120:	f000 80ab 	beq.w	801a27a <_dtoa_r+0x1a2>
 801a124:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a128:	2200      	movs	r2, #0
 801a12a:	ec51 0b17 	vmov	r0, r1, d7
 801a12e:	2300      	movs	r3, #0
 801a130:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a134:	f7e6 ff88 	bl	8001048 <__aeabi_dcmpeq>
 801a138:	4607      	mov	r7, r0
 801a13a:	b180      	cbz	r0, 801a15e <_dtoa_r+0x86>
 801a13c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801a13e:	2301      	movs	r3, #1
 801a140:	6013      	str	r3, [r2, #0]
 801a142:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a144:	2b00      	cmp	r3, #0
 801a146:	f000 82de 	beq.w	801a706 <_dtoa_r+0x62e>
 801a14a:	486a      	ldr	r0, [pc, #424]	; (801a2f4 <_dtoa_r+0x21c>)
 801a14c:	6018      	str	r0, [r3, #0]
 801a14e:	1e43      	subs	r3, r0, #1
 801a150:	9303      	str	r3, [sp, #12]
 801a152:	9803      	ldr	r0, [sp, #12]
 801a154:	b017      	add	sp, #92	; 0x5c
 801a156:	ecbd 8b04 	vpop	{d8-d9}
 801a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a15e:	aa14      	add	r2, sp, #80	; 0x50
 801a160:	ab15      	add	r3, sp, #84	; 0x54
 801a162:	e9cd 3200 	strd	r3, r2, [sp]
 801a166:	4620      	mov	r0, r4
 801a168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a16c:	f001 ff28 	bl	801bfc0 <__d2b>
 801a170:	ea5f 561a 	movs.w	r6, sl, lsr #20
 801a174:	4605      	mov	r5, r0
 801a176:	f040 8098 	bne.w	801a2aa <_dtoa_r+0x1d2>
 801a17a:	e9dd 7614 	ldrd	r7, r6, [sp, #80]	; 0x50
 801a17e:	443e      	add	r6, r7
 801a180:	f206 4032 	addw	r0, r6, #1074	; 0x432
 801a184:	2820      	cmp	r0, #32
 801a186:	f340 83b3 	ble.w	801a8f0 <_dtoa_r+0x818>
 801a18a:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
 801a18e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 801a192:	fa0a fa03 	lsl.w	sl, sl, r3
 801a196:	fa28 f000 	lsr.w	r0, r8, r0
 801a19a:	ea4a 0000 	orr.w	r0, sl, r0
 801a19e:	f7e6 fc71 	bl	8000a84 <__aeabi_ui2d>
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	3e01      	subs	r6, #1
 801a1a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a1aa:	930e      	str	r3, [sp, #56]	; 0x38
 801a1ac:	4b52      	ldr	r3, [pc, #328]	; (801a2f8 <_dtoa_r+0x220>)
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	f7e6 fb2a 	bl	8000808 <__aeabi_dsub>
 801a1b4:	a348      	add	r3, pc, #288	; (adr r3, 801a2d8 <_dtoa_r+0x200>)
 801a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ba:	f7e6 fcdd 	bl	8000b78 <__aeabi_dmul>
 801a1be:	a348      	add	r3, pc, #288	; (adr r3, 801a2e0 <_dtoa_r+0x208>)
 801a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c4:	f7e6 fb22 	bl	800080c <__adddf3>
 801a1c8:	4680      	mov	r8, r0
 801a1ca:	4630      	mov	r0, r6
 801a1cc:	4689      	mov	r9, r1
 801a1ce:	f7e6 fc69 	bl	8000aa4 <__aeabi_i2d>
 801a1d2:	a345      	add	r3, pc, #276	; (adr r3, 801a2e8 <_dtoa_r+0x210>)
 801a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d8:	f7e6 fcce 	bl	8000b78 <__aeabi_dmul>
 801a1dc:	4602      	mov	r2, r0
 801a1de:	460b      	mov	r3, r1
 801a1e0:	4640      	mov	r0, r8
 801a1e2:	4649      	mov	r1, r9
 801a1e4:	f7e6 fb12 	bl	800080c <__adddf3>
 801a1e8:	4680      	mov	r8, r0
 801a1ea:	4689      	mov	r9, r1
 801a1ec:	f7e6 ff74 	bl	80010d8 <__aeabi_d2iz>
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	4683      	mov	fp, r0
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	4640      	mov	r0, r8
 801a1f8:	4649      	mov	r1, r9
 801a1fa:	f7e6 ff2f 	bl	800105c <__aeabi_dcmplt>
 801a1fe:	2800      	cmp	r0, #0
 801a200:	f040 8274 	bne.w	801a6ec <_dtoa_r+0x614>
 801a204:	f1bb 0f16 	cmp.w	fp, #22
 801a208:	f200 8263 	bhi.w	801a6d2 <_dtoa_r+0x5fa>
 801a20c:	4b3b      	ldr	r3, [pc, #236]	; (801a2fc <_dtoa_r+0x224>)
 801a20e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a21a:	f7e6 ff1f 	bl	800105c <__aeabi_dcmplt>
 801a21e:	2800      	cmp	r0, #0
 801a220:	d072      	beq.n	801a308 <_dtoa_r+0x230>
 801a222:	2300      	movs	r3, #0
 801a224:	1bbe      	subs	r6, r7, r6
 801a226:	930d      	str	r3, [sp, #52]	; 0x34
 801a228:	1e73      	subs	r3, r6, #1
 801a22a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a22e:	9308      	str	r3, [sp, #32]
 801a230:	f100 8256 	bmi.w	801a6e0 <_dtoa_r+0x608>
 801a234:	2300      	movs	r3, #0
 801a236:	930b      	str	r3, [sp, #44]	; 0x2c
 801a238:	f1bb 0f00 	cmp.w	fp, #0
 801a23c:	da6b      	bge.n	801a316 <_dtoa_r+0x23e>
 801a23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a240:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a244:	eba3 030b 	sub.w	r3, r3, fp
 801a248:	930b      	str	r3, [sp, #44]	; 0x2c
 801a24a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a24c:	2b09      	cmp	r3, #9
 801a24e:	f1cb 0a00 	rsb	sl, fp, #0
 801a252:	f04f 0b00 	mov.w	fp, #0
 801a256:	d867      	bhi.n	801a328 <_dtoa_r+0x250>
 801a258:	2b05      	cmp	r3, #5
 801a25a:	f340 8347 	ble.w	801a8ec <_dtoa_r+0x814>
 801a25e:	3b04      	subs	r3, #4
 801a260:	9324      	str	r3, [sp, #144]	; 0x90
 801a262:	2600      	movs	r6, #0
 801a264:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a266:	3b02      	subs	r3, #2
 801a268:	2b03      	cmp	r3, #3
 801a26a:	f200 86ac 	bhi.w	801afc6 <_dtoa_r+0xeee>
 801a26e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a272:	0462      	.short	0x0462
 801a274:	0456045f 	.word	0x0456045f
 801a278:	0439      	.short	0x0439
 801a27a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801a27c:	f242 730f 	movw	r3, #9999	; 0x270f
 801a280:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a284:	6013      	str	r3, [r2, #0]
 801a286:	ea5a 0308 	orrs.w	r3, sl, r8
 801a28a:	d11c      	bne.n	801a2c6 <_dtoa_r+0x1ee>
 801a28c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f000 8695 	beq.w	801afbe <_dtoa_r+0xee6>
 801a294:	4b1a      	ldr	r3, [pc, #104]	; (801a300 <_dtoa_r+0x228>)
 801a296:	9303      	str	r3, [sp, #12]
 801a298:	3308      	adds	r3, #8
 801a29a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a29c:	9803      	ldr	r0, [sp, #12]
 801a29e:	6013      	str	r3, [r2, #0]
 801a2a0:	b017      	add	sp, #92	; 0x5c
 801a2a2:	ecbd 8b04 	vpop	{d8-d9}
 801a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2aa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 801a2ae:	f3c2 0313 	ubfx	r3, r2, #0, #20
 801a2b2:	4608      	mov	r0, r1
 801a2b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801a2b8:	970e      	str	r7, [sp, #56]	; 0x38
 801a2ba:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 801a2be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801a2c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a2c4:	e772      	b.n	801a1ac <_dtoa_r+0xd4>
 801a2c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	f040 83ee 	bne.w	801aaaa <_dtoa_r+0x9d2>
 801a2ce:	4b0d      	ldr	r3, [pc, #52]	; (801a304 <_dtoa_r+0x22c>)
 801a2d0:	9303      	str	r3, [sp, #12]
 801a2d2:	e73e      	b.n	801a152 <_dtoa_r+0x7a>
 801a2d4:	f3af 8000 	nop.w
 801a2d8:	636f4361 	.word	0x636f4361
 801a2dc:	3fd287a7 	.word	0x3fd287a7
 801a2e0:	8b60c8b3 	.word	0x8b60c8b3
 801a2e4:	3fc68a28 	.word	0x3fc68a28
 801a2e8:	509f79fb 	.word	0x509f79fb
 801a2ec:	3fd34413 	.word	0x3fd34413
 801a2f0:	7ff00000 	.word	0x7ff00000
 801a2f4:	08020565 	.word	0x08020565
 801a2f8:	3ff80000 	.word	0x3ff80000
 801a2fc:	080206f0 	.word	0x080206f0
 801a300:	080205ac 	.word	0x080205ac
 801a304:	080205a8 	.word	0x080205a8
 801a308:	1bbe      	subs	r6, r7, r6
 801a30a:	1e73      	subs	r3, r6, #1
 801a30c:	9308      	str	r3, [sp, #32]
 801a30e:	f100 84e0 	bmi.w	801acd2 <_dtoa_r+0xbfa>
 801a312:	900d      	str	r0, [sp, #52]	; 0x34
 801a314:	900b      	str	r0, [sp, #44]	; 0x2c
 801a316:	9b08      	ldr	r3, [sp, #32]
 801a318:	445b      	add	r3, fp
 801a31a:	e9cd 3b08 	strd	r3, fp, [sp, #32]
 801a31e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a320:	2b09      	cmp	r3, #9
 801a322:	f04f 0a00 	mov.w	sl, #0
 801a326:	d997      	bls.n	801a258 <_dtoa_r+0x180>
 801a328:	2300      	movs	r3, #0
 801a32a:	2601      	movs	r6, #1
 801a32c:	9324      	str	r3, [sp, #144]	; 0x90
 801a32e:	9325      	str	r3, [sp, #148]	; 0x94
 801a330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a334:	960c      	str	r6, [sp, #48]	; 0x30
 801a336:	930a      	str	r3, [sp, #40]	; 0x28
 801a338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a33a:	9310      	str	r3, [sp, #64]	; 0x40
 801a33c:	2100      	movs	r1, #0
 801a33e:	6461      	str	r1, [r4, #68]	; 0x44
 801a340:	4620      	mov	r0, r4
 801a342:	f001 fb1f 	bl	801b984 <_Balloc>
 801a346:	9003      	str	r0, [sp, #12]
 801a348:	2800      	cmp	r0, #0
 801a34a:	f000 8644 	beq.w	801afd6 <_dtoa_r+0xefe>
 801a34e:	9b03      	ldr	r3, [sp, #12]
 801a350:	6423      	str	r3, [r4, #64]	; 0x40
 801a352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a354:	2b0e      	cmp	r3, #14
 801a356:	f200 8101 	bhi.w	801a55c <_dtoa_r+0x484>
 801a35a:	2e00      	cmp	r6, #0
 801a35c:	f000 80fe 	beq.w	801a55c <_dtoa_r+0x484>
 801a360:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a362:	2900      	cmp	r1, #0
 801a364:	f340 847f 	ble.w	801ac66 <_dtoa_r+0xb8e>
 801a368:	4bc2      	ldr	r3, [pc, #776]	; (801a674 <_dtoa_r+0x59c>)
 801a36a:	f001 020f 	and.w	r2, r1, #15
 801a36e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a372:	ea4f 1821 	mov.w	r8, r1, asr #4
 801a376:	05c9      	lsls	r1, r1, #23
 801a378:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a37c:	f140 8418 	bpl.w	801abb0 <_dtoa_r+0xad8>
 801a380:	4bbd      	ldr	r3, [pc, #756]	; (801a678 <_dtoa_r+0x5a0>)
 801a382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a386:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a38a:	f7e6 fd1f 	bl	8000dcc <__aeabi_ddiv>
 801a38e:	2303      	movs	r3, #3
 801a390:	ec41 0b18 	vmov	d8, r0, r1
 801a394:	f008 080f 	and.w	r8, r8, #15
 801a398:	930f      	str	r3, [sp, #60]	; 0x3c
 801a39a:	f1b8 0f00 	cmp.w	r8, #0
 801a39e:	d01d      	beq.n	801a3dc <_dtoa_r+0x304>
 801a3a0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801a3a4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801a678 <_dtoa_r+0x5a0>
 801a3a8:	46d3      	mov	fp, sl
 801a3aa:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801a3ae:	f018 0f01 	tst.w	r8, #1
 801a3b2:	d009      	beq.n	801a3c8 <_dtoa_r+0x2f0>
 801a3b4:	4630      	mov	r0, r6
 801a3b6:	4639      	mov	r1, r7
 801a3b8:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a3bc:	f7e6 fbdc 	bl	8000b78 <__aeabi_dmul>
 801a3c0:	f10a 0a01 	add.w	sl, sl, #1
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	460f      	mov	r7, r1
 801a3c8:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a3cc:	f109 0908 	add.w	r9, r9, #8
 801a3d0:	d1ed      	bne.n	801a3ae <_dtoa_r+0x2d6>
 801a3d2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801a3d6:	46da      	mov	sl, fp
 801a3d8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801a3dc:	ec51 0b18 	vmov	r0, r1, d8
 801a3e0:	4632      	mov	r2, r6
 801a3e2:	463b      	mov	r3, r7
 801a3e4:	f7e6 fcf2 	bl	8000dcc <__aeabi_ddiv>
 801a3e8:	4680      	mov	r8, r0
 801a3ea:	4689      	mov	r9, r1
 801a3ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3ee:	b143      	cbz	r3, 801a402 <_dtoa_r+0x32a>
 801a3f0:	4ba2      	ldr	r3, [pc, #648]	; (801a67c <_dtoa_r+0x5a4>)
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	4640      	mov	r0, r8
 801a3f6:	4649      	mov	r1, r9
 801a3f8:	f7e6 fe30 	bl	800105c <__aeabi_dcmplt>
 801a3fc:	2800      	cmp	r0, #0
 801a3fe:	f040 8565 	bne.w	801aecc <_dtoa_r+0xdf4>
 801a402:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a404:	f7e6 fb4e 	bl	8000aa4 <__aeabi_i2d>
 801a408:	4642      	mov	r2, r8
 801a40a:	464b      	mov	r3, r9
 801a40c:	f7e6 fbb4 	bl	8000b78 <__aeabi_dmul>
 801a410:	4b9b      	ldr	r3, [pc, #620]	; (801a680 <_dtoa_r+0x5a8>)
 801a412:	2200      	movs	r2, #0
 801a414:	f7e6 f9fa 	bl	800080c <__adddf3>
 801a418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a41a:	4606      	mov	r6, r0
 801a41c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801a420:	2b00      	cmp	r3, #0
 801a422:	f000 83ed 	beq.w	801ac00 <_dtoa_r+0xb28>
 801a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a428:	9311      	str	r3, [sp, #68]	; 0x44
 801a42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a42c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a430:	2b00      	cmp	r3, #0
 801a432:	f000 84d9 	beq.w	801ade8 <_dtoa_r+0xd10>
 801a436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a438:	4b8e      	ldr	r3, [pc, #568]	; (801a674 <_dtoa_r+0x59c>)
 801a43a:	4992      	ldr	r1, [pc, #584]	; (801a684 <_dtoa_r+0x5ac>)
 801a43c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a440:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a444:	2000      	movs	r0, #0
 801a446:	f7e6 fcc1 	bl	8000dcc <__aeabi_ddiv>
 801a44a:	4632      	mov	r2, r6
 801a44c:	463b      	mov	r3, r7
 801a44e:	f7e6 f9db 	bl	8000808 <__aeabi_dsub>
 801a452:	4606      	mov	r6, r0
 801a454:	460f      	mov	r7, r1
 801a456:	4640      	mov	r0, r8
 801a458:	4649      	mov	r1, r9
 801a45a:	f7e6 fe3d 	bl	80010d8 <__aeabi_d2iz>
 801a45e:	9012      	str	r0, [sp, #72]	; 0x48
 801a460:	f7e6 fb20 	bl	8000aa4 <__aeabi_i2d>
 801a464:	4602      	mov	r2, r0
 801a466:	460b      	mov	r3, r1
 801a468:	4640      	mov	r0, r8
 801a46a:	4649      	mov	r1, r9
 801a46c:	f7e6 f9cc 	bl	8000808 <__aeabi_dsub>
 801a470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a472:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a476:	ec47 6b18 	vmov	d8, r6, r7
 801a47a:	3330      	adds	r3, #48	; 0x30
 801a47c:	f808 3b01 	strb.w	r3, [r8], #1
 801a480:	4606      	mov	r6, r0
 801a482:	460f      	mov	r7, r1
 801a484:	4602      	mov	r2, r0
 801a486:	460b      	mov	r3, r1
 801a488:	ec51 0b18 	vmov	r0, r1, d8
 801a48c:	f7e6 fe04 	bl	8001098 <__aeabi_dcmpgt>
 801a490:	2800      	cmp	r0, #0
 801a492:	f040 8567 	bne.w	801af64 <_dtoa_r+0xe8c>
 801a496:	f04f 0900 	mov.w	r9, #0
 801a49a:	ee09 5a10 	vmov	s18, r5
 801a49e:	ee09 4a90 	vmov	s19, r4
 801a4a2:	4645      	mov	r5, r8
 801a4a4:	464c      	mov	r4, r9
 801a4a6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 801a4aa:	ec59 8b18 	vmov	r8, r9, d8
 801a4ae:	e02a      	b.n	801a506 <_dtoa_r+0x42e>
 801a4b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a4b2:	3401      	adds	r4, #1
 801a4b4:	429c      	cmp	r4, r3
 801a4b6:	da4b      	bge.n	801a550 <_dtoa_r+0x478>
 801a4b8:	4b73      	ldr	r3, [pc, #460]	; (801a688 <_dtoa_r+0x5b0>)
 801a4ba:	4640      	mov	r0, r8
 801a4bc:	4649      	mov	r1, r9
 801a4be:	2200      	movs	r2, #0
 801a4c0:	f7e6 fb5a 	bl	8000b78 <__aeabi_dmul>
 801a4c4:	4b70      	ldr	r3, [pc, #448]	; (801a688 <_dtoa_r+0x5b0>)
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	4680      	mov	r8, r0
 801a4ca:	4689      	mov	r9, r1
 801a4cc:	4630      	mov	r0, r6
 801a4ce:	4639      	mov	r1, r7
 801a4d0:	f7e6 fb52 	bl	8000b78 <__aeabi_dmul>
 801a4d4:	468b      	mov	fp, r1
 801a4d6:	4682      	mov	sl, r0
 801a4d8:	f7e6 fdfe 	bl	80010d8 <__aeabi_d2iz>
 801a4dc:	4607      	mov	r7, r0
 801a4de:	f7e6 fae1 	bl	8000aa4 <__aeabi_i2d>
 801a4e2:	4602      	mov	r2, r0
 801a4e4:	460b      	mov	r3, r1
 801a4e6:	4650      	mov	r0, sl
 801a4e8:	4659      	mov	r1, fp
 801a4ea:	f7e6 f98d 	bl	8000808 <__aeabi_dsub>
 801a4ee:	3730      	adds	r7, #48	; 0x30
 801a4f0:	f805 7b01 	strb.w	r7, [r5], #1
 801a4f4:	4642      	mov	r2, r8
 801a4f6:	464b      	mov	r3, r9
 801a4f8:	4606      	mov	r6, r0
 801a4fa:	460f      	mov	r7, r1
 801a4fc:	f7e6 fdae 	bl	800105c <__aeabi_dcmplt>
 801a500:	2800      	cmp	r0, #0
 801a502:	f040 852a 	bne.w	801af5a <_dtoa_r+0xe82>
 801a506:	4632      	mov	r2, r6
 801a508:	463b      	mov	r3, r7
 801a50a:	495c      	ldr	r1, [pc, #368]	; (801a67c <_dtoa_r+0x5a4>)
 801a50c:	2000      	movs	r0, #0
 801a50e:	f7e6 f97b 	bl	8000808 <__aeabi_dsub>
 801a512:	4642      	mov	r2, r8
 801a514:	464b      	mov	r3, r9
 801a516:	f7e6 fda1 	bl	800105c <__aeabi_dcmplt>
 801a51a:	2800      	cmp	r0, #0
 801a51c:	d0c8      	beq.n	801a4b0 <_dtoa_r+0x3d8>
 801a51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a520:	9a03      	ldr	r2, [sp, #12]
 801a522:	9309      	str	r3, [sp, #36]	; 0x24
 801a524:	46a8      	mov	r8, r5
 801a526:	ee19 4a90 	vmov	r4, s19
 801a52a:	ee19 5a10 	vmov	r5, s18
 801a52e:	e002      	b.n	801a536 <_dtoa_r+0x45e>
 801a530:	4590      	cmp	r8, r2
 801a532:	f000 84f7 	beq.w	801af24 <_dtoa_r+0xe4c>
 801a536:	46c1      	mov	r9, r8
 801a538:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 801a53c:	2b39      	cmp	r3, #57	; 0x39
 801a53e:	d0f7      	beq.n	801a530 <_dtoa_r+0x458>
 801a540:	3301      	adds	r3, #1
 801a542:	b2db      	uxtb	r3, r3
 801a544:	f888 3000 	strb.w	r3, [r8]
 801a548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a54a:	3301      	adds	r3, #1
 801a54c:	9309      	str	r3, [sp, #36]	; 0x24
 801a54e:	e1ad      	b.n	801a8ac <_dtoa_r+0x7d4>
 801a550:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 801a554:	ee19 5a10 	vmov	r5, s18
 801a558:	ee19 4a90 	vmov	r4, s19
 801a55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a55e:	2b00      	cmp	r3, #0
 801a560:	f2c0 8096 	blt.w	801a690 <_dtoa_r+0x5b8>
 801a564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a566:	2a0e      	cmp	r2, #14
 801a568:	f300 8092 	bgt.w	801a690 <_dtoa_r+0x5b8>
 801a56c:	4b41      	ldr	r3, [pc, #260]	; (801a674 <_dtoa_r+0x59c>)
 801a56e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a572:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801a576:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a578:	2b00      	cmp	r3, #0
 801a57a:	da1b      	bge.n	801a5b4 <_dtoa_r+0x4dc>
 801a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a57e:	2b00      	cmp	r3, #0
 801a580:	dc18      	bgt.n	801a5b4 <_dtoa_r+0x4dc>
 801a582:	f040 8356 	bne.w	801ac32 <_dtoa_r+0xb5a>
 801a586:	4b41      	ldr	r3, [pc, #260]	; (801a68c <_dtoa_r+0x5b4>)
 801a588:	4650      	mov	r0, sl
 801a58a:	2200      	movs	r2, #0
 801a58c:	4659      	mov	r1, fp
 801a58e:	f7e6 faf3 	bl	8000b78 <__aeabi_dmul>
 801a592:	4602      	mov	r2, r0
 801a594:	460b      	mov	r3, r1
 801a596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a59a:	f7e6 fd69 	bl	8001070 <__aeabi_dcmple>
 801a59e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801a5a2:	4656      	mov	r6, sl
 801a5a4:	2800      	cmp	r0, #0
 801a5a6:	f000 82de 	beq.w	801ab66 <_dtoa_r+0xa8e>
 801a5aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a5ac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a5b0:	43df      	mvns	r7, r3
 801a5b2:	e2e1      	b.n	801ab78 <_dtoa_r+0xaa0>
 801a5b4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801a5b8:	4652      	mov	r2, sl
 801a5ba:	465b      	mov	r3, fp
 801a5bc:	4630      	mov	r0, r6
 801a5be:	4639      	mov	r1, r7
 801a5c0:	f7e6 fc04 	bl	8000dcc <__aeabi_ddiv>
 801a5c4:	f7e6 fd88 	bl	80010d8 <__aeabi_d2iz>
 801a5c8:	4681      	mov	r9, r0
 801a5ca:	f7e6 fa6b 	bl	8000aa4 <__aeabi_i2d>
 801a5ce:	4652      	mov	r2, sl
 801a5d0:	465b      	mov	r3, fp
 801a5d2:	f7e6 fad1 	bl	8000b78 <__aeabi_dmul>
 801a5d6:	460b      	mov	r3, r1
 801a5d8:	4602      	mov	r2, r0
 801a5da:	4639      	mov	r1, r7
 801a5dc:	4630      	mov	r0, r6
 801a5de:	f7e6 f913 	bl	8000808 <__aeabi_dsub>
 801a5e2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a5e6:	464b      	mov	r3, r9
 801a5e8:	3330      	adds	r3, #48	; 0x30
 801a5ea:	f808 3b01 	strb.w	r3, [r8], #1
 801a5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5f0:	2b01      	cmp	r3, #1
 801a5f2:	f000 839f 	beq.w	801ad34 <_dtoa_r+0xc5c>
 801a5f6:	f04f 0901 	mov.w	r9, #1
 801a5fa:	ee08 5a10 	vmov	s16, r5
 801a5fe:	ee08 4a90 	vmov	s17, r4
 801a602:	461d      	mov	r5, r3
 801a604:	4644      	mov	r4, r8
 801a606:	46c8      	mov	r8, r9
 801a608:	e01d      	b.n	801a646 <_dtoa_r+0x56e>
 801a60a:	4652      	mov	r2, sl
 801a60c:	465b      	mov	r3, fp
 801a60e:	4630      	mov	r0, r6
 801a610:	4639      	mov	r1, r7
 801a612:	f7e6 fbdb 	bl	8000dcc <__aeabi_ddiv>
 801a616:	f7e6 fd5f 	bl	80010d8 <__aeabi_d2iz>
 801a61a:	4681      	mov	r9, r0
 801a61c:	f7e6 fa42 	bl	8000aa4 <__aeabi_i2d>
 801a620:	4652      	mov	r2, sl
 801a622:	465b      	mov	r3, fp
 801a624:	f7e6 faa8 	bl	8000b78 <__aeabi_dmul>
 801a628:	f108 0801 	add.w	r8, r8, #1
 801a62c:	460b      	mov	r3, r1
 801a62e:	4602      	mov	r2, r0
 801a630:	4639      	mov	r1, r7
 801a632:	4630      	mov	r0, r6
 801a634:	f7e6 f8e8 	bl	8000808 <__aeabi_dsub>
 801a638:	f109 0330 	add.w	r3, r9, #48	; 0x30
 801a63c:	4545      	cmp	r5, r8
 801a63e:	f804 3b01 	strb.w	r3, [r4], #1
 801a642:	f000 8372 	beq.w	801ad2a <_dtoa_r+0xc52>
 801a646:	4b10      	ldr	r3, [pc, #64]	; (801a688 <_dtoa_r+0x5b0>)
 801a648:	2200      	movs	r2, #0
 801a64a:	f7e6 fa95 	bl	8000b78 <__aeabi_dmul>
 801a64e:	2200      	movs	r2, #0
 801a650:	2300      	movs	r3, #0
 801a652:	4606      	mov	r6, r0
 801a654:	460f      	mov	r7, r1
 801a656:	f7e6 fcf7 	bl	8001048 <__aeabi_dcmpeq>
 801a65a:	2800      	cmp	r0, #0
 801a65c:	d0d5      	beq.n	801a60a <_dtoa_r+0x532>
 801a65e:	46a0      	mov	r8, r4
 801a660:	ee18 5a10 	vmov	r5, s16
 801a664:	ee18 4a90 	vmov	r4, s17
 801a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a66a:	3301      	adds	r3, #1
 801a66c:	9309      	str	r3, [sp, #36]	; 0x24
 801a66e:	46c1      	mov	r9, r8
 801a670:	e11c      	b.n	801a8ac <_dtoa_r+0x7d4>
 801a672:	bf00      	nop
 801a674:	080206f0 	.word	0x080206f0
 801a678:	080206c8 	.word	0x080206c8
 801a67c:	3ff00000 	.word	0x3ff00000
 801a680:	401c0000 	.word	0x401c0000
 801a684:	3fe00000 	.word	0x3fe00000
 801a688:	40240000 	.word	0x40240000
 801a68c:	40140000 	.word	0x40140000
 801a690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a692:	2a00      	cmp	r2, #0
 801a694:	d03f      	beq.n	801a716 <_dtoa_r+0x63e>
 801a696:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a698:	2a01      	cmp	r2, #1
 801a69a:	f340 82ce 	ble.w	801ac3a <_dtoa_r+0xb62>
 801a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6a0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801a6a4:	45c2      	cmp	sl, r8
 801a6a6:	f2c0 827c 	blt.w	801aba2 <_dtoa_r+0xaca>
 801a6aa:	ebaa 0808 	sub.w	r8, sl, r8
 801a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	f2c0 8371 	blt.w	801ad98 <_dtoa_r+0xcc0>
 801a6b6:	9a08      	ldr	r2, [sp, #32]
 801a6b8:	4611      	mov	r1, r2
 801a6ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6bc:	4419      	add	r1, r3
 801a6be:	4617      	mov	r7, r2
 801a6c0:	441a      	add	r2, r3
 801a6c2:	9108      	str	r1, [sp, #32]
 801a6c4:	920b      	str	r2, [sp, #44]	; 0x2c
 801a6c6:	2101      	movs	r1, #1
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	f001 fa31 	bl	801bb30 <__i2b>
 801a6ce:	4606      	mov	r6, r0
 801a6d0:	e024      	b.n	801a71c <_dtoa_r+0x644>
 801a6d2:	2301      	movs	r3, #1
 801a6d4:	1bbe      	subs	r6, r7, r6
 801a6d6:	930d      	str	r3, [sp, #52]	; 0x34
 801a6d8:	1e73      	subs	r3, r6, #1
 801a6da:	9308      	str	r3, [sp, #32]
 801a6dc:	f57f adaa 	bpl.w	801a234 <_dtoa_r+0x15c>
 801a6e0:	f1c6 0301 	rsb	r3, r6, #1
 801a6e4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	9308      	str	r3, [sp, #32]
 801a6ea:	e5a5      	b.n	801a238 <_dtoa_r+0x160>
 801a6ec:	4658      	mov	r0, fp
 801a6ee:	f7e6 f9d9 	bl	8000aa4 <__aeabi_i2d>
 801a6f2:	4642      	mov	r2, r8
 801a6f4:	464b      	mov	r3, r9
 801a6f6:	f7e6 fca7 	bl	8001048 <__aeabi_dcmpeq>
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	f47f ad82 	bne.w	801a204 <_dtoa_r+0x12c>
 801a700:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a704:	e57e      	b.n	801a204 <_dtoa_r+0x12c>
 801a706:	4bcb      	ldr	r3, [pc, #812]	; (801aa34 <_dtoa_r+0x95c>)
 801a708:	9303      	str	r3, [sp, #12]
 801a70a:	9803      	ldr	r0, [sp, #12]
 801a70c:	b017      	add	sp, #92	; 0x5c
 801a70e:	ecbd 8b04 	vpop	{d8-d9}
 801a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a716:	e9dd 760b 	ldrd	r7, r6, [sp, #44]	; 0x2c
 801a71a:	46d0      	mov	r8, sl
 801a71c:	2f00      	cmp	r7, #0
 801a71e:	dd0c      	ble.n	801a73a <_dtoa_r+0x662>
 801a720:	9a08      	ldr	r2, [sp, #32]
 801a722:	2a00      	cmp	r2, #0
 801a724:	dd09      	ble.n	801a73a <_dtoa_r+0x662>
 801a726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a728:	42ba      	cmp	r2, r7
 801a72a:	4613      	mov	r3, r2
 801a72c:	bfa8      	it	ge
 801a72e:	463b      	movge	r3, r7
 801a730:	1ac9      	subs	r1, r1, r3
 801a732:	1aff      	subs	r7, r7, r3
 801a734:	1ad3      	subs	r3, r2, r3
 801a736:	910b      	str	r1, [sp, #44]	; 0x2c
 801a738:	9308      	str	r3, [sp, #32]
 801a73a:	f1ba 0f00 	cmp.w	sl, #0
 801a73e:	d01b      	beq.n	801a778 <_dtoa_r+0x6a0>
 801a740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a742:	2b00      	cmp	r3, #0
 801a744:	f000 81aa 	beq.w	801aa9c <_dtoa_r+0x9c4>
 801a748:	f1b8 0f00 	cmp.w	r8, #0
 801a74c:	dd10      	ble.n	801a770 <_dtoa_r+0x698>
 801a74e:	4631      	mov	r1, r6
 801a750:	4642      	mov	r2, r8
 801a752:	4620      	mov	r0, r4
 801a754:	f001 fab2 	bl	801bcbc <__pow5mult>
 801a758:	462a      	mov	r2, r5
 801a75a:	4601      	mov	r1, r0
 801a75c:	4606      	mov	r6, r0
 801a75e:	4620      	mov	r0, r4
 801a760:	f001 f9fc 	bl	801bb5c <__multiply>
 801a764:	4629      	mov	r1, r5
 801a766:	4603      	mov	r3, r0
 801a768:	4620      	mov	r0, r4
 801a76a:	461d      	mov	r5, r3
 801a76c:	f001 f930 	bl	801b9d0 <_Bfree>
 801a770:	ebba 0208 	subs.w	r2, sl, r8
 801a774:	f040 8193 	bne.w	801aa9e <_dtoa_r+0x9c6>
 801a778:	2101      	movs	r1, #1
 801a77a:	4620      	mov	r0, r4
 801a77c:	f001 f9d8 	bl	801bb30 <__i2b>
 801a780:	f1bb 0f00 	cmp.w	fp, #0
 801a784:	4682      	mov	sl, r0
 801a786:	f300 80b8 	bgt.w	801a8fa <_dtoa_r+0x822>
 801a78a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a78c:	2b01      	cmp	r3, #1
 801a78e:	f340 8191 	ble.w	801aab4 <_dtoa_r+0x9dc>
 801a792:	f04f 0900 	mov.w	r9, #0
 801a796:	2001      	movs	r0, #1
 801a798:	f1bb 0f00 	cmp.w	fp, #0
 801a79c:	f040 80b9 	bne.w	801a912 <_dtoa_r+0x83a>
 801a7a0:	9a08      	ldr	r2, [sp, #32]
 801a7a2:	4410      	add	r0, r2
 801a7a4:	f010 001f 	ands.w	r0, r0, #31
 801a7a8:	f000 8097 	beq.w	801a8da <_dtoa_r+0x802>
 801a7ac:	f1c0 0320 	rsb	r3, r0, #32
 801a7b0:	2b04      	cmp	r3, #4
 801a7b2:	f340 8417 	ble.w	801afe4 <_dtoa_r+0xf0c>
 801a7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7b8:	f1c0 001c 	rsb	r0, r0, #28
 801a7bc:	4403      	add	r3, r0
 801a7be:	4402      	add	r2, r0
 801a7c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a7c2:	4407      	add	r7, r0
 801a7c4:	9208      	str	r2, [sp, #32]
 801a7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	dd05      	ble.n	801a7d8 <_dtoa_r+0x700>
 801a7cc:	4629      	mov	r1, r5
 801a7ce:	461a      	mov	r2, r3
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	f001 fabf 	bl	801bd54 <__lshift>
 801a7d6:	4605      	mov	r5, r0
 801a7d8:	9b08      	ldr	r3, [sp, #32]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	dd05      	ble.n	801a7ea <_dtoa_r+0x712>
 801a7de:	4651      	mov	r1, sl
 801a7e0:	461a      	mov	r2, r3
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	f001 fab6 	bl	801bd54 <__lshift>
 801a7e8:	4682      	mov	sl, r0
 801a7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	f040 813a 	bne.w	801aa66 <_dtoa_r+0x98e>
 801a7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	f340 811f 	ble.w	801aa38 <_dtoa_r+0x960>
 801a7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	f040 809f 	bne.w	801a940 <_dtoa_r+0x868>
 801a802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a804:	3301      	adds	r3, #1
 801a806:	9309      	str	r3, [sp, #36]	; 0x24
 801a808:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a80c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801a810:	2701      	movs	r7, #1
 801a812:	e007      	b.n	801a824 <_dtoa_r+0x74c>
 801a814:	4629      	mov	r1, r5
 801a816:	2300      	movs	r3, #0
 801a818:	220a      	movs	r2, #10
 801a81a:	4620      	mov	r0, r4
 801a81c:	f001 f8e2 	bl	801b9e4 <__multadd>
 801a820:	3701      	adds	r7, #1
 801a822:	4605      	mov	r5, r0
 801a824:	4651      	mov	r1, sl
 801a826:	4628      	mov	r0, r5
 801a828:	f7ff fbc6 	bl	8019fb8 <quorem>
 801a82c:	454f      	cmp	r7, r9
 801a82e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 801a832:	f808 0b01 	strb.w	r0, [r8], #1
 801a836:	dbed      	blt.n	801a814 <_dtoa_r+0x73c>
 801a838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a83a:	2a00      	cmp	r2, #0
 801a83c:	bfc8      	it	gt
 801a83e:	4693      	movgt	fp, r2
 801a840:	9a03      	ldr	r2, [sp, #12]
 801a842:	bfd8      	it	le
 801a844:	f04f 0b01 	movle.w	fp, #1
 801a848:	4603      	mov	r3, r0
 801a84a:	4493      	add	fp, r2
 801a84c:	2700      	movs	r7, #0
 801a84e:	4629      	mov	r1, r5
 801a850:	2201      	movs	r2, #1
 801a852:	4620      	mov	r0, r4
 801a854:	9304      	str	r3, [sp, #16]
 801a856:	f001 fa7d 	bl	801bd54 <__lshift>
 801a85a:	4651      	mov	r1, sl
 801a85c:	4605      	mov	r5, r0
 801a85e:	f001 faed 	bl	801be3c <__mcmp>
 801a862:	2800      	cmp	r0, #0
 801a864:	f340 81b3 	ble.w	801abce <_dtoa_r+0xaf6>
 801a868:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 801a86c:	9a03      	ldr	r2, [sp, #12]
 801a86e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a872:	e004      	b.n	801a87e <_dtoa_r+0x7a6>
 801a874:	455a      	cmp	r2, fp
 801a876:	f000 81ef 	beq.w	801ac58 <_dtoa_r+0xb80>
 801a87a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 801a87e:	2b39      	cmp	r3, #57	; 0x39
 801a880:	f10b 0901 	add.w	r9, fp, #1
 801a884:	d0f6      	beq.n	801a874 <_dtoa_r+0x79c>
 801a886:	3301      	adds	r3, #1
 801a888:	f88b 3000 	strb.w	r3, [fp]
 801a88c:	4651      	mov	r1, sl
 801a88e:	4620      	mov	r0, r4
 801a890:	f001 f89e 	bl	801b9d0 <_Bfree>
 801a894:	b156      	cbz	r6, 801a8ac <_dtoa_r+0x7d4>
 801a896:	b12f      	cbz	r7, 801a8a4 <_dtoa_r+0x7cc>
 801a898:	42b7      	cmp	r7, r6
 801a89a:	d003      	beq.n	801a8a4 <_dtoa_r+0x7cc>
 801a89c:	4639      	mov	r1, r7
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f001 f896 	bl	801b9d0 <_Bfree>
 801a8a4:	4631      	mov	r1, r6
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	f001 f892 	bl	801b9d0 <_Bfree>
 801a8ac:	4629      	mov	r1, r5
 801a8ae:	4620      	mov	r0, r4
 801a8b0:	f001 f88e 	bl	801b9d0 <_Bfree>
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	f889 3000 	strb.w	r3, [r9]
 801a8ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a8bc:	461a      	mov	r2, r3
 801a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8c0:	6013      	str	r3, [r2, #0]
 801a8c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	f43f ac44 	beq.w	801a152 <_dtoa_r+0x7a>
 801a8ca:	9803      	ldr	r0, [sp, #12]
 801a8cc:	f8c3 9000 	str.w	r9, [r3]
 801a8d0:	b017      	add	sp, #92	; 0x5c
 801a8d2:	ecbd 8b04 	vpop	{d8-d9}
 801a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8da:	201c      	movs	r0, #28
 801a8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8de:	4403      	add	r3, r0
 801a8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a8e2:	9b08      	ldr	r3, [sp, #32]
 801a8e4:	4403      	add	r3, r0
 801a8e6:	4407      	add	r7, r0
 801a8e8:	9308      	str	r3, [sp, #32]
 801a8ea:	e76c      	b.n	801a7c6 <_dtoa_r+0x6ee>
 801a8ec:	2601      	movs	r6, #1
 801a8ee:	e4b9      	b.n	801a264 <_dtoa_r+0x18c>
 801a8f0:	f1c0 0020 	rsb	r0, r0, #32
 801a8f4:	fa08 f000 	lsl.w	r0, r8, r0
 801a8f8:	e451      	b.n	801a19e <_dtoa_r+0xc6>
 801a8fa:	4601      	mov	r1, r0
 801a8fc:	465a      	mov	r2, fp
 801a8fe:	4620      	mov	r0, r4
 801a900:	f001 f9dc 	bl	801bcbc <__pow5mult>
 801a904:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a906:	2b01      	cmp	r3, #1
 801a908:	4682      	mov	sl, r0
 801a90a:	f340 81e4 	ble.w	801acd6 <_dtoa_r+0xbfe>
 801a90e:	f04f 0900 	mov.w	r9, #0
 801a912:	f8da 3010 	ldr.w	r3, [sl, #16]
 801a916:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801a91a:	6918      	ldr	r0, [r3, #16]
 801a91c:	f001 f8b8 	bl	801ba90 <__hi0bits>
 801a920:	f1c0 0020 	rsb	r0, r0, #32
 801a924:	e73c      	b.n	801a7a0 <_dtoa_r+0x6c8>
 801a926:	4631      	mov	r1, r6
 801a928:	2300      	movs	r3, #0
 801a92a:	220a      	movs	r2, #10
 801a92c:	4620      	mov	r0, r4
 801a92e:	f001 f859 	bl	801b9e4 <__multadd>
 801a932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a934:	2b00      	cmp	r3, #0
 801a936:	4606      	mov	r6, r0
 801a938:	f340 832d 	ble.w	801af96 <_dtoa_r+0xebe>
 801a93c:	e9cd 8309 	strd	r8, r3, [sp, #36]	; 0x24
 801a940:	2f00      	cmp	r7, #0
 801a942:	f300 8127 	bgt.w	801ab94 <_dtoa_r+0xabc>
 801a946:	f1b9 0f00 	cmp.w	r9, #0
 801a94a:	f040 820e 	bne.w	801ad6a <_dtoa_r+0xc92>
 801a94e:	46b0      	mov	r8, r6
 801a950:	9b06      	ldr	r3, [sp, #24]
 801a952:	9924      	ldr	r1, [sp, #144]	; 0x90
 801a954:	9f03      	ldr	r7, [sp, #12]
 801a956:	f003 0201 	and.w	r2, r3, #1
 801a95a:	920c      	str	r2, [sp, #48]	; 0x30
 801a95c:	430a      	orrs	r2, r1
 801a95e:	920b      	str	r2, [sp, #44]	; 0x2c
 801a960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a962:	1e7b      	subs	r3, r7, #1
 801a964:	441a      	add	r2, r3
 801a966:	920a      	str	r2, [sp, #40]	; 0x28
 801a968:	4651      	mov	r1, sl
 801a96a:	4628      	mov	r0, r5
 801a96c:	f7ff fb24 	bl	8019fb8 <quorem>
 801a970:	4631      	mov	r1, r6
 801a972:	4683      	mov	fp, r0
 801a974:	4628      	mov	r0, r5
 801a976:	f001 fa61 	bl	801be3c <__mcmp>
 801a97a:	4642      	mov	r2, r8
 801a97c:	4651      	mov	r1, sl
 801a97e:	4681      	mov	r9, r0
 801a980:	4620      	mov	r0, r4
 801a982:	f001 fa79 	bl	801be78 <__mdiff>
 801a986:	68c2      	ldr	r2, [r0, #12]
 801a988:	4601      	mov	r1, r0
 801a98a:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 801a98e:	2a00      	cmp	r2, #0
 801a990:	d142      	bne.n	801aa18 <_dtoa_r+0x940>
 801a992:	9006      	str	r0, [sp, #24]
 801a994:	4628      	mov	r0, r5
 801a996:	9308      	str	r3, [sp, #32]
 801a998:	f001 fa50 	bl	801be3c <__mcmp>
 801a99c:	9906      	ldr	r1, [sp, #24]
 801a99e:	9004      	str	r0, [sp, #16]
 801a9a0:	4620      	mov	r0, r4
 801a9a2:	f001 f815 	bl	801b9d0 <_Bfree>
 801a9a6:	9a04      	ldr	r2, [sp, #16]
 801a9a8:	9b08      	ldr	r3, [sp, #32]
 801a9aa:	b91a      	cbnz	r2, 801a9b4 <_dtoa_r+0x8dc>
 801a9ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a9ae:	2900      	cmp	r1, #0
 801a9b0:	f000 82e3 	beq.w	801af7a <_dtoa_r+0xea2>
 801a9b4:	f1b9 0f00 	cmp.w	r9, #0
 801a9b8:	f2c0 8199 	blt.w	801acee <_dtoa_r+0xc16>
 801a9bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801a9be:	ea41 0909 	orr.w	r9, r1, r9
 801a9c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a9c4:	ea51 0109 	orrs.w	r1, r1, r9
 801a9c8:	f000 8191 	beq.w	801acee <_dtoa_r+0xc16>
 801a9cc:	2a00      	cmp	r2, #0
 801a9ce:	f300 81e7 	bgt.w	801ada0 <_dtoa_r+0xcc8>
 801a9d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9d4:	703b      	strb	r3, [r7, #0]
 801a9d6:	f107 0901 	add.w	r9, r7, #1
 801a9da:	4297      	cmp	r7, r2
 801a9dc:	46cb      	mov	fp, r9
 801a9de:	f000 81f9 	beq.w	801add4 <_dtoa_r+0xcfc>
 801a9e2:	4629      	mov	r1, r5
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	220a      	movs	r2, #10
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f000 fffb 	bl	801b9e4 <__multadd>
 801a9ee:	4546      	cmp	r6, r8
 801a9f0:	4605      	mov	r5, r0
 801a9f2:	4631      	mov	r1, r6
 801a9f4:	f04f 0300 	mov.w	r3, #0
 801a9f8:	f04f 020a 	mov.w	r2, #10
 801a9fc:	4620      	mov	r0, r4
 801a9fe:	d012      	beq.n	801aa26 <_dtoa_r+0x94e>
 801aa00:	f000 fff0 	bl	801b9e4 <__multadd>
 801aa04:	4641      	mov	r1, r8
 801aa06:	4606      	mov	r6, r0
 801aa08:	2300      	movs	r3, #0
 801aa0a:	220a      	movs	r2, #10
 801aa0c:	4620      	mov	r0, r4
 801aa0e:	f000 ffe9 	bl	801b9e4 <__multadd>
 801aa12:	464f      	mov	r7, r9
 801aa14:	4680      	mov	r8, r0
 801aa16:	e7a7      	b.n	801a968 <_dtoa_r+0x890>
 801aa18:	4620      	mov	r0, r4
 801aa1a:	9304      	str	r3, [sp, #16]
 801aa1c:	f000 ffd8 	bl	801b9d0 <_Bfree>
 801aa20:	9b04      	ldr	r3, [sp, #16]
 801aa22:	2201      	movs	r2, #1
 801aa24:	e7c6      	b.n	801a9b4 <_dtoa_r+0x8dc>
 801aa26:	f000 ffdd 	bl	801b9e4 <__multadd>
 801aa2a:	464f      	mov	r7, r9
 801aa2c:	4606      	mov	r6, r0
 801aa2e:	4680      	mov	r8, r0
 801aa30:	e79a      	b.n	801a968 <_dtoa_r+0x890>
 801aa32:	bf00      	nop
 801aa34:	08020564 	.word	0x08020564
 801aa38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aa3a:	2b02      	cmp	r3, #2
 801aa3c:	f300 8082 	bgt.w	801ab44 <_dtoa_r+0xa6c>
 801aa40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	f47f af7c 	bne.w	801a940 <_dtoa_r+0x868>
 801aa48:	4651      	mov	r1, sl
 801aa4a:	4628      	mov	r0, r5
 801aa4c:	f7ff fab4 	bl	8019fb8 <quorem>
 801aa50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa52:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801aa56:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801aa5a:	3201      	adds	r2, #1
 801aa5c:	f80b 3b01 	strb.w	r3, [fp], #1
 801aa60:	9209      	str	r2, [sp, #36]	; 0x24
 801aa62:	2700      	movs	r7, #0
 801aa64:	e6f3      	b.n	801a84e <_dtoa_r+0x776>
 801aa66:	4651      	mov	r1, sl
 801aa68:	4628      	mov	r0, r5
 801aa6a:	f001 f9e7 	bl	801be3c <__mcmp>
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	f6bf aebf 	bge.w	801a7f2 <_dtoa_r+0x71a>
 801aa74:	4629      	mov	r1, r5
 801aa76:	2300      	movs	r3, #0
 801aa78:	220a      	movs	r2, #10
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	f000 ffb2 	bl	801b9e4 <__multadd>
 801aa80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801aa86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa88:	4605      	mov	r5, r0
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	f47f af4b 	bne.w	801a926 <_dtoa_r+0x84e>
 801aa90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	f340 8278 	ble.w	801af88 <_dtoa_r+0xeb0>
 801aa98:	930a      	str	r3, [sp, #40]	; 0x28
 801aa9a:	e6b5      	b.n	801a808 <_dtoa_r+0x730>
 801aa9c:	4652      	mov	r2, sl
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	4620      	mov	r0, r4
 801aaa2:	f001 f90b 	bl	801bcbc <__pow5mult>
 801aaa6:	4605      	mov	r5, r0
 801aaa8:	e666      	b.n	801a778 <_dtoa_r+0x6a0>
 801aaaa:	4bc4      	ldr	r3, [pc, #784]	; (801adbc <_dtoa_r+0xce4>)
 801aaac:	9303      	str	r3, [sp, #12]
 801aaae:	3303      	adds	r3, #3
 801aab0:	f7ff bbf3 	b.w	801a29a <_dtoa_r+0x1c2>
 801aab4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801aab8:	2900      	cmp	r1, #0
 801aaba:	f47f ae6a 	bne.w	801a792 <_dtoa_r+0x6ba>
 801aabe:	f3c2 0313 	ubfx	r3, r2, #0, #20
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	f47f ae65 	bne.w	801a792 <_dtoa_r+0x6ba>
 801aac8:	4bbd      	ldr	r3, [pc, #756]	; (801adc0 <_dtoa_r+0xce8>)
 801aaca:	4013      	ands	r3, r2
 801aacc:	2b00      	cmp	r3, #0
 801aace:	f000 823d 	beq.w	801af4c <_dtoa_r+0xe74>
 801aad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aad4:	3301      	adds	r3, #1
 801aad6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aad8:	9b08      	ldr	r3, [sp, #32]
 801aada:	3301      	adds	r3, #1
 801aadc:	9308      	str	r3, [sp, #32]
 801aade:	f04f 0901 	mov.w	r9, #1
 801aae2:	e658      	b.n	801a796 <_dtoa_r+0x6be>
 801aae4:	2301      	movs	r3, #1
 801aae6:	930c      	str	r3, [sp, #48]	; 0x30
 801aae8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801aaea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aaec:	4413      	add	r3, r2
 801aaee:	9310      	str	r3, [sp, #64]	; 0x40
 801aaf0:	3301      	adds	r3, #1
 801aaf2:	2b01      	cmp	r3, #1
 801aaf4:	461f      	mov	r7, r3
 801aaf6:	930a      	str	r3, [sp, #40]	; 0x28
 801aaf8:	bfb8      	it	lt
 801aafa:	2701      	movlt	r7, #1
 801aafc:	2100      	movs	r1, #0
 801aafe:	2f17      	cmp	r7, #23
 801ab00:	6461      	str	r1, [r4, #68]	; 0x44
 801ab02:	f77f ac1d 	ble.w	801a340 <_dtoa_r+0x268>
 801ab06:	2201      	movs	r2, #1
 801ab08:	2304      	movs	r3, #4
 801ab0a:	005b      	lsls	r3, r3, #1
 801ab0c:	f103 0014 	add.w	r0, r3, #20
 801ab10:	42b8      	cmp	r0, r7
 801ab12:	4611      	mov	r1, r2
 801ab14:	f102 0201 	add.w	r2, r2, #1
 801ab18:	d9f7      	bls.n	801ab0a <_dtoa_r+0xa32>
 801ab1a:	6461      	str	r1, [r4, #68]	; 0x44
 801ab1c:	e410      	b.n	801a340 <_dtoa_r+0x268>
 801ab1e:	2301      	movs	r3, #1
 801ab20:	930c      	str	r3, [sp, #48]	; 0x30
 801ab22:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	dd4d      	ble.n	801abc4 <_dtoa_r+0xaec>
 801ab28:	9310      	str	r3, [sp, #64]	; 0x40
 801ab2a:	930a      	str	r3, [sp, #40]	; 0x28
 801ab2c:	461f      	mov	r7, r3
 801ab2e:	e7e5      	b.n	801aafc <_dtoa_r+0xa24>
 801ab30:	2300      	movs	r3, #0
 801ab32:	930c      	str	r3, [sp, #48]	; 0x30
 801ab34:	e7d8      	b.n	801aae8 <_dtoa_r+0xa10>
 801ab36:	2300      	movs	r3, #0
 801ab38:	930c      	str	r3, [sp, #48]	; 0x30
 801ab3a:	e7f2      	b.n	801ab22 <_dtoa_r+0xa4a>
 801ab3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab3e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801ab42:	930a      	str	r3, [sp, #40]	; 0x28
 801ab44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	f47f ad2f 	bne.w	801a5aa <_dtoa_r+0x4d2>
 801ab4c:	4651      	mov	r1, sl
 801ab4e:	2205      	movs	r2, #5
 801ab50:	4620      	mov	r0, r4
 801ab52:	f000 ff47 	bl	801b9e4 <__multadd>
 801ab56:	4601      	mov	r1, r0
 801ab58:	4682      	mov	sl, r0
 801ab5a:	4628      	mov	r0, r5
 801ab5c:	f001 f96e 	bl	801be3c <__mcmp>
 801ab60:	2800      	cmp	r0, #0
 801ab62:	f77f ad22 	ble.w	801a5aa <_dtoa_r+0x4d2>
 801ab66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801ab6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ab6c:	4643      	mov	r3, r8
 801ab6e:	2231      	movs	r2, #49	; 0x31
 801ab70:	f803 2b01 	strb.w	r2, [r3], #1
 801ab74:	3701      	adds	r7, #1
 801ab76:	9303      	str	r3, [sp, #12]
 801ab78:	4651      	mov	r1, sl
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	f000 ff28 	bl	801b9d0 <_Bfree>
 801ab80:	1c7b      	adds	r3, r7, #1
 801ab82:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ab86:	9309      	str	r3, [sp, #36]	; 0x24
 801ab88:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab8c:	2e00      	cmp	r6, #0
 801ab8e:	f47f ae89 	bne.w	801a8a4 <_dtoa_r+0x7cc>
 801ab92:	e68b      	b.n	801a8ac <_dtoa_r+0x7d4>
 801ab94:	4631      	mov	r1, r6
 801ab96:	463a      	mov	r2, r7
 801ab98:	4620      	mov	r0, r4
 801ab9a:	f001 f8db 	bl	801bd54 <__lshift>
 801ab9e:	4606      	mov	r6, r0
 801aba0:	e6d1      	b.n	801a946 <_dtoa_r+0x86e>
 801aba2:	eba8 030a 	sub.w	r3, r8, sl
 801aba6:	449b      	add	fp, r3
 801aba8:	46c2      	mov	sl, r8
 801abaa:	f04f 0800 	mov.w	r8, #0
 801abae:	e57e      	b.n	801a6ae <_dtoa_r+0x5d6>
 801abb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 801abb4:	2302      	movs	r3, #2
 801abb6:	930f      	str	r3, [sp, #60]	; 0x3c
 801abb8:	eeb0 8a47 	vmov.f32	s16, s14
 801abbc:	eef0 8a67 	vmov.f32	s17, s15
 801abc0:	f7ff bbeb 	b.w	801a39a <_dtoa_r+0x2c2>
 801abc4:	2301      	movs	r3, #1
 801abc6:	9325      	str	r3, [sp, #148]	; 0x94
 801abc8:	930a      	str	r3, [sp, #40]	; 0x28
 801abca:	f7ff bbb5 	b.w	801a338 <_dtoa_r+0x260>
 801abce:	d103      	bne.n	801abd8 <_dtoa_r+0xb00>
 801abd0:	9b04      	ldr	r3, [sp, #16]
 801abd2:	07db      	lsls	r3, r3, #31
 801abd4:	f53f ae48 	bmi.w	801a868 <_dtoa_r+0x790>
 801abd8:	46d9      	mov	r9, fp
 801abda:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 801abde:	2b30      	cmp	r3, #48	; 0x30
 801abe0:	d0fa      	beq.n	801abd8 <_dtoa_r+0xb00>
 801abe2:	e653      	b.n	801a88c <_dtoa_r+0x7b4>
 801abe4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801abe6:	f7e5 ff5d 	bl	8000aa4 <__aeabi_i2d>
 801abea:	4642      	mov	r2, r8
 801abec:	464b      	mov	r3, r9
 801abee:	f7e5 ffc3 	bl	8000b78 <__aeabi_dmul>
 801abf2:	4b74      	ldr	r3, [pc, #464]	; (801adc4 <_dtoa_r+0xcec>)
 801abf4:	2200      	movs	r2, #0
 801abf6:	f7e5 fe09 	bl	800080c <__adddf3>
 801abfa:	4606      	mov	r6, r0
 801abfc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801ac00:	4b71      	ldr	r3, [pc, #452]	; (801adc8 <_dtoa_r+0xcf0>)
 801ac02:	4640      	mov	r0, r8
 801ac04:	4649      	mov	r1, r9
 801ac06:	2200      	movs	r2, #0
 801ac08:	f7e5 fdfe 	bl	8000808 <__aeabi_dsub>
 801ac0c:	4632      	mov	r2, r6
 801ac0e:	463b      	mov	r3, r7
 801ac10:	4680      	mov	r8, r0
 801ac12:	4689      	mov	r9, r1
 801ac14:	f7e6 fa40 	bl	8001098 <__aeabi_dcmpgt>
 801ac18:	2800      	cmp	r0, #0
 801ac1a:	f040 8193 	bne.w	801af44 <_dtoa_r+0xe6c>
 801ac1e:	4632      	mov	r2, r6
 801ac20:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801ac24:	4640      	mov	r0, r8
 801ac26:	4649      	mov	r1, r9
 801ac28:	f7e6 fa18 	bl	800105c <__aeabi_dcmplt>
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	f43f ac95 	beq.w	801a55c <_dtoa_r+0x484>
 801ac32:	f04f 0a00 	mov.w	sl, #0
 801ac36:	4656      	mov	r6, sl
 801ac38:	e4b7      	b.n	801a5aa <_dtoa_r+0x4d2>
 801ac3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac3c:	2a00      	cmp	r2, #0
 801ac3e:	f000 80cf 	beq.w	801ade0 <_dtoa_r+0xd08>
 801ac42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ac46:	9a08      	ldr	r2, [sp, #32]
 801ac48:	441a      	add	r2, r3
 801ac4a:	9208      	str	r2, [sp, #32]
 801ac4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ac4e:	4617      	mov	r7, r2
 801ac50:	441a      	add	r2, r3
 801ac52:	920b      	str	r2, [sp, #44]	; 0x2c
 801ac54:	46d0      	mov	r8, sl
 801ac56:	e536      	b.n	801a6c6 <_dtoa_r+0x5ee>
 801ac58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac5a:	3201      	adds	r2, #1
 801ac5c:	9209      	str	r2, [sp, #36]	; 0x24
 801ac5e:	9a03      	ldr	r2, [sp, #12]
 801ac60:	2331      	movs	r3, #49	; 0x31
 801ac62:	7013      	strb	r3, [r2, #0]
 801ac64:	e612      	b.n	801a88c <_dtoa_r+0x7b4>
 801ac66:	f000 8157 	beq.w	801af18 <_dtoa_r+0xe40>
 801ac6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac6c:	425e      	negs	r6, r3
 801ac6e:	4b57      	ldr	r3, [pc, #348]	; (801adcc <_dtoa_r+0xcf4>)
 801ac70:	f006 020f 	and.w	r2, r6, #15
 801ac74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ac80:	f7e5 ff7a 	bl	8000b78 <__aeabi_dmul>
 801ac84:	1136      	asrs	r6, r6, #4
 801ac86:	4680      	mov	r8, r0
 801ac88:	4689      	mov	r9, r1
 801ac8a:	f000 818d 	beq.w	801afa8 <_dtoa_r+0xed0>
 801ac8e:	2202      	movs	r2, #2
 801ac90:	4f4f      	ldr	r7, [pc, #316]	; (801add0 <_dtoa_r+0xcf8>)
 801ac92:	ec49 8b18 	vmov	d8, r8, r9
 801ac96:	2300      	movs	r3, #0
 801ac98:	46d9      	mov	r9, fp
 801ac9a:	46d3      	mov	fp, sl
 801ac9c:	4692      	mov	sl, r2
 801ac9e:	07f2      	lsls	r2, r6, #31
 801aca0:	d506      	bpl.n	801acb0 <_dtoa_r+0xbd8>
 801aca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aca6:	f7e5 ff67 	bl	8000b78 <__aeabi_dmul>
 801acaa:	f10a 0a01 	add.w	sl, sl, #1
 801acae:	2301      	movs	r3, #1
 801acb0:	1076      	asrs	r6, r6, #1
 801acb2:	f107 0708 	add.w	r7, r7, #8
 801acb6:	d1f2      	bne.n	801ac9e <_dtoa_r+0xbc6>
 801acb8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801acbc:	46da      	mov	sl, fp
 801acbe:	46cb      	mov	fp, r9
 801acc0:	ec59 8b18 	vmov	r8, r9, d8
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	f43f ab91 	beq.w	801a3ec <_dtoa_r+0x314>
 801acca:	4680      	mov	r8, r0
 801accc:	4689      	mov	r9, r1
 801acce:	f7ff bb8d 	b.w	801a3ec <_dtoa_r+0x314>
 801acd2:	900d      	str	r0, [sp, #52]	; 0x34
 801acd4:	e504      	b.n	801a6e0 <_dtoa_r+0x608>
 801acd6:	9b06      	ldr	r3, [sp, #24]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	f47f ae18 	bne.w	801a90e <_dtoa_r+0x836>
 801acde:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801ace2:	f3c2 0313 	ubfx	r3, r2, #0, #20
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	f43f aeee 	beq.w	801aac8 <_dtoa_r+0x9f0>
 801acec:	e60f      	b.n	801a90e <_dtoa_r+0x836>
 801acee:	2a00      	cmp	r2, #0
 801acf0:	dd12      	ble.n	801ad18 <_dtoa_r+0xc40>
 801acf2:	4629      	mov	r1, r5
 801acf4:	2201      	movs	r2, #1
 801acf6:	4620      	mov	r0, r4
 801acf8:	9304      	str	r3, [sp, #16]
 801acfa:	f001 f82b 	bl	801bd54 <__lshift>
 801acfe:	4651      	mov	r1, sl
 801ad00:	4605      	mov	r5, r0
 801ad02:	f001 f89b 	bl	801be3c <__mcmp>
 801ad06:	2800      	cmp	r0, #0
 801ad08:	9b04      	ldr	r3, [sp, #16]
 801ad0a:	f340 8130 	ble.w	801af6e <_dtoa_r+0xe96>
 801ad0e:	2b39      	cmp	r3, #57	; 0x39
 801ad10:	f000 810e 	beq.w	801af30 <_dtoa_r+0xe58>
 801ad14:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 801ad18:	46b9      	mov	r9, r7
 801ad1a:	4637      	mov	r7, r6
 801ad1c:	f809 3b01 	strb.w	r3, [r9], #1
 801ad20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad22:	3301      	adds	r3, #1
 801ad24:	9309      	str	r3, [sp, #36]	; 0x24
 801ad26:	4646      	mov	r6, r8
 801ad28:	e5b0      	b.n	801a88c <_dtoa_r+0x7b4>
 801ad2a:	46a0      	mov	r8, r4
 801ad2c:	ee18 5a10 	vmov	r5, s16
 801ad30:	ee18 4a90 	vmov	r4, s17
 801ad34:	4602      	mov	r2, r0
 801ad36:	460b      	mov	r3, r1
 801ad38:	f7e5 fd68 	bl	800080c <__adddf3>
 801ad3c:	4652      	mov	r2, sl
 801ad3e:	465b      	mov	r3, fp
 801ad40:	4606      	mov	r6, r0
 801ad42:	460f      	mov	r7, r1
 801ad44:	f7e6 f9a8 	bl	8001098 <__aeabi_dcmpgt>
 801ad48:	b960      	cbnz	r0, 801ad64 <_dtoa_r+0xc8c>
 801ad4a:	4652      	mov	r2, sl
 801ad4c:	465b      	mov	r3, fp
 801ad4e:	4630      	mov	r0, r6
 801ad50:	4639      	mov	r1, r7
 801ad52:	f7e6 f979 	bl	8001048 <__aeabi_dcmpeq>
 801ad56:	2800      	cmp	r0, #0
 801ad58:	f43f ac86 	beq.w	801a668 <_dtoa_r+0x590>
 801ad5c:	ea5f 71c9 	movs.w	r1, r9, lsl #31
 801ad60:	f57f ac82 	bpl.w	801a668 <_dtoa_r+0x590>
 801ad64:	9a03      	ldr	r2, [sp, #12]
 801ad66:	f7ff bbe6 	b.w	801a536 <_dtoa_r+0x45e>
 801ad6a:	6871      	ldr	r1, [r6, #4]
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	f000 fe09 	bl	801b984 <_Balloc>
 801ad72:	4607      	mov	r7, r0
 801ad74:	2800      	cmp	r0, #0
 801ad76:	f000 811b 	beq.w	801afb0 <_dtoa_r+0xed8>
 801ad7a:	6933      	ldr	r3, [r6, #16]
 801ad7c:	3302      	adds	r3, #2
 801ad7e:	009a      	lsls	r2, r3, #2
 801ad80:	f106 010c 	add.w	r1, r6, #12
 801ad84:	300c      	adds	r0, #12
 801ad86:	f7e5 fa5b 	bl	8000240 <memcpy>
 801ad8a:	4639      	mov	r1, r7
 801ad8c:	2201      	movs	r2, #1
 801ad8e:	4620      	mov	r0, r4
 801ad90:	f000 ffe0 	bl	801bd54 <__lshift>
 801ad94:	4680      	mov	r8, r0
 801ad96:	e5db      	b.n	801a950 <_dtoa_r+0x878>
 801ad98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad9c:	1a9f      	subs	r7, r3, r2
 801ad9e:	e492      	b.n	801a6c6 <_dtoa_r+0x5ee>
 801ada0:	2b39      	cmp	r3, #57	; 0x39
 801ada2:	f000 80c5 	beq.w	801af30 <_dtoa_r+0xe58>
 801ada6:	46b9      	mov	r9, r7
 801ada8:	3301      	adds	r3, #1
 801adaa:	f809 3b01 	strb.w	r3, [r9], #1
 801adae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adb0:	3301      	adds	r3, #1
 801adb2:	4637      	mov	r7, r6
 801adb4:	9309      	str	r3, [sp, #36]	; 0x24
 801adb6:	4646      	mov	r6, r8
 801adb8:	e568      	b.n	801a88c <_dtoa_r+0x7b4>
 801adba:	bf00      	nop
 801adbc:	080205a8 	.word	0x080205a8
 801adc0:	7ff00000 	.word	0x7ff00000
 801adc4:	401c0000 	.word	0x401c0000
 801adc8:	40140000 	.word	0x40140000
 801adcc:	080206f0 	.word	0x080206f0
 801add0:	080206c8 	.word	0x080206c8
 801add4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801add6:	3201      	adds	r2, #1
 801add8:	4637      	mov	r7, r6
 801adda:	9209      	str	r2, [sp, #36]	; 0x24
 801addc:	4646      	mov	r6, r8
 801adde:	e536      	b.n	801a84e <_dtoa_r+0x776>
 801ade0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ade2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ade6:	e72e      	b.n	801ac46 <_dtoa_r+0xb6e>
 801ade8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801adea:	4986      	ldr	r1, [pc, #536]	; (801b004 <_dtoa_r+0xf2c>)
 801adec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801adf0:	4632      	mov	r2, r6
 801adf2:	463b      	mov	r3, r7
 801adf4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801adf8:	f7e5 febe 	bl	8000b78 <__aeabi_dmul>
 801adfc:	4602      	mov	r2, r0
 801adfe:	460b      	mov	r3, r1
 801ae00:	4640      	mov	r0, r8
 801ae02:	4649      	mov	r1, r9
 801ae04:	ec43 2b18 	vmov	d8, r2, r3
 801ae08:	f7e6 f966 	bl	80010d8 <__aeabi_d2iz>
 801ae0c:	4607      	mov	r7, r0
 801ae0e:	f7e5 fe49 	bl	8000aa4 <__aeabi_i2d>
 801ae12:	460b      	mov	r3, r1
 801ae14:	4602      	mov	r2, r0
 801ae16:	4649      	mov	r1, r9
 801ae18:	4640      	mov	r0, r8
 801ae1a:	f7e5 fcf5 	bl	8000808 <__aeabi_dsub>
 801ae1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801ae22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ae26:	f808 3b01 	strb.w	r3, [r8], #1
 801ae2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae2c:	2b01      	cmp	r3, #1
 801ae2e:	4606      	mov	r6, r0
 801ae30:	460f      	mov	r7, r1
 801ae32:	d027      	beq.n	801ae84 <_dtoa_r+0xdac>
 801ae34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae36:	9a03      	ldr	r2, [sp, #12]
 801ae38:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801ae3c:	4413      	add	r3, r2
 801ae3e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801ae42:	46c2      	mov	sl, r8
 801ae44:	469b      	mov	fp, r3
 801ae46:	4b70      	ldr	r3, [pc, #448]	; (801b008 <_dtoa_r+0xf30>)
 801ae48:	2200      	movs	r2, #0
 801ae4a:	4630      	mov	r0, r6
 801ae4c:	4639      	mov	r1, r7
 801ae4e:	f7e5 fe93 	bl	8000b78 <__aeabi_dmul>
 801ae52:	4689      	mov	r9, r1
 801ae54:	4680      	mov	r8, r0
 801ae56:	f7e6 f93f 	bl	80010d8 <__aeabi_d2iz>
 801ae5a:	4607      	mov	r7, r0
 801ae5c:	f7e5 fe22 	bl	8000aa4 <__aeabi_i2d>
 801ae60:	3730      	adds	r7, #48	; 0x30
 801ae62:	4602      	mov	r2, r0
 801ae64:	460b      	mov	r3, r1
 801ae66:	4640      	mov	r0, r8
 801ae68:	4649      	mov	r1, r9
 801ae6a:	f7e5 fccd 	bl	8000808 <__aeabi_dsub>
 801ae6e:	f80a 7b01 	strb.w	r7, [sl], #1
 801ae72:	45da      	cmp	sl, fp
 801ae74:	4606      	mov	r6, r0
 801ae76:	460f      	mov	r7, r1
 801ae78:	d1e5      	bne.n	801ae46 <_dtoa_r+0xd6e>
 801ae7a:	46d0      	mov	r8, sl
 801ae7c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801ae80:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801ae84:	4b61      	ldr	r3, [pc, #388]	; (801b00c <_dtoa_r+0xf34>)
 801ae86:	2200      	movs	r2, #0
 801ae88:	ec51 0b18 	vmov	r0, r1, d8
 801ae8c:	f7e5 fcbe 	bl	800080c <__adddf3>
 801ae90:	4632      	mov	r2, r6
 801ae92:	463b      	mov	r3, r7
 801ae94:	f7e6 f8e2 	bl	800105c <__aeabi_dcmplt>
 801ae98:	2800      	cmp	r0, #0
 801ae9a:	d159      	bne.n	801af50 <_dtoa_r+0xe78>
 801ae9c:	ec53 2b18 	vmov	r2, r3, d8
 801aea0:	495a      	ldr	r1, [pc, #360]	; (801b00c <_dtoa_r+0xf34>)
 801aea2:	2000      	movs	r0, #0
 801aea4:	f7e5 fcb0 	bl	8000808 <__aeabi_dsub>
 801aea8:	4632      	mov	r2, r6
 801aeaa:	463b      	mov	r3, r7
 801aeac:	f7e6 f8f4 	bl	8001098 <__aeabi_dcmpgt>
 801aeb0:	2800      	cmp	r0, #0
 801aeb2:	f43f ab53 	beq.w	801a55c <_dtoa_r+0x484>
 801aeb6:	46c1      	mov	r9, r8
 801aeb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801aebc:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 801aec0:	2b30      	cmp	r3, #48	; 0x30
 801aec2:	d0f8      	beq.n	801aeb6 <_dtoa_r+0xdde>
 801aec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aec6:	3301      	adds	r3, #1
 801aec8:	9309      	str	r3, [sp, #36]	; 0x24
 801aeca:	e4ef      	b.n	801a8ac <_dtoa_r+0x7d4>
 801aecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aece:	2b00      	cmp	r3, #0
 801aed0:	f43f ae88 	beq.w	801abe4 <_dtoa_r+0xb0c>
 801aed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	f77f ab40 	ble.w	801a55c <_dtoa_r+0x484>
 801aedc:	4b4a      	ldr	r3, [pc, #296]	; (801b008 <_dtoa_r+0xf30>)
 801aede:	2200      	movs	r2, #0
 801aee0:	4640      	mov	r0, r8
 801aee2:	4649      	mov	r1, r9
 801aee4:	f7e5 fe48 	bl	8000b78 <__aeabi_dmul>
 801aee8:	4680      	mov	r8, r0
 801aeea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801aeec:	4689      	mov	r9, r1
 801aeee:	3001      	adds	r0, #1
 801aef0:	f7e5 fdd8 	bl	8000aa4 <__aeabi_i2d>
 801aef4:	4642      	mov	r2, r8
 801aef6:	464b      	mov	r3, r9
 801aef8:	f7e5 fe3e 	bl	8000b78 <__aeabi_dmul>
 801aefc:	4b44      	ldr	r3, [pc, #272]	; (801b010 <_dtoa_r+0xf38>)
 801aefe:	2200      	movs	r2, #0
 801af00:	f7e5 fc84 	bl	800080c <__adddf3>
 801af04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801af08:	930f      	str	r3, [sp, #60]	; 0x3c
 801af0a:	3a01      	subs	r2, #1
 801af0c:	4606      	mov	r6, r0
 801af0e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801af12:	9211      	str	r2, [sp, #68]	; 0x44
 801af14:	f7ff ba8b 	b.w	801a42e <_dtoa_r+0x356>
 801af18:	2302      	movs	r3, #2
 801af1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801af1e:	930f      	str	r3, [sp, #60]	; 0x3c
 801af20:	f7ff ba64 	b.w	801a3ec <_dtoa_r+0x314>
 801af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af26:	3301      	adds	r3, #1
 801af28:	9309      	str	r3, [sp, #36]	; 0x24
 801af2a:	2331      	movs	r3, #49	; 0x31
 801af2c:	f7ff bb0a 	b.w	801a544 <_dtoa_r+0x46c>
 801af30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af32:	46bb      	mov	fp, r7
 801af34:	2339      	movs	r3, #57	; 0x39
 801af36:	3201      	adds	r2, #1
 801af38:	4637      	mov	r7, r6
 801af3a:	f80b 3b01 	strb.w	r3, [fp], #1
 801af3e:	9209      	str	r2, [sp, #36]	; 0x24
 801af40:	4646      	mov	r6, r8
 801af42:	e493      	b.n	801a86c <_dtoa_r+0x794>
 801af44:	f04f 0a00 	mov.w	sl, #0
 801af48:	4656      	mov	r6, sl
 801af4a:	e60c      	b.n	801ab66 <_dtoa_r+0xa8e>
 801af4c:	4699      	mov	r9, r3
 801af4e:	e422      	b.n	801a796 <_dtoa_r+0x6be>
 801af50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af52:	9a03      	ldr	r2, [sp, #12]
 801af54:	9309      	str	r3, [sp, #36]	; 0x24
 801af56:	f7ff baee 	b.w	801a536 <_dtoa_r+0x45e>
 801af5a:	46a8      	mov	r8, r5
 801af5c:	ee19 4a90 	vmov	r4, s19
 801af60:	ee19 5a10 	vmov	r5, s18
 801af64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af66:	3301      	adds	r3, #1
 801af68:	9309      	str	r3, [sp, #36]	; 0x24
 801af6a:	46c1      	mov	r9, r8
 801af6c:	e49e      	b.n	801a8ac <_dtoa_r+0x7d4>
 801af6e:	f47f aed3 	bne.w	801ad18 <_dtoa_r+0xc40>
 801af72:	07da      	lsls	r2, r3, #31
 801af74:	f57f aed0 	bpl.w	801ad18 <_dtoa_r+0xc40>
 801af78:	e6c9      	b.n	801ad0e <_dtoa_r+0xc36>
 801af7a:	2b39      	cmp	r3, #57	; 0x39
 801af7c:	d0d8      	beq.n	801af30 <_dtoa_r+0xe58>
 801af7e:	f1b9 0f00 	cmp.w	r9, #0
 801af82:	f73f aec7 	bgt.w	801ad14 <_dtoa_r+0xc3c>
 801af86:	e6c7      	b.n	801ad18 <_dtoa_r+0xc40>
 801af88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801af8a:	2b02      	cmp	r3, #2
 801af8c:	f73f add6 	bgt.w	801ab3c <_dtoa_r+0xa64>
 801af90:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801af94:	e558      	b.n	801aa48 <_dtoa_r+0x970>
 801af96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801af98:	2b02      	cmp	r3, #2
 801af9a:	f73f adcf 	bgt.w	801ab3c <_dtoa_r+0xa64>
 801af9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801afa0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801afa4:	930a      	str	r3, [sp, #40]	; 0x28
 801afa6:	e4cb      	b.n	801a940 <_dtoa_r+0x868>
 801afa8:	2302      	movs	r3, #2
 801afaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801afac:	f7ff ba1e 	b.w	801a3ec <_dtoa_r+0x314>
 801afb0:	4602      	mov	r2, r0
 801afb2:	4b18      	ldr	r3, [pc, #96]	; (801b014 <_dtoa_r+0xf3c>)
 801afb4:	4818      	ldr	r0, [pc, #96]	; (801b018 <_dtoa_r+0xf40>)
 801afb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801afba:	f002 f91b 	bl	801d1f4 <__assert_func>
 801afbe:	4b17      	ldr	r3, [pc, #92]	; (801b01c <_dtoa_r+0xf44>)
 801afc0:	9303      	str	r3, [sp, #12]
 801afc2:	f7ff b8c6 	b.w	801a152 <_dtoa_r+0x7a>
 801afc6:	2600      	movs	r6, #0
 801afc8:	6466      	str	r6, [r4, #68]	; 0x44
 801afca:	4631      	mov	r1, r6
 801afcc:	4620      	mov	r0, r4
 801afce:	f000 fcd9 	bl	801b984 <_Balloc>
 801afd2:	9003      	str	r0, [sp, #12]
 801afd4:	b958      	cbnz	r0, 801afee <_dtoa_r+0xf16>
 801afd6:	4b0f      	ldr	r3, [pc, #60]	; (801b014 <_dtoa_r+0xf3c>)
 801afd8:	480f      	ldr	r0, [pc, #60]	; (801b018 <_dtoa_r+0xf40>)
 801afda:	2200      	movs	r2, #0
 801afdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801afe0:	f002 f908 	bl	801d1f4 <__assert_func>
 801afe4:	f43f abef 	beq.w	801a7c6 <_dtoa_r+0x6ee>
 801afe8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 801afec:	e476      	b.n	801a8dc <_dtoa_r+0x804>
 801afee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aff2:	9a03      	ldr	r2, [sp, #12]
 801aff4:	9310      	str	r3, [sp, #64]	; 0x40
 801aff6:	930a      	str	r3, [sp, #40]	; 0x28
 801aff8:	2301      	movs	r3, #1
 801affa:	6422      	str	r2, [r4, #64]	; 0x40
 801affc:	9625      	str	r6, [sp, #148]	; 0x94
 801affe:	930c      	str	r3, [sp, #48]	; 0x30
 801b000:	f7ff baac 	b.w	801a55c <_dtoa_r+0x484>
 801b004:	080206f0 	.word	0x080206f0
 801b008:	40240000 	.word	0x40240000
 801b00c:	3fe00000 	.word	0x3fe00000
 801b010:	401c0000 	.word	0x401c0000
 801b014:	080205b8 	.word	0x080205b8
 801b018:	080205cc 	.word	0x080205cc
 801b01c:	080205ac 	.word	0x080205ac

0801b020 <__env_lock>:
 801b020:	4801      	ldr	r0, [pc, #4]	; (801b028 <__env_lock+0x8>)
 801b022:	f7fa b8cf 	b.w	80151c4 <__retarget_lock_acquire_recursive>
 801b026:	bf00      	nop
 801b028:	2000efd0 	.word	0x2000efd0

0801b02c <__env_unlock>:
 801b02c:	4801      	ldr	r0, [pc, #4]	; (801b034 <__env_unlock+0x8>)
 801b02e:	f7fa b8cb 	b.w	80151c8 <__retarget_lock_release_recursive>
 801b032:	bf00      	nop
 801b034:	2000efd0 	.word	0x2000efd0

0801b038 <__sflush_r>:
 801b038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b040:	460d      	mov	r5, r1
 801b042:	0711      	lsls	r1, r2, #28
 801b044:	4680      	mov	r8, r0
 801b046:	d447      	bmi.n	801b0d8 <__sflush_r+0xa0>
 801b048:	686b      	ldr	r3, [r5, #4]
 801b04a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b04e:	2b00      	cmp	r3, #0
 801b050:	81aa      	strh	r2, [r5, #12]
 801b052:	dd5d      	ble.n	801b110 <__sflush_r+0xd8>
 801b054:	6aac      	ldr	r4, [r5, #40]	; 0x28
 801b056:	2c00      	cmp	r4, #0
 801b058:	d057      	beq.n	801b10a <__sflush_r+0xd2>
 801b05a:	2300      	movs	r3, #0
 801b05c:	f8d8 6000 	ldr.w	r6, [r8]
 801b060:	f8c8 3000 	str.w	r3, [r8]
 801b064:	b293      	uxth	r3, r2
 801b066:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b06a:	d155      	bne.n	801b118 <__sflush_r+0xe0>
 801b06c:	2301      	movs	r3, #1
 801b06e:	69e9      	ldr	r1, [r5, #28]
 801b070:	4640      	mov	r0, r8
 801b072:	47a0      	blx	r4
 801b074:	1c43      	adds	r3, r0, #1
 801b076:	d066      	beq.n	801b146 <__sflush_r+0x10e>
 801b078:	89ab      	ldrh	r3, [r5, #12]
 801b07a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 801b07c:	075f      	lsls	r7, r3, #29
 801b07e:	d505      	bpl.n	801b08c <__sflush_r+0x54>
 801b080:	686a      	ldr	r2, [r5, #4]
 801b082:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b084:	1a80      	subs	r0, r0, r2
 801b086:	b10b      	cbz	r3, 801b08c <__sflush_r+0x54>
 801b088:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801b08a:	1ac0      	subs	r0, r0, r3
 801b08c:	69e9      	ldr	r1, [r5, #28]
 801b08e:	4602      	mov	r2, r0
 801b090:	2300      	movs	r3, #0
 801b092:	4640      	mov	r0, r8
 801b094:	47a0      	blx	r4
 801b096:	1c41      	adds	r1, r0, #1
 801b098:	d140      	bne.n	801b11c <__sflush_r+0xe4>
 801b09a:	f8d8 3000 	ldr.w	r3, [r8]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d03c      	beq.n	801b11c <__sflush_r+0xe4>
 801b0a2:	2b1d      	cmp	r3, #29
 801b0a4:	d001      	beq.n	801b0aa <__sflush_r+0x72>
 801b0a6:	2b16      	cmp	r3, #22
 801b0a8:	d155      	bne.n	801b156 <__sflush_r+0x11e>
 801b0aa:	89ab      	ldrh	r3, [r5, #12]
 801b0ac:	692a      	ldr	r2, [r5, #16]
 801b0ae:	602a      	str	r2, [r5, #0]
 801b0b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	81ab      	strh	r3, [r5, #12]
 801b0b8:	606a      	str	r2, [r5, #4]
 801b0ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b0bc:	f8c8 6000 	str.w	r6, [r8]
 801b0c0:	b319      	cbz	r1, 801b10a <__sflush_r+0xd2>
 801b0c2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801b0c6:	4299      	cmp	r1, r3
 801b0c8:	d002      	beq.n	801b0d0 <__sflush_r+0x98>
 801b0ca:	4640      	mov	r0, r8
 801b0cc:	f000 f944 	bl	801b358 <_free_r>
 801b0d0:	2000      	movs	r0, #0
 801b0d2:	6328      	str	r0, [r5, #48]	; 0x30
 801b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0d8:	692f      	ldr	r7, [r5, #16]
 801b0da:	b1b7      	cbz	r7, 801b10a <__sflush_r+0xd2>
 801b0dc:	b293      	uxth	r3, r2
 801b0de:	682e      	ldr	r6, [r5, #0]
 801b0e0:	602f      	str	r7, [r5, #0]
 801b0e2:	079a      	lsls	r2, r3, #30
 801b0e4:	bf0c      	ite	eq
 801b0e6:	696b      	ldreq	r3, [r5, #20]
 801b0e8:	2300      	movne	r3, #0
 801b0ea:	1bf6      	subs	r6, r6, r7
 801b0ec:	60ab      	str	r3, [r5, #8]
 801b0ee:	e00a      	b.n	801b106 <__sflush_r+0xce>
 801b0f0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 801b0f2:	69e9      	ldr	r1, [r5, #28]
 801b0f4:	4633      	mov	r3, r6
 801b0f6:	463a      	mov	r2, r7
 801b0f8:	4640      	mov	r0, r8
 801b0fa:	47a0      	blx	r4
 801b0fc:	1e04      	subs	r4, r0, #0
 801b0fe:	eba6 0604 	sub.w	r6, r6, r4
 801b102:	4427      	add	r7, r4
 801b104:	dd17      	ble.n	801b136 <__sflush_r+0xfe>
 801b106:	2e00      	cmp	r6, #0
 801b108:	dcf2      	bgt.n	801b0f0 <__sflush_r+0xb8>
 801b10a:	2000      	movs	r0, #0
 801b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b110:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801b112:	2b00      	cmp	r3, #0
 801b114:	dc9e      	bgt.n	801b054 <__sflush_r+0x1c>
 801b116:	e7f8      	b.n	801b10a <__sflush_r+0xd2>
 801b118:	6d28      	ldr	r0, [r5, #80]	; 0x50
 801b11a:	e7af      	b.n	801b07c <__sflush_r+0x44>
 801b11c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 801b120:	692a      	ldr	r2, [r5, #16]
 801b122:	602a      	str	r2, [r5, #0]
 801b124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b128:	2200      	movs	r2, #0
 801b12a:	81ab      	strh	r3, [r5, #12]
 801b12c:	04db      	lsls	r3, r3, #19
 801b12e:	606a      	str	r2, [r5, #4]
 801b130:	d5c3      	bpl.n	801b0ba <__sflush_r+0x82>
 801b132:	6528      	str	r0, [r5, #80]	; 0x50
 801b134:	e7c1      	b.n	801b0ba <__sflush_r+0x82>
 801b136:	89ab      	ldrh	r3, [r5, #12]
 801b138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b13c:	81ab      	strh	r3, [r5, #12]
 801b13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b146:	f8d8 3000 	ldr.w	r3, [r8]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d094      	beq.n	801b078 <__sflush_r+0x40>
 801b14e:	2b1d      	cmp	r3, #29
 801b150:	d006      	beq.n	801b160 <__sflush_r+0x128>
 801b152:	2b16      	cmp	r3, #22
 801b154:	d004      	beq.n	801b160 <__sflush_r+0x128>
 801b156:	89ab      	ldrh	r3, [r5, #12]
 801b158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b15c:	81ab      	strh	r3, [r5, #12]
 801b15e:	e7d5      	b.n	801b10c <__sflush_r+0xd4>
 801b160:	f8c8 6000 	str.w	r6, [r8]
 801b164:	e7d1      	b.n	801b10a <__sflush_r+0xd2>
 801b166:	bf00      	nop

0801b168 <_fflush_r>:
 801b168:	b538      	push	{r3, r4, r5, lr}
 801b16a:	460c      	mov	r4, r1
 801b16c:	4605      	mov	r5, r0
 801b16e:	b108      	cbz	r0, 801b174 <_fflush_r+0xc>
 801b170:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b172:	b1a3      	cbz	r3, 801b19e <_fflush_r+0x36>
 801b174:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801b178:	b1b8      	cbz	r0, 801b1aa <_fflush_r+0x42>
 801b17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b17c:	07db      	lsls	r3, r3, #31
 801b17e:	d401      	bmi.n	801b184 <_fflush_r+0x1c>
 801b180:	0581      	lsls	r1, r0, #22
 801b182:	d515      	bpl.n	801b1b0 <_fflush_r+0x48>
 801b184:	4628      	mov	r0, r5
 801b186:	4621      	mov	r1, r4
 801b188:	f7ff ff56 	bl	801b038 <__sflush_r>
 801b18c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b18e:	07da      	lsls	r2, r3, #31
 801b190:	4605      	mov	r5, r0
 801b192:	d402      	bmi.n	801b19a <_fflush_r+0x32>
 801b194:	89a3      	ldrh	r3, [r4, #12]
 801b196:	059b      	lsls	r3, r3, #22
 801b198:	d50e      	bpl.n	801b1b8 <_fflush_r+0x50>
 801b19a:	4628      	mov	r0, r5
 801b19c:	bd38      	pop	{r3, r4, r5, pc}
 801b19e:	f000 f83f 	bl	801b220 <__sinit>
 801b1a2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801b1a6:	2800      	cmp	r0, #0
 801b1a8:	d1e7      	bne.n	801b17a <_fflush_r+0x12>
 801b1aa:	4605      	mov	r5, r0
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	bd38      	pop	{r3, r4, r5, pc}
 801b1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1b2:	f7fa f807 	bl	80151c4 <__retarget_lock_acquire_recursive>
 801b1b6:	e7e5      	b.n	801b184 <_fflush_r+0x1c>
 801b1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1ba:	f7fa f805 	bl	80151c8 <__retarget_lock_release_recursive>
 801b1be:	4628      	mov	r0, r5
 801b1c0:	bd38      	pop	{r3, r4, r5, pc}
 801b1c2:	bf00      	nop

0801b1c4 <std>:
 801b1c4:	b510      	push	{r4, lr}
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	4604      	mov	r4, r0
 801b1ca:	e9c0 3300 	strd	r3, r3, [r0]
 801b1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b1d2:	8181      	strh	r1, [r0, #12]
 801b1d4:	81c2      	strh	r2, [r0, #14]
 801b1d6:	6083      	str	r3, [r0, #8]
 801b1d8:	6643      	str	r3, [r0, #100]	; 0x64
 801b1da:	6183      	str	r3, [r0, #24]
 801b1dc:	4619      	mov	r1, r3
 801b1de:	2208      	movs	r2, #8
 801b1e0:	305c      	adds	r0, #92	; 0x5c
 801b1e2:	f7fa fb59 	bl	8015898 <memset>
 801b1e6:	4807      	ldr	r0, [pc, #28]	; (801b204 <std+0x40>)
 801b1e8:	4907      	ldr	r1, [pc, #28]	; (801b208 <std+0x44>)
 801b1ea:	4a08      	ldr	r2, [pc, #32]	; (801b20c <std+0x48>)
 801b1ec:	4b08      	ldr	r3, [pc, #32]	; (801b210 <std+0x4c>)
 801b1ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b1f0:	e9c4 4007 	strd	r4, r0, [r4, #28]
 801b1f4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 801b1f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b200:	f7f9 bfdc 	b.w	80151bc <__retarget_lock_init_recursive>
 801b204:	0801c0f1 	.word	0x0801c0f1
 801b208:	0801c115 	.word	0x0801c115
 801b20c:	0801c155 	.word	0x0801c155
 801b210:	0801c175 	.word	0x0801c175

0801b214 <_cleanup_r>:
 801b214:	4901      	ldr	r1, [pc, #4]	; (801b21c <_cleanup_r+0x8>)
 801b216:	f000 bb13 	b.w	801b840 <_fwalk_reent>
 801b21a:	bf00      	nop
 801b21c:	0801d255 	.word	0x0801d255

0801b220 <__sinit>:
 801b220:	b510      	push	{r4, lr}
 801b222:	4604      	mov	r4, r0
 801b224:	4811      	ldr	r0, [pc, #68]	; (801b26c <__sinit+0x4c>)
 801b226:	f7f9 ffcd 	bl	80151c4 <__retarget_lock_acquire_recursive>
 801b22a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b22c:	b9c2      	cbnz	r2, 801b260 <__sinit+0x40>
 801b22e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801b232:	480f      	ldr	r0, [pc, #60]	; (801b270 <__sinit+0x50>)
 801b234:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801b238:	2103      	movs	r1, #3
 801b23a:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
 801b23e:	63e0      	str	r0, [r4, #60]	; 0x3c
 801b240:	2104      	movs	r1, #4
 801b242:	6860      	ldr	r0, [r4, #4]
 801b244:	f7ff ffbe 	bl	801b1c4 <std>
 801b248:	68a0      	ldr	r0, [r4, #8]
 801b24a:	2201      	movs	r2, #1
 801b24c:	2109      	movs	r1, #9
 801b24e:	f7ff ffb9 	bl	801b1c4 <std>
 801b252:	68e0      	ldr	r0, [r4, #12]
 801b254:	2202      	movs	r2, #2
 801b256:	2112      	movs	r1, #18
 801b258:	f7ff ffb4 	bl	801b1c4 <std>
 801b25c:	2301      	movs	r3, #1
 801b25e:	63a3      	str	r3, [r4, #56]	; 0x38
 801b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b264:	4801      	ldr	r0, [pc, #4]	; (801b26c <__sinit+0x4c>)
 801b266:	f7f9 bfaf 	b.w	80151c8 <__retarget_lock_release_recursive>
 801b26a:	bf00      	nop
 801b26c:	2000efd4 	.word	0x2000efd4
 801b270:	0801b215 	.word	0x0801b215

0801b274 <__sfp_lock_acquire>:
 801b274:	4801      	ldr	r0, [pc, #4]	; (801b27c <__sfp_lock_acquire+0x8>)
 801b276:	f7f9 bfa5 	b.w	80151c4 <__retarget_lock_acquire_recursive>
 801b27a:	bf00      	nop
 801b27c:	2000efe8 	.word	0x2000efe8

0801b280 <__sfp_lock_release>:
 801b280:	4801      	ldr	r0, [pc, #4]	; (801b288 <__sfp_lock_release+0x8>)
 801b282:	f7f9 bfa1 	b.w	80151c8 <__retarget_lock_release_recursive>
 801b286:	bf00      	nop
 801b288:	2000efe8 	.word	0x2000efe8

0801b28c <__libc_fini_array>:
 801b28c:	b538      	push	{r3, r4, r5, lr}
 801b28e:	4b08      	ldr	r3, [pc, #32]	; (801b2b0 <__libc_fini_array+0x24>)
 801b290:	4d08      	ldr	r5, [pc, #32]	; (801b2b4 <__libc_fini_array+0x28>)
 801b292:	1b5b      	subs	r3, r3, r5
 801b294:	109c      	asrs	r4, r3, #2
 801b296:	d007      	beq.n	801b2a8 <__libc_fini_array+0x1c>
 801b298:	3b04      	subs	r3, #4
 801b29a:	441d      	add	r5, r3
 801b29c:	3c01      	subs	r4, #1
 801b29e:	f855 3904 	ldr.w	r3, [r5], #-4
 801b2a2:	4798      	blx	r3
 801b2a4:	2c00      	cmp	r4, #0
 801b2a6:	d1f9      	bne.n	801b29c <__libc_fini_array+0x10>
 801b2a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2ac:	f003 bbec 	b.w	801ea88 <_fini>
 801b2b0:	08020a1c 	.word	0x08020a1c
 801b2b4:	08020a18 	.word	0x08020a18

0801b2b8 <_malloc_trim_r>:
 801b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ba:	4f24      	ldr	r7, [pc, #144]	; (801b34c <_malloc_trim_r+0x94>)
 801b2bc:	460c      	mov	r4, r1
 801b2be:	4606      	mov	r6, r0
 801b2c0:	f7fa fb3a 	bl	8015938 <__malloc_lock>
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	685d      	ldr	r5, [r3, #4]
 801b2c8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 801b2cc:	310f      	adds	r1, #15
 801b2ce:	f025 0503 	bic.w	r5, r5, #3
 801b2d2:	194b      	adds	r3, r1, r5
 801b2d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b2d8:	f023 030f 	bic.w	r3, r3, #15
 801b2dc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 801b2e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 801b2e4:	db07      	blt.n	801b2f6 <_malloc_trim_r+0x3e>
 801b2e6:	2100      	movs	r1, #0
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	f7fa fd63 	bl	8015db4 <_sbrk_r>
 801b2ee:	68bb      	ldr	r3, [r7, #8]
 801b2f0:	442b      	add	r3, r5
 801b2f2:	4298      	cmp	r0, r3
 801b2f4:	d004      	beq.n	801b300 <_malloc_trim_r+0x48>
 801b2f6:	4630      	mov	r0, r6
 801b2f8:	f7fa fb24 	bl	8015944 <__malloc_unlock>
 801b2fc:	2000      	movs	r0, #0
 801b2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b300:	4261      	negs	r1, r4
 801b302:	4630      	mov	r0, r6
 801b304:	f7fa fd56 	bl	8015db4 <_sbrk_r>
 801b308:	3001      	adds	r0, #1
 801b30a:	d00d      	beq.n	801b328 <_malloc_trim_r+0x70>
 801b30c:	4a10      	ldr	r2, [pc, #64]	; (801b350 <_malloc_trim_r+0x98>)
 801b30e:	68b9      	ldr	r1, [r7, #8]
 801b310:	6813      	ldr	r3, [r2, #0]
 801b312:	1b2d      	subs	r5, r5, r4
 801b314:	f045 0501 	orr.w	r5, r5, #1
 801b318:	4630      	mov	r0, r6
 801b31a:	1b1b      	subs	r3, r3, r4
 801b31c:	604d      	str	r5, [r1, #4]
 801b31e:	6013      	str	r3, [r2, #0]
 801b320:	f7fa fb10 	bl	8015944 <__malloc_unlock>
 801b324:	2001      	movs	r0, #1
 801b326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b328:	2100      	movs	r1, #0
 801b32a:	4630      	mov	r0, r6
 801b32c:	f7fa fd42 	bl	8015db4 <_sbrk_r>
 801b330:	68ba      	ldr	r2, [r7, #8]
 801b332:	1a83      	subs	r3, r0, r2
 801b334:	2b0f      	cmp	r3, #15
 801b336:	ddde      	ble.n	801b2f6 <_malloc_trim_r+0x3e>
 801b338:	4c06      	ldr	r4, [pc, #24]	; (801b354 <_malloc_trim_r+0x9c>)
 801b33a:	4905      	ldr	r1, [pc, #20]	; (801b350 <_malloc_trim_r+0x98>)
 801b33c:	6824      	ldr	r4, [r4, #0]
 801b33e:	f043 0301 	orr.w	r3, r3, #1
 801b342:	1b00      	subs	r0, r0, r4
 801b344:	6053      	str	r3, [r2, #4]
 801b346:	6008      	str	r0, [r1, #0]
 801b348:	e7d5      	b.n	801b2f6 <_malloc_trim_r+0x3e>
 801b34a:	bf00      	nop
 801b34c:	20000638 	.word	0x20000638
 801b350:	20009b28 	.word	0x20009b28
 801b354:	20000a40 	.word	0x20000a40

0801b358 <_free_r>:
 801b358:	2900      	cmp	r1, #0
 801b35a:	d05e      	beq.n	801b41a <_free_r+0xc2>
 801b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b35e:	460c      	mov	r4, r1
 801b360:	4606      	mov	r6, r0
 801b362:	f7fa fae9 	bl	8015938 <__malloc_lock>
 801b366:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b36a:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 801b55c <_free_r+0x204>
 801b36e:	f023 0101 	bic.w	r1, r3, #1
 801b372:	f1a4 0008 	sub.w	r0, r4, #8
 801b376:	1842      	adds	r2, r0, r1
 801b378:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801b37c:	6855      	ldr	r5, [r2, #4]
 801b37e:	4297      	cmp	r7, r2
 801b380:	f025 0503 	bic.w	r5, r5, #3
 801b384:	f000 8088 	beq.w	801b498 <_free_r+0x140>
 801b388:	07df      	lsls	r7, r3, #31
 801b38a:	6055      	str	r5, [r2, #4]
 801b38c:	d433      	bmi.n	801b3f6 <_free_r+0x9e>
 801b38e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801b392:	1bc0      	subs	r0, r0, r7
 801b394:	f10c 0408 	add.w	r4, ip, #8
 801b398:	6883      	ldr	r3, [r0, #8]
 801b39a:	42a3      	cmp	r3, r4
 801b39c:	4439      	add	r1, r7
 801b39e:	d069      	beq.n	801b474 <_free_r+0x11c>
 801b3a0:	1957      	adds	r7, r2, r5
 801b3a2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801b3a6:	687f      	ldr	r7, [r7, #4]
 801b3a8:	f8c3 e00c 	str.w	lr, [r3, #12]
 801b3ac:	f8ce 3008 	str.w	r3, [lr, #8]
 801b3b0:	07fb      	lsls	r3, r7, #31
 801b3b2:	f140 8096 	bpl.w	801b4e2 <_free_r+0x18a>
 801b3b6:	f041 0301 	orr.w	r3, r1, #1
 801b3ba:	6043      	str	r3, [r0, #4]
 801b3bc:	6011      	str	r1, [r2, #0]
 801b3be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b3c2:	d233      	bcs.n	801b42c <_free_r+0xd4>
 801b3c4:	08cb      	lsrs	r3, r1, #3
 801b3c6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b3ca:	3301      	adds	r3, #1
 801b3cc:	094a      	lsrs	r2, r1, #5
 801b3ce:	2101      	movs	r1, #1
 801b3d0:	4091      	lsls	r1, r2
 801b3d2:	4321      	orrs	r1, r4
 801b3d4:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 801b3d8:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
 801b3dc:	f8cc 1004 	str.w	r1, [ip, #4]
 801b3e0:	3a08      	subs	r2, #8
 801b3e2:	e9c0 4202 	strd	r4, r2, [r0, #8]
 801b3e6:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
 801b3ea:	60e0      	str	r0, [r4, #12]
 801b3ec:	4630      	mov	r0, r6
 801b3ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b3f2:	f7fa baa7 	b.w	8015944 <__malloc_unlock>
 801b3f6:	1953      	adds	r3, r2, r5
 801b3f8:	685b      	ldr	r3, [r3, #4]
 801b3fa:	07df      	lsls	r7, r3, #31
 801b3fc:	d40e      	bmi.n	801b41c <_free_r+0xc4>
 801b3fe:	4429      	add	r1, r5
 801b400:	f10c 0408 	add.w	r4, ip, #8
 801b404:	6893      	ldr	r3, [r2, #8]
 801b406:	42a3      	cmp	r3, r4
 801b408:	d073      	beq.n	801b4f2 <_free_r+0x19a>
 801b40a:	68d4      	ldr	r4, [r2, #12]
 801b40c:	60dc      	str	r4, [r3, #12]
 801b40e:	f041 0201 	orr.w	r2, r1, #1
 801b412:	60a3      	str	r3, [r4, #8]
 801b414:	6042      	str	r2, [r0, #4]
 801b416:	5041      	str	r1, [r0, r1]
 801b418:	e7d1      	b.n	801b3be <_free_r+0x66>
 801b41a:	4770      	bx	lr
 801b41c:	f041 0301 	orr.w	r3, r1, #1
 801b420:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b424:	f844 3c04 	str.w	r3, [r4, #-4]
 801b428:	6011      	str	r1, [r2, #0]
 801b42a:	d3cb      	bcc.n	801b3c4 <_free_r+0x6c>
 801b42c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 801b430:	ea4f 2351 	mov.w	r3, r1, lsr #9
 801b434:	d24a      	bcs.n	801b4cc <_free_r+0x174>
 801b436:	098b      	lsrs	r3, r1, #6
 801b438:	f103 0539 	add.w	r5, r3, #57	; 0x39
 801b43c:	00ed      	lsls	r5, r5, #3
 801b43e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801b442:	f85c 3005 	ldr.w	r3, [ip, r5]
 801b446:	eb0c 0405 	add.w	r4, ip, r5
 801b44a:	3c08      	subs	r4, #8
 801b44c:	429c      	cmp	r4, r3
 801b44e:	d059      	beq.n	801b504 <_free_r+0x1ac>
 801b450:	685a      	ldr	r2, [r3, #4]
 801b452:	f022 0203 	bic.w	r2, r2, #3
 801b456:	428a      	cmp	r2, r1
 801b458:	d902      	bls.n	801b460 <_free_r+0x108>
 801b45a:	689b      	ldr	r3, [r3, #8]
 801b45c:	429c      	cmp	r4, r3
 801b45e:	d1f7      	bne.n	801b450 <_free_r+0xf8>
 801b460:	68dc      	ldr	r4, [r3, #12]
 801b462:	e9c0 3402 	strd	r3, r4, [r0, #8]
 801b466:	60a0      	str	r0, [r4, #8]
 801b468:	60d8      	str	r0, [r3, #12]
 801b46a:	4630      	mov	r0, r6
 801b46c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b470:	f7fa ba68 	b.w	8015944 <__malloc_unlock>
 801b474:	1953      	adds	r3, r2, r5
 801b476:	685b      	ldr	r3, [r3, #4]
 801b478:	07db      	lsls	r3, r3, #31
 801b47a:	d466      	bmi.n	801b54a <_free_r+0x1f2>
 801b47c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 801b480:	4429      	add	r1, r5
 801b482:	f041 0401 	orr.w	r4, r1, #1
 801b486:	60d3      	str	r3, [r2, #12]
 801b488:	609a      	str	r2, [r3, #8]
 801b48a:	6044      	str	r4, [r0, #4]
 801b48c:	5041      	str	r1, [r0, r1]
 801b48e:	4630      	mov	r0, r6
 801b490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b494:	f7fa ba56 	b.w	8015944 <__malloc_unlock>
 801b498:	07db      	lsls	r3, r3, #31
 801b49a:	4429      	add	r1, r5
 801b49c:	d407      	bmi.n	801b4ae <_free_r+0x156>
 801b49e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801b4a2:	1ac0      	subs	r0, r0, r3
 801b4a4:	4419      	add	r1, r3
 801b4a6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 801b4aa:	60d3      	str	r3, [r2, #12]
 801b4ac:	609a      	str	r2, [r3, #8]
 801b4ae:	4b29      	ldr	r3, [pc, #164]	; (801b554 <_free_r+0x1fc>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	f041 0201 	orr.w	r2, r1, #1
 801b4b6:	428b      	cmp	r3, r1
 801b4b8:	6042      	str	r2, [r0, #4]
 801b4ba:	f8cc 0008 	str.w	r0, [ip, #8]
 801b4be:	d895      	bhi.n	801b3ec <_free_r+0x94>
 801b4c0:	4b25      	ldr	r3, [pc, #148]	; (801b558 <_free_r+0x200>)
 801b4c2:	4630      	mov	r0, r6
 801b4c4:	6819      	ldr	r1, [r3, #0]
 801b4c6:	f7ff fef7 	bl	801b2b8 <_malloc_trim_r>
 801b4ca:	e78f      	b.n	801b3ec <_free_r+0x94>
 801b4cc:	2b14      	cmp	r3, #20
 801b4ce:	d90a      	bls.n	801b4e6 <_free_r+0x18e>
 801b4d0:	2b54      	cmp	r3, #84	; 0x54
 801b4d2:	d821      	bhi.n	801b518 <_free_r+0x1c0>
 801b4d4:	0b0b      	lsrs	r3, r1, #12
 801b4d6:	f103 056f 	add.w	r5, r3, #111	; 0x6f
 801b4da:	00ed      	lsls	r5, r5, #3
 801b4dc:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 801b4e0:	e7af      	b.n	801b442 <_free_r+0xea>
 801b4e2:	4429      	add	r1, r5
 801b4e4:	e78e      	b.n	801b404 <_free_r+0xac>
 801b4e6:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 801b4ea:	00ed      	lsls	r5, r5, #3
 801b4ec:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 801b4f0:	e7a7      	b.n	801b442 <_free_r+0xea>
 801b4f2:	f041 0301 	orr.w	r3, r1, #1
 801b4f6:	e9cc 0004 	strd	r0, r0, [ip, #16]
 801b4fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b4fe:	6043      	str	r3, [r0, #4]
 801b500:	5041      	str	r1, [r0, r1]
 801b502:	e773      	b.n	801b3ec <_free_r+0x94>
 801b504:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b508:	1092      	asrs	r2, r2, #2
 801b50a:	2501      	movs	r5, #1
 801b50c:	fa05 f202 	lsl.w	r2, r5, r2
 801b510:	430a      	orrs	r2, r1
 801b512:	f8cc 2004 	str.w	r2, [ip, #4]
 801b516:	e7a4      	b.n	801b462 <_free_r+0x10a>
 801b518:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801b51c:	d806      	bhi.n	801b52c <_free_r+0x1d4>
 801b51e:	0bcb      	lsrs	r3, r1, #15
 801b520:	f103 0578 	add.w	r5, r3, #120	; 0x78
 801b524:	00ed      	lsls	r5, r5, #3
 801b526:	f103 0277 	add.w	r2, r3, #119	; 0x77
 801b52a:	e78a      	b.n	801b442 <_free_r+0xea>
 801b52c:	f240 5254 	movw	r2, #1364	; 0x554
 801b530:	4293      	cmp	r3, r2
 801b532:	d806      	bhi.n	801b542 <_free_r+0x1ea>
 801b534:	0c8b      	lsrs	r3, r1, #18
 801b536:	f103 057d 	add.w	r5, r3, #125	; 0x7d
 801b53a:	00ed      	lsls	r5, r5, #3
 801b53c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 801b540:	e77f      	b.n	801b442 <_free_r+0xea>
 801b542:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 801b546:	227e      	movs	r2, #126	; 0x7e
 801b548:	e77b      	b.n	801b442 <_free_r+0xea>
 801b54a:	f041 0301 	orr.w	r3, r1, #1
 801b54e:	6043      	str	r3, [r0, #4]
 801b550:	6011      	str	r1, [r2, #0]
 801b552:	e74b      	b.n	801b3ec <_free_r+0x94>
 801b554:	20000a44 	.word	0x20000a44
 801b558:	20009b58 	.word	0x20009b58
 801b55c:	20000638 	.word	0x20000638

0801b560 <__sfvwrite_r>:
 801b560:	6893      	ldr	r3, [r2, #8]
 801b562:	2b00      	cmp	r3, #0
 801b564:	f000 808a 	beq.w	801b67c <__sfvwrite_r+0x11c>
 801b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56c:	4690      	mov	r8, r2
 801b56e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b572:	460c      	mov	r4, r1
 801b574:	0711      	lsls	r1, r2, #28
 801b576:	b083      	sub	sp, #12
 801b578:	4681      	mov	r9, r0
 801b57a:	b293      	uxth	r3, r2
 801b57c:	d525      	bpl.n	801b5ca <__sfvwrite_r+0x6a>
 801b57e:	6922      	ldr	r2, [r4, #16]
 801b580:	b31a      	cbz	r2, 801b5ca <__sfvwrite_r+0x6a>
 801b582:	f013 0702 	ands.w	r7, r3, #2
 801b586:	f8d8 5000 	ldr.w	r5, [r8]
 801b58a:	d02d      	beq.n	801b5e8 <__sfvwrite_r+0x88>
 801b58c:	2600      	movs	r6, #0
 801b58e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801b83c <__sfvwrite_r+0x2dc>
 801b592:	4637      	mov	r7, r6
 801b594:	46aa      	mov	sl, r5
 801b596:	455f      	cmp	r7, fp
 801b598:	463b      	mov	r3, r7
 801b59a:	4632      	mov	r2, r6
 801b59c:	bf28      	it	cs
 801b59e:	465b      	movcs	r3, fp
 801b5a0:	4648      	mov	r0, r9
 801b5a2:	2f00      	cmp	r7, #0
 801b5a4:	d04f      	beq.n	801b646 <__sfvwrite_r+0xe6>
 801b5a6:	69e1      	ldr	r1, [r4, #28]
 801b5a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b5aa:	47a8      	blx	r5
 801b5ac:	2800      	cmp	r0, #0
 801b5ae:	dd5b      	ble.n	801b668 <__sfvwrite_r+0x108>
 801b5b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b5b4:	1a1b      	subs	r3, r3, r0
 801b5b6:	4406      	add	r6, r0
 801b5b8:	1a3f      	subs	r7, r7, r0
 801b5ba:	f8c8 3008 	str.w	r3, [r8, #8]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d1e9      	bne.n	801b596 <__sfvwrite_r+0x36>
 801b5c2:	2000      	movs	r0, #0
 801b5c4:	b003      	add	sp, #12
 801b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ca:	4621      	mov	r1, r4
 801b5cc:	4648      	mov	r0, r9
 801b5ce:	f7fe fc7b 	bl	8019ec8 <__swsetup_r>
 801b5d2:	2800      	cmp	r0, #0
 801b5d4:	f040 812f 	bne.w	801b836 <__sfvwrite_r+0x2d6>
 801b5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b5dc:	f8d8 5000 	ldr.w	r5, [r8]
 801b5e0:	b293      	uxth	r3, r2
 801b5e2:	f013 0702 	ands.w	r7, r3, #2
 801b5e6:	d1d1      	bne.n	801b58c <__sfvwrite_r+0x2c>
 801b5e8:	f013 0a01 	ands.w	sl, r3, #1
 801b5ec:	d148      	bne.n	801b680 <__sfvwrite_r+0x120>
 801b5ee:	4656      	mov	r6, sl
 801b5f0:	b32e      	cbz	r6, 801b63e <__sfvwrite_r+0xde>
 801b5f2:	059a      	lsls	r2, r3, #22
 801b5f4:	68a7      	ldr	r7, [r4, #8]
 801b5f6:	f140 808c 	bpl.w	801b712 <__sfvwrite_r+0x1b2>
 801b5fa:	42b7      	cmp	r7, r6
 801b5fc:	46bb      	mov	fp, r7
 801b5fe:	f200 80b7 	bhi.w	801b770 <__sfvwrite_r+0x210>
 801b602:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801b606:	f040 80cb 	bne.w	801b7a0 <__sfvwrite_r+0x240>
 801b60a:	6820      	ldr	r0, [r4, #0]
 801b60c:	4651      	mov	r1, sl
 801b60e:	465a      	mov	r2, fp
 801b610:	f7fa f8d6 	bl	80157c0 <memmove>
 801b614:	68a1      	ldr	r1, [r4, #8]
 801b616:	6823      	ldr	r3, [r4, #0]
 801b618:	1bc9      	subs	r1, r1, r7
 801b61a:	445b      	add	r3, fp
 801b61c:	4637      	mov	r7, r6
 801b61e:	60a1      	str	r1, [r4, #8]
 801b620:	6023      	str	r3, [r4, #0]
 801b622:	2600      	movs	r6, #0
 801b624:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b628:	1bdb      	subs	r3, r3, r7
 801b62a:	44ba      	add	sl, r7
 801b62c:	f8c8 3008 	str.w	r3, [r8, #8]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d0c6      	beq.n	801b5c2 <__sfvwrite_r+0x62>
 801b634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b638:	b29b      	uxth	r3, r3
 801b63a:	2e00      	cmp	r6, #0
 801b63c:	d1d9      	bne.n	801b5f2 <__sfvwrite_r+0x92>
 801b63e:	e9d5 a600 	ldrd	sl, r6, [r5]
 801b642:	3508      	adds	r5, #8
 801b644:	e7d4      	b.n	801b5f0 <__sfvwrite_r+0x90>
 801b646:	e9da 6700 	ldrd	r6, r7, [sl]
 801b64a:	f10a 0a08 	add.w	sl, sl, #8
 801b64e:	e7a2      	b.n	801b596 <__sfvwrite_r+0x36>
 801b650:	4629      	mov	r1, r5
 801b652:	465a      	mov	r2, fp
 801b654:	f7fa f8b4 	bl	80157c0 <memmove>
 801b658:	6823      	ldr	r3, [r4, #0]
 801b65a:	445b      	add	r3, fp
 801b65c:	6023      	str	r3, [r4, #0]
 801b65e:	4621      	mov	r1, r4
 801b660:	4648      	mov	r0, r9
 801b662:	f7ff fd81 	bl	801b168 <_fflush_r>
 801b666:	b358      	cbz	r0, 801b6c0 <__sfvwrite_r+0x160>
 801b668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b674:	81a3      	strh	r3, [r4, #12]
 801b676:	b003      	add	sp, #12
 801b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b67c:	2000      	movs	r0, #0
 801b67e:	4770      	bx	lr
 801b680:	463e      	mov	r6, r7
 801b682:	46aa      	mov	sl, r5
 801b684:	4638      	mov	r0, r7
 801b686:	463d      	mov	r5, r7
 801b688:	9700      	str	r7, [sp, #0]
 801b68a:	b36e      	cbz	r6, 801b6e8 <__sfvwrite_r+0x188>
 801b68c:	2800      	cmp	r0, #0
 801b68e:	d033      	beq.n	801b6f8 <__sfvwrite_r+0x198>
 801b690:	9a00      	ldr	r2, [sp, #0]
 801b692:	6820      	ldr	r0, [r4, #0]
 801b694:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 801b698:	42b2      	cmp	r2, r6
 801b69a:	bf28      	it	cs
 801b69c:	4632      	movcs	r2, r6
 801b69e:	4288      	cmp	r0, r1
 801b6a0:	d904      	bls.n	801b6ac <__sfvwrite_r+0x14c>
 801b6a2:	68a1      	ldr	r1, [r4, #8]
 801b6a4:	eb03 0b01 	add.w	fp, r3, r1
 801b6a8:	455a      	cmp	r2, fp
 801b6aa:	dcd1      	bgt.n	801b650 <__sfvwrite_r+0xf0>
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	dc6a      	bgt.n	801b786 <__sfvwrite_r+0x226>
 801b6b0:	69e1      	ldr	r1, [r4, #28]
 801b6b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801b6b4:	462a      	mov	r2, r5
 801b6b6:	4648      	mov	r0, r9
 801b6b8:	47b8      	blx	r7
 801b6ba:	f1b0 0b00 	subs.w	fp, r0, #0
 801b6be:	ddd3      	ble.n	801b668 <__sfvwrite_r+0x108>
 801b6c0:	9b00      	ldr	r3, [sp, #0]
 801b6c2:	ebb3 030b 	subs.w	r3, r3, fp
 801b6c6:	9300      	str	r3, [sp, #0]
 801b6c8:	d056      	beq.n	801b778 <__sfvwrite_r+0x218>
 801b6ca:	2001      	movs	r0, #1
 801b6cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b6d0:	eba3 030b 	sub.w	r3, r3, fp
 801b6d4:	445d      	add	r5, fp
 801b6d6:	eba6 060b 	sub.w	r6, r6, fp
 801b6da:	f8c8 3008 	str.w	r3, [r8, #8]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	f43f af6f 	beq.w	801b5c2 <__sfvwrite_r+0x62>
 801b6e4:	2e00      	cmp	r6, #0
 801b6e6:	d1d1      	bne.n	801b68c <__sfvwrite_r+0x12c>
 801b6e8:	f10a 0308 	add.w	r3, sl, #8
 801b6ec:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 801b6f0:	469a      	mov	sl, r3
 801b6f2:	3308      	adds	r3, #8
 801b6f4:	2e00      	cmp	r6, #0
 801b6f6:	d0f9      	beq.n	801b6ec <__sfvwrite_r+0x18c>
 801b6f8:	4632      	mov	r2, r6
 801b6fa:	210a      	movs	r1, #10
 801b6fc:	4628      	mov	r0, r5
 801b6fe:	f7e5 f82f 	bl	8000760 <memchr>
 801b702:	2800      	cmp	r0, #0
 801b704:	f000 808e 	beq.w	801b824 <__sfvwrite_r+0x2c4>
 801b708:	3001      	adds	r0, #1
 801b70a:	1b43      	subs	r3, r0, r5
 801b70c:	9300      	str	r3, [sp, #0]
 801b70e:	461a      	mov	r2, r3
 801b710:	e7bf      	b.n	801b692 <__sfvwrite_r+0x132>
 801b712:	6820      	ldr	r0, [r4, #0]
 801b714:	6923      	ldr	r3, [r4, #16]
 801b716:	4298      	cmp	r0, r3
 801b718:	d814      	bhi.n	801b744 <__sfvwrite_r+0x1e4>
 801b71a:	6961      	ldr	r1, [r4, #20]
 801b71c:	42b1      	cmp	r1, r6
 801b71e:	d811      	bhi.n	801b744 <__sfvwrite_r+0x1e4>
 801b720:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b724:	42b3      	cmp	r3, r6
 801b726:	bf28      	it	cs
 801b728:	4633      	movcs	r3, r6
 801b72a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801b72c:	fb93 f3f1 	sdiv	r3, r3, r1
 801b730:	4652      	mov	r2, sl
 801b732:	fb01 f303 	mul.w	r3, r1, r3
 801b736:	4648      	mov	r0, r9
 801b738:	69e1      	ldr	r1, [r4, #28]
 801b73a:	47b8      	blx	r7
 801b73c:	1e07      	subs	r7, r0, #0
 801b73e:	dd93      	ble.n	801b668 <__sfvwrite_r+0x108>
 801b740:	1bf6      	subs	r6, r6, r7
 801b742:	e76f      	b.n	801b624 <__sfvwrite_r+0xc4>
 801b744:	42b7      	cmp	r7, r6
 801b746:	bf28      	it	cs
 801b748:	4637      	movcs	r7, r6
 801b74a:	463a      	mov	r2, r7
 801b74c:	4651      	mov	r1, sl
 801b74e:	f7fa f837 	bl	80157c0 <memmove>
 801b752:	68a3      	ldr	r3, [r4, #8]
 801b754:	6822      	ldr	r2, [r4, #0]
 801b756:	1bdb      	subs	r3, r3, r7
 801b758:	443a      	add	r2, r7
 801b75a:	60a3      	str	r3, [r4, #8]
 801b75c:	6022      	str	r2, [r4, #0]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d1ee      	bne.n	801b740 <__sfvwrite_r+0x1e0>
 801b762:	4621      	mov	r1, r4
 801b764:	4648      	mov	r0, r9
 801b766:	f7ff fcff 	bl	801b168 <_fflush_r>
 801b76a:	2800      	cmp	r0, #0
 801b76c:	d0e8      	beq.n	801b740 <__sfvwrite_r+0x1e0>
 801b76e:	e77b      	b.n	801b668 <__sfvwrite_r+0x108>
 801b770:	6820      	ldr	r0, [r4, #0]
 801b772:	4637      	mov	r7, r6
 801b774:	46b3      	mov	fp, r6
 801b776:	e749      	b.n	801b60c <__sfvwrite_r+0xac>
 801b778:	4621      	mov	r1, r4
 801b77a:	4648      	mov	r0, r9
 801b77c:	f7ff fcf4 	bl	801b168 <_fflush_r>
 801b780:	2800      	cmp	r0, #0
 801b782:	d0a3      	beq.n	801b6cc <__sfvwrite_r+0x16c>
 801b784:	e770      	b.n	801b668 <__sfvwrite_r+0x108>
 801b786:	4629      	mov	r1, r5
 801b788:	9201      	str	r2, [sp, #4]
 801b78a:	f7fa f819 	bl	80157c0 <memmove>
 801b78e:	9a01      	ldr	r2, [sp, #4]
 801b790:	68a1      	ldr	r1, [r4, #8]
 801b792:	6823      	ldr	r3, [r4, #0]
 801b794:	1a89      	subs	r1, r1, r2
 801b796:	4413      	add	r3, r2
 801b798:	60a1      	str	r1, [r4, #8]
 801b79a:	6023      	str	r3, [r4, #0]
 801b79c:	4693      	mov	fp, r2
 801b79e:	e78f      	b.n	801b6c0 <__sfvwrite_r+0x160>
 801b7a0:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 801b7a4:	6822      	ldr	r2, [r4, #0]
 801b7a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b7aa:	eba2 0b01 	sub.w	fp, r2, r1
 801b7ae:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801b7b2:	f10b 0001 	add.w	r0, fp, #1
 801b7b6:	107f      	asrs	r7, r7, #1
 801b7b8:	4430      	add	r0, r6
 801b7ba:	42b8      	cmp	r0, r7
 801b7bc:	463a      	mov	r2, r7
 801b7be:	bf84      	itt	hi
 801b7c0:	4607      	movhi	r7, r0
 801b7c2:	463a      	movhi	r2, r7
 801b7c4:	055b      	lsls	r3, r3, #21
 801b7c6:	d51b      	bpl.n	801b800 <__sfvwrite_r+0x2a0>
 801b7c8:	4611      	mov	r1, r2
 801b7ca:	4648      	mov	r0, r9
 801b7cc:	f7f9 fd0e 	bl	80151ec <_malloc_r>
 801b7d0:	b358      	cbz	r0, 801b82a <__sfvwrite_r+0x2ca>
 801b7d2:	465a      	mov	r2, fp
 801b7d4:	6921      	ldr	r1, [r4, #16]
 801b7d6:	9000      	str	r0, [sp, #0]
 801b7d8:	f7e4 fd32 	bl	8000240 <memcpy>
 801b7dc:	89a2      	ldrh	r2, [r4, #12]
 801b7de:	9b00      	ldr	r3, [sp, #0]
 801b7e0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801b7e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801b7e8:	81a2      	strh	r2, [r4, #12]
 801b7ea:	eba7 020b 	sub.w	r2, r7, fp
 801b7ee:	eb03 000b 	add.w	r0, r3, fp
 801b7f2:	6167      	str	r7, [r4, #20]
 801b7f4:	6123      	str	r3, [r4, #16]
 801b7f6:	6020      	str	r0, [r4, #0]
 801b7f8:	60a2      	str	r2, [r4, #8]
 801b7fa:	4637      	mov	r7, r6
 801b7fc:	46b3      	mov	fp, r6
 801b7fe:	e705      	b.n	801b60c <__sfvwrite_r+0xac>
 801b800:	4648      	mov	r0, r9
 801b802:	f7fa f8e7 	bl	80159d4 <_realloc_r>
 801b806:	4603      	mov	r3, r0
 801b808:	2800      	cmp	r0, #0
 801b80a:	d1ee      	bne.n	801b7ea <__sfvwrite_r+0x28a>
 801b80c:	6921      	ldr	r1, [r4, #16]
 801b80e:	4648      	mov	r0, r9
 801b810:	f7ff fda2 	bl	801b358 <_free_r>
 801b814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b818:	220c      	movs	r2, #12
 801b81a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b81e:	f8c9 2000 	str.w	r2, [r9]
 801b822:	e723      	b.n	801b66c <__sfvwrite_r+0x10c>
 801b824:	1c72      	adds	r2, r6, #1
 801b826:	9200      	str	r2, [sp, #0]
 801b828:	e733      	b.n	801b692 <__sfvwrite_r+0x132>
 801b82a:	230c      	movs	r3, #12
 801b82c:	f8c9 3000 	str.w	r3, [r9]
 801b830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b834:	e71a      	b.n	801b66c <__sfvwrite_r+0x10c>
 801b836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b83a:	e6c3      	b.n	801b5c4 <__sfvwrite_r+0x64>
 801b83c:	7ffffc00 	.word	0x7ffffc00

0801b840 <_fwalk_reent>:
 801b840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b844:	4607      	mov	r7, r0
 801b846:	4688      	mov	r8, r1
 801b848:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 801b84c:	f04f 0900 	mov.w	r9, #0
 801b850:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 801b854:	3d01      	subs	r5, #1
 801b856:	d411      	bmi.n	801b87c <_fwalk_reent+0x3c>
 801b858:	89a3      	ldrh	r3, [r4, #12]
 801b85a:	2b01      	cmp	r3, #1
 801b85c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 801b860:	d908      	bls.n	801b874 <_fwalk_reent+0x34>
 801b862:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801b866:	3301      	adds	r3, #1
 801b868:	d004      	beq.n	801b874 <_fwalk_reent+0x34>
 801b86a:	4621      	mov	r1, r4
 801b86c:	4638      	mov	r0, r7
 801b86e:	47c0      	blx	r8
 801b870:	ea49 0900 	orr.w	r9, r9, r0
 801b874:	1c6b      	adds	r3, r5, #1
 801b876:	f104 0468 	add.w	r4, r4, #104	; 0x68
 801b87a:	d1ed      	bne.n	801b858 <_fwalk_reent+0x18>
 801b87c:	6836      	ldr	r6, [r6, #0]
 801b87e:	2e00      	cmp	r6, #0
 801b880:	d1e6      	bne.n	801b850 <_fwalk_reent+0x10>
 801b882:	4648      	mov	r0, r9
 801b884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b888 <_localeconv_r>:
 801b888:	4800      	ldr	r0, [pc, #0]	; (801b88c <_localeconv_r+0x4>)
 801b88a:	4770      	bx	lr
 801b88c:	20000b3c 	.word	0x20000b3c

0801b890 <__swhatbuf_r>:
 801b890:	b570      	push	{r4, r5, r6, lr}
 801b892:	460c      	mov	r4, r1
 801b894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b898:	2900      	cmp	r1, #0
 801b89a:	b096      	sub	sp, #88	; 0x58
 801b89c:	4615      	mov	r5, r2
 801b89e:	461e      	mov	r6, r3
 801b8a0:	db14      	blt.n	801b8cc <__swhatbuf_r+0x3c>
 801b8a2:	466a      	mov	r2, sp
 801b8a4:	f001 fdd8 	bl	801d458 <_fstat_r>
 801b8a8:	2800      	cmp	r0, #0
 801b8aa:	db0f      	blt.n	801b8cc <__swhatbuf_r+0x3c>
 801b8ac:	9a01      	ldr	r2, [sp, #4]
 801b8ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b8b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 801b8b6:	fab2 f282 	clz	r2, r2
 801b8ba:	0952      	lsrs	r2, r2, #5
 801b8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b8c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b8c4:	6032      	str	r2, [r6, #0]
 801b8c6:	602b      	str	r3, [r5, #0]
 801b8c8:	b016      	add	sp, #88	; 0x58
 801b8ca:	bd70      	pop	{r4, r5, r6, pc}
 801b8cc:	89a1      	ldrh	r1, [r4, #12]
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 801b8d4:	6033      	str	r3, [r6, #0]
 801b8d6:	d004      	beq.n	801b8e2 <__swhatbuf_r+0x52>
 801b8d8:	2240      	movs	r2, #64	; 0x40
 801b8da:	4618      	mov	r0, r3
 801b8dc:	602a      	str	r2, [r5, #0]
 801b8de:	b016      	add	sp, #88	; 0x58
 801b8e0:	bd70      	pop	{r4, r5, r6, pc}
 801b8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b8e6:	602b      	str	r3, [r5, #0]
 801b8e8:	b016      	add	sp, #88	; 0x58
 801b8ea:	bd70      	pop	{r4, r5, r6, pc}

0801b8ec <__smakebuf_r>:
 801b8ec:	b570      	push	{r4, r5, r6, lr}
 801b8ee:	898b      	ldrh	r3, [r1, #12]
 801b8f0:	079d      	lsls	r5, r3, #30
 801b8f2:	b082      	sub	sp, #8
 801b8f4:	460c      	mov	r4, r1
 801b8f6:	d507      	bpl.n	801b908 <__smakebuf_r+0x1c>
 801b8f8:	f101 0343 	add.w	r3, r1, #67	; 0x43
 801b8fc:	2201      	movs	r2, #1
 801b8fe:	e9c1 3204 	strd	r3, r2, [r1, #16]
 801b902:	600b      	str	r3, [r1, #0]
 801b904:	b002      	add	sp, #8
 801b906:	bd70      	pop	{r4, r5, r6, pc}
 801b908:	ab01      	add	r3, sp, #4
 801b90a:	466a      	mov	r2, sp
 801b90c:	4606      	mov	r6, r0
 801b90e:	f7ff ffbf 	bl	801b890 <__swhatbuf_r>
 801b912:	9900      	ldr	r1, [sp, #0]
 801b914:	4605      	mov	r5, r0
 801b916:	4630      	mov	r0, r6
 801b918:	f7f9 fc68 	bl	80151ec <_malloc_r>
 801b91c:	b180      	cbz	r0, 801b940 <__smakebuf_r+0x54>
 801b91e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b922:	4b17      	ldr	r3, [pc, #92]	; (801b980 <__smakebuf_r+0x94>)
 801b924:	63f3      	str	r3, [r6, #60]	; 0x3c
 801b926:	9901      	ldr	r1, [sp, #4]
 801b928:	6020      	str	r0, [r4, #0]
 801b92a:	f042 0380 	orr.w	r3, r2, #128	; 0x80
 801b92e:	9a00      	ldr	r2, [sp, #0]
 801b930:	81a3      	strh	r3, [r4, #12]
 801b932:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801b936:	b999      	cbnz	r1, 801b960 <__smakebuf_r+0x74>
 801b938:	432b      	orrs	r3, r5
 801b93a:	81a3      	strh	r3, [r4, #12]
 801b93c:	b002      	add	sp, #8
 801b93e:	bd70      	pop	{r4, r5, r6, pc}
 801b940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b944:	059a      	lsls	r2, r3, #22
 801b946:	d4dd      	bmi.n	801b904 <__smakebuf_r+0x18>
 801b948:	f023 0303 	bic.w	r3, r3, #3
 801b94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b950:	f043 0302 	orr.w	r3, r3, #2
 801b954:	2101      	movs	r1, #1
 801b956:	e9c4 2104 	strd	r2, r1, [r4, #16]
 801b95a:	81a3      	strh	r3, [r4, #12]
 801b95c:	6022      	str	r2, [r4, #0]
 801b95e:	e7d1      	b.n	801b904 <__smakebuf_r+0x18>
 801b960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b964:	4630      	mov	r0, r6
 801b966:	f001 fd8d 	bl	801d484 <_isatty_r>
 801b96a:	b910      	cbnz	r0, 801b972 <__smakebuf_r+0x86>
 801b96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b970:	e7e2      	b.n	801b938 <__smakebuf_r+0x4c>
 801b972:	89a2      	ldrh	r2, [r4, #12]
 801b974:	f022 0203 	bic.w	r2, r2, #3
 801b978:	f042 0201 	orr.w	r2, r2, #1
 801b97c:	b213      	sxth	r3, r2
 801b97e:	e7db      	b.n	801b938 <__smakebuf_r+0x4c>
 801b980:	0801b215 	.word	0x0801b215

0801b984 <_Balloc>:
 801b984:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801b986:	b570      	push	{r4, r5, r6, lr}
 801b988:	4605      	mov	r5, r0
 801b98a:	460c      	mov	r4, r1
 801b98c:	b14b      	cbz	r3, 801b9a2 <_Balloc+0x1e>
 801b98e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b992:	b180      	cbz	r0, 801b9b6 <_Balloc+0x32>
 801b994:	6802      	ldr	r2, [r0, #0]
 801b996:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801b99a:	2300      	movs	r3, #0
 801b99c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b9a0:	bd70      	pop	{r4, r5, r6, pc}
 801b9a2:	2221      	movs	r2, #33	; 0x21
 801b9a4:	2104      	movs	r1, #4
 801b9a6:	f7f9 fafd 	bl	8014fa4 <_calloc_r>
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	64e8      	str	r0, [r5, #76]	; 0x4c
 801b9ae:	2800      	cmp	r0, #0
 801b9b0:	d1ed      	bne.n	801b98e <_Balloc+0xa>
 801b9b2:	2000      	movs	r0, #0
 801b9b4:	bd70      	pop	{r4, r5, r6, pc}
 801b9b6:	2101      	movs	r1, #1
 801b9b8:	fa01 f604 	lsl.w	r6, r1, r4
 801b9bc:	1d72      	adds	r2, r6, #5
 801b9be:	4628      	mov	r0, r5
 801b9c0:	0092      	lsls	r2, r2, #2
 801b9c2:	f7f9 faef 	bl	8014fa4 <_calloc_r>
 801b9c6:	2800      	cmp	r0, #0
 801b9c8:	d0f3      	beq.n	801b9b2 <_Balloc+0x2e>
 801b9ca:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801b9ce:	e7e4      	b.n	801b99a <_Balloc+0x16>

0801b9d0 <_Bfree>:
 801b9d0:	b131      	cbz	r1, 801b9e0 <_Bfree+0x10>
 801b9d2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801b9d4:	684a      	ldr	r2, [r1, #4]
 801b9d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b9da:	6008      	str	r0, [r1, #0]
 801b9dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801b9e0:	4770      	bx	lr
 801b9e2:	bf00      	nop

0801b9e4 <__multadd>:
 801b9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9e8:	690f      	ldr	r7, [r1, #16]
 801b9ea:	4688      	mov	r8, r1
 801b9ec:	4681      	mov	r9, r0
 801b9ee:	461d      	mov	r5, r3
 801b9f0:	f101 0014 	add.w	r0, r1, #20
 801b9f4:	2100      	movs	r1, #0
 801b9f6:	6806      	ldr	r6, [r0, #0]
 801b9f8:	b2b4      	uxth	r4, r6
 801b9fa:	fb02 5304 	mla	r3, r2, r4, r5
 801b9fe:	0c1c      	lsrs	r4, r3, #16
 801ba00:	0c35      	lsrs	r5, r6, #16
 801ba02:	fb02 4505 	mla	r5, r2, r5, r4
 801ba06:	3101      	adds	r1, #1
 801ba08:	b29c      	uxth	r4, r3
 801ba0a:	eb04 4405 	add.w	r4, r4, r5, lsl #16
 801ba0e:	428f      	cmp	r7, r1
 801ba10:	f840 4b04 	str.w	r4, [r0], #4
 801ba14:	ea4f 4515 	mov.w	r5, r5, lsr #16
 801ba18:	dced      	bgt.n	801b9f6 <__multadd+0x12>
 801ba1a:	b14d      	cbz	r5, 801ba30 <__multadd+0x4c>
 801ba1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ba20:	42bb      	cmp	r3, r7
 801ba22:	dd08      	ble.n	801ba36 <__multadd+0x52>
 801ba24:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 801ba28:	3701      	adds	r7, #1
 801ba2a:	615d      	str	r5, [r3, #20]
 801ba2c:	f8c8 7010 	str.w	r7, [r8, #16]
 801ba30:	4640      	mov	r0, r8
 801ba32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ba3a:	4648      	mov	r0, r9
 801ba3c:	3101      	adds	r1, #1
 801ba3e:	f7ff ffa1 	bl	801b984 <_Balloc>
 801ba42:	4604      	mov	r4, r0
 801ba44:	b1d0      	cbz	r0, 801ba7c <__multadd+0x98>
 801ba46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ba4a:	3202      	adds	r2, #2
 801ba4c:	f108 010c 	add.w	r1, r8, #12
 801ba50:	0092      	lsls	r2, r2, #2
 801ba52:	300c      	adds	r0, #12
 801ba54:	f7e4 fbf4 	bl	8000240 <memcpy>
 801ba58:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 801ba5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ba60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ba64:	f8c8 1000 	str.w	r1, [r8]
 801ba68:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 801ba6c:	46a0      	mov	r8, r4
 801ba6e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 801ba72:	3701      	adds	r7, #1
 801ba74:	615d      	str	r5, [r3, #20]
 801ba76:	f8c8 7010 	str.w	r7, [r8, #16]
 801ba7a:	e7d9      	b.n	801ba30 <__multadd+0x4c>
 801ba7c:	4602      	mov	r2, r0
 801ba7e:	4b02      	ldr	r3, [pc, #8]	; (801ba88 <__multadd+0xa4>)
 801ba80:	4802      	ldr	r0, [pc, #8]	; (801ba8c <__multadd+0xa8>)
 801ba82:	21b5      	movs	r1, #181	; 0xb5
 801ba84:	f001 fbb6 	bl	801d1f4 <__assert_func>
 801ba88:	080205b8 	.word	0x080205b8
 801ba8c:	08020648 	.word	0x08020648

0801ba90 <__hi0bits>:
 801ba90:	0c03      	lsrs	r3, r0, #16
 801ba92:	041b      	lsls	r3, r3, #16
 801ba94:	b9d3      	cbnz	r3, 801bacc <__hi0bits+0x3c>
 801ba96:	0400      	lsls	r0, r0, #16
 801ba98:	2310      	movs	r3, #16
 801ba9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ba9e:	bf04      	itt	eq
 801baa0:	0200      	lsleq	r0, r0, #8
 801baa2:	3308      	addeq	r3, #8
 801baa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801baa8:	bf04      	itt	eq
 801baaa:	0100      	lsleq	r0, r0, #4
 801baac:	3304      	addeq	r3, #4
 801baae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bab2:	bf04      	itt	eq
 801bab4:	0080      	lsleq	r0, r0, #2
 801bab6:	3302      	addeq	r3, #2
 801bab8:	2800      	cmp	r0, #0
 801baba:	db05      	blt.n	801bac8 <__hi0bits+0x38>
 801babc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801bac0:	f103 0301 	add.w	r3, r3, #1
 801bac4:	bf08      	it	eq
 801bac6:	2320      	moveq	r3, #32
 801bac8:	4618      	mov	r0, r3
 801baca:	4770      	bx	lr
 801bacc:	2300      	movs	r3, #0
 801bace:	e7e4      	b.n	801ba9a <__hi0bits+0xa>

0801bad0 <__lo0bits>:
 801bad0:	6803      	ldr	r3, [r0, #0]
 801bad2:	f013 0207 	ands.w	r2, r3, #7
 801bad6:	4601      	mov	r1, r0
 801bad8:	d007      	beq.n	801baea <__lo0bits+0x1a>
 801bada:	07da      	lsls	r2, r3, #31
 801badc:	d420      	bmi.n	801bb20 <__lo0bits+0x50>
 801bade:	0798      	lsls	r0, r3, #30
 801bae0:	d522      	bpl.n	801bb28 <__lo0bits+0x58>
 801bae2:	085b      	lsrs	r3, r3, #1
 801bae4:	600b      	str	r3, [r1, #0]
 801bae6:	2001      	movs	r0, #1
 801bae8:	4770      	bx	lr
 801baea:	b298      	uxth	r0, r3
 801baec:	b1a8      	cbz	r0, 801bb1a <__lo0bits+0x4a>
 801baee:	4610      	mov	r0, r2
 801baf0:	f013 0fff 	tst.w	r3, #255	; 0xff
 801baf4:	bf04      	itt	eq
 801baf6:	0a1b      	lsreq	r3, r3, #8
 801baf8:	3008      	addeq	r0, #8
 801bafa:	071a      	lsls	r2, r3, #28
 801bafc:	bf04      	itt	eq
 801bafe:	091b      	lsreq	r3, r3, #4
 801bb00:	3004      	addeq	r0, #4
 801bb02:	079a      	lsls	r2, r3, #30
 801bb04:	bf04      	itt	eq
 801bb06:	089b      	lsreq	r3, r3, #2
 801bb08:	3002      	addeq	r0, #2
 801bb0a:	07da      	lsls	r2, r3, #31
 801bb0c:	d403      	bmi.n	801bb16 <__lo0bits+0x46>
 801bb0e:	085b      	lsrs	r3, r3, #1
 801bb10:	f100 0001 	add.w	r0, r0, #1
 801bb14:	d006      	beq.n	801bb24 <__lo0bits+0x54>
 801bb16:	600b      	str	r3, [r1, #0]
 801bb18:	4770      	bx	lr
 801bb1a:	0c1b      	lsrs	r3, r3, #16
 801bb1c:	2010      	movs	r0, #16
 801bb1e:	e7e7      	b.n	801baf0 <__lo0bits+0x20>
 801bb20:	2000      	movs	r0, #0
 801bb22:	4770      	bx	lr
 801bb24:	2020      	movs	r0, #32
 801bb26:	4770      	bx	lr
 801bb28:	089b      	lsrs	r3, r3, #2
 801bb2a:	600b      	str	r3, [r1, #0]
 801bb2c:	2002      	movs	r0, #2
 801bb2e:	4770      	bx	lr

0801bb30 <__i2b>:
 801bb30:	b510      	push	{r4, lr}
 801bb32:	460c      	mov	r4, r1
 801bb34:	2101      	movs	r1, #1
 801bb36:	f7ff ff25 	bl	801b984 <_Balloc>
 801bb3a:	4602      	mov	r2, r0
 801bb3c:	b118      	cbz	r0, 801bb46 <__i2b+0x16>
 801bb3e:	2301      	movs	r3, #1
 801bb40:	e9c0 3404 	strd	r3, r4, [r0, #16]
 801bb44:	bd10      	pop	{r4, pc}
 801bb46:	4b03      	ldr	r3, [pc, #12]	; (801bb54 <__i2b+0x24>)
 801bb48:	4803      	ldr	r0, [pc, #12]	; (801bb58 <__i2b+0x28>)
 801bb4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801bb4e:	f001 fb51 	bl	801d1f4 <__assert_func>
 801bb52:	bf00      	nop
 801bb54:	080205b8 	.word	0x080205b8
 801bb58:	08020648 	.word	0x08020648

0801bb5c <__multiply>:
 801bb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb60:	690d      	ldr	r5, [r1, #16]
 801bb62:	6917      	ldr	r7, [r2, #16]
 801bb64:	42bd      	cmp	r5, r7
 801bb66:	b085      	sub	sp, #20
 801bb68:	460e      	mov	r6, r1
 801bb6a:	4614      	mov	r4, r2
 801bb6c:	db05      	blt.n	801bb7a <__multiply+0x1e>
 801bb6e:	463a      	mov	r2, r7
 801bb70:	4623      	mov	r3, r4
 801bb72:	462f      	mov	r7, r5
 801bb74:	460c      	mov	r4, r1
 801bb76:	4615      	mov	r5, r2
 801bb78:	461e      	mov	r6, r3
 801bb7a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 801bb7e:	eb07 0805 	add.w	r8, r7, r5
 801bb82:	4543      	cmp	r3, r8
 801bb84:	bfb8      	it	lt
 801bb86:	3101      	addlt	r1, #1
 801bb88:	f7ff fefc 	bl	801b984 <_Balloc>
 801bb8c:	9001      	str	r0, [sp, #4]
 801bb8e:	2800      	cmp	r0, #0
 801bb90:	f000 8088 	beq.w	801bca4 <__multiply+0x148>
 801bb94:	9b01      	ldr	r3, [sp, #4]
 801bb96:	f103 0914 	add.w	r9, r3, #20
 801bb9a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 801bb9e:	45d1      	cmp	r9, sl
 801bba0:	d205      	bcs.n	801bbae <__multiply+0x52>
 801bba2:	464b      	mov	r3, r9
 801bba4:	2200      	movs	r2, #0
 801bba6:	f843 2b04 	str.w	r2, [r3], #4
 801bbaa:	459a      	cmp	sl, r3
 801bbac:	d8fb      	bhi.n	801bba6 <__multiply+0x4a>
 801bbae:	f106 0e14 	add.w	lr, r6, #20
 801bbb2:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
 801bbb6:	f104 0314 	add.w	r3, r4, #20
 801bbba:	45de      	cmp	lr, fp
 801bbbc:	461a      	mov	r2, r3
 801bbbe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bbc2:	d23e      	bcs.n	801bc42 <__multiply+0xe6>
 801bbc4:	1b3b      	subs	r3, r7, r4
 801bbc6:	3b15      	subs	r3, #21
 801bbc8:	f023 0303 	bic.w	r3, r3, #3
 801bbcc:	3304      	adds	r3, #4
 801bbce:	3415      	adds	r4, #21
 801bbd0:	42a7      	cmp	r7, r4
 801bbd2:	bf38      	it	cc
 801bbd4:	2304      	movcc	r3, #4
 801bbd6:	e9cd a802 	strd	sl, r8, [sp, #8]
 801bbda:	4698      	mov	r8, r3
 801bbdc:	4692      	mov	sl, r2
 801bbde:	e003      	b.n	801bbe8 <__multiply+0x8c>
 801bbe0:	45f3      	cmp	fp, lr
 801bbe2:	f109 0904 	add.w	r9, r9, #4
 801bbe6:	d92a      	bls.n	801bc3e <__multiply+0xe2>
 801bbe8:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bbec:	b286      	uxth	r6, r0
 801bbee:	2e00      	cmp	r6, #0
 801bbf0:	d138      	bne.n	801bc64 <__multiply+0x108>
 801bbf2:	0c00      	lsrs	r0, r0, #16
 801bbf4:	d0f4      	beq.n	801bbe0 <__multiply+0x84>
 801bbf6:	f8d9 3000 	ldr.w	r3, [r9]
 801bbfa:	4654      	mov	r4, sl
 801bbfc:	461e      	mov	r6, r3
 801bbfe:	464d      	mov	r5, r9
 801bc00:	f04f 0c00 	mov.w	ip, #0
 801bc04:	8822      	ldrh	r2, [r4, #0]
 801bc06:	0c36      	lsrs	r6, r6, #16
 801bc08:	fb00 6602 	mla	r6, r0, r2, r6
 801bc0c:	44b4      	add	ip, r6
 801bc0e:	b29b      	uxth	r3, r3
 801bc10:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801bc14:	f845 3b04 	str.w	r3, [r5], #4
 801bc18:	f854 3b04 	ldr.w	r3, [r4], #4
 801bc1c:	682e      	ldr	r6, [r5, #0]
 801bc1e:	0c1b      	lsrs	r3, r3, #16
 801bc20:	b2b2      	uxth	r2, r6
 801bc22:	fb00 2303 	mla	r3, r0, r3, r2
 801bc26:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 801bc2a:	42a7      	cmp	r7, r4
 801bc2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801bc30:	d8e8      	bhi.n	801bc04 <__multiply+0xa8>
 801bc32:	45f3      	cmp	fp, lr
 801bc34:	f849 3008 	str.w	r3, [r9, r8]
 801bc38:	f109 0904 	add.w	r9, r9, #4
 801bc3c:	d8d4      	bhi.n	801bbe8 <__multiply+0x8c>
 801bc3e:	e9dd a802 	ldrd	sl, r8, [sp, #8]
 801bc42:	f1b8 0f00 	cmp.w	r8, #0
 801bc46:	dc03      	bgt.n	801bc50 <__multiply+0xf4>
 801bc48:	e006      	b.n	801bc58 <__multiply+0xfc>
 801bc4a:	f1b8 0801 	subs.w	r8, r8, #1
 801bc4e:	d003      	beq.n	801bc58 <__multiply+0xfc>
 801bc50:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d0f8      	beq.n	801bc4a <__multiply+0xee>
 801bc58:	9801      	ldr	r0, [sp, #4]
 801bc5a:	f8c0 8010 	str.w	r8, [r0, #16]
 801bc5e:	b005      	add	sp, #20
 801bc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc64:	4655      	mov	r5, sl
 801bc66:	464c      	mov	r4, r9
 801bc68:	2300      	movs	r3, #0
 801bc6a:	f855 1b04 	ldr.w	r1, [r5], #4
 801bc6e:	6820      	ldr	r0, [r4, #0]
 801bc70:	b28a      	uxth	r2, r1
 801bc72:	fa1f fc80 	uxth.w	ip, r0
 801bc76:	fb06 c202 	mla	r2, r6, r2, ip
 801bc7a:	0c09      	lsrs	r1, r1, #16
 801bc7c:	0c00      	lsrs	r0, r0, #16
 801bc7e:	4413      	add	r3, r2
 801bc80:	fb06 0201 	mla	r2, r6, r1, r0
 801bc84:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801bc88:	b29b      	uxth	r3, r3
 801bc8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bc8e:	42af      	cmp	r7, r5
 801bc90:	f844 3b04 	str.w	r3, [r4], #4
 801bc94:	ea4f 4312 	mov.w	r3, r2, lsr #16
 801bc98:	d8e7      	bhi.n	801bc6a <__multiply+0x10e>
 801bc9a:	f849 3008 	str.w	r3, [r9, r8]
 801bc9e:	f85e 0c04 	ldr.w	r0, [lr, #-4]
 801bca2:	e7a6      	b.n	801bbf2 <__multiply+0x96>
 801bca4:	4602      	mov	r2, r0
 801bca6:	4b03      	ldr	r3, [pc, #12]	; (801bcb4 <__multiply+0x158>)
 801bca8:	4803      	ldr	r0, [pc, #12]	; (801bcb8 <__multiply+0x15c>)
 801bcaa:	f240 115d 	movw	r1, #349	; 0x15d
 801bcae:	f001 faa1 	bl	801d1f4 <__assert_func>
 801bcb2:	bf00      	nop
 801bcb4:	080205b8 	.word	0x080205b8
 801bcb8:	08020648 	.word	0x08020648

0801bcbc <__pow5mult>:
 801bcbc:	f012 0303 	ands.w	r3, r2, #3
 801bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcc4:	4614      	mov	r4, r2
 801bcc6:	4607      	mov	r7, r0
 801bcc8:	d12e      	bne.n	801bd28 <__pow5mult+0x6c>
 801bcca:	460e      	mov	r6, r1
 801bccc:	10a4      	asrs	r4, r4, #2
 801bcce:	d01c      	beq.n	801bd0a <__pow5mult+0x4e>
 801bcd0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 801bcd2:	b395      	cbz	r5, 801bd3a <__pow5mult+0x7e>
 801bcd4:	07e3      	lsls	r3, r4, #31
 801bcd6:	f04f 0800 	mov.w	r8, #0
 801bcda:	d406      	bmi.n	801bcea <__pow5mult+0x2e>
 801bcdc:	1064      	asrs	r4, r4, #1
 801bcde:	d014      	beq.n	801bd0a <__pow5mult+0x4e>
 801bce0:	6828      	ldr	r0, [r5, #0]
 801bce2:	b1a8      	cbz	r0, 801bd10 <__pow5mult+0x54>
 801bce4:	4605      	mov	r5, r0
 801bce6:	07e3      	lsls	r3, r4, #31
 801bce8:	d5f8      	bpl.n	801bcdc <__pow5mult+0x20>
 801bcea:	462a      	mov	r2, r5
 801bcec:	4631      	mov	r1, r6
 801bcee:	4638      	mov	r0, r7
 801bcf0:	f7ff ff34 	bl	801bb5c <__multiply>
 801bcf4:	b1b6      	cbz	r6, 801bd24 <__pow5mult+0x68>
 801bcf6:	6871      	ldr	r1, [r6, #4]
 801bcf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcfa:	1064      	asrs	r4, r4, #1
 801bcfc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 801bd00:	6032      	str	r2, [r6, #0]
 801bd02:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
 801bd06:	4606      	mov	r6, r0
 801bd08:	d1ea      	bne.n	801bce0 <__pow5mult+0x24>
 801bd0a:	4630      	mov	r0, r6
 801bd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd10:	462a      	mov	r2, r5
 801bd12:	4629      	mov	r1, r5
 801bd14:	4638      	mov	r0, r7
 801bd16:	f7ff ff21 	bl	801bb5c <__multiply>
 801bd1a:	6028      	str	r0, [r5, #0]
 801bd1c:	f8c0 8000 	str.w	r8, [r0]
 801bd20:	4605      	mov	r5, r0
 801bd22:	e7e0      	b.n	801bce6 <__pow5mult+0x2a>
 801bd24:	4606      	mov	r6, r0
 801bd26:	e7d9      	b.n	801bcdc <__pow5mult+0x20>
 801bd28:	3b01      	subs	r3, #1
 801bd2a:	4a09      	ldr	r2, [pc, #36]	; (801bd50 <__pow5mult+0x94>)
 801bd2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801bd30:	2300      	movs	r3, #0
 801bd32:	f7ff fe57 	bl	801b9e4 <__multadd>
 801bd36:	4606      	mov	r6, r0
 801bd38:	e7c8      	b.n	801bccc <__pow5mult+0x10>
 801bd3a:	f240 2171 	movw	r1, #625	; 0x271
 801bd3e:	4638      	mov	r0, r7
 801bd40:	f7ff fef6 	bl	801bb30 <__i2b>
 801bd44:	2300      	movs	r3, #0
 801bd46:	64b8      	str	r0, [r7, #72]	; 0x48
 801bd48:	4605      	mov	r5, r0
 801bd4a:	6003      	str	r3, [r0, #0]
 801bd4c:	e7c2      	b.n	801bcd4 <__pow5mult+0x18>
 801bd4e:	bf00      	nop
 801bd50:	080207b8 	.word	0x080207b8

0801bd54 <__lshift>:
 801bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd58:	690f      	ldr	r7, [r1, #16]
 801bd5a:	460d      	mov	r5, r1
 801bd5c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 801bd60:	eb07 1762 	add.w	r7, r7, r2, asr #5
 801bd64:	1c7e      	adds	r6, r7, #1
 801bd66:	429e      	cmp	r6, r3
 801bd68:	4691      	mov	r9, r2
 801bd6a:	4680      	mov	r8, r0
 801bd6c:	ea4f 1462 	mov.w	r4, r2, asr #5
 801bd70:	dd04      	ble.n	801bd7c <__lshift+0x28>
 801bd72:	005b      	lsls	r3, r3, #1
 801bd74:	429e      	cmp	r6, r3
 801bd76:	f101 0101 	add.w	r1, r1, #1
 801bd7a:	dcfa      	bgt.n	801bd72 <__lshift+0x1e>
 801bd7c:	4640      	mov	r0, r8
 801bd7e:	f7ff fe01 	bl	801b984 <_Balloc>
 801bd82:	2800      	cmp	r0, #0
 801bd84:	d04f      	beq.n	801be26 <__lshift+0xd2>
 801bd86:	2c00      	cmp	r4, #0
 801bd88:	f100 0114 	add.w	r1, r0, #20
 801bd8c:	dd0d      	ble.n	801bdaa <__lshift+0x56>
 801bd8e:	1d62      	adds	r2, r4, #5
 801bd90:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801bd94:	460b      	mov	r3, r1
 801bd96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801bd9a:	2400      	movs	r4, #0
 801bd9c:	f843 4b04 	str.w	r4, [r3], #4
 801bda0:	4293      	cmp	r3, r2
 801bda2:	d1fb      	bne.n	801bd9c <__lshift+0x48>
 801bda4:	f1ac 0314 	sub.w	r3, ip, #20
 801bda8:	4419      	add	r1, r3
 801bdaa:	692c      	ldr	r4, [r5, #16]
 801bdac:	f105 0314 	add.w	r3, r5, #20
 801bdb0:	f019 091f 	ands.w	r9, r9, #31
 801bdb4:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 801bdb8:	d02d      	beq.n	801be16 <__lshift+0xc2>
 801bdba:	f1c9 0220 	rsb	r2, r9, #32
 801bdbe:	468e      	mov	lr, r1
 801bdc0:	f04f 0a00 	mov.w	sl, #0
 801bdc4:	681c      	ldr	r4, [r3, #0]
 801bdc6:	fa04 f409 	lsl.w	r4, r4, r9
 801bdca:	ea44 040a 	orr.w	r4, r4, sl
 801bdce:	f84e 4b04 	str.w	r4, [lr], #4
 801bdd2:	f853 4b04 	ldr.w	r4, [r3], #4
 801bdd6:	459c      	cmp	ip, r3
 801bdd8:	fa24 fa02 	lsr.w	sl, r4, r2
 801bddc:	d8f2      	bhi.n	801bdc4 <__lshift+0x70>
 801bdde:	ebac 0305 	sub.w	r3, ip, r5
 801bde2:	3b15      	subs	r3, #21
 801bde4:	f023 0303 	bic.w	r3, r3, #3
 801bde8:	3304      	adds	r3, #4
 801bdea:	f105 0215 	add.w	r2, r5, #21
 801bdee:	4594      	cmp	ip, r2
 801bdf0:	bf38      	it	cc
 801bdf2:	2304      	movcc	r3, #4
 801bdf4:	f1ba 0f00 	cmp.w	sl, #0
 801bdf8:	bf18      	it	ne
 801bdfa:	4637      	movne	r7, r6
 801bdfc:	f841 a003 	str.w	sl, [r1, r3]
 801be00:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801be04:	686a      	ldr	r2, [r5, #4]
 801be06:	6107      	str	r7, [r0, #16]
 801be08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be0c:	6029      	str	r1, [r5, #0]
 801be0e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be16:	3904      	subs	r1, #4
 801be18:	f853 2b04 	ldr.w	r2, [r3], #4
 801be1c:	f841 2f04 	str.w	r2, [r1, #4]!
 801be20:	459c      	cmp	ip, r3
 801be22:	d8f9      	bhi.n	801be18 <__lshift+0xc4>
 801be24:	e7ec      	b.n	801be00 <__lshift+0xac>
 801be26:	4602      	mov	r2, r0
 801be28:	4b02      	ldr	r3, [pc, #8]	; (801be34 <__lshift+0xe0>)
 801be2a:	4803      	ldr	r0, [pc, #12]	; (801be38 <__lshift+0xe4>)
 801be2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801be30:	f001 f9e0 	bl	801d1f4 <__assert_func>
 801be34:	080205b8 	.word	0x080205b8
 801be38:	08020648 	.word	0x08020648

0801be3c <__mcmp>:
 801be3c:	b430      	push	{r4, r5}
 801be3e:	690b      	ldr	r3, [r1, #16]
 801be40:	4605      	mov	r5, r0
 801be42:	6900      	ldr	r0, [r0, #16]
 801be44:	1ac0      	subs	r0, r0, r3
 801be46:	d111      	bne.n	801be6c <__mcmp+0x30>
 801be48:	3514      	adds	r5, #20
 801be4a:	3114      	adds	r1, #20
 801be4c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801be50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801be54:	e001      	b.n	801be5a <__mcmp+0x1e>
 801be56:	429d      	cmp	r5, r3
 801be58:	d208      	bcs.n	801be6c <__mcmp+0x30>
 801be5a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801be5e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801be62:	428c      	cmp	r4, r1
 801be64:	d0f7      	beq.n	801be56 <__mcmp+0x1a>
 801be66:	d203      	bcs.n	801be70 <__mcmp+0x34>
 801be68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801be6c:	bc30      	pop	{r4, r5}
 801be6e:	4770      	bx	lr
 801be70:	2001      	movs	r0, #1
 801be72:	bc30      	pop	{r4, r5}
 801be74:	4770      	bx	lr
 801be76:	bf00      	nop

0801be78 <__mdiff>:
 801be78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be7c:	690d      	ldr	r5, [r1, #16]
 801be7e:	460c      	mov	r4, r1
 801be80:	6911      	ldr	r1, [r2, #16]
 801be82:	1a6d      	subs	r5, r5, r1
 801be84:	2d00      	cmp	r5, #0
 801be86:	4690      	mov	r8, r2
 801be88:	d17a      	bne.n	801bf80 <__mdiff+0x108>
 801be8a:	f104 0714 	add.w	r7, r4, #20
 801be8e:	3214      	adds	r2, #20
 801be90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801be94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801be98:	e001      	b.n	801be9e <__mdiff+0x26>
 801be9a:	429f      	cmp	r7, r3
 801be9c:	d273      	bcs.n	801bf86 <__mdiff+0x10e>
 801be9e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 801bea2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bea6:	428e      	cmp	r6, r1
 801bea8:	d0f7      	beq.n	801be9a <__mdiff+0x22>
 801beaa:	d364      	bcc.n	801bf76 <__mdiff+0xfe>
 801beac:	6861      	ldr	r1, [r4, #4]
 801beae:	f7ff fd69 	bl	801b984 <_Balloc>
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d071      	beq.n	801bf9a <__mdiff+0x122>
 801beb6:	6927      	ldr	r7, [r4, #16]
 801beb8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801bebc:	60c5      	str	r5, [r0, #12]
 801bebe:	f104 0a14 	add.w	sl, r4, #20
 801bec2:	f108 0514 	add.w	r5, r8, #20
 801bec6:	f100 0614 	add.w	r6, r0, #20
 801beca:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801bece:	3410      	adds	r4, #16
 801bed0:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
 801bed4:	46b4      	mov	ip, r6
 801bed6:	2300      	movs	r3, #0
 801bed8:	f855 bb04 	ldr.w	fp, [r5], #4
 801bedc:	f854 2f04 	ldr.w	r2, [r4, #4]!
 801bee0:	fa1f f18b 	uxth.w	r1, fp
 801bee4:	fa13 f382 	uxtah	r3, r3, r2
 801bee8:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 801beec:	1a59      	subs	r1, r3, r1
 801beee:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
 801bef2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801bef6:	b289      	uxth	r1, r1
 801bef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801befc:	45a9      	cmp	r9, r5
 801befe:	f84c 1b04 	str.w	r1, [ip], #4
 801bf02:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bf06:	d8e7      	bhi.n	801bed8 <__mdiff+0x60>
 801bf08:	eba9 0208 	sub.w	r2, r9, r8
 801bf0c:	3a15      	subs	r2, #21
 801bf0e:	f108 0815 	add.w	r8, r8, #21
 801bf12:	45c1      	cmp	r9, r8
 801bf14:	f022 0503 	bic.w	r5, r2, #3
 801bf18:	f105 0504 	add.w	r5, r5, #4
 801bf1c:	bf38      	it	cc
 801bf1e:	2504      	movcc	r5, #4
 801bf20:	44aa      	add	sl, r5
 801bf22:	f022 0203 	bic.w	r2, r2, #3
 801bf26:	bf38      	it	cc
 801bf28:	2200      	movcc	r2, #0
 801bf2a:	45d6      	cmp	lr, sl
 801bf2c:	4435      	add	r5, r6
 801bf2e:	4416      	add	r6, r2
 801bf30:	d918      	bls.n	801bf64 <__mdiff+0xec>
 801bf32:	462e      	mov	r6, r5
 801bf34:	4652      	mov	r2, sl
 801bf36:	f852 4b04 	ldr.w	r4, [r2], #4
 801bf3a:	fa13 f184 	uxtah	r1, r3, r4
 801bf3e:	140b      	asrs	r3, r1, #16
 801bf40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801bf44:	b289      	uxth	r1, r1
 801bf46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801bf4a:	4596      	cmp	lr, r2
 801bf4c:	f846 1b04 	str.w	r1, [r6], #4
 801bf50:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bf54:	d8ef      	bhi.n	801bf36 <__mdiff+0xbe>
 801bf56:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
 801bf5a:	eba6 060a 	sub.w	r6, r6, sl
 801bf5e:	f026 0603 	bic.w	r6, r6, #3
 801bf62:	442e      	add	r6, r5
 801bf64:	b921      	cbnz	r1, 801bf70 <__mdiff+0xf8>
 801bf66:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 801bf6a:	3f01      	subs	r7, #1
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d0fa      	beq.n	801bf66 <__mdiff+0xee>
 801bf70:	6107      	str	r7, [r0, #16]
 801bf72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf76:	4623      	mov	r3, r4
 801bf78:	2501      	movs	r5, #1
 801bf7a:	4644      	mov	r4, r8
 801bf7c:	4698      	mov	r8, r3
 801bf7e:	e795      	b.n	801beac <__mdiff+0x34>
 801bf80:	dbf9      	blt.n	801bf76 <__mdiff+0xfe>
 801bf82:	2500      	movs	r5, #0
 801bf84:	e792      	b.n	801beac <__mdiff+0x34>
 801bf86:	2100      	movs	r1, #0
 801bf88:	f7ff fcfc 	bl	801b984 <_Balloc>
 801bf8c:	b160      	cbz	r0, 801bfa8 <__mdiff+0x130>
 801bf8e:	2201      	movs	r2, #1
 801bf90:	2300      	movs	r3, #0
 801bf92:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801bf96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf9a:	4602      	mov	r2, r0
 801bf9c:	4b06      	ldr	r3, [pc, #24]	; (801bfb8 <__mdiff+0x140>)
 801bf9e:	4807      	ldr	r0, [pc, #28]	; (801bfbc <__mdiff+0x144>)
 801bfa0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801bfa4:	f001 f926 	bl	801d1f4 <__assert_func>
 801bfa8:	4602      	mov	r2, r0
 801bfaa:	4b03      	ldr	r3, [pc, #12]	; (801bfb8 <__mdiff+0x140>)
 801bfac:	4803      	ldr	r0, [pc, #12]	; (801bfbc <__mdiff+0x144>)
 801bfae:	f240 2132 	movw	r1, #562	; 0x232
 801bfb2:	f001 f91f 	bl	801d1f4 <__assert_func>
 801bfb6:	bf00      	nop
 801bfb8:	080205b8 	.word	0x080205b8
 801bfbc:	08020648 	.word	0x08020648

0801bfc0 <__d2b>:
 801bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfc2:	2101      	movs	r1, #1
 801bfc4:	b083      	sub	sp, #12
 801bfc6:	4616      	mov	r6, r2
 801bfc8:	461f      	mov	r7, r3
 801bfca:	f7ff fcdb 	bl	801b984 <_Balloc>
 801bfce:	4604      	mov	r4, r0
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	d04a      	beq.n	801c06a <__d2b+0xaa>
 801bfd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bfd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bfdc:	b10d      	cbz	r5, 801bfe2 <__d2b+0x22>
 801bfde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bfe2:	2e00      	cmp	r6, #0
 801bfe4:	9301      	str	r3, [sp, #4]
 801bfe6:	d022      	beq.n	801c02e <__d2b+0x6e>
 801bfe8:	4668      	mov	r0, sp
 801bfea:	9600      	str	r6, [sp, #0]
 801bfec:	f7ff fd70 	bl	801bad0 <__lo0bits>
 801bff0:	2800      	cmp	r0, #0
 801bff2:	d036      	beq.n	801c062 <__d2b+0xa2>
 801bff4:	e9dd 1300 	ldrd	r1, r3, [sp]
 801bff8:	f1c0 0220 	rsb	r2, r0, #32
 801bffc:	fa03 f202 	lsl.w	r2, r3, r2
 801c000:	430a      	orrs	r2, r1
 801c002:	40c3      	lsrs	r3, r0
 801c004:	9301      	str	r3, [sp, #4]
 801c006:	6162      	str	r2, [r4, #20]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	bf14      	ite	ne
 801c00c:	2202      	movne	r2, #2
 801c00e:	2201      	moveq	r2, #1
 801c010:	61a3      	str	r3, [r4, #24]
 801c012:	6122      	str	r2, [r4, #16]
 801c014:	b1ad      	cbz	r5, 801c042 <__d2b+0x82>
 801c016:	9a08      	ldr	r2, [sp, #32]
 801c018:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 801c01c:	4403      	add	r3, r0
 801c01e:	6013      	str	r3, [r2, #0]
 801c020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c022:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c026:	6018      	str	r0, [r3, #0]
 801c028:	4620      	mov	r0, r4
 801c02a:	b003      	add	sp, #12
 801c02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c02e:	a801      	add	r0, sp, #4
 801c030:	f7ff fd4e 	bl	801bad0 <__lo0bits>
 801c034:	9b01      	ldr	r3, [sp, #4]
 801c036:	6163      	str	r3, [r4, #20]
 801c038:	2201      	movs	r2, #1
 801c03a:	3020      	adds	r0, #32
 801c03c:	6122      	str	r2, [r4, #16]
 801c03e:	2d00      	cmp	r5, #0
 801c040:	d1e9      	bne.n	801c016 <__d2b+0x56>
 801c042:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c046:	9908      	ldr	r1, [sp, #32]
 801c048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c04c:	6008      	str	r0, [r1, #0]
 801c04e:	6918      	ldr	r0, [r3, #16]
 801c050:	f7ff fd1e 	bl	801ba90 <__hi0bits>
 801c054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c05a:	6018      	str	r0, [r3, #0]
 801c05c:	4620      	mov	r0, r4
 801c05e:	b003      	add	sp, #12
 801c060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c062:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c066:	6162      	str	r2, [r4, #20]
 801c068:	e7ce      	b.n	801c008 <__d2b+0x48>
 801c06a:	4602      	mov	r2, r0
 801c06c:	4b02      	ldr	r3, [pc, #8]	; (801c078 <__d2b+0xb8>)
 801c06e:	4803      	ldr	r0, [pc, #12]	; (801c07c <__d2b+0xbc>)
 801c070:	f240 310a 	movw	r1, #778	; 0x30a
 801c074:	f001 f8be 	bl	801d1f4 <__assert_func>
 801c078:	080205b8 	.word	0x080205b8
 801c07c:	08020648 	.word	0x08020648

0801c080 <frexp>:
 801c080:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c0e8 <frexp+0x68>
 801c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c086:	4617      	mov	r7, r2
 801c088:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c08c:	2200      	movs	r2, #0
 801c08e:	4563      	cmp	r3, ip
 801c090:	4604      	mov	r4, r0
 801c092:	460d      	mov	r5, r1
 801c094:	603a      	str	r2, [r7, #0]
 801c096:	dc22      	bgt.n	801c0de <frexp+0x5e>
 801c098:	4684      	mov	ip, r0
 801c09a:	ea53 0c0c 	orrs.w	ip, r3, ip
 801c09e:	d01e      	beq.n	801c0de <frexp+0x5e>
 801c0a0:	f8df c048 	ldr.w	ip, [pc, #72]	; 801c0ec <frexp+0x6c>
 801c0a4:	ea01 0c0c 	and.w	ip, r1, ip
 801c0a8:	460e      	mov	r6, r1
 801c0aa:	f1bc 0f00 	cmp.w	ip, #0
 801c0ae:	d109      	bne.n	801c0c4 <frexp+0x44>
 801c0b0:	4b0c      	ldr	r3, [pc, #48]	; (801c0e4 <frexp+0x64>)
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	f7e4 fd60 	bl	8000b78 <__aeabi_dmul>
 801c0b8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801c0bc:	4604      	mov	r4, r0
 801c0be:	460e      	mov	r6, r1
 801c0c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c0c4:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 801c0c8:	151b      	asrs	r3, r3, #20
 801c0ca:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 801c0ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c0d2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801c0d6:	4413      	add	r3, r2
 801c0d8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801c0dc:	603b      	str	r3, [r7, #0]
 801c0de:	4620      	mov	r0, r4
 801c0e0:	4629      	mov	r1, r5
 801c0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0e4:	43500000 	.word	0x43500000
 801c0e8:	7fefffff 	.word	0x7fefffff
 801c0ec:	7ff00000 	.word	0x7ff00000

0801c0f0 <__sread>:
 801c0f0:	b510      	push	{r4, lr}
 801c0f2:	460c      	mov	r4, r1
 801c0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0f8:	f001 fa08 	bl	801d50c <_read_r>
 801c0fc:	2800      	cmp	r0, #0
 801c0fe:	db03      	blt.n	801c108 <__sread+0x18>
 801c100:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c102:	4403      	add	r3, r0
 801c104:	6523      	str	r3, [r4, #80]	; 0x50
 801c106:	bd10      	pop	{r4, pc}
 801c108:	89a3      	ldrh	r3, [r4, #12]
 801c10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c10e:	81a3      	strh	r3, [r4, #12]
 801c110:	bd10      	pop	{r4, pc}
 801c112:	bf00      	nop

0801c114 <__swrite>:
 801c114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c118:	f9b1 500c 	ldrsh.w	r5, [r1, #12]
 801c11c:	4698      	mov	r8, r3
 801c11e:	05eb      	lsls	r3, r5, #23
 801c120:	460c      	mov	r4, r1
 801c122:	4617      	mov	r7, r2
 801c124:	4606      	mov	r6, r0
 801c126:	d40b      	bmi.n	801c140 <__swrite+0x2c>
 801c128:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 801c12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c130:	81a5      	strh	r5, [r4, #12]
 801c132:	4643      	mov	r3, r8
 801c134:	463a      	mov	r2, r7
 801c136:	4630      	mov	r0, r6
 801c138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c13c:	f000 bffe 	b.w	801d13c <_write_r>
 801c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c144:	2302      	movs	r3, #2
 801c146:	2200      	movs	r2, #0
 801c148:	f001 f9b4 	bl	801d4b4 <_lseek_r>
 801c14c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c150:	e7ea      	b.n	801c128 <__swrite+0x14>
 801c152:	bf00      	nop

0801c154 <__sseek>:
 801c154:	b510      	push	{r4, lr}
 801c156:	460c      	mov	r4, r1
 801c158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c15c:	f001 f9aa 	bl	801d4b4 <_lseek_r>
 801c160:	89a3      	ldrh	r3, [r4, #12]
 801c162:	1c42      	adds	r2, r0, #1
 801c164:	bf0e      	itee	eq
 801c166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c16e:	6520      	strne	r0, [r4, #80]	; 0x50
 801c170:	81a3      	strh	r3, [r4, #12]
 801c172:	bd10      	pop	{r4, pc}

0801c174 <__sclose>:
 801c174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c178:	f001 b85a 	b.w	801d230 <_close_r>

0801c17c <strncpy>:
 801c17c:	b470      	push	{r4, r5, r6}
 801c17e:	ea40 0401 	orr.w	r4, r0, r1
 801c182:	07a3      	lsls	r3, r4, #30
 801c184:	d101      	bne.n	801c18a <strncpy+0xe>
 801c186:	2a03      	cmp	r2, #3
 801c188:	d80f      	bhi.n	801c1aa <strncpy+0x2e>
 801c18a:	4604      	mov	r4, r0
 801c18c:	1e4d      	subs	r5, r1, #1
 801c18e:	e007      	b.n	801c1a0 <strncpy+0x24>
 801c190:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 801c194:	f803 1b01 	strb.w	r1, [r3], #1
 801c198:	1e56      	subs	r6, r2, #1
 801c19a:	b1c9      	cbz	r1, 801c1d0 <strncpy+0x54>
 801c19c:	461c      	mov	r4, r3
 801c19e:	4632      	mov	r2, r6
 801c1a0:	4623      	mov	r3, r4
 801c1a2:	2a00      	cmp	r2, #0
 801c1a4:	d1f4      	bne.n	801c190 <strncpy+0x14>
 801c1a6:	bc70      	pop	{r4, r5, r6}
 801c1a8:	4770      	bx	lr
 801c1aa:	460b      	mov	r3, r1
 801c1ac:	4604      	mov	r4, r0
 801c1ae:	4619      	mov	r1, r3
 801c1b0:	f853 6b04 	ldr.w	r6, [r3], #4
 801c1b4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 801c1b8:	ea25 0506 	bic.w	r5, r5, r6
 801c1bc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 801c1c0:	d1e4      	bne.n	801c18c <strncpy+0x10>
 801c1c2:	3a04      	subs	r2, #4
 801c1c4:	2a03      	cmp	r2, #3
 801c1c6:	f844 6b04 	str.w	r6, [r4], #4
 801c1ca:	4619      	mov	r1, r3
 801c1cc:	d8ef      	bhi.n	801c1ae <strncpy+0x32>
 801c1ce:	e7dd      	b.n	801c18c <strncpy+0x10>
 801c1d0:	4422      	add	r2, r4
 801c1d2:	2e00      	cmp	r6, #0
 801c1d4:	d0e7      	beq.n	801c1a6 <strncpy+0x2a>
 801c1d6:	f803 1b01 	strb.w	r1, [r3], #1
 801c1da:	4293      	cmp	r3, r2
 801c1dc:	d1fb      	bne.n	801c1d6 <strncpy+0x5a>
 801c1de:	bc70      	pop	{r4, r5, r6}
 801c1e0:	4770      	bx	lr
 801c1e2:	bf00      	nop

0801c1e4 <__ssprint_r>:
 801c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1e8:	6893      	ldr	r3, [r2, #8]
 801c1ea:	b083      	sub	sp, #12
 801c1ec:	4691      	mov	r9, r2
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d06e      	beq.n	801c2d0 <__ssprint_r+0xec>
 801c1f2:	6817      	ldr	r7, [r2, #0]
 801c1f4:	688d      	ldr	r5, [r1, #8]
 801c1f6:	4680      	mov	r8, r0
 801c1f8:	460c      	mov	r4, r1
 801c1fa:	6808      	ldr	r0, [r1, #0]
 801c1fc:	3708      	adds	r7, #8
 801c1fe:	e044      	b.n	801c28a <__ssprint_r+0xa6>
 801c200:	89a3      	ldrh	r3, [r4, #12]
 801c202:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801c206:	d02e      	beq.n	801c266 <__ssprint_r+0x82>
 801c208:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 801c20c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c210:	eba0 0a01 	sub.w	sl, r0, r1
 801c214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c218:	eb0a 0006 	add.w	r0, sl, r6
 801c21c:	106d      	asrs	r5, r5, #1
 801c21e:	3001      	adds	r0, #1
 801c220:	42a8      	cmp	r0, r5
 801c222:	462a      	mov	r2, r5
 801c224:	bf84      	itt	hi
 801c226:	4605      	movhi	r5, r0
 801c228:	462a      	movhi	r2, r5
 801c22a:	055b      	lsls	r3, r3, #21
 801c22c:	d537      	bpl.n	801c29e <__ssprint_r+0xba>
 801c22e:	4611      	mov	r1, r2
 801c230:	4640      	mov	r0, r8
 801c232:	f7f8 ffdb 	bl	80151ec <_malloc_r>
 801c236:	2800      	cmp	r0, #0
 801c238:	d03b      	beq.n	801c2b2 <__ssprint_r+0xce>
 801c23a:	4652      	mov	r2, sl
 801c23c:	6921      	ldr	r1, [r4, #16]
 801c23e:	9001      	str	r0, [sp, #4]
 801c240:	f7e3 fffe 	bl	8000240 <memcpy>
 801c244:	89a2      	ldrh	r2, [r4, #12]
 801c246:	9b01      	ldr	r3, [sp, #4]
 801c248:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801c24c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c250:	81a2      	strh	r2, [r4, #12]
 801c252:	eba5 020a 	sub.w	r2, r5, sl
 801c256:	eb03 000a 	add.w	r0, r3, sl
 801c25a:	6165      	str	r5, [r4, #20]
 801c25c:	6123      	str	r3, [r4, #16]
 801c25e:	6020      	str	r0, [r4, #0]
 801c260:	60a2      	str	r2, [r4, #8]
 801c262:	4635      	mov	r5, r6
 801c264:	46b2      	mov	sl, r6
 801c266:	4659      	mov	r1, fp
 801c268:	4652      	mov	r2, sl
 801c26a:	f7f9 faa9 	bl	80157c0 <memmove>
 801c26e:	68a0      	ldr	r0, [r4, #8]
 801c270:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801c274:	6823      	ldr	r3, [r4, #0]
 801c276:	1b45      	subs	r5, r0, r5
 801c278:	1b8e      	subs	r6, r1, r6
 801c27a:	eb03 000a 	add.w	r0, r3, sl
 801c27e:	60a5      	str	r5, [r4, #8]
 801c280:	6020      	str	r0, [r4, #0]
 801c282:	f8c9 6008 	str.w	r6, [r9, #8]
 801c286:	b31e      	cbz	r6, 801c2d0 <__ssprint_r+0xec>
 801c288:	3708      	adds	r7, #8
 801c28a:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 801c28e:	2e00      	cmp	r6, #0
 801c290:	d0fa      	beq.n	801c288 <__ssprint_r+0xa4>
 801c292:	42b5      	cmp	r5, r6
 801c294:	46aa      	mov	sl, r5
 801c296:	d9b3      	bls.n	801c200 <__ssprint_r+0x1c>
 801c298:	4635      	mov	r5, r6
 801c29a:	46b2      	mov	sl, r6
 801c29c:	e7e3      	b.n	801c266 <__ssprint_r+0x82>
 801c29e:	4640      	mov	r0, r8
 801c2a0:	f7f9 fb98 	bl	80159d4 <_realloc_r>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	2800      	cmp	r0, #0
 801c2a8:	d1d3      	bne.n	801c252 <__ssprint_r+0x6e>
 801c2aa:	6921      	ldr	r1, [r4, #16]
 801c2ac:	4640      	mov	r0, r8
 801c2ae:	f7ff f853 	bl	801b358 <_free_r>
 801c2b2:	230c      	movs	r3, #12
 801c2b4:	f8c8 3000 	str.w	r3, [r8]
 801c2b8:	89a3      	ldrh	r3, [r4, #12]
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2c4:	81a3      	strh	r3, [r4, #12]
 801c2c6:	e9c9 2201 	strd	r2, r2, [r9, #4]
 801c2ca:	b003      	add	sp, #12
 801c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2d0:	2000      	movs	r0, #0
 801c2d2:	f8c9 0004 	str.w	r0, [r9, #4]
 801c2d6:	b003      	add	sp, #12
 801c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2dc <__sprint_r.part.0>:
 801c2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801c2e2:	049c      	lsls	r4, r3, #18
 801c2e4:	4690      	mov	r8, r2
 801c2e6:	d52d      	bpl.n	801c344 <__sprint_r.part.0+0x68>
 801c2e8:	6893      	ldr	r3, [r2, #8]
 801c2ea:	6812      	ldr	r2, [r2, #0]
 801c2ec:	b343      	cbz	r3, 801c340 <__sprint_r.part.0+0x64>
 801c2ee:	468b      	mov	fp, r1
 801c2f0:	4606      	mov	r6, r0
 801c2f2:	f102 0908 	add.w	r9, r2, #8
 801c2f6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 801c2fa:	ea5f 079a 	movs.w	r7, sl, lsr #2
 801c2fe:	d015      	beq.n	801c32c <__sprint_r.part.0+0x50>
 801c300:	3d04      	subs	r5, #4
 801c302:	2400      	movs	r4, #0
 801c304:	e001      	b.n	801c30a <__sprint_r.part.0+0x2e>
 801c306:	42a7      	cmp	r7, r4
 801c308:	d00e      	beq.n	801c328 <__sprint_r.part.0+0x4c>
 801c30a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801c30e:	465a      	mov	r2, fp
 801c310:	4630      	mov	r0, r6
 801c312:	f001 f86d 	bl	801d3f0 <_fputwc_r>
 801c316:	1c43      	adds	r3, r0, #1
 801c318:	f104 0401 	add.w	r4, r4, #1
 801c31c:	d1f3      	bne.n	801c306 <__sprint_r.part.0+0x2a>
 801c31e:	2300      	movs	r3, #0
 801c320:	e9c8 3301 	strd	r3, r3, [r8, #4]
 801c324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c328:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c32c:	f02a 0a03 	bic.w	sl, sl, #3
 801c330:	eba3 030a 	sub.w	r3, r3, sl
 801c334:	f8c8 3008 	str.w	r3, [r8, #8]
 801c338:	f109 0908 	add.w	r9, r9, #8
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d1da      	bne.n	801c2f6 <__sprint_r.part.0+0x1a>
 801c340:	2000      	movs	r0, #0
 801c342:	e7ec      	b.n	801c31e <__sprint_r.part.0+0x42>
 801c344:	f7ff f90c 	bl	801b560 <__sfvwrite_r>
 801c348:	2300      	movs	r3, #0
 801c34a:	e9c8 3301 	strd	r3, r3, [r8, #4]
 801c34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c352:	bf00      	nop

0801c354 <__sprint_r>:
 801c354:	b410      	push	{r4}
 801c356:	6894      	ldr	r4, [r2, #8]
 801c358:	b11c      	cbz	r4, 801c362 <__sprint_r+0xe>
 801c35a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c35e:	f7ff bfbd 	b.w	801c2dc <__sprint_r.part.0>
 801c362:	4620      	mov	r0, r4
 801c364:	6054      	str	r4, [r2, #4]
 801c366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c36a:	4770      	bx	lr

0801c36c <_vfiprintf_r>:
 801c36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c370:	ed2d 8b02 	vpush	{d8}
 801c374:	b0bb      	sub	sp, #236	; 0xec
 801c376:	ee08 0a10 	vmov	s16, r0
 801c37a:	461c      	mov	r4, r3
 801c37c:	4689      	mov	r9, r1
 801c37e:	4692      	mov	sl, r2
 801c380:	9305      	str	r3, [sp, #20]
 801c382:	b118      	cbz	r0, 801c38c <_vfiprintf_r+0x20>
 801c384:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c386:	2b00      	cmp	r3, #0
 801c388:	f000 828d 	beq.w	801c8a6 <_vfiprintf_r+0x53a>
 801c38c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c390:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
 801c394:	07db      	lsls	r3, r3, #31
 801c396:	b28a      	uxth	r2, r1
 801c398:	d402      	bmi.n	801c3a0 <_vfiprintf_r+0x34>
 801c39a:	058f      	lsls	r7, r1, #22
 801c39c:	f140 850b 	bpl.w	801cdb6 <_vfiprintf_r+0xa4a>
 801c3a0:	0496      	lsls	r6, r2, #18
 801c3a2:	d40a      	bmi.n	801c3ba <_vfiprintf_r+0x4e>
 801c3a4:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c3a8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 801c3ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c3b0:	f8a9 200c 	strh.w	r2, [r9, #12]
 801c3b4:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801c3b8:	b292      	uxth	r2, r2
 801c3ba:	0715      	lsls	r5, r2, #28
 801c3bc:	f140 8103 	bpl.w	801c5c6 <_vfiprintf_r+0x25a>
 801c3c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	f000 80fe 	beq.w	801c5c6 <_vfiprintf_r+0x25a>
 801c3ca:	f002 031a 	and.w	r3, r2, #26
 801c3ce:	2b0a      	cmp	r3, #10
 801c3d0:	f000 8108 	beq.w	801c5e4 <_vfiprintf_r+0x278>
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801c3da:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801c3de:	9308      	str	r3, [sp, #32]
 801c3e0:	9309      	str	r3, [sp, #36]	; 0x24
 801c3e2:	9304      	str	r3, [sp, #16]
 801c3e4:	ee18 ba10 	vmov	fp, s16
 801c3e8:	ab11      	add	r3, sp, #68	; 0x44
 801c3ea:	930e      	str	r3, [sp, #56]	; 0x38
 801c3ec:	4698      	mov	r8, r3
 801c3ee:	f89a 3000 	ldrb.w	r3, [sl]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	f000 8164 	beq.w	801c6c0 <_vfiprintf_r+0x354>
 801c3f8:	4654      	mov	r4, sl
 801c3fa:	e004      	b.n	801c406 <_vfiprintf_r+0x9a>
 801c3fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c400:	2b00      	cmp	r3, #0
 801c402:	f000 813b 	beq.w	801c67c <_vfiprintf_r+0x310>
 801c406:	2b25      	cmp	r3, #37	; 0x25
 801c408:	d1f8      	bne.n	801c3fc <_vfiprintf_r+0x90>
 801c40a:	ebb4 050a 	subs.w	r5, r4, sl
 801c40e:	f040 8138 	bne.w	801c682 <_vfiprintf_r+0x316>
 801c412:	7823      	ldrb	r3, [r4, #0]
 801c414:	2b00      	cmp	r3, #0
 801c416:	f000 8153 	beq.w	801c6c0 <_vfiprintf_r+0x354>
 801c41a:	2300      	movs	r3, #0
 801c41c:	f04f 0200 	mov.w	r2, #0
 801c420:	9303      	str	r3, [sp, #12]
 801c422:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 801c426:	461f      	mov	r7, r3
 801c428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c42c:	7863      	ldrb	r3, [r4, #1]
 801c42e:	9201      	str	r2, [sp, #4]
 801c430:	f104 0a01 	add.w	sl, r4, #1
 801c434:	252b      	movs	r5, #43	; 0x2b
 801c436:	f10a 0a01 	add.w	sl, sl, #1
 801c43a:	f1a3 0220 	sub.w	r2, r3, #32
 801c43e:	2a5a      	cmp	r2, #90	; 0x5a
 801c440:	f200 8155 	bhi.w	801c6ee <_vfiprintf_r+0x382>
 801c444:	e8df f012 	tbh	[pc, r2, lsl #1]
 801c448:	0153026b 	.word	0x0153026b
 801c44c:	02660153 	.word	0x02660153
 801c450:	01530153 	.word	0x01530153
 801c454:	006a0153 	.word	0x006a0153
 801c458:	01530153 	.word	0x01530153
 801c45c:	02420232 	.word	0x02420232
 801c460:	023d0153 	.word	0x023d0153
 801c464:	0153024c 	.word	0x0153024c
 801c468:	005b0247 	.word	0x005b0247
 801c46c:	005b005b 	.word	0x005b005b
 801c470:	005b005b 	.word	0x005b005b
 801c474:	005b005b 	.word	0x005b005b
 801c478:	005b005b 	.word	0x005b005b
 801c47c:	01530153 	.word	0x01530153
 801c480:	01530153 	.word	0x01530153
 801c484:	01530153 	.word	0x01530153
 801c488:	01530153 	.word	0x01530153
 801c48c:	02200153 	.word	0x02200153
 801c490:	01530085 	.word	0x01530085
 801c494:	01530153 	.word	0x01530153
 801c498:	01530153 	.word	0x01530153
 801c49c:	01530153 	.word	0x01530153
 801c4a0:	01530153 	.word	0x01530153
 801c4a4:	00e80153 	.word	0x00e80153
 801c4a8:	01530153 	.word	0x01530153
 801c4ac:	02040153 	.word	0x02040153
 801c4b0:	02900153 	.word	0x02900153
 801c4b4:	01530153 	.word	0x01530153
 801c4b8:	01530501 	.word	0x01530501
 801c4bc:	01530153 	.word	0x01530153
 801c4c0:	01530153 	.word	0x01530153
 801c4c4:	01530153 	.word	0x01530153
 801c4c8:	01530153 	.word	0x01530153
 801c4cc:	02200153 	.word	0x02200153
 801c4d0:	01530087 	.word	0x01530087
 801c4d4:	01530153 	.word	0x01530153
 801c4d8:	00870283 	.word	0x00870283
 801c4dc:	01530080 	.word	0x01530080
 801c4e0:	01530276 	.word	0x01530276
 801c4e4:	00ea02b1 	.word	0x00ea02b1
 801c4e8:	008002a0 	.word	0x008002a0
 801c4ec:	02040153 	.word	0x02040153
 801c4f0:	04ff007d 	.word	0x04ff007d
 801c4f4:	01530153 	.word	0x01530153
 801c4f8:	0153051e 	.word	0x0153051e
 801c4fc:	007d      	.short	0x007d
 801c4fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c502:	2100      	movs	r1, #0
 801c504:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801c508:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801c50c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c510:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c514:	2a09      	cmp	r2, #9
 801c516:	d9f5      	bls.n	801c504 <_vfiprintf_r+0x198>
 801c518:	9103      	str	r1, [sp, #12]
 801c51a:	e78e      	b.n	801c43a <_vfiprintf_r+0xce>
 801c51c:	4658      	mov	r0, fp
 801c51e:	f7ff f9b3 	bl	801b888 <_localeconv_r>
 801c522:	6843      	ldr	r3, [r0, #4]
 801c524:	930a      	str	r3, [sp, #40]	; 0x28
 801c526:	4618      	mov	r0, r3
 801c528:	f7e4 f8aa 	bl	8000680 <strlen>
 801c52c:	4603      	mov	r3, r0
 801c52e:	4658      	mov	r0, fp
 801c530:	461c      	mov	r4, r3
 801c532:	930b      	str	r3, [sp, #44]	; 0x2c
 801c534:	f7ff f9a8 	bl	801b888 <_localeconv_r>
 801c538:	6882      	ldr	r2, [r0, #8]
 801c53a:	9209      	str	r2, [sp, #36]	; 0x24
 801c53c:	2c00      	cmp	r4, #0
 801c53e:	f040 846b 	bne.w	801ce18 <_vfiprintf_r+0xaac>
 801c542:	f89a 3000 	ldrb.w	r3, [sl]
 801c546:	e776      	b.n	801c436 <_vfiprintf_r+0xca>
 801c548:	f89a 3000 	ldrb.w	r3, [sl]
 801c54c:	f047 0720 	orr.w	r7, r7, #32
 801c550:	e771      	b.n	801c436 <_vfiprintf_r+0xca>
 801c552:	f047 0710 	orr.w	r7, r7, #16
 801c556:	06bb      	lsls	r3, r7, #26
 801c558:	f140 815f 	bpl.w	801c81a <_vfiprintf_r+0x4ae>
 801c55c:	9c05      	ldr	r4, [sp, #20]
 801c55e:	3407      	adds	r4, #7
 801c560:	f024 0307 	bic.w	r3, r4, #7
 801c564:	4619      	mov	r1, r3
 801c566:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801c56a:	9105      	str	r1, [sp, #20]
 801c56c:	4614      	mov	r4, r2
 801c56e:	461d      	mov	r5, r3
 801c570:	2a00      	cmp	r2, #0
 801c572:	f173 0300 	sbcs.w	r3, r3, #0
 801c576:	f2c0 83fb 	blt.w	801cd70 <_vfiprintf_r+0xa04>
 801c57a:	9b01      	ldr	r3, [sp, #4]
 801c57c:	3301      	adds	r3, #1
 801c57e:	f000 84ea 	beq.w	801cf56 <_vfiprintf_r+0xbea>
 801c582:	f027 0380 	bic.w	r3, r7, #128	; 0x80
 801c586:	9300      	str	r3, [sp, #0]
 801c588:	ea54 0305 	orrs.w	r3, r4, r5
 801c58c:	f000 83d7 	beq.w	801cd3e <_vfiprintf_r+0x9d2>
 801c590:	2d00      	cmp	r5, #0
 801c592:	bf08      	it	eq
 801c594:	2c0a      	cmpeq	r4, #10
 801c596:	f080 849f 	bcs.w	801ced8 <_vfiprintf_r+0xb6c>
 801c59a:	3430      	adds	r4, #48	; 0x30
 801c59c:	2301      	movs	r3, #1
 801c59e:	9f00      	ldr	r7, [sp, #0]
 801c5a0:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 801c5a4:	9302      	str	r3, [sp, #8]
 801c5a6:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
 801c5aa:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 801c5ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801c5b2:	428a      	cmp	r2, r1
 801c5b4:	bfb8      	it	lt
 801c5b6:	460a      	movlt	r2, r1
 801c5b8:	9200      	str	r2, [sp, #0]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	f000 80a5 	beq.w	801c70a <_vfiprintf_r+0x39e>
 801c5c0:	3201      	adds	r2, #1
 801c5c2:	9200      	str	r2, [sp, #0]
 801c5c4:	e0a1      	b.n	801c70a <_vfiprintf_r+0x39e>
 801c5c6:	ee18 0a10 	vmov	r0, s16
 801c5ca:	4649      	mov	r1, r9
 801c5cc:	f7fd fc7c 	bl	8019ec8 <__swsetup_r>
 801c5d0:	2800      	cmp	r0, #0
 801c5d2:	f040 854a 	bne.w	801d06a <_vfiprintf_r+0xcfe>
 801c5d6:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 801c5da:	f002 031a 	and.w	r3, r2, #26
 801c5de:	2b0a      	cmp	r3, #10
 801c5e0:	f47f aef8 	bne.w	801c3d4 <_vfiprintf_r+0x68>
 801c5e4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	f6ff aef3 	blt.w	801c3d4 <_vfiprintf_r+0x68>
 801c5ee:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c5f2:	07d9      	lsls	r1, r3, #31
 801c5f4:	d402      	bmi.n	801c5fc <_vfiprintf_r+0x290>
 801c5f6:	0592      	lsls	r2, r2, #22
 801c5f8:	f140 8513 	bpl.w	801d022 <_vfiprintf_r+0xcb6>
 801c5fc:	ee18 0a10 	vmov	r0, s16
 801c600:	4623      	mov	r3, r4
 801c602:	4652      	mov	r2, sl
 801c604:	4649      	mov	r1, r9
 801c606:	f000 fd57 	bl	801d0b8 <__sbprintf>
 801c60a:	9004      	str	r0, [sp, #16]
 801c60c:	9804      	ldr	r0, [sp, #16]
 801c60e:	b03b      	add	sp, #236	; 0xec
 801c610:	ecbd 8b02 	vpop	{d8}
 801c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c618:	f047 0710 	orr.w	r7, r7, #16
 801c61c:	06bd      	lsls	r5, r7, #26
 801c61e:	9c05      	ldr	r4, [sp, #20]
 801c620:	f140 810a 	bpl.w	801c838 <_vfiprintf_r+0x4cc>
 801c624:	3407      	adds	r4, #7
 801c626:	f024 0307 	bic.w	r3, r4, #7
 801c62a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 801c62e:	9305      	str	r3, [sp, #20]
 801c630:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 801c634:	9300      	str	r3, [sp, #0]
 801c636:	2300      	movs	r3, #0
 801c638:	f04f 0200 	mov.w	r2, #0
 801c63c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 801c640:	9a01      	ldr	r2, [sp, #4]
 801c642:	4611      	mov	r1, r2
 801c644:	3101      	adds	r1, #1
 801c646:	f000 81c4 	beq.w	801c9d2 <_vfiprintf_r+0x666>
 801c64a:	9900      	ldr	r1, [sp, #0]
 801c64c:	f021 0780 	bic.w	r7, r1, #128	; 0x80
 801c650:	ea54 0105 	orrs.w	r1, r4, r5
 801c654:	f040 81bc 	bne.w	801c9d0 <_vfiprintf_r+0x664>
 801c658:	2a00      	cmp	r2, #0
 801c65a:	f040 847f 	bne.w	801cf5c <_vfiprintf_r+0xbf0>
 801c65e:	2b00      	cmp	r3, #0
 801c660:	f040 8372 	bne.w	801cd48 <_vfiprintf_r+0x9dc>
 801c664:	9b00      	ldr	r3, [sp, #0]
 801c666:	f013 0301 	ands.w	r3, r3, #1
 801c66a:	9302      	str	r3, [sp, #8]
 801c66c:	f000 83a0 	beq.w	801cdb0 <_vfiprintf_r+0xa44>
 801c670:	2330      	movs	r3, #48	; 0x30
 801c672:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 801c676:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
 801c67a:	e796      	b.n	801c5aa <_vfiprintf_r+0x23e>
 801c67c:	ebb4 050a 	subs.w	r5, r4, sl
 801c680:	d01e      	beq.n	801c6c0 <_vfiprintf_r+0x354>
 801c682:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c686:	3301      	adds	r3, #1
 801c688:	442a      	add	r2, r5
 801c68a:	2b07      	cmp	r3, #7
 801c68c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801c690:	f8c8 a000 	str.w	sl, [r8]
 801c694:	f8c8 5004 	str.w	r5, [r8, #4]
 801c698:	dc06      	bgt.n	801c6a8 <_vfiprintf_r+0x33c>
 801c69a:	f108 0808 	add.w	r8, r8, #8
 801c69e:	9a04      	ldr	r2, [sp, #16]
 801c6a0:	7823      	ldrb	r3, [r4, #0]
 801c6a2:	442a      	add	r2, r5
 801c6a4:	9204      	str	r2, [sp, #16]
 801c6a6:	e6b5      	b.n	801c414 <_vfiprintf_r+0xa8>
 801c6a8:	2a00      	cmp	r2, #0
 801c6aa:	f000 8344 	beq.w	801cd36 <_vfiprintf_r+0x9ca>
 801c6ae:	aa0e      	add	r2, sp, #56	; 0x38
 801c6b0:	4649      	mov	r1, r9
 801c6b2:	4658      	mov	r0, fp
 801c6b4:	f7ff fe12 	bl	801c2dc <__sprint_r.part.0>
 801c6b8:	b940      	cbnz	r0, 801c6cc <_vfiprintf_r+0x360>
 801c6ba:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801c6be:	e7ee      	b.n	801c69e <_vfiprintf_r+0x332>
 801c6c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f040 84c6 	bne.w	801d054 <_vfiprintf_r+0xce8>
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6cc:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c6d0:	f013 0f01 	tst.w	r3, #1
 801c6d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c6d8:	f000 8095 	beq.w	801c806 <_vfiprintf_r+0x49a>
 801c6dc:	065b      	lsls	r3, r3, #25
 801c6de:	f100 84d0 	bmi.w	801d082 <_vfiprintf_r+0xd16>
 801c6e2:	9804      	ldr	r0, [sp, #16]
 801c6e4:	b03b      	add	sp, #236	; 0xec
 801c6e6:	ecbd 8b02 	vpop	{d8}
 801c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d0e6      	beq.n	801c6c0 <_vfiprintf_r+0x354>
 801c6f2:	2201      	movs	r2, #1
 801c6f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801c6f8:	f04f 0300 	mov.w	r3, #0
 801c6fc:	9200      	str	r2, [sp, #0]
 801c6fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801c702:	9202      	str	r2, [sp, #8]
 801c704:	ae21      	add	r6, sp, #132	; 0x84
 801c706:	2300      	movs	r3, #0
 801c708:	9301      	str	r3, [sp, #4]
 801c70a:	f017 0302 	ands.w	r3, r7, #2
 801c70e:	9307      	str	r3, [sp, #28]
 801c710:	d002      	beq.n	801c718 <_vfiprintf_r+0x3ac>
 801c712:	9b00      	ldr	r3, [sp, #0]
 801c714:	3302      	adds	r3, #2
 801c716:	9300      	str	r3, [sp, #0]
 801c718:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 801c71c:	9306      	str	r3, [sp, #24]
 801c71e:	d105      	bne.n	801c72c <_vfiprintf_r+0x3c0>
 801c720:	9b03      	ldr	r3, [sp, #12]
 801c722:	9a00      	ldr	r2, [sp, #0]
 801c724:	1a9c      	subs	r4, r3, r2
 801c726:	2c00      	cmp	r4, #0
 801c728:	f300 8253 	bgt.w	801cbd2 <_vfiprintf_r+0x866>
 801c72c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 801c730:	1c51      	adds	r1, r2, #1
 801c732:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 801c736:	b178      	cbz	r0, 801c758 <_vfiprintf_r+0x3ec>
 801c738:	f10c 0c01 	add.w	ip, ip, #1
 801c73c:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 801c740:	2201      	movs	r2, #1
 801c742:	2907      	cmp	r1, #7
 801c744:	e9cd 1c0f 	strd	r1, ip, [sp, #60]	; 0x3c
 801c748:	e9c8 0200 	strd	r0, r2, [r8]
 801c74c:	f300 8222 	bgt.w	801cb94 <_vfiprintf_r+0x828>
 801c750:	460a      	mov	r2, r1
 801c752:	f108 0808 	add.w	r8, r8, #8
 801c756:	3101      	adds	r1, #1
 801c758:	9b07      	ldr	r3, [sp, #28]
 801c75a:	b1d3      	cbz	r3, 801c792 <_vfiprintf_r+0x426>
 801c75c:	f10c 0c02 	add.w	ip, ip, #2
 801c760:	aa0d      	add	r2, sp, #52	; 0x34
 801c762:	2302      	movs	r3, #2
 801c764:	2907      	cmp	r1, #7
 801c766:	e9cd 1c0f 	strd	r1, ip, [sp, #60]	; 0x3c
 801c76a:	e9c8 2300 	strd	r2, r3, [r8]
 801c76e:	f340 822b 	ble.w	801cbc8 <_vfiprintf_r+0x85c>
 801c772:	f1bc 0f00 	cmp.w	ip, #0
 801c776:	f000 82d9 	beq.w	801cd2c <_vfiprintf_r+0x9c0>
 801c77a:	aa0e      	add	r2, sp, #56	; 0x38
 801c77c:	4649      	mov	r1, r9
 801c77e:	4658      	mov	r0, fp
 801c780:	f7ff fdac 	bl	801c2dc <__sprint_r.part.0>
 801c784:	2800      	cmp	r0, #0
 801c786:	d1a1      	bne.n	801c6cc <_vfiprintf_r+0x360>
 801c788:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 801c78c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801c790:	1c51      	adds	r1, r2, #1
 801c792:	9b06      	ldr	r3, [sp, #24]
 801c794:	2b80      	cmp	r3, #128	; 0x80
 801c796:	f000 815f 	beq.w	801ca58 <_vfiprintf_r+0x6ec>
 801c79a:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
 801c79e:	1a1c      	subs	r4, r3, r0
 801c7a0:	2c00      	cmp	r4, #0
 801c7a2:	f300 81ac 	bgt.w	801cafe <_vfiprintf_r+0x792>
 801c7a6:	9a02      	ldr	r2, [sp, #8]
 801c7a8:	910f      	str	r1, [sp, #60]	; 0x3c
 801c7aa:	4613      	mov	r3, r2
 801c7ac:	4463      	add	r3, ip
 801c7ae:	2907      	cmp	r1, #7
 801c7b0:	e9c8 6200 	strd	r6, r2, [r8]
 801c7b4:	9310      	str	r3, [sp, #64]	; 0x40
 801c7b6:	f340 814c 	ble.w	801ca52 <_vfiprintf_r+0x6e6>
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	f000 8247 	beq.w	801cc4e <_vfiprintf_r+0x8e2>
 801c7c0:	aa0e      	add	r2, sp, #56	; 0x38
 801c7c2:	4649      	mov	r1, r9
 801c7c4:	4658      	mov	r0, fp
 801c7c6:	f7ff fd89 	bl	801c2dc <__sprint_r.part.0>
 801c7ca:	2800      	cmp	r0, #0
 801c7cc:	f47f af7e 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801c7d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c7d2:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801c7d6:	0779      	lsls	r1, r7, #29
 801c7d8:	d505      	bpl.n	801c7e6 <_vfiprintf_r+0x47a>
 801c7da:	9a03      	ldr	r2, [sp, #12]
 801c7dc:	9900      	ldr	r1, [sp, #0]
 801c7de:	1a54      	subs	r4, r2, r1
 801c7e0:	2c00      	cmp	r4, #0
 801c7e2:	f300 823e 	bgt.w	801cc62 <_vfiprintf_r+0x8f6>
 801c7e6:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 801c7ea:	9800      	ldr	r0, [sp, #0]
 801c7ec:	4281      	cmp	r1, r0
 801c7ee:	bfac      	ite	ge
 801c7f0:	1852      	addge	r2, r2, r1
 801c7f2:	1812      	addlt	r2, r2, r0
 801c7f4:	9204      	str	r2, [sp, #16]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	f040 81be 	bne.w	801cb78 <_vfiprintf_r+0x80c>
 801c7fc:	2300      	movs	r3, #0
 801c7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801c800:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801c804:	e5f3      	b.n	801c3ee <_vfiprintf_r+0x82>
 801c806:	059a      	lsls	r2, r3, #22
 801c808:	f53f af68 	bmi.w	801c6dc <_vfiprintf_r+0x370>
 801c80c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801c810:	f7f8 fcda 	bl	80151c8 <__retarget_lock_release_recursive>
 801c814:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c818:	e760      	b.n	801c6dc <_vfiprintf_r+0x370>
 801c81a:	9b05      	ldr	r3, [sp, #20]
 801c81c:	06fe      	lsls	r6, r7, #27
 801c81e:	f853 4b04 	ldr.w	r4, [r3], #4
 801c822:	f100 82df 	bmi.w	801cde4 <_vfiprintf_r+0xa78>
 801c826:	067d      	lsls	r5, r7, #25
 801c828:	f140 82d9 	bpl.w	801cdde <_vfiprintf_r+0xa72>
 801c82c:	b224      	sxth	r4, r4
 801c82e:	17e5      	asrs	r5, r4, #31
 801c830:	9305      	str	r3, [sp, #20]
 801c832:	4622      	mov	r2, r4
 801c834:	462b      	mov	r3, r5
 801c836:	e69b      	b.n	801c570 <_vfiprintf_r+0x204>
 801c838:	f854 3b04 	ldr.w	r3, [r4], #4
 801c83c:	9405      	str	r4, [sp, #20]
 801c83e:	06f8      	lsls	r0, r7, #27
 801c840:	f100 82ca 	bmi.w	801cdd8 <_vfiprintf_r+0xa6c>
 801c844:	0679      	lsls	r1, r7, #25
 801c846:	f140 82c4 	bpl.w	801cdd2 <_vfiprintf_r+0xa66>
 801c84a:	b29c      	uxth	r4, r3
 801c84c:	2500      	movs	r5, #0
 801c84e:	e6ef      	b.n	801c630 <_vfiprintf_r+0x2c4>
 801c850:	9c05      	ldr	r4, [sp, #20]
 801c852:	f854 6b04 	ldr.w	r6, [r4], #4
 801c856:	f04f 0300 	mov.w	r3, #0
 801c85a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801c85e:	2e00      	cmp	r6, #0
 801c860:	f000 838a 	beq.w	801cf78 <_vfiprintf_r+0xc0c>
 801c864:	9a01      	ldr	r2, [sp, #4]
 801c866:	4613      	mov	r3, r2
 801c868:	3301      	adds	r3, #1
 801c86a:	f000 830e 	beq.w	801ce8a <_vfiprintf_r+0xb1e>
 801c86e:	2100      	movs	r1, #0
 801c870:	4630      	mov	r0, r6
 801c872:	f7e3 ff75 	bl	8000760 <memchr>
 801c876:	2800      	cmp	r0, #0
 801c878:	f000 83d9 	beq.w	801d02e <_vfiprintf_r+0xcc2>
 801c87c:	1b83      	subs	r3, r0, r6
 801c87e:	9302      	str	r3, [sp, #8]
 801c880:	2300      	movs	r3, #0
 801c882:	9405      	str	r4, [sp, #20]
 801c884:	9301      	str	r3, [sp, #4]
 801c886:	e690      	b.n	801c5aa <_vfiprintf_r+0x23e>
 801c888:	9c05      	ldr	r4, [sp, #20]
 801c88a:	2201      	movs	r2, #1
 801c88c:	f854 3b04 	ldr.w	r3, [r4], #4
 801c890:	9200      	str	r2, [sp, #0]
 801c892:	f04f 0100 	mov.w	r1, #0
 801c896:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 801c89a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801c89e:	9405      	str	r4, [sp, #20]
 801c8a0:	9202      	str	r2, [sp, #8]
 801c8a2:	ae21      	add	r6, sp, #132	; 0x84
 801c8a4:	e72f      	b.n	801c706 <_vfiprintf_r+0x39a>
 801c8a6:	f7fe fcbb 	bl	801b220 <__sinit>
 801c8aa:	e56f      	b.n	801c38c <_vfiprintf_r+0x20>
 801c8ac:	9b05      	ldr	r3, [sp, #20]
 801c8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8b2:	9203      	str	r2, [sp, #12]
 801c8b4:	2a00      	cmp	r2, #0
 801c8b6:	f280 8276 	bge.w	801cda6 <_vfiprintf_r+0xa3a>
 801c8ba:	9a03      	ldr	r2, [sp, #12]
 801c8bc:	9305      	str	r3, [sp, #20]
 801c8be:	4252      	negs	r2, r2
 801c8c0:	9203      	str	r2, [sp, #12]
 801c8c2:	f89a 3000 	ldrb.w	r3, [sl]
 801c8c6:	f047 0704 	orr.w	r7, r7, #4
 801c8ca:	e5b4      	b.n	801c436 <_vfiprintf_r+0xca>
 801c8cc:	f89a 3000 	ldrb.w	r3, [sl]
 801c8d0:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 801c8d4:	e5af      	b.n	801c436 <_vfiprintf_r+0xca>
 801c8d6:	f89a 3000 	ldrb.w	r3, [sl]
 801c8da:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 801c8de:	e5aa      	b.n	801c436 <_vfiprintf_r+0xca>
 801c8e0:	4651      	mov	r1, sl
 801c8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c8e6:	2b2a      	cmp	r3, #42	; 0x2a
 801c8e8:	f000 83d2 	beq.w	801d090 <_vfiprintf_r+0xd24>
 801c8ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c8f0:	2a09      	cmp	r2, #9
 801c8f2:	468a      	mov	sl, r1
 801c8f4:	bf98      	it	ls
 801c8f6:	2100      	movls	r1, #0
 801c8f8:	f200 83a4 	bhi.w	801d044 <_vfiprintf_r+0xcd8>
 801c8fc:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801c900:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801c904:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c908:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c90c:	2a09      	cmp	r2, #9
 801c90e:	d9f5      	bls.n	801c8fc <_vfiprintf_r+0x590>
 801c910:	9101      	str	r1, [sp, #4]
 801c912:	e592      	b.n	801c43a <_vfiprintf_r+0xce>
 801c914:	f89a 3000 	ldrb.w	r3, [sl]
 801c918:	f047 0701 	orr.w	r7, r7, #1
 801c91c:	e58b      	b.n	801c436 <_vfiprintf_r+0xca>
 801c91e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801c922:	2b00      	cmp	r3, #0
 801c924:	f47f ae0d 	bne.w	801c542 <_vfiprintf_r+0x1d6>
 801c928:	2320      	movs	r3, #32
 801c92a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801c92e:	f89a 3000 	ldrb.w	r3, [sl]
 801c932:	e580      	b.n	801c436 <_vfiprintf_r+0xca>
 801c934:	f89a 3000 	ldrb.w	r3, [sl]
 801c938:	2b6c      	cmp	r3, #108	; 0x6c
 801c93a:	bf03      	ittte	eq
 801c93c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 801c940:	f047 0720 	orreq.w	r7, r7, #32
 801c944:	f10a 0a01 	addeq.w	sl, sl, #1
 801c948:	f047 0710 	orrne.w	r7, r7, #16
 801c94c:	e573      	b.n	801c436 <_vfiprintf_r+0xca>
 801c94e:	f89a 3000 	ldrb.w	r3, [sl]
 801c952:	2b68      	cmp	r3, #104	; 0x68
 801c954:	bf03      	ittte	eq
 801c956:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 801c95a:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
 801c95e:	f10a 0a01 	addeq.w	sl, sl, #1
 801c962:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
 801c966:	e566      	b.n	801c436 <_vfiprintf_r+0xca>
 801c968:	f047 0310 	orr.w	r3, r7, #16
 801c96c:	9300      	str	r3, [sp, #0]
 801c96e:	9b00      	ldr	r3, [sp, #0]
 801c970:	069b      	lsls	r3, r3, #26
 801c972:	f140 81ee 	bpl.w	801cd52 <_vfiprintf_r+0x9e6>
 801c976:	9c05      	ldr	r4, [sp, #20]
 801c978:	3407      	adds	r4, #7
 801c97a:	f024 0307 	bic.w	r3, r4, #7
 801c97e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 801c982:	9305      	str	r3, [sp, #20]
 801c984:	2301      	movs	r3, #1
 801c986:	e657      	b.n	801c638 <_vfiprintf_r+0x2cc>
 801c988:	9c05      	ldr	r4, [sp, #20]
 801c98a:	f854 3b04 	ldr.w	r3, [r4], #4
 801c98e:	9405      	str	r4, [sp, #20]
 801c990:	f647 0230 	movw	r2, #30768	; 0x7830
 801c994:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c998:	461c      	mov	r4, r3
 801c99a:	f047 0202 	orr.w	r2, r7, #2
 801c99e:	4bb4      	ldr	r3, [pc, #720]	; (801cc70 <_vfiprintf_r+0x904>)
 801c9a0:	9308      	str	r3, [sp, #32]
 801c9a2:	9200      	str	r2, [sp, #0]
 801c9a4:	2500      	movs	r5, #0
 801c9a6:	2302      	movs	r3, #2
 801c9a8:	e646      	b.n	801c638 <_vfiprintf_r+0x2cc>
 801c9aa:	06b9      	lsls	r1, r7, #26
 801c9ac:	f100 8220 	bmi.w	801cdf0 <_vfiprintf_r+0xa84>
 801c9b0:	06fa      	lsls	r2, r7, #27
 801c9b2:	f100 82d9 	bmi.w	801cf68 <_vfiprintf_r+0xbfc>
 801c9b6:	067b      	lsls	r3, r7, #25
 801c9b8:	f100 831d 	bmi.w	801cff6 <_vfiprintf_r+0xc8a>
 801c9bc:	05be      	lsls	r6, r7, #22
 801c9be:	f140 82d3 	bpl.w	801cf68 <_vfiprintf_r+0xbfc>
 801c9c2:	9c05      	ldr	r4, [sp, #20]
 801c9c4:	9a04      	ldr	r2, [sp, #16]
 801c9c6:	f854 3b04 	ldr.w	r3, [r4], #4
 801c9ca:	9405      	str	r4, [sp, #20]
 801c9cc:	701a      	strb	r2, [r3, #0]
 801c9ce:	e50e      	b.n	801c3ee <_vfiprintf_r+0x82>
 801c9d0:	9700      	str	r7, [sp, #0]
 801c9d2:	2b01      	cmp	r3, #1
 801c9d4:	f43f addc 	beq.w	801c590 <_vfiprintf_r+0x224>
 801c9d8:	2b02      	cmp	r3, #2
 801c9da:	ae3a      	add	r6, sp, #232	; 0xe8
 801c9dc:	d113      	bne.n	801ca06 <_vfiprintf_r+0x69a>
 801c9de:	9808      	ldr	r0, [sp, #32]
 801c9e0:	0923      	lsrs	r3, r4, #4
 801c9e2:	f004 010f 	and.w	r1, r4, #15
 801c9e6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 801c9ea:	092a      	lsrs	r2, r5, #4
 801c9ec:	461c      	mov	r4, r3
 801c9ee:	4615      	mov	r5, r2
 801c9f0:	5c43      	ldrb	r3, [r0, r1]
 801c9f2:	f806 3d01 	strb.w	r3, [r6, #-1]!
 801c9f6:	ea54 0305 	orrs.w	r3, r4, r5
 801c9fa:	d1f1      	bne.n	801c9e0 <_vfiprintf_r+0x674>
 801c9fc:	9f00      	ldr	r7, [sp, #0]
 801c9fe:	ab3a      	add	r3, sp, #232	; 0xe8
 801ca00:	1b9b      	subs	r3, r3, r6
 801ca02:	9302      	str	r3, [sp, #8]
 801ca04:	e5d1      	b.n	801c5aa <_vfiprintf_r+0x23e>
 801ca06:	08e2      	lsrs	r2, r4, #3
 801ca08:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 801ca0c:	08e9      	lsrs	r1, r5, #3
 801ca0e:	f004 0307 	and.w	r3, r4, #7
 801ca12:	460d      	mov	r5, r1
 801ca14:	4614      	mov	r4, r2
 801ca16:	3330      	adds	r3, #48	; 0x30
 801ca18:	ea54 0105 	orrs.w	r1, r4, r5
 801ca1c:	4632      	mov	r2, r6
 801ca1e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 801ca22:	d1f0      	bne.n	801ca06 <_vfiprintf_r+0x69a>
 801ca24:	9f00      	ldr	r7, [sp, #0]
 801ca26:	07fc      	lsls	r4, r7, #31
 801ca28:	d5e9      	bpl.n	801c9fe <_vfiprintf_r+0x692>
 801ca2a:	2b30      	cmp	r3, #48	; 0x30
 801ca2c:	d0e6      	beq.n	801c9fc <_vfiprintf_r+0x690>
 801ca2e:	2330      	movs	r3, #48	; 0x30
 801ca30:	3a02      	subs	r2, #2
 801ca32:	f806 3c01 	strb.w	r3, [r6, #-1]
 801ca36:	ab3a      	add	r3, sp, #232	; 0xe8
 801ca38:	1a9b      	subs	r3, r3, r2
 801ca3a:	9f00      	ldr	r7, [sp, #0]
 801ca3c:	9302      	str	r3, [sp, #8]
 801ca3e:	4616      	mov	r6, r2
 801ca40:	e5b3      	b.n	801c5aa <_vfiprintf_r+0x23e>
 801ca42:	9b02      	ldr	r3, [sp, #8]
 801ca44:	9312      	str	r3, [sp, #72]	; 0x48
 801ca46:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 801ca4a:	2201      	movs	r2, #1
 801ca4c:	920f      	str	r2, [sp, #60]	; 0x3c
 801ca4e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ca52:	f108 0808 	add.w	r8, r8, #8
 801ca56:	e6be      	b.n	801c7d6 <_vfiprintf_r+0x46a>
 801ca58:	9b03      	ldr	r3, [sp, #12]
 801ca5a:	9800      	ldr	r0, [sp, #0]
 801ca5c:	1a1c      	subs	r4, r3, r0
 801ca5e:	2c00      	cmp	r4, #0
 801ca60:	f77f ae9b 	ble.w	801c79a <_vfiprintf_r+0x42e>
 801ca64:	2c10      	cmp	r4, #16
 801ca66:	4d83      	ldr	r5, [pc, #524]	; (801cc74 <_vfiprintf_r+0x908>)
 801ca68:	f340 8310 	ble.w	801d08c <_vfiprintf_r+0xd20>
 801ca6c:	4663      	mov	r3, ip
 801ca6e:	e006      	b.n	801ca7e <_vfiprintf_r+0x712>
 801ca70:	1c90      	adds	r0, r2, #2
 801ca72:	f108 0808 	add.w	r8, r8, #8
 801ca76:	460a      	mov	r2, r1
 801ca78:	3c10      	subs	r4, #16
 801ca7a:	2c10      	cmp	r4, #16
 801ca7c:	dd1d      	ble.n	801caba <_vfiprintf_r+0x74e>
 801ca7e:	1c51      	adds	r1, r2, #1
 801ca80:	3310      	adds	r3, #16
 801ca82:	2010      	movs	r0, #16
 801ca84:	2907      	cmp	r1, #7
 801ca86:	9310      	str	r3, [sp, #64]	; 0x40
 801ca88:	f8c8 5000 	str.w	r5, [r8]
 801ca8c:	f8c8 0004 	str.w	r0, [r8, #4]
 801ca90:	910f      	str	r1, [sp, #60]	; 0x3c
 801ca92:	dded      	ble.n	801ca70 <_vfiprintf_r+0x704>
 801ca94:	aa0e      	add	r2, sp, #56	; 0x38
 801ca96:	4649      	mov	r1, r9
 801ca98:	4658      	mov	r0, fp
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d075      	beq.n	801cb8a <_vfiprintf_r+0x81e>
 801ca9e:	f7ff fc1d 	bl	801c2dc <__sprint_r.part.0>
 801caa2:	2800      	cmp	r0, #0
 801caa4:	f47f ae12 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801caa8:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 801caac:	3c10      	subs	r4, #16
 801caae:	2c10      	cmp	r4, #16
 801cab0:	f102 0001 	add.w	r0, r2, #1
 801cab4:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cab8:	dce1      	bgt.n	801ca7e <_vfiprintf_r+0x712>
 801caba:	469c      	mov	ip, r3
 801cabc:	44a4      	add	ip, r4
 801cabe:	2807      	cmp	r0, #7
 801cac0:	e9c8 5400 	strd	r5, r4, [r8]
 801cac4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801cac8:	900f      	str	r0, [sp, #60]	; 0x3c
 801caca:	f340 817d 	ble.w	801cdc8 <_vfiprintf_r+0xa5c>
 801cace:	f1bc 0f00 	cmp.w	ip, #0
 801cad2:	f000 827f 	beq.w	801cfd4 <_vfiprintf_r+0xc68>
 801cad6:	aa0e      	add	r2, sp, #56	; 0x38
 801cad8:	4649      	mov	r1, r9
 801cada:	4658      	mov	r0, fp
 801cadc:	f7ff fbfe 	bl	801c2dc <__sprint_r.part.0>
 801cae0:	2800      	cmp	r0, #0
 801cae2:	f47f adf3 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cae6:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
 801caea:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 801caee:	1a1c      	subs	r4, r3, r0
 801caf0:	2c00      	cmp	r4, #0
 801caf2:	f102 0101 	add.w	r1, r2, #1
 801caf6:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cafa:	f77f ae54 	ble.w	801c7a6 <_vfiprintf_r+0x43a>
 801cafe:	2c10      	cmp	r4, #16
 801cb00:	4d5c      	ldr	r5, [pc, #368]	; (801cc74 <_vfiprintf_r+0x908>)
 801cb02:	bfc8      	it	gt
 801cb04:	4663      	movgt	r3, ip
 801cb06:	dc07      	bgt.n	801cb18 <_vfiprintf_r+0x7ac>
 801cb08:	e024      	b.n	801cb54 <_vfiprintf_r+0x7e8>
 801cb0a:	1c91      	adds	r1, r2, #2
 801cb0c:	f108 0808 	add.w	r8, r8, #8
 801cb10:	4602      	mov	r2, r0
 801cb12:	3c10      	subs	r4, #16
 801cb14:	2c10      	cmp	r4, #16
 801cb16:	dd1c      	ble.n	801cb52 <_vfiprintf_r+0x7e6>
 801cb18:	1c50      	adds	r0, r2, #1
 801cb1a:	3310      	adds	r3, #16
 801cb1c:	2110      	movs	r1, #16
 801cb1e:	2807      	cmp	r0, #7
 801cb20:	9310      	str	r3, [sp, #64]	; 0x40
 801cb22:	f8c8 5000 	str.w	r5, [r8]
 801cb26:	f8c8 1004 	str.w	r1, [r8, #4]
 801cb2a:	900f      	str	r0, [sp, #60]	; 0x3c
 801cb2c:	dded      	ble.n	801cb0a <_vfiprintf_r+0x79e>
 801cb2e:	aa0e      	add	r2, sp, #56	; 0x38
 801cb30:	4649      	mov	r1, r9
 801cb32:	4658      	mov	r0, fp
 801cb34:	b1db      	cbz	r3, 801cb6e <_vfiprintf_r+0x802>
 801cb36:	f7ff fbd1 	bl	801c2dc <__sprint_r.part.0>
 801cb3a:	2800      	cmp	r0, #0
 801cb3c:	f47f adc6 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cb40:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 801cb44:	3c10      	subs	r4, #16
 801cb46:	2c10      	cmp	r4, #16
 801cb48:	f102 0101 	add.w	r1, r2, #1
 801cb4c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cb50:	dce2      	bgt.n	801cb18 <_vfiprintf_r+0x7ac>
 801cb52:	469c      	mov	ip, r3
 801cb54:	44a4      	add	ip, r4
 801cb56:	2907      	cmp	r1, #7
 801cb58:	e9c8 5400 	strd	r5, r4, [r8]
 801cb5c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801cb60:	910f      	str	r1, [sp, #60]	; 0x3c
 801cb62:	f300 80cd 	bgt.w	801cd00 <_vfiprintf_r+0x994>
 801cb66:	f108 0808 	add.w	r8, r8, #8
 801cb6a:	3101      	adds	r1, #1
 801cb6c:	e61b      	b.n	801c7a6 <_vfiprintf_r+0x43a>
 801cb6e:	2101      	movs	r1, #1
 801cb70:	461a      	mov	r2, r3
 801cb72:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cb76:	e7cc      	b.n	801cb12 <_vfiprintf_r+0x7a6>
 801cb78:	aa0e      	add	r2, sp, #56	; 0x38
 801cb7a:	4649      	mov	r1, r9
 801cb7c:	4658      	mov	r0, fp
 801cb7e:	f7ff fbad 	bl	801c2dc <__sprint_r.part.0>
 801cb82:	2800      	cmp	r0, #0
 801cb84:	f43f ae3a 	beq.w	801c7fc <_vfiprintf_r+0x490>
 801cb88:	e5a0      	b.n	801c6cc <_vfiprintf_r+0x360>
 801cb8a:	2001      	movs	r0, #1
 801cb8c:	461a      	mov	r2, r3
 801cb8e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cb92:	e771      	b.n	801ca78 <_vfiprintf_r+0x70c>
 801cb94:	f1bc 0f00 	cmp.w	ip, #0
 801cb98:	f000 80c4 	beq.w	801cd24 <_vfiprintf_r+0x9b8>
 801cb9c:	aa0e      	add	r2, sp, #56	; 0x38
 801cb9e:	4649      	mov	r1, r9
 801cba0:	4658      	mov	r0, fp
 801cba2:	f7ff fb9b 	bl	801c2dc <__sprint_r.part.0>
 801cba6:	2800      	cmp	r0, #0
 801cba8:	f47f ad90 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cbac:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 801cbb0:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cbb4:	1c51      	adds	r1, r2, #1
 801cbb6:	e5cf      	b.n	801c758 <_vfiprintf_r+0x3ec>
 801cbb8:	2302      	movs	r3, #2
 801cbba:	aa0d      	add	r2, sp, #52	; 0x34
 801cbbc:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
 801cbc0:	469c      	mov	ip, r3
 801cbc2:	2101      	movs	r1, #1
 801cbc4:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cbc8:	460a      	mov	r2, r1
 801cbca:	f108 0808 	add.w	r8, r8, #8
 801cbce:	1c51      	adds	r1, r2, #1
 801cbd0:	e5df      	b.n	801c792 <_vfiprintf_r+0x426>
 801cbd2:	2c10      	cmp	r4, #16
 801cbd4:	f340 8231 	ble.w	801d03a <_vfiprintf_r+0xcce>
 801cbd8:	e9dd 030f 	ldrd	r0, r3, [sp, #60]	; 0x3c
 801cbdc:	4d26      	ldr	r5, [pc, #152]	; (801cc78 <_vfiprintf_r+0x90c>)
 801cbde:	e006      	b.n	801cbee <_vfiprintf_r+0x882>
 801cbe0:	1c82      	adds	r2, r0, #2
 801cbe2:	f108 0808 	add.w	r8, r8, #8
 801cbe6:	4608      	mov	r0, r1
 801cbe8:	3c10      	subs	r4, #16
 801cbea:	2c10      	cmp	r4, #16
 801cbec:	dd1c      	ble.n	801cc28 <_vfiprintf_r+0x8bc>
 801cbee:	1c41      	adds	r1, r0, #1
 801cbf0:	3310      	adds	r3, #16
 801cbf2:	2210      	movs	r2, #16
 801cbf4:	2907      	cmp	r1, #7
 801cbf6:	9310      	str	r3, [sp, #64]	; 0x40
 801cbf8:	f8c8 5000 	str.w	r5, [r8]
 801cbfc:	f8c8 2004 	str.w	r2, [r8, #4]
 801cc00:	910f      	str	r1, [sp, #60]	; 0x3c
 801cc02:	dded      	ble.n	801cbe0 <_vfiprintf_r+0x874>
 801cc04:	aa0e      	add	r2, sp, #56	; 0x38
 801cc06:	4649      	mov	r1, r9
 801cc08:	4658      	mov	r0, fp
 801cc0a:	b1db      	cbz	r3, 801cc44 <_vfiprintf_r+0x8d8>
 801cc0c:	f7ff fb66 	bl	801c2dc <__sprint_r.part.0>
 801cc10:	2800      	cmp	r0, #0
 801cc12:	f47f ad5b 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cc16:	e9dd 030f 	ldrd	r0, r3, [sp, #60]	; 0x3c
 801cc1a:	3c10      	subs	r4, #16
 801cc1c:	2c10      	cmp	r4, #16
 801cc1e:	f100 0201 	add.w	r2, r0, #1
 801cc22:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cc26:	dce2      	bgt.n	801cbee <_vfiprintf_r+0x882>
 801cc28:	eb04 0c03 	add.w	ip, r4, r3
 801cc2c:	2a07      	cmp	r2, #7
 801cc2e:	e9c8 5400 	strd	r5, r4, [r8]
 801cc32:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801cc36:	920f      	str	r2, [sp, #60]	; 0x3c
 801cc38:	f300 80a3 	bgt.w	801cd82 <_vfiprintf_r+0xa16>
 801cc3c:	f108 0808 	add.w	r8, r8, #8
 801cc40:	1c51      	adds	r1, r2, #1
 801cc42:	e576      	b.n	801c732 <_vfiprintf_r+0x3c6>
 801cc44:	4618      	mov	r0, r3
 801cc46:	2201      	movs	r2, #1
 801cc48:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cc4c:	e7cc      	b.n	801cbe8 <_vfiprintf_r+0x87c>
 801cc4e:	0778      	lsls	r0, r7, #29
 801cc50:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc52:	d54c      	bpl.n	801ccee <_vfiprintf_r+0x982>
 801cc54:	9a03      	ldr	r2, [sp, #12]
 801cc56:	9900      	ldr	r1, [sp, #0]
 801cc58:	1a54      	subs	r4, r2, r1
 801cc5a:	2c00      	cmp	r4, #0
 801cc5c:	dd47      	ble.n	801ccee <_vfiprintf_r+0x982>
 801cc5e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cc62:	2c10      	cmp	r4, #16
 801cc64:	f340 81f2 	ble.w	801d04c <_vfiprintf_r+0xce0>
 801cc68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cc6a:	4d03      	ldr	r5, [pc, #12]	; (801cc78 <_vfiprintf_r+0x90c>)
 801cc6c:	2610      	movs	r6, #16
 801cc6e:	e00c      	b.n	801cc8a <_vfiprintf_r+0x91e>
 801cc70:	08020534 	.word	0x08020534
 801cc74:	080207d4 	.word	0x080207d4
 801cc78:	080207c4 	.word	0x080207c4
 801cc7c:	1c88      	adds	r0, r1, #2
 801cc7e:	f108 0808 	add.w	r8, r8, #8
 801cc82:	4611      	mov	r1, r2
 801cc84:	3c10      	subs	r4, #16
 801cc86:	2c10      	cmp	r4, #16
 801cc88:	dd19      	ble.n	801ccbe <_vfiprintf_r+0x952>
 801cc8a:	1c4a      	adds	r2, r1, #1
 801cc8c:	3310      	adds	r3, #16
 801cc8e:	2a07      	cmp	r2, #7
 801cc90:	e9c8 5600 	strd	r5, r6, [r8]
 801cc94:	9310      	str	r3, [sp, #64]	; 0x40
 801cc96:	920f      	str	r2, [sp, #60]	; 0x3c
 801cc98:	ddf0      	ble.n	801cc7c <_vfiprintf_r+0x910>
 801cc9a:	aa0e      	add	r2, sp, #56	; 0x38
 801cc9c:	4649      	mov	r1, r9
 801cc9e:	4658      	mov	r0, fp
 801cca0:	b303      	cbz	r3, 801cce4 <_vfiprintf_r+0x978>
 801cca2:	f7ff fb1b 	bl	801c2dc <__sprint_r.part.0>
 801cca6:	2800      	cmp	r0, #0
 801cca8:	f47f ad10 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801ccac:	e9dd 130f 	ldrd	r1, r3, [sp, #60]	; 0x3c
 801ccb0:	3c10      	subs	r4, #16
 801ccb2:	2c10      	cmp	r4, #16
 801ccb4:	f101 0001 	add.w	r0, r1, #1
 801ccb8:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ccbc:	dce5      	bgt.n	801cc8a <_vfiprintf_r+0x91e>
 801ccbe:	4423      	add	r3, r4
 801ccc0:	2807      	cmp	r0, #7
 801ccc2:	e9c8 5400 	strd	r5, r4, [r8]
 801ccc6:	9310      	str	r3, [sp, #64]	; 0x40
 801ccc8:	900f      	str	r0, [sp, #60]	; 0x3c
 801ccca:	f77f ad8c 	ble.w	801c7e6 <_vfiprintf_r+0x47a>
 801ccce:	b173      	cbz	r3, 801ccee <_vfiprintf_r+0x982>
 801ccd0:	aa0e      	add	r2, sp, #56	; 0x38
 801ccd2:	4649      	mov	r1, r9
 801ccd4:	4658      	mov	r0, fp
 801ccd6:	f7ff fb01 	bl	801c2dc <__sprint_r.part.0>
 801ccda:	2800      	cmp	r0, #0
 801ccdc:	f47f acf6 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cce2:	e580      	b.n	801c7e6 <_vfiprintf_r+0x47a>
 801cce4:	2001      	movs	r0, #1
 801cce6:	4619      	mov	r1, r3
 801cce8:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ccec:	e7ca      	b.n	801cc84 <_vfiprintf_r+0x918>
 801ccee:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801ccf2:	9900      	ldr	r1, [sp, #0]
 801ccf4:	428a      	cmp	r2, r1
 801ccf6:	bfac      	ite	ge
 801ccf8:	189b      	addge	r3, r3, r2
 801ccfa:	185b      	addlt	r3, r3, r1
 801ccfc:	9304      	str	r3, [sp, #16]
 801ccfe:	e57d      	b.n	801c7fc <_vfiprintf_r+0x490>
 801cd00:	f1bc 0f00 	cmp.w	ip, #0
 801cd04:	f43f ae9d 	beq.w	801ca42 <_vfiprintf_r+0x6d6>
 801cd08:	aa0e      	add	r2, sp, #56	; 0x38
 801cd0a:	4649      	mov	r1, r9
 801cd0c:	4658      	mov	r0, fp
 801cd0e:	f7ff fae5 	bl	801c2dc <__sprint_r.part.0>
 801cd12:	2800      	cmp	r0, #0
 801cd14:	f47f acda 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cd18:	e9dd 1c0f 	ldrd	r1, ip, [sp, #60]	; 0x3c
 801cd1c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cd20:	3101      	adds	r1, #1
 801cd22:	e540      	b.n	801c7a6 <_vfiprintf_r+0x43a>
 801cd24:	9b07      	ldr	r3, [sp, #28]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	f040 8085 	bne.w	801ce36 <_vfiprintf_r+0xaca>
 801cd2c:	2101      	movs	r1, #1
 801cd2e:	4662      	mov	r2, ip
 801cd30:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cd34:	e52d      	b.n	801c792 <_vfiprintf_r+0x426>
 801cd36:	920f      	str	r2, [sp, #60]	; 0x3c
 801cd38:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cd3c:	e4af      	b.n	801c69e <_vfiprintf_r+0x332>
 801cd3e:	9b01      	ldr	r3, [sp, #4]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	f47f ac2a 	bne.w	801c59a <_vfiprintf_r+0x22e>
 801cd46:	9f00      	ldr	r7, [sp, #0]
 801cd48:	2300      	movs	r3, #0
 801cd4a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801cd4e:	ae3a      	add	r6, sp, #232	; 0xe8
 801cd50:	e42b      	b.n	801c5aa <_vfiprintf_r+0x23e>
 801cd52:	9b00      	ldr	r3, [sp, #0]
 801cd54:	06df      	lsls	r7, r3, #27
 801cd56:	d457      	bmi.n	801ce08 <_vfiprintf_r+0xa9c>
 801cd58:	9b00      	ldr	r3, [sp, #0]
 801cd5a:	065e      	lsls	r6, r3, #25
 801cd5c:	f140 8116 	bpl.w	801cf8c <_vfiprintf_r+0xc20>
 801cd60:	9c05      	ldr	r4, [sp, #20]
 801cd62:	f854 2b04 	ldr.w	r2, [r4], #4
 801cd66:	9405      	str	r4, [sp, #20]
 801cd68:	2301      	movs	r3, #1
 801cd6a:	b294      	uxth	r4, r2
 801cd6c:	2500      	movs	r5, #0
 801cd6e:	e463      	b.n	801c638 <_vfiprintf_r+0x2cc>
 801cd70:	232d      	movs	r3, #45	; 0x2d
 801cd72:	4264      	negs	r4, r4
 801cd74:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801cd78:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801cd7c:	9700      	str	r7, [sp, #0]
 801cd7e:	2301      	movs	r3, #1
 801cd80:	e45e      	b.n	801c640 <_vfiprintf_r+0x2d4>
 801cd82:	f1bc 0f00 	cmp.w	ip, #0
 801cd86:	f000 8089 	beq.w	801ce9c <_vfiprintf_r+0xb30>
 801cd8a:	aa0e      	add	r2, sp, #56	; 0x38
 801cd8c:	4649      	mov	r1, r9
 801cd8e:	4658      	mov	r0, fp
 801cd90:	f7ff faa4 	bl	801c2dc <__sprint_r.part.0>
 801cd94:	2800      	cmp	r0, #0
 801cd96:	f47f ac99 	bne.w	801c6cc <_vfiprintf_r+0x360>
 801cd9a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 801cd9e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cda2:	1c51      	adds	r1, r2, #1
 801cda4:	e4c5      	b.n	801c732 <_vfiprintf_r+0x3c6>
 801cda6:	9305      	str	r3, [sp, #20]
 801cda8:	f89a 3000 	ldrb.w	r3, [sl]
 801cdac:	f7ff bb43 	b.w	801c436 <_vfiprintf_r+0xca>
 801cdb0:	ae3a      	add	r6, sp, #232	; 0xe8
 801cdb2:	f7ff bbfa 	b.w	801c5aa <_vfiprintf_r+0x23e>
 801cdb6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801cdba:	f7f8 fa03 	bl	80151c4 <__retarget_lock_acquire_recursive>
 801cdbe:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
 801cdc2:	b28a      	uxth	r2, r1
 801cdc4:	f7ff baec 	b.w	801c3a0 <_vfiprintf_r+0x34>
 801cdc8:	f108 0808 	add.w	r8, r8, #8
 801cdcc:	1c41      	adds	r1, r0, #1
 801cdce:	4602      	mov	r2, r0
 801cdd0:	e4e3      	b.n	801c79a <_vfiprintf_r+0x42e>
 801cdd2:	05ba      	lsls	r2, r7, #22
 801cdd4:	f100 8121 	bmi.w	801d01a <_vfiprintf_r+0xcae>
 801cdd8:	461c      	mov	r4, r3
 801cdda:	2500      	movs	r5, #0
 801cddc:	e428      	b.n	801c630 <_vfiprintf_r+0x2c4>
 801cdde:	05b8      	lsls	r0, r7, #22
 801cde0:	f100 8114 	bmi.w	801d00c <_vfiprintf_r+0xca0>
 801cde4:	17e5      	asrs	r5, r4, #31
 801cde6:	9305      	str	r3, [sp, #20]
 801cde8:	4622      	mov	r2, r4
 801cdea:	462b      	mov	r3, r5
 801cdec:	f7ff bbc0 	b.w	801c570 <_vfiprintf_r+0x204>
 801cdf0:	9b04      	ldr	r3, [sp, #16]
 801cdf2:	9c05      	ldr	r4, [sp, #20]
 801cdf4:	17dd      	asrs	r5, r3, #31
 801cdf6:	f854 1b04 	ldr.w	r1, [r4], #4
 801cdfa:	9405      	str	r4, [sp, #20]
 801cdfc:	461a      	mov	r2, r3
 801cdfe:	462b      	mov	r3, r5
 801ce00:	e9c1 2300 	strd	r2, r3, [r1]
 801ce04:	f7ff baf3 	b.w	801c3ee <_vfiprintf_r+0x82>
 801ce08:	9c05      	ldr	r4, [sp, #20]
 801ce0a:	f854 2b04 	ldr.w	r2, [r4], #4
 801ce0e:	9405      	str	r4, [sp, #20]
 801ce10:	2301      	movs	r3, #1
 801ce12:	4614      	mov	r4, r2
 801ce14:	2500      	movs	r5, #0
 801ce16:	e40f      	b.n	801c638 <_vfiprintf_r+0x2cc>
 801ce18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f43f ab91 	beq.w	801c542 <_vfiprintf_r+0x1d6>
 801ce20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce22:	781b      	ldrb	r3, [r3, #0]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	f43f ab8c 	beq.w	801c542 <_vfiprintf_r+0x1d6>
 801ce2a:	f89a 3000 	ldrb.w	r3, [sl]
 801ce2e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 801ce32:	f7ff bb00 	b.w	801c436 <_vfiprintf_r+0xca>
 801ce36:	2302      	movs	r3, #2
 801ce38:	a90d      	add	r1, sp, #52	; 0x34
 801ce3a:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
 801ce3e:	469c      	mov	ip, r3
 801ce40:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ce44:	e6c1      	b.n	801cbca <_vfiprintf_r+0x85e>
 801ce46:	9700      	str	r7, [sp, #0]
 801ce48:	e591      	b.n	801c96e <_vfiprintf_r+0x602>
 801ce4a:	4a97      	ldr	r2, [pc, #604]	; (801d0a8 <_vfiprintf_r+0xd3c>)
 801ce4c:	9208      	str	r2, [sp, #32]
 801ce4e:	06bd      	lsls	r5, r7, #26
 801ce50:	9c05      	ldr	r4, [sp, #20]
 801ce52:	d531      	bpl.n	801ceb8 <_vfiprintf_r+0xb4c>
 801ce54:	3407      	adds	r4, #7
 801ce56:	f024 0207 	bic.w	r2, r4, #7
 801ce5a:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 801ce5e:	9205      	str	r2, [sp, #20]
 801ce60:	07fe      	lsls	r6, r7, #31
 801ce62:	d509      	bpl.n	801ce78 <_vfiprintf_r+0xb0c>
 801ce64:	ea54 0205 	orrs.w	r2, r4, r5
 801ce68:	d006      	beq.n	801ce78 <_vfiprintf_r+0xb0c>
 801ce6a:	2230      	movs	r2, #48	; 0x30
 801ce6c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801ce70:	f047 0702 	orr.w	r7, r7, #2
 801ce74:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801ce78:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 801ce7c:	9300      	str	r3, [sp, #0]
 801ce7e:	2302      	movs	r3, #2
 801ce80:	f7ff bbda 	b.w	801c638 <_vfiprintf_r+0x2cc>
 801ce84:	4a89      	ldr	r2, [pc, #548]	; (801d0ac <_vfiprintf_r+0xd40>)
 801ce86:	9208      	str	r2, [sp, #32]
 801ce88:	e7e1      	b.n	801ce4e <_vfiprintf_r+0xae2>
 801ce8a:	4630      	mov	r0, r6
 801ce8c:	f7e3 fbf8 	bl	8000680 <strlen>
 801ce90:	2300      	movs	r3, #0
 801ce92:	9405      	str	r4, [sp, #20]
 801ce94:	9002      	str	r0, [sp, #8]
 801ce96:	9301      	str	r3, [sp, #4]
 801ce98:	f7ff bb87 	b.w	801c5aa <_vfiprintf_r+0x23e>
 801ce9c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 801cea0:	2a00      	cmp	r2, #0
 801cea2:	f040 809d 	bne.w	801cfe0 <_vfiprintf_r+0xc74>
 801cea6:	9b07      	ldr	r3, [sp, #28]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	f47f ae85 	bne.w	801cbb8 <_vfiprintf_r+0x84c>
 801ceae:	4662      	mov	r2, ip
 801ceb0:	2101      	movs	r1, #1
 801ceb2:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ceb6:	e470      	b.n	801c79a <_vfiprintf_r+0x42e>
 801ceb8:	f854 2b04 	ldr.w	r2, [r4], #4
 801cebc:	9405      	str	r4, [sp, #20]
 801cebe:	06fc      	lsls	r4, r7, #27
 801cec0:	d407      	bmi.n	801ced2 <_vfiprintf_r+0xb66>
 801cec2:	0678      	lsls	r0, r7, #25
 801cec4:	d502      	bpl.n	801cecc <_vfiprintf_r+0xb60>
 801cec6:	b294      	uxth	r4, r2
 801cec8:	2500      	movs	r5, #0
 801ceca:	e7c9      	b.n	801ce60 <_vfiprintf_r+0xaf4>
 801cecc:	05b9      	lsls	r1, r7, #22
 801cece:	f100 809a 	bmi.w	801d006 <_vfiprintf_r+0xc9a>
 801ced2:	4614      	mov	r4, r2
 801ced4:	2500      	movs	r5, #0
 801ced6:	e7c3      	b.n	801ce60 <_vfiprintf_r+0xaf4>
 801ced8:	9b00      	ldr	r3, [sp, #0]
 801ceda:	f8cd 8008 	str.w	r8, [sp, #8]
 801cede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cee2:	f8cd a018 	str.w	sl, [sp, #24]
 801cee6:	2700      	movs	r7, #0
 801cee8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801ceec:	ae3a      	add	r6, sp, #232	; 0xe8
 801ceee:	4698      	mov	r8, r3
 801cef0:	e007      	b.n	801cf02 <_vfiprintf_r+0xb96>
 801cef2:	f7e4 fa77 	bl	80013e4 <__aeabi_uldivmod>
 801cef6:	2d00      	cmp	r5, #0
 801cef8:	bf08      	it	eq
 801cefa:	2c0a      	cmpeq	r4, #10
 801cefc:	d31f      	bcc.n	801cf3e <_vfiprintf_r+0xbd2>
 801cefe:	4604      	mov	r4, r0
 801cf00:	460d      	mov	r5, r1
 801cf02:	220a      	movs	r2, #10
 801cf04:	2300      	movs	r3, #0
 801cf06:	4620      	mov	r0, r4
 801cf08:	4629      	mov	r1, r5
 801cf0a:	f7e4 fa6b 	bl	80013e4 <__aeabi_uldivmod>
 801cf0e:	4694      	mov	ip, r2
 801cf10:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 801cf14:	f806 cc01 	strb.w	ip, [r6, #-1]
 801cf18:	4620      	mov	r0, r4
 801cf1a:	4629      	mov	r1, r5
 801cf1c:	220a      	movs	r2, #10
 801cf1e:	2300      	movs	r3, #0
 801cf20:	3701      	adds	r7, #1
 801cf22:	3e01      	subs	r6, #1
 801cf24:	f1b8 0f00 	cmp.w	r8, #0
 801cf28:	d0e3      	beq.n	801cef2 <_vfiprintf_r+0xb86>
 801cf2a:	f89a c000 	ldrb.w	ip, [sl]
 801cf2e:	45bc      	cmp	ip, r7
 801cf30:	d1df      	bne.n	801cef2 <_vfiprintf_r+0xb86>
 801cf32:	2fff      	cmp	r7, #255	; 0xff
 801cf34:	d0dd      	beq.n	801cef2 <_vfiprintf_r+0xb86>
 801cf36:	429d      	cmp	r5, r3
 801cf38:	bf08      	it	eq
 801cf3a:	4294      	cmpeq	r4, r2
 801cf3c:	d236      	bcs.n	801cfac <_vfiprintf_r+0xc40>
 801cf3e:	ab3a      	add	r3, sp, #232	; 0xe8
 801cf40:	1b9b      	subs	r3, r3, r6
 801cf42:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cf46:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801cf4a:	9f00      	ldr	r7, [sp, #0]
 801cf4c:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cf50:	9302      	str	r3, [sp, #8]
 801cf52:	f7ff bb2a 	b.w	801c5aa <_vfiprintf_r+0x23e>
 801cf56:	9700      	str	r7, [sp, #0]
 801cf58:	f7ff bb1a 	b.w	801c590 <_vfiprintf_r+0x224>
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	9700      	str	r7, [sp, #0]
 801cf60:	f47f ad3a 	bne.w	801c9d8 <_vfiprintf_r+0x66c>
 801cf64:	f7ff bb19 	b.w	801c59a <_vfiprintf_r+0x22e>
 801cf68:	9c05      	ldr	r4, [sp, #20]
 801cf6a:	9a04      	ldr	r2, [sp, #16]
 801cf6c:	f854 3b04 	ldr.w	r3, [r4], #4
 801cf70:	601a      	str	r2, [r3, #0]
 801cf72:	9405      	str	r4, [sp, #20]
 801cf74:	f7ff ba3b 	b.w	801c3ee <_vfiprintf_r+0x82>
 801cf78:	9b01      	ldr	r3, [sp, #4]
 801cf7a:	4e4d      	ldr	r6, [pc, #308]	; (801d0b0 <_vfiprintf_r+0xd44>)
 801cf7c:	9405      	str	r4, [sp, #20]
 801cf7e:	2b06      	cmp	r3, #6
 801cf80:	bf28      	it	cs
 801cf82:	2306      	movcs	r3, #6
 801cf84:	9302      	str	r3, [sp, #8]
 801cf86:	9300      	str	r3, [sp, #0]
 801cf88:	f7ff bbbd 	b.w	801c706 <_vfiprintf_r+0x39a>
 801cf8c:	9c05      	ldr	r4, [sp, #20]
 801cf8e:	9b00      	ldr	r3, [sp, #0]
 801cf90:	f854 2b04 	ldr.w	r2, [r4], #4
 801cf94:	9405      	str	r4, [sp, #20]
 801cf96:	f413 7f00 	tst.w	r3, #512	; 0x200
 801cf9a:	bf18      	it	ne
 801cf9c:	b2d4      	uxtbne	r4, r2
 801cf9e:	f04f 0301 	mov.w	r3, #1
 801cfa2:	bf08      	it	eq
 801cfa4:	4614      	moveq	r4, r2
 801cfa6:	2500      	movs	r5, #0
 801cfa8:	f7ff bb46 	b.w	801c638 <_vfiprintf_r+0x2cc>
 801cfac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cfae:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cfb0:	1af6      	subs	r6, r6, r3
 801cfb2:	461a      	mov	r2, r3
 801cfb4:	4630      	mov	r0, r6
 801cfb6:	f7ff f8e1 	bl	801c17c <strncpy>
 801cfba:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801cfbe:	b10b      	cbz	r3, 801cfc4 <_vfiprintf_r+0xc58>
 801cfc0:	f10a 0a01 	add.w	sl, sl, #1
 801cfc4:	220a      	movs	r2, #10
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	4620      	mov	r0, r4
 801cfca:	4629      	mov	r1, r5
 801cfcc:	2700      	movs	r7, #0
 801cfce:	f7e4 fa09 	bl	80013e4 <__aeabi_uldivmod>
 801cfd2:	e794      	b.n	801cefe <_vfiprintf_r+0xb92>
 801cfd4:	2101      	movs	r1, #1
 801cfd6:	4662      	mov	r2, ip
 801cfd8:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cfdc:	f7ff bbdd 	b.w	801c79a <_vfiprintf_r+0x42e>
 801cfe0:	2201      	movs	r2, #1
 801cfe2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 801cfe6:	4611      	mov	r1, r2
 801cfe8:	9212      	str	r2, [sp, #72]	; 0x48
 801cfea:	4694      	mov	ip, r2
 801cfec:	9011      	str	r0, [sp, #68]	; 0x44
 801cfee:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cff2:	f7ff bbad 	b.w	801c750 <_vfiprintf_r+0x3e4>
 801cff6:	9c05      	ldr	r4, [sp, #20]
 801cff8:	9a04      	ldr	r2, [sp, #16]
 801cffa:	f854 3b04 	ldr.w	r3, [r4], #4
 801cffe:	9405      	str	r4, [sp, #20]
 801d000:	801a      	strh	r2, [r3, #0]
 801d002:	f7ff b9f4 	b.w	801c3ee <_vfiprintf_r+0x82>
 801d006:	b2d4      	uxtb	r4, r2
 801d008:	2500      	movs	r5, #0
 801d00a:	e729      	b.n	801ce60 <_vfiprintf_r+0xaf4>
 801d00c:	b264      	sxtb	r4, r4
 801d00e:	17e5      	asrs	r5, r4, #31
 801d010:	9305      	str	r3, [sp, #20]
 801d012:	4622      	mov	r2, r4
 801d014:	462b      	mov	r3, r5
 801d016:	f7ff baab 	b.w	801c570 <_vfiprintf_r+0x204>
 801d01a:	b2dc      	uxtb	r4, r3
 801d01c:	2500      	movs	r5, #0
 801d01e:	f7ff bb07 	b.w	801c630 <_vfiprintf_r+0x2c4>
 801d022:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d026:	f7f8 f8cf 	bl	80151c8 <__retarget_lock_release_recursive>
 801d02a:	f7ff bae7 	b.w	801c5fc <_vfiprintf_r+0x290>
 801d02e:	9b01      	ldr	r3, [sp, #4]
 801d030:	9302      	str	r3, [sp, #8]
 801d032:	9405      	str	r4, [sp, #20]
 801d034:	9001      	str	r0, [sp, #4]
 801d036:	f7ff bab8 	b.w	801c5aa <_vfiprintf_r+0x23e>
 801d03a:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 801d03e:	4d1d      	ldr	r5, [pc, #116]	; (801d0b4 <_vfiprintf_r+0xd48>)
 801d040:	3201      	adds	r2, #1
 801d042:	e5f1      	b.n	801cc28 <_vfiprintf_r+0x8bc>
 801d044:	2200      	movs	r2, #0
 801d046:	9201      	str	r2, [sp, #4]
 801d048:	f7ff b9f7 	b.w	801c43a <_vfiprintf_r+0xce>
 801d04c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d04e:	4d19      	ldr	r5, [pc, #100]	; (801d0b4 <_vfiprintf_r+0xd48>)
 801d050:	3001      	adds	r0, #1
 801d052:	e634      	b.n	801ccbe <_vfiprintf_r+0x952>
 801d054:	ee18 0a10 	vmov	r0, s16
 801d058:	aa0e      	add	r2, sp, #56	; 0x38
 801d05a:	4649      	mov	r1, r9
 801d05c:	f7ff f93e 	bl	801c2dc <__sprint_r.part.0>
 801d060:	2800      	cmp	r0, #0
 801d062:	f43f ab31 	beq.w	801c6c8 <_vfiprintf_r+0x35c>
 801d066:	f7ff bb31 	b.w	801c6cc <_vfiprintf_r+0x360>
 801d06a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d06e:	07dc      	lsls	r4, r3, #31
 801d070:	d407      	bmi.n	801d082 <_vfiprintf_r+0xd16>
 801d072:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d076:	0598      	lsls	r0, r3, #22
 801d078:	d403      	bmi.n	801d082 <_vfiprintf_r+0xd16>
 801d07a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d07e:	f7f8 f8a3 	bl	80151c8 <__retarget_lock_release_recursive>
 801d082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d086:	9304      	str	r3, [sp, #16]
 801d088:	f7ff bb2b 	b.w	801c6e2 <_vfiprintf_r+0x376>
 801d08c:	4608      	mov	r0, r1
 801d08e:	e515      	b.n	801cabc <_vfiprintf_r+0x750>
 801d090:	9a05      	ldr	r2, [sp, #20]
 801d092:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801d096:	f852 0b04 	ldr.w	r0, [r2], #4
 801d09a:	9205      	str	r2, [sp, #20]
 801d09c:	468a      	mov	sl, r1
 801d09e:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
 801d0a2:	9101      	str	r1, [sp, #4]
 801d0a4:	f7ff b9c7 	b.w	801c436 <_vfiprintf_r+0xca>
 801d0a8:	08020548 	.word	0x08020548
 801d0ac:	08020534 	.word	0x08020534
 801d0b0:	0802055c 	.word	0x0802055c
 801d0b4:	080207c4 	.word	0x080207c4

0801d0b8 <__sbprintf>:
 801d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ba:	460c      	mov	r4, r1
 801d0bc:	8989      	ldrh	r1, [r1, #12]
 801d0be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801d0c0:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 801d0c4:	69e7      	ldr	r7, [r4, #28]
 801d0c6:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 801d0ca:	f021 0102 	bic.w	r1, r1, #2
 801d0ce:	4606      	mov	r6, r0
 801d0d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d0d4:	2000      	movs	r0, #0
 801d0d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d0d8:	951b      	str	r5, [sp, #108]	; 0x6c
 801d0da:	910b      	str	r1, [sp, #44]	; 0x2c
 801d0dc:	ad1c      	add	r5, sp, #112	; 0x70
 801d0de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d0e2:	9008      	str	r0, [sp, #32]
 801d0e4:	a818      	add	r0, sp, #96	; 0x60
 801d0e6:	e9cd 3200 	strd	r3, r2, [sp]
 801d0ea:	f8ad c016 	strh.w	ip, [sp, #22]
 801d0ee:	9502      	str	r5, [sp, #8]
 801d0f0:	9506      	str	r5, [sp, #24]
 801d0f2:	9104      	str	r1, [sp, #16]
 801d0f4:	9107      	str	r1, [sp, #28]
 801d0f6:	9709      	str	r7, [sp, #36]	; 0x24
 801d0f8:	f7f8 f860 	bl	80151bc <__retarget_lock_init_recursive>
 801d0fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d100:	a902      	add	r1, sp, #8
 801d102:	4630      	mov	r0, r6
 801d104:	f7ff f932 	bl	801c36c <_vfiprintf_r>
 801d108:	1e05      	subs	r5, r0, #0
 801d10a:	db07      	blt.n	801d11c <__sbprintf+0x64>
 801d10c:	4630      	mov	r0, r6
 801d10e:	a902      	add	r1, sp, #8
 801d110:	f7fe f82a 	bl	801b168 <_fflush_r>
 801d114:	2800      	cmp	r0, #0
 801d116:	bf18      	it	ne
 801d118:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 801d11c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d120:	065b      	lsls	r3, r3, #25
 801d122:	d503      	bpl.n	801d12c <__sbprintf+0x74>
 801d124:	89a3      	ldrh	r3, [r4, #12]
 801d126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d12a:	81a3      	strh	r3, [r4, #12]
 801d12c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d12e:	f7f8 f847 	bl	80151c0 <__retarget_lock_close_recursive>
 801d132:	4628      	mov	r0, r5
 801d134:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 801d138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d13a:	bf00      	nop

0801d13c <_write_r>:
 801d13c:	b570      	push	{r4, r5, r6, lr}
 801d13e:	460c      	mov	r4, r1
 801d140:	4d08      	ldr	r5, [pc, #32]	; (801d164 <_write_r+0x28>)
 801d142:	4611      	mov	r1, r2
 801d144:	2600      	movs	r6, #0
 801d146:	461a      	mov	r2, r3
 801d148:	4603      	mov	r3, r0
 801d14a:	4620      	mov	r0, r4
 801d14c:	602e      	str	r6, [r5, #0]
 801d14e:	461c      	mov	r4, r3
 801d150:	f7e6 f80f 	bl	8003172 <_write>
 801d154:	1c43      	adds	r3, r0, #1
 801d156:	d000      	beq.n	801d15a <_write_r+0x1e>
 801d158:	bd70      	pop	{r4, r5, r6, pc}
 801d15a:	682b      	ldr	r3, [r5, #0]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d0fb      	beq.n	801d158 <_write_r+0x1c>
 801d160:	6023      	str	r3, [r4, #0]
 801d162:	bd70      	pop	{r4, r5, r6, pc}
 801d164:	2000efec 	.word	0x2000efec

0801d168 <__register_exitproc>:
 801d168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d16c:	f8df a080 	ldr.w	sl, [pc, #128]	; 801d1f0 <__register_exitproc+0x88>
 801d170:	4606      	mov	r6, r0
 801d172:	f8da 0000 	ldr.w	r0, [sl]
 801d176:	4698      	mov	r8, r3
 801d178:	460f      	mov	r7, r1
 801d17a:	4691      	mov	r9, r2
 801d17c:	f7f8 f822 	bl	80151c4 <__retarget_lock_acquire_recursive>
 801d180:	4b1a      	ldr	r3, [pc, #104]	; (801d1ec <__register_exitproc+0x84>)
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801d188:	b324      	cbz	r4, 801d1d4 <__register_exitproc+0x6c>
 801d18a:	6865      	ldr	r5, [r4, #4]
 801d18c:	2d1f      	cmp	r5, #31
 801d18e:	dc26      	bgt.n	801d1de <__register_exitproc+0x76>
 801d190:	b95e      	cbnz	r6, 801d1aa <__register_exitproc+0x42>
 801d192:	1cab      	adds	r3, r5, #2
 801d194:	3501      	adds	r5, #1
 801d196:	f8da 0000 	ldr.w	r0, [sl]
 801d19a:	6065      	str	r5, [r4, #4]
 801d19c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801d1a0:	f7f8 f812 	bl	80151c8 <__retarget_lock_release_recursive>
 801d1a4:	2000      	movs	r0, #0
 801d1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d1ae:	2101      	movs	r1, #1
 801d1b0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 801d1b4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 801d1b8:	40a9      	lsls	r1, r5
 801d1ba:	430a      	orrs	r2, r1
 801d1bc:	2e02      	cmp	r6, #2
 801d1be:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 801d1c2:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
 801d1c6:	d1e4      	bne.n	801d192 <__register_exitproc+0x2a>
 801d1c8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 801d1cc:	4319      	orrs	r1, r3
 801d1ce:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
 801d1d2:	e7de      	b.n	801d192 <__register_exitproc+0x2a>
 801d1d4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801d1d8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801d1dc:	e7d5      	b.n	801d18a <__register_exitproc+0x22>
 801d1de:	f8da 0000 	ldr.w	r0, [sl]
 801d1e2:	f7f7 fff1 	bl	80151c8 <__retarget_lock_release_recursive>
 801d1e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d1ea:	e7dc      	b.n	801d1a6 <__register_exitproc+0x3e>
 801d1ec:	08020520 	.word	0x08020520
 801d1f0:	20000a48 	.word	0x20000a48

0801d1f4 <__assert_func>:
 801d1f4:	b500      	push	{lr}
 801d1f6:	4c0a      	ldr	r4, [pc, #40]	; (801d220 <__assert_func+0x2c>)
 801d1f8:	6825      	ldr	r5, [r4, #0]
 801d1fa:	4614      	mov	r4, r2
 801d1fc:	b085      	sub	sp, #20
 801d1fe:	461a      	mov	r2, r3
 801d200:	4603      	mov	r3, r0
 801d202:	68e8      	ldr	r0, [r5, #12]
 801d204:	b144      	cbz	r4, 801d218 <__assert_func+0x24>
 801d206:	4d07      	ldr	r5, [pc, #28]	; (801d224 <__assert_func+0x30>)
 801d208:	9100      	str	r1, [sp, #0]
 801d20a:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801d20e:	4906      	ldr	r1, [pc, #24]	; (801d228 <__assert_func+0x34>)
 801d210:	f000 f886 	bl	801d320 <fiprintf>
 801d214:	f000 fa14 	bl	801d640 <abort>
 801d218:	4d04      	ldr	r5, [pc, #16]	; (801d22c <__assert_func+0x38>)
 801d21a:	462c      	mov	r4, r5
 801d21c:	e7f4      	b.n	801d208 <__assert_func+0x14>
 801d21e:	bf00      	nop
 801d220:	20000208 	.word	0x20000208
 801d224:	080207e4 	.word	0x080207e4
 801d228:	080207f4 	.word	0x080207f4
 801d22c:	080207f0 	.word	0x080207f0

0801d230 <_close_r>:
 801d230:	b538      	push	{r3, r4, r5, lr}
 801d232:	4d07      	ldr	r5, [pc, #28]	; (801d250 <_close_r+0x20>)
 801d234:	2200      	movs	r2, #0
 801d236:	4604      	mov	r4, r0
 801d238:	4608      	mov	r0, r1
 801d23a:	602a      	str	r2, [r5, #0]
 801d23c:	f7e5 ffb5 	bl	80031aa <_close>
 801d240:	1c43      	adds	r3, r0, #1
 801d242:	d000      	beq.n	801d246 <_close_r+0x16>
 801d244:	bd38      	pop	{r3, r4, r5, pc}
 801d246:	682b      	ldr	r3, [r5, #0]
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d0fb      	beq.n	801d244 <_close_r+0x14>
 801d24c:	6023      	str	r3, [r4, #0]
 801d24e:	bd38      	pop	{r3, r4, r5, pc}
 801d250:	2000efec 	.word	0x2000efec

0801d254 <_fclose_r>:
 801d254:	b570      	push	{r4, r5, r6, lr}
 801d256:	2900      	cmp	r1, #0
 801d258:	d04b      	beq.n	801d2f2 <_fclose_r+0x9e>
 801d25a:	460c      	mov	r4, r1
 801d25c:	4605      	mov	r5, r0
 801d25e:	b110      	cbz	r0, 801d266 <_fclose_r+0x12>
 801d260:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d262:	2b00      	cmp	r3, #0
 801d264:	d048      	beq.n	801d2f8 <_fclose_r+0xa4>
 801d266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d268:	07d8      	lsls	r0, r3, #31
 801d26a:	d534      	bpl.n	801d2d6 <_fclose_r+0x82>
 801d26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d03e      	beq.n	801d2f2 <_fclose_r+0x9e>
 801d274:	4621      	mov	r1, r4
 801d276:	4628      	mov	r0, r5
 801d278:	f7fd fede 	bl	801b038 <__sflush_r>
 801d27c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d27e:	4606      	mov	r6, r0
 801d280:	b133      	cbz	r3, 801d290 <_fclose_r+0x3c>
 801d282:	69e1      	ldr	r1, [r4, #28]
 801d284:	4628      	mov	r0, r5
 801d286:	4798      	blx	r3
 801d288:	2800      	cmp	r0, #0
 801d28a:	bfb8      	it	lt
 801d28c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 801d290:	89a3      	ldrh	r3, [r4, #12]
 801d292:	061a      	lsls	r2, r3, #24
 801d294:	d43b      	bmi.n	801d30e <_fclose_r+0xba>
 801d296:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d298:	b141      	cbz	r1, 801d2ac <_fclose_r+0x58>
 801d29a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801d29e:	4299      	cmp	r1, r3
 801d2a0:	d002      	beq.n	801d2a8 <_fclose_r+0x54>
 801d2a2:	4628      	mov	r0, r5
 801d2a4:	f7fe f858 	bl	801b358 <_free_r>
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	6323      	str	r3, [r4, #48]	; 0x30
 801d2ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801d2ae:	b121      	cbz	r1, 801d2ba <_fclose_r+0x66>
 801d2b0:	4628      	mov	r0, r5
 801d2b2:	f7fe f851 	bl	801b358 <_free_r>
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	6463      	str	r3, [r4, #68]	; 0x44
 801d2ba:	f7fd ffdb 	bl	801b274 <__sfp_lock_acquire>
 801d2be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	07db      	lsls	r3, r3, #31
 801d2c4:	81a2      	strh	r2, [r4, #12]
 801d2c6:	d527      	bpl.n	801d318 <_fclose_r+0xc4>
 801d2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2ca:	f7f7 ff79 	bl	80151c0 <__retarget_lock_close_recursive>
 801d2ce:	f7fd ffd7 	bl	801b280 <__sfp_lock_release>
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	bd70      	pop	{r4, r5, r6, pc}
 801d2d6:	89a3      	ldrh	r3, [r4, #12]
 801d2d8:	0599      	lsls	r1, r3, #22
 801d2da:	d4cb      	bmi.n	801d274 <_fclose_r+0x20>
 801d2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2de:	f7f7 ff71 	bl	80151c4 <__retarget_lock_acquire_recursive>
 801d2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d1c4      	bne.n	801d274 <_fclose_r+0x20>
 801d2ea:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d2ec:	f016 0601 	ands.w	r6, r6, #1
 801d2f0:	d008      	beq.n	801d304 <_fclose_r+0xb0>
 801d2f2:	2600      	movs	r6, #0
 801d2f4:	4630      	mov	r0, r6
 801d2f6:	bd70      	pop	{r4, r5, r6, pc}
 801d2f8:	f7fd ff92 	bl	801b220 <__sinit>
 801d2fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2fe:	07d8      	lsls	r0, r3, #31
 801d300:	d4b4      	bmi.n	801d26c <_fclose_r+0x18>
 801d302:	e7e8      	b.n	801d2d6 <_fclose_r+0x82>
 801d304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d306:	f7f7 ff5f 	bl	80151c8 <__retarget_lock_release_recursive>
 801d30a:	4630      	mov	r0, r6
 801d30c:	bd70      	pop	{r4, r5, r6, pc}
 801d30e:	6921      	ldr	r1, [r4, #16]
 801d310:	4628      	mov	r0, r5
 801d312:	f7fe f821 	bl	801b358 <_free_r>
 801d316:	e7be      	b.n	801d296 <_fclose_r+0x42>
 801d318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d31a:	f7f7 ff55 	bl	80151c8 <__retarget_lock_release_recursive>
 801d31e:	e7d3      	b.n	801d2c8 <_fclose_r+0x74>

0801d320 <fiprintf>:
 801d320:	b40e      	push	{r1, r2, r3}
 801d322:	b510      	push	{r4, lr}
 801d324:	b083      	sub	sp, #12
 801d326:	ab05      	add	r3, sp, #20
 801d328:	4c06      	ldr	r4, [pc, #24]	; (801d344 <fiprintf+0x24>)
 801d32a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d32e:	9301      	str	r3, [sp, #4]
 801d330:	4601      	mov	r1, r0
 801d332:	6820      	ldr	r0, [r4, #0]
 801d334:	f7ff f81a 	bl	801c36c <_vfiprintf_r>
 801d338:	b003      	add	sp, #12
 801d33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d33e:	b003      	add	sp, #12
 801d340:	4770      	bx	lr
 801d342:	bf00      	nop
 801d344:	20000208 	.word	0x20000208

0801d348 <__fputwc>:
 801d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d34c:	b082      	sub	sp, #8
 801d34e:	4680      	mov	r8, r0
 801d350:	4689      	mov	r9, r1
 801d352:	4614      	mov	r4, r2
 801d354:	f000 f8a8 	bl	801d4a8 <__locale_mb_cur_max>
 801d358:	2801      	cmp	r0, #1
 801d35a:	d103      	bne.n	801d364 <__fputwc+0x1c>
 801d35c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 801d360:	2bfe      	cmp	r3, #254	; 0xfe
 801d362:	d936      	bls.n	801d3d2 <__fputwc+0x8a>
 801d364:	464a      	mov	r2, r9
 801d366:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801d36a:	a901      	add	r1, sp, #4
 801d36c:	4640      	mov	r0, r8
 801d36e:	f000 f93b 	bl	801d5e8 <_wcrtomb_r>
 801d372:	1c42      	adds	r2, r0, #1
 801d374:	4606      	mov	r6, r0
 801d376:	d032      	beq.n	801d3de <__fputwc+0x96>
 801d378:	b330      	cbz	r0, 801d3c8 <__fputwc+0x80>
 801d37a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801d37e:	2500      	movs	r5, #0
 801d380:	f10d 0a04 	add.w	sl, sp, #4
 801d384:	e009      	b.n	801d39a <__fputwc+0x52>
 801d386:	6823      	ldr	r3, [r4, #0]
 801d388:	1c5a      	adds	r2, r3, #1
 801d38a:	6022      	str	r2, [r4, #0]
 801d38c:	f883 c000 	strb.w	ip, [r3]
 801d390:	3501      	adds	r5, #1
 801d392:	42b5      	cmp	r5, r6
 801d394:	d218      	bcs.n	801d3c8 <__fputwc+0x80>
 801d396:	f815 c00a 	ldrb.w	ip, [r5, sl]
 801d39a:	68a3      	ldr	r3, [r4, #8]
 801d39c:	3b01      	subs	r3, #1
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	60a3      	str	r3, [r4, #8]
 801d3a2:	daf0      	bge.n	801d386 <__fputwc+0x3e>
 801d3a4:	69a7      	ldr	r7, [r4, #24]
 801d3a6:	42bb      	cmp	r3, r7
 801d3a8:	4661      	mov	r1, ip
 801d3aa:	4622      	mov	r2, r4
 801d3ac:	4640      	mov	r0, r8
 801d3ae:	db02      	blt.n	801d3b6 <__fputwc+0x6e>
 801d3b0:	f1bc 0f0a 	cmp.w	ip, #10
 801d3b4:	d1e7      	bne.n	801d386 <__fputwc+0x3e>
 801d3b6:	f000 f8bf 	bl	801d538 <__swbuf_r>
 801d3ba:	1c43      	adds	r3, r0, #1
 801d3bc:	d1e8      	bne.n	801d390 <__fputwc+0x48>
 801d3be:	4606      	mov	r6, r0
 801d3c0:	4630      	mov	r0, r6
 801d3c2:	b002      	add	sp, #8
 801d3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3c8:	464e      	mov	r6, r9
 801d3ca:	4630      	mov	r0, r6
 801d3cc:	b002      	add	sp, #8
 801d3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3d2:	fa5f fc89 	uxtb.w	ip, r9
 801d3d6:	4606      	mov	r6, r0
 801d3d8:	f88d c004 	strb.w	ip, [sp, #4]
 801d3dc:	e7cf      	b.n	801d37e <__fputwc+0x36>
 801d3de:	89a3      	ldrh	r3, [r4, #12]
 801d3e0:	4630      	mov	r0, r6
 801d3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3e6:	81a3      	strh	r3, [r4, #12]
 801d3e8:	b002      	add	sp, #8
 801d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3ee:	bf00      	nop

0801d3f0 <_fputwc_r>:
 801d3f0:	b530      	push	{r4, r5, lr}
 801d3f2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801d3f4:	f013 0f01 	tst.w	r3, #1
 801d3f8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 801d3fc:	4614      	mov	r4, r2
 801d3fe:	b083      	sub	sp, #12
 801d400:	4605      	mov	r5, r0
 801d402:	b29a      	uxth	r2, r3
 801d404:	d101      	bne.n	801d40a <_fputwc_r+0x1a>
 801d406:	0598      	lsls	r0, r3, #22
 801d408:	d51c      	bpl.n	801d444 <_fputwc_r+0x54>
 801d40a:	0490      	lsls	r0, r2, #18
 801d40c:	d406      	bmi.n	801d41c <_fputwc_r+0x2c>
 801d40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d418:	81a3      	strh	r3, [r4, #12]
 801d41a:	6662      	str	r2, [r4, #100]	; 0x64
 801d41c:	4628      	mov	r0, r5
 801d41e:	4622      	mov	r2, r4
 801d420:	f7ff ff92 	bl	801d348 <__fputwc>
 801d424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d426:	07da      	lsls	r2, r3, #31
 801d428:	4605      	mov	r5, r0
 801d42a:	d402      	bmi.n	801d432 <_fputwc_r+0x42>
 801d42c:	89a3      	ldrh	r3, [r4, #12]
 801d42e:	059b      	lsls	r3, r3, #22
 801d430:	d502      	bpl.n	801d438 <_fputwc_r+0x48>
 801d432:	4628      	mov	r0, r5
 801d434:	b003      	add	sp, #12
 801d436:	bd30      	pop	{r4, r5, pc}
 801d438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d43a:	f7f7 fec5 	bl	80151c8 <__retarget_lock_release_recursive>
 801d43e:	4628      	mov	r0, r5
 801d440:	b003      	add	sp, #12
 801d442:	bd30      	pop	{r4, r5, pc}
 801d444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d446:	9101      	str	r1, [sp, #4]
 801d448:	f7f7 febc 	bl	80151c4 <__retarget_lock_acquire_recursive>
 801d44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d450:	9901      	ldr	r1, [sp, #4]
 801d452:	b29a      	uxth	r2, r3
 801d454:	e7d9      	b.n	801d40a <_fputwc_r+0x1a>
 801d456:	bf00      	nop

0801d458 <_fstat_r>:
 801d458:	b538      	push	{r3, r4, r5, lr}
 801d45a:	460c      	mov	r4, r1
 801d45c:	4d08      	ldr	r5, [pc, #32]	; (801d480 <_fstat_r+0x28>)
 801d45e:	4603      	mov	r3, r0
 801d460:	4611      	mov	r1, r2
 801d462:	4620      	mov	r0, r4
 801d464:	2200      	movs	r2, #0
 801d466:	461c      	mov	r4, r3
 801d468:	602a      	str	r2, [r5, #0]
 801d46a:	f7e5 feaa 	bl	80031c2 <_fstat>
 801d46e:	1c43      	adds	r3, r0, #1
 801d470:	d000      	beq.n	801d474 <_fstat_r+0x1c>
 801d472:	bd38      	pop	{r3, r4, r5, pc}
 801d474:	682b      	ldr	r3, [r5, #0]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d0fb      	beq.n	801d472 <_fstat_r+0x1a>
 801d47a:	6023      	str	r3, [r4, #0]
 801d47c:	bd38      	pop	{r3, r4, r5, pc}
 801d47e:	bf00      	nop
 801d480:	2000efec 	.word	0x2000efec

0801d484 <_isatty_r>:
 801d484:	b538      	push	{r3, r4, r5, lr}
 801d486:	4d07      	ldr	r5, [pc, #28]	; (801d4a4 <_isatty_r+0x20>)
 801d488:	2200      	movs	r2, #0
 801d48a:	4604      	mov	r4, r0
 801d48c:	4608      	mov	r0, r1
 801d48e:	602a      	str	r2, [r5, #0]
 801d490:	f7e5 fea7 	bl	80031e2 <_isatty>
 801d494:	1c43      	adds	r3, r0, #1
 801d496:	d000      	beq.n	801d49a <_isatty_r+0x16>
 801d498:	bd38      	pop	{r3, r4, r5, pc}
 801d49a:	682b      	ldr	r3, [r5, #0]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d0fb      	beq.n	801d498 <_isatty_r+0x14>
 801d4a0:	6023      	str	r3, [r4, #0]
 801d4a2:	bd38      	pop	{r3, r4, r5, pc}
 801d4a4:	2000efec 	.word	0x2000efec

0801d4a8 <__locale_mb_cur_max>:
 801d4a8:	4b01      	ldr	r3, [pc, #4]	; (801d4b0 <__locale_mb_cur_max+0x8>)
 801d4aa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801d4ae:	4770      	bx	lr
 801d4b0:	20000a4c 	.word	0x20000a4c

0801d4b4 <_lseek_r>:
 801d4b4:	b570      	push	{r4, r5, r6, lr}
 801d4b6:	460c      	mov	r4, r1
 801d4b8:	4d08      	ldr	r5, [pc, #32]	; (801d4dc <_lseek_r+0x28>)
 801d4ba:	4611      	mov	r1, r2
 801d4bc:	2600      	movs	r6, #0
 801d4be:	461a      	mov	r2, r3
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	602e      	str	r6, [r5, #0]
 801d4c6:	461c      	mov	r4, r3
 801d4c8:	f7e5 fe96 	bl	80031f8 <_lseek>
 801d4cc:	1c43      	adds	r3, r0, #1
 801d4ce:	d000      	beq.n	801d4d2 <_lseek_r+0x1e>
 801d4d0:	bd70      	pop	{r4, r5, r6, pc}
 801d4d2:	682b      	ldr	r3, [r5, #0]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d0fb      	beq.n	801d4d0 <_lseek_r+0x1c>
 801d4d8:	6023      	str	r3, [r4, #0]
 801d4da:	bd70      	pop	{r4, r5, r6, pc}
 801d4dc:	2000efec 	.word	0x2000efec

0801d4e0 <__ascii_mbtowc>:
 801d4e0:	b082      	sub	sp, #8
 801d4e2:	b149      	cbz	r1, 801d4f8 <__ascii_mbtowc+0x18>
 801d4e4:	b15a      	cbz	r2, 801d4fe <__ascii_mbtowc+0x1e>
 801d4e6:	b16b      	cbz	r3, 801d504 <__ascii_mbtowc+0x24>
 801d4e8:	7813      	ldrb	r3, [r2, #0]
 801d4ea:	600b      	str	r3, [r1, #0]
 801d4ec:	7812      	ldrb	r2, [r2, #0]
 801d4ee:	1e10      	subs	r0, r2, #0
 801d4f0:	bf18      	it	ne
 801d4f2:	2001      	movne	r0, #1
 801d4f4:	b002      	add	sp, #8
 801d4f6:	4770      	bx	lr
 801d4f8:	a901      	add	r1, sp, #4
 801d4fa:	2a00      	cmp	r2, #0
 801d4fc:	d1f3      	bne.n	801d4e6 <__ascii_mbtowc+0x6>
 801d4fe:	4610      	mov	r0, r2
 801d500:	b002      	add	sp, #8
 801d502:	4770      	bx	lr
 801d504:	f06f 0001 	mvn.w	r0, #1
 801d508:	e7f4      	b.n	801d4f4 <__ascii_mbtowc+0x14>
 801d50a:	bf00      	nop

0801d50c <_read_r>:
 801d50c:	b570      	push	{r4, r5, r6, lr}
 801d50e:	460c      	mov	r4, r1
 801d510:	4d08      	ldr	r5, [pc, #32]	; (801d534 <_read_r+0x28>)
 801d512:	4611      	mov	r1, r2
 801d514:	2600      	movs	r6, #0
 801d516:	461a      	mov	r2, r3
 801d518:	4603      	mov	r3, r0
 801d51a:	4620      	mov	r0, r4
 801d51c:	602e      	str	r6, [r5, #0]
 801d51e:	461c      	mov	r4, r3
 801d520:	f7e5 fe0a 	bl	8003138 <_read>
 801d524:	1c43      	adds	r3, r0, #1
 801d526:	d000      	beq.n	801d52a <_read_r+0x1e>
 801d528:	bd70      	pop	{r4, r5, r6, pc}
 801d52a:	682b      	ldr	r3, [r5, #0]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d0fb      	beq.n	801d528 <_read_r+0x1c>
 801d530:	6023      	str	r3, [r4, #0]
 801d532:	bd70      	pop	{r4, r5, r6, pc}
 801d534:	2000efec 	.word	0x2000efec

0801d538 <__swbuf_r>:
 801d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d53a:	460d      	mov	r5, r1
 801d53c:	4614      	mov	r4, r2
 801d53e:	4606      	mov	r6, r0
 801d540:	b110      	cbz	r0, 801d548 <__swbuf_r+0x10>
 801d542:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d544:	2b00      	cmp	r3, #0
 801d546:	d043      	beq.n	801d5d0 <__swbuf_r+0x98>
 801d548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d54c:	69a3      	ldr	r3, [r4, #24]
 801d54e:	60a3      	str	r3, [r4, #8]
 801d550:	0717      	lsls	r7, r2, #28
 801d552:	b290      	uxth	r0, r2
 801d554:	d51b      	bpl.n	801d58e <__swbuf_r+0x56>
 801d556:	6923      	ldr	r3, [r4, #16]
 801d558:	b1cb      	cbz	r3, 801d58e <__swbuf_r+0x56>
 801d55a:	b2ed      	uxtb	r5, r5
 801d55c:	0481      	lsls	r1, r0, #18
 801d55e:	462f      	mov	r7, r5
 801d560:	d522      	bpl.n	801d5a8 <__swbuf_r+0x70>
 801d562:	6822      	ldr	r2, [r4, #0]
 801d564:	6961      	ldr	r1, [r4, #20]
 801d566:	1ad3      	subs	r3, r2, r3
 801d568:	4299      	cmp	r1, r3
 801d56a:	dd29      	ble.n	801d5c0 <__swbuf_r+0x88>
 801d56c:	3301      	adds	r3, #1
 801d56e:	68a1      	ldr	r1, [r4, #8]
 801d570:	1c50      	adds	r0, r2, #1
 801d572:	3901      	subs	r1, #1
 801d574:	60a1      	str	r1, [r4, #8]
 801d576:	6020      	str	r0, [r4, #0]
 801d578:	7015      	strb	r5, [r2, #0]
 801d57a:	6962      	ldr	r2, [r4, #20]
 801d57c:	429a      	cmp	r2, r3
 801d57e:	d02a      	beq.n	801d5d6 <__swbuf_r+0x9e>
 801d580:	89a3      	ldrh	r3, [r4, #12]
 801d582:	07db      	lsls	r3, r3, #31
 801d584:	d501      	bpl.n	801d58a <__swbuf_r+0x52>
 801d586:	2d0a      	cmp	r5, #10
 801d588:	d025      	beq.n	801d5d6 <__swbuf_r+0x9e>
 801d58a:	4638      	mov	r0, r7
 801d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d58e:	4621      	mov	r1, r4
 801d590:	4630      	mov	r0, r6
 801d592:	f7fc fc99 	bl	8019ec8 <__swsetup_r>
 801d596:	bb20      	cbnz	r0, 801d5e2 <__swbuf_r+0xaa>
 801d598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d59c:	6923      	ldr	r3, [r4, #16]
 801d59e:	b290      	uxth	r0, r2
 801d5a0:	b2ed      	uxtb	r5, r5
 801d5a2:	0481      	lsls	r1, r0, #18
 801d5a4:	462f      	mov	r7, r5
 801d5a6:	d4dc      	bmi.n	801d562 <__swbuf_r+0x2a>
 801d5a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801d5aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d5ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 801d5b2:	81a2      	strh	r2, [r4, #12]
 801d5b4:	6822      	ldr	r2, [r4, #0]
 801d5b6:	6661      	str	r1, [r4, #100]	; 0x64
 801d5b8:	6961      	ldr	r1, [r4, #20]
 801d5ba:	1ad3      	subs	r3, r2, r3
 801d5bc:	4299      	cmp	r1, r3
 801d5be:	dcd5      	bgt.n	801d56c <__swbuf_r+0x34>
 801d5c0:	4621      	mov	r1, r4
 801d5c2:	4630      	mov	r0, r6
 801d5c4:	f7fd fdd0 	bl	801b168 <_fflush_r>
 801d5c8:	b958      	cbnz	r0, 801d5e2 <__swbuf_r+0xaa>
 801d5ca:	6822      	ldr	r2, [r4, #0]
 801d5cc:	2301      	movs	r3, #1
 801d5ce:	e7ce      	b.n	801d56e <__swbuf_r+0x36>
 801d5d0:	f7fd fe26 	bl	801b220 <__sinit>
 801d5d4:	e7b8      	b.n	801d548 <__swbuf_r+0x10>
 801d5d6:	4621      	mov	r1, r4
 801d5d8:	4630      	mov	r0, r6
 801d5da:	f7fd fdc5 	bl	801b168 <_fflush_r>
 801d5de:	2800      	cmp	r0, #0
 801d5e0:	d0d3      	beq.n	801d58a <__swbuf_r+0x52>
 801d5e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d5e6:	e7d0      	b.n	801d58a <__swbuf_r+0x52>

0801d5e8 <_wcrtomb_r>:
 801d5e8:	b570      	push	{r4, r5, r6, lr}
 801d5ea:	4606      	mov	r6, r0
 801d5ec:	b084      	sub	sp, #16
 801d5ee:	461d      	mov	r5, r3
 801d5f0:	b139      	cbz	r1, 801d602 <_wcrtomb_r+0x1a>
 801d5f2:	4c0b      	ldr	r4, [pc, #44]	; (801d620 <_wcrtomb_r+0x38>)
 801d5f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801d5f8:	47a0      	blx	r4
 801d5fa:	1c43      	adds	r3, r0, #1
 801d5fc:	d00a      	beq.n	801d614 <_wcrtomb_r+0x2c>
 801d5fe:	b004      	add	sp, #16
 801d600:	bd70      	pop	{r4, r5, r6, pc}
 801d602:	460c      	mov	r4, r1
 801d604:	4906      	ldr	r1, [pc, #24]	; (801d620 <_wcrtomb_r+0x38>)
 801d606:	4622      	mov	r2, r4
 801d608:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 801d60c:	a901      	add	r1, sp, #4
 801d60e:	47a0      	blx	r4
 801d610:	1c43      	adds	r3, r0, #1
 801d612:	d1f4      	bne.n	801d5fe <_wcrtomb_r+0x16>
 801d614:	2200      	movs	r2, #0
 801d616:	238a      	movs	r3, #138	; 0x8a
 801d618:	602a      	str	r2, [r5, #0]
 801d61a:	6033      	str	r3, [r6, #0]
 801d61c:	b004      	add	sp, #16
 801d61e:	bd70      	pop	{r4, r5, r6, pc}
 801d620:	20000a4c 	.word	0x20000a4c

0801d624 <__ascii_wctomb>:
 801d624:	b149      	cbz	r1, 801d63a <__ascii_wctomb+0x16>
 801d626:	2aff      	cmp	r2, #255	; 0xff
 801d628:	d802      	bhi.n	801d630 <__ascii_wctomb+0xc>
 801d62a:	700a      	strb	r2, [r1, #0]
 801d62c:	2001      	movs	r0, #1
 801d62e:	4770      	bx	lr
 801d630:	238a      	movs	r3, #138	; 0x8a
 801d632:	6003      	str	r3, [r0, #0]
 801d634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d638:	4770      	bx	lr
 801d63a:	4608      	mov	r0, r1
 801d63c:	4770      	bx	lr
 801d63e:	bf00      	nop

0801d640 <abort>:
 801d640:	b508      	push	{r3, lr}
 801d642:	2006      	movs	r0, #6
 801d644:	f000 f830 	bl	801d6a8 <raise>
 801d648:	2001      	movs	r0, #1
 801d64a:	f7e5 fd6b 	bl	8003124 <_exit>
 801d64e:	bf00      	nop

0801d650 <_raise_r>:
 801d650:	291f      	cmp	r1, #31
 801d652:	b538      	push	{r3, r4, r5, lr}
 801d654:	4605      	mov	r5, r0
 801d656:	d821      	bhi.n	801d69c <_raise_r+0x4c>
 801d658:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801d65c:	460c      	mov	r4, r1
 801d65e:	b16a      	cbz	r2, 801d67c <_raise_r+0x2c>
 801d660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d664:	b153      	cbz	r3, 801d67c <_raise_r+0x2c>
 801d666:	2b01      	cmp	r3, #1
 801d668:	d016      	beq.n	801d698 <_raise_r+0x48>
 801d66a:	1c59      	adds	r1, r3, #1
 801d66c:	d010      	beq.n	801d690 <_raise_r+0x40>
 801d66e:	2500      	movs	r5, #0
 801d670:	4620      	mov	r0, r4
 801d672:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 801d676:	4798      	blx	r3
 801d678:	4628      	mov	r0, r5
 801d67a:	bd38      	pop	{r3, r4, r5, pc}
 801d67c:	4628      	mov	r0, r5
 801d67e:	f000 f831 	bl	801d6e4 <_getpid_r>
 801d682:	4622      	mov	r2, r4
 801d684:	4601      	mov	r1, r0
 801d686:	4628      	mov	r0, r5
 801d688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d68c:	f000 b814 	b.w	801d6b8 <_kill_r>
 801d690:	2316      	movs	r3, #22
 801d692:	6003      	str	r3, [r0, #0]
 801d694:	2001      	movs	r0, #1
 801d696:	bd38      	pop	{r3, r4, r5, pc}
 801d698:	2000      	movs	r0, #0
 801d69a:	bd38      	pop	{r3, r4, r5, pc}
 801d69c:	2316      	movs	r3, #22
 801d69e:	6003      	str	r3, [r0, #0]
 801d6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d6a4:	bd38      	pop	{r3, r4, r5, pc}
 801d6a6:	bf00      	nop

0801d6a8 <raise>:
 801d6a8:	4b02      	ldr	r3, [pc, #8]	; (801d6b4 <raise+0xc>)
 801d6aa:	4601      	mov	r1, r0
 801d6ac:	6818      	ldr	r0, [r3, #0]
 801d6ae:	f7ff bfcf 	b.w	801d650 <_raise_r>
 801d6b2:	bf00      	nop
 801d6b4:	20000208 	.word	0x20000208

0801d6b8 <_kill_r>:
 801d6b8:	b538      	push	{r3, r4, r5, lr}
 801d6ba:	460c      	mov	r4, r1
 801d6bc:	4d08      	ldr	r5, [pc, #32]	; (801d6e0 <_kill_r+0x28>)
 801d6be:	4603      	mov	r3, r0
 801d6c0:	4611      	mov	r1, r2
 801d6c2:	4620      	mov	r0, r4
 801d6c4:	2200      	movs	r2, #0
 801d6c6:	461c      	mov	r4, r3
 801d6c8:	602a      	str	r2, [r5, #0]
 801d6ca:	f7e5 fd1b 	bl	8003104 <_kill>
 801d6ce:	1c43      	adds	r3, r0, #1
 801d6d0:	d000      	beq.n	801d6d4 <_kill_r+0x1c>
 801d6d2:	bd38      	pop	{r3, r4, r5, pc}
 801d6d4:	682b      	ldr	r3, [r5, #0]
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	d0fb      	beq.n	801d6d2 <_kill_r+0x1a>
 801d6da:	6023      	str	r3, [r4, #0]
 801d6dc:	bd38      	pop	{r3, r4, r5, pc}
 801d6de:	bf00      	nop
 801d6e0:	2000efec 	.word	0x2000efec

0801d6e4 <_getpid_r>:
 801d6e4:	f7e5 bd06 	b.w	80030f4 <_getpid>

0801d6e8 <cos>:
 801d6e8:	b530      	push	{r4, r5, lr}
 801d6ea:	4a20      	ldr	r2, [pc, #128]	; (801d76c <cos+0x84>)
 801d6ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	b087      	sub	sp, #28
 801d6f4:	dd1b      	ble.n	801d72e <cos+0x46>
 801d6f6:	4a1e      	ldr	r2, [pc, #120]	; (801d770 <cos+0x88>)
 801d6f8:	4293      	cmp	r3, r2
 801d6fa:	dd05      	ble.n	801d708 <cos+0x20>
 801d6fc:	4602      	mov	r2, r0
 801d6fe:	460b      	mov	r3, r1
 801d700:	f7e3 f882 	bl	8000808 <__aeabi_dsub>
 801d704:	b007      	add	sp, #28
 801d706:	bd30      	pop	{r4, r5, pc}
 801d708:	aa02      	add	r2, sp, #8
 801d70a:	f000 f87d 	bl	801d808 <__ieee754_rem_pio2>
 801d70e:	f000 0003 	and.w	r0, r0, #3
 801d712:	2801      	cmp	r0, #1
 801d714:	d011      	beq.n	801d73a <cos+0x52>
 801d716:	2802      	cmp	r0, #2
 801d718:	d021      	beq.n	801d75e <cos+0x76>
 801d71a:	b1c8      	cbz	r0, 801d750 <cos+0x68>
 801d71c:	2301      	movs	r3, #1
 801d71e:	9300      	str	r3, [sp, #0]
 801d720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d728:	f000 ffea 	bl	801e700 <__kernel_sin>
 801d72c:	e7ea      	b.n	801d704 <cos+0x1c>
 801d72e:	2200      	movs	r2, #0
 801d730:	2300      	movs	r3, #0
 801d732:	f000 fa9d 	bl	801dc70 <__kernel_cos>
 801d736:	b007      	add	sp, #28
 801d738:	bd30      	pop	{r4, r5, pc}
 801d73a:	9000      	str	r0, [sp, #0]
 801d73c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d744:	f000 ffdc 	bl	801e700 <__kernel_sin>
 801d748:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801d74c:	b007      	add	sp, #28
 801d74e:	bd30      	pop	{r4, r5, pc}
 801d750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d758:	f000 fa8a 	bl	801dc70 <__kernel_cos>
 801d75c:	e7d2      	b.n	801d704 <cos+0x1c>
 801d75e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d766:	f000 fa83 	bl	801dc70 <__kernel_cos>
 801d76a:	e7ed      	b.n	801d748 <cos+0x60>
 801d76c:	3fe921fb 	.word	0x3fe921fb
 801d770:	7fefffff 	.word	0x7fefffff

0801d774 <sin>:
 801d774:	b530      	push	{r4, r5, lr}
 801d776:	4a22      	ldr	r2, [pc, #136]	; (801d800 <sin+0x8c>)
 801d778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d77c:	4293      	cmp	r3, r2
 801d77e:	b087      	sub	sp, #28
 801d780:	dd1c      	ble.n	801d7bc <sin+0x48>
 801d782:	4a20      	ldr	r2, [pc, #128]	; (801d804 <sin+0x90>)
 801d784:	4293      	cmp	r3, r2
 801d786:	dd05      	ble.n	801d794 <sin+0x20>
 801d788:	4602      	mov	r2, r0
 801d78a:	460b      	mov	r3, r1
 801d78c:	f7e3 f83c 	bl	8000808 <__aeabi_dsub>
 801d790:	b007      	add	sp, #28
 801d792:	bd30      	pop	{r4, r5, pc}
 801d794:	aa02      	add	r2, sp, #8
 801d796:	f000 f837 	bl	801d808 <__ieee754_rem_pio2>
 801d79a:	f000 0003 	and.w	r0, r0, #3
 801d79e:	2801      	cmp	r0, #1
 801d7a0:	d014      	beq.n	801d7cc <sin+0x58>
 801d7a2:	2802      	cmp	r0, #2
 801d7a4:	d022      	beq.n	801d7ec <sin+0x78>
 801d7a6:	b1c0      	cbz	r0, 801d7da <sin+0x66>
 801d7a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d7b0:	f000 fa5e 	bl	801dc70 <__kernel_cos>
 801d7b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801d7b8:	b007      	add	sp, #28
 801d7ba:	bd30      	pop	{r4, r5, pc}
 801d7bc:	2300      	movs	r3, #0
 801d7be:	9300      	str	r3, [sp, #0]
 801d7c0:	2200      	movs	r2, #0
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	f000 ff9c 	bl	801e700 <__kernel_sin>
 801d7c8:	b007      	add	sp, #28
 801d7ca:	bd30      	pop	{r4, r5, pc}
 801d7cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d7d4:	f000 fa4c 	bl	801dc70 <__kernel_cos>
 801d7d8:	e7da      	b.n	801d790 <sin+0x1c>
 801d7da:	2301      	movs	r3, #1
 801d7dc:	9300      	str	r3, [sp, #0]
 801d7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7e6:	f000 ff8b 	bl	801e700 <__kernel_sin>
 801d7ea:	e7d1      	b.n	801d790 <sin+0x1c>
 801d7ec:	2301      	movs	r3, #1
 801d7ee:	9300      	str	r3, [sp, #0]
 801d7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d7f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7f8:	f000 ff82 	bl	801e700 <__kernel_sin>
 801d7fc:	e7da      	b.n	801d7b4 <sin+0x40>
 801d7fe:	bf00      	nop
 801d800:	3fe921fb 	.word	0x3fe921fb
 801d804:	7fefffff 	.word	0x7fefffff

0801d808 <__ieee754_rem_pio2>:
 801d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d80c:	4bd8      	ldr	r3, [pc, #864]	; (801db70 <__ieee754_rem_pio2+0x368>)
 801d80e:	ed2d 8b04 	vpush	{d8-d9}
 801d812:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 801d816:	429d      	cmp	r5, r3
 801d818:	b089      	sub	sp, #36	; 0x24
 801d81a:	4606      	mov	r6, r0
 801d81c:	460f      	mov	r7, r1
 801d81e:	4614      	mov	r4, r2
 801d820:	f340 8088 	ble.w	801d934 <__ieee754_rem_pio2+0x12c>
 801d824:	4bd3      	ldr	r3, [pc, #844]	; (801db74 <__ieee754_rem_pio2+0x36c>)
 801d826:	429d      	cmp	r5, r3
 801d828:	468b      	mov	fp, r1
 801d82a:	dc29      	bgt.n	801d880 <__ieee754_rem_pio2+0x78>
 801d82c:	2900      	cmp	r1, #0
 801d82e:	a3c2      	add	r3, pc, #776	; (adr r3, 801db38 <__ieee754_rem_pio2+0x330>)
 801d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d834:	f340 81cd 	ble.w	801dbd2 <__ieee754_rem_pio2+0x3ca>
 801d838:	f7e2 ffe6 	bl	8000808 <__aeabi_dsub>
 801d83c:	4bce      	ldr	r3, [pc, #824]	; (801db78 <__ieee754_rem_pio2+0x370>)
 801d83e:	429d      	cmp	r5, r3
 801d840:	4606      	mov	r6, r0
 801d842:	460f      	mov	r7, r1
 801d844:	f000 808f 	beq.w	801d966 <__ieee754_rem_pio2+0x15e>
 801d848:	a3bd      	add	r3, pc, #756	; (adr r3, 801db40 <__ieee754_rem_pio2+0x338>)
 801d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d84e:	f7e2 ffdb 	bl	8000808 <__aeabi_dsub>
 801d852:	4602      	mov	r2, r0
 801d854:	460b      	mov	r3, r1
 801d856:	e9c4 2300 	strd	r2, r3, [r4]
 801d85a:	4630      	mov	r0, r6
 801d85c:	4639      	mov	r1, r7
 801d85e:	f7e2 ffd3 	bl	8000808 <__aeabi_dsub>
 801d862:	a3b7      	add	r3, pc, #732	; (adr r3, 801db40 <__ieee754_rem_pio2+0x338>)
 801d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d868:	f7e2 ffce 	bl	8000808 <__aeabi_dsub>
 801d86c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d870:	f04f 0a01 	mov.w	sl, #1
 801d874:	4650      	mov	r0, sl
 801d876:	b009      	add	sp, #36	; 0x24
 801d878:	ecbd 8b04 	vpop	{d8-d9}
 801d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d880:	4bbe      	ldr	r3, [pc, #760]	; (801db7c <__ieee754_rem_pio2+0x374>)
 801d882:	429d      	cmp	r5, r3
 801d884:	f340 8092 	ble.w	801d9ac <__ieee754_rem_pio2+0x1a4>
 801d888:	4bbd      	ldr	r3, [pc, #756]	; (801db80 <__ieee754_rem_pio2+0x378>)
 801d88a:	429d      	cmp	r5, r3
 801d88c:	dc60      	bgt.n	801d950 <__ieee754_rem_pio2+0x148>
 801d88e:	ea4f 5a25 	mov.w	sl, r5, asr #20
 801d892:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 801d896:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 801d89a:	460f      	mov	r7, r1
 801d89c:	f7e3 fc1c 	bl	80010d8 <__aeabi_d2iz>
 801d8a0:	f7e3 f900 	bl	8000aa4 <__aeabi_i2d>
 801d8a4:	4680      	mov	r8, r0
 801d8a6:	4689      	mov	r9, r1
 801d8a8:	4630      	mov	r0, r6
 801d8aa:	4639      	mov	r1, r7
 801d8ac:	4642      	mov	r2, r8
 801d8ae:	464b      	mov	r3, r9
 801d8b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801d8b4:	f7e2 ffa8 	bl	8000808 <__aeabi_dsub>
 801d8b8:	4bb2      	ldr	r3, [pc, #712]	; (801db84 <__ieee754_rem_pio2+0x37c>)
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	f7e3 f95c 	bl	8000b78 <__aeabi_dmul>
 801d8c0:	460f      	mov	r7, r1
 801d8c2:	4606      	mov	r6, r0
 801d8c4:	f7e3 fc08 	bl	80010d8 <__aeabi_d2iz>
 801d8c8:	4605      	mov	r5, r0
 801d8ca:	f7e3 f8eb 	bl	8000aa4 <__aeabi_i2d>
 801d8ce:	4602      	mov	r2, r0
 801d8d0:	460b      	mov	r3, r1
 801d8d2:	4630      	mov	r0, r6
 801d8d4:	4639      	mov	r1, r7
 801d8d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d8da:	f7e2 ff95 	bl	8000808 <__aeabi_dsub>
 801d8de:	4ba9      	ldr	r3, [pc, #676]	; (801db84 <__ieee754_rem_pio2+0x37c>)
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	f7e3 f949 	bl	8000b78 <__aeabi_dmul>
 801d8e6:	4602      	mov	r2, r0
 801d8e8:	460b      	mov	r3, r1
 801d8ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	f7e3 fba9 	bl	8001048 <__aeabi_dcmpeq>
 801d8f6:	2800      	cmp	r0, #0
 801d8f8:	f000 8169 	beq.w	801dbce <__ieee754_rem_pio2+0x3c6>
 801d8fc:	2d00      	cmp	r5, #0
 801d8fe:	bf0c      	ite	eq
 801d900:	2301      	moveq	r3, #1
 801d902:	2302      	movne	r3, #2
 801d904:	4aa0      	ldr	r2, [pc, #640]	; (801db88 <__ieee754_rem_pio2+0x380>)
 801d906:	9201      	str	r2, [sp, #4]
 801d908:	2102      	movs	r1, #2
 801d90a:	4652      	mov	r2, sl
 801d90c:	9100      	str	r1, [sp, #0]
 801d90e:	a802      	add	r0, sp, #8
 801d910:	4621      	mov	r1, r4
 801d912:	f000 fadd 	bl	801ded0 <__kernel_rem_pio2>
 801d916:	f1bb 0f00 	cmp.w	fp, #0
 801d91a:	4682      	mov	sl, r0
 801d91c:	daaa      	bge.n	801d874 <__ieee754_rem_pio2+0x6c>
 801d91e:	6862      	ldr	r2, [r4, #4]
 801d920:	68e3      	ldr	r3, [r4, #12]
 801d922:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801d926:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d92a:	f1c0 0a00 	rsb	sl, r0, #0
 801d92e:	6062      	str	r2, [r4, #4]
 801d930:	60e3      	str	r3, [r4, #12]
 801d932:	e79f      	b.n	801d874 <__ieee754_rem_pio2+0x6c>
 801d934:	f04f 0a00 	mov.w	sl, #0
 801d938:	2200      	movs	r2, #0
 801d93a:	2300      	movs	r3, #0
 801d93c:	4650      	mov	r0, sl
 801d93e:	e9c4 6700 	strd	r6, r7, [r4]
 801d942:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801d946:	b009      	add	sp, #36	; 0x24
 801d948:	ecbd 8b04 	vpop	{d8-d9}
 801d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d950:	4602      	mov	r2, r0
 801d952:	460b      	mov	r3, r1
 801d954:	f7e2 ff58 	bl	8000808 <__aeabi_dsub>
 801d958:	f04f 0a00 	mov.w	sl, #0
 801d95c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d960:	e9c4 0100 	strd	r0, r1, [r4]
 801d964:	e786      	b.n	801d874 <__ieee754_rem_pio2+0x6c>
 801d966:	a378      	add	r3, pc, #480	; (adr r3, 801db48 <__ieee754_rem_pio2+0x340>)
 801d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d96c:	f7e2 ff4c 	bl	8000808 <__aeabi_dsub>
 801d970:	a377      	add	r3, pc, #476	; (adr r3, 801db50 <__ieee754_rem_pio2+0x348>)
 801d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d976:	4606      	mov	r6, r0
 801d978:	460f      	mov	r7, r1
 801d97a:	f7e2 ff45 	bl	8000808 <__aeabi_dsub>
 801d97e:	4602      	mov	r2, r0
 801d980:	460b      	mov	r3, r1
 801d982:	e9c4 2300 	strd	r2, r3, [r4]
 801d986:	4630      	mov	r0, r6
 801d988:	4639      	mov	r1, r7
 801d98a:	f7e2 ff3d 	bl	8000808 <__aeabi_dsub>
 801d98e:	a370      	add	r3, pc, #448	; (adr r3, 801db50 <__ieee754_rem_pio2+0x348>)
 801d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d994:	f7e2 ff38 	bl	8000808 <__aeabi_dsub>
 801d998:	f04f 0a01 	mov.w	sl, #1
 801d99c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d9a0:	4650      	mov	r0, sl
 801d9a2:	b009      	add	sp, #36	; 0x24
 801d9a4:	ecbd 8b04 	vpop	{d8-d9}
 801d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ac:	f000 ff62 	bl	801e874 <fabs>
 801d9b0:	a369      	add	r3, pc, #420	; (adr r3, 801db58 <__ieee754_rem_pio2+0x350>)
 801d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9b6:	4606      	mov	r6, r0
 801d9b8:	460f      	mov	r7, r1
 801d9ba:	f7e3 f8dd 	bl	8000b78 <__aeabi_dmul>
 801d9be:	4b73      	ldr	r3, [pc, #460]	; (801db8c <__ieee754_rem_pio2+0x384>)
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	f7e2 ff23 	bl	800080c <__adddf3>
 801d9c6:	f7e3 fb87 	bl	80010d8 <__aeabi_d2iz>
 801d9ca:	4682      	mov	sl, r0
 801d9cc:	f7e3 f86a 	bl	8000aa4 <__aeabi_i2d>
 801d9d0:	a359      	add	r3, pc, #356	; (adr r3, 801db38 <__ieee754_rem_pio2+0x330>)
 801d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9d6:	4680      	mov	r8, r0
 801d9d8:	4689      	mov	r9, r1
 801d9da:	f7e3 f8cd 	bl	8000b78 <__aeabi_dmul>
 801d9de:	4602      	mov	r2, r0
 801d9e0:	460b      	mov	r3, r1
 801d9e2:	4630      	mov	r0, r6
 801d9e4:	4639      	mov	r1, r7
 801d9e6:	f7e2 ff0f 	bl	8000808 <__aeabi_dsub>
 801d9ea:	a355      	add	r3, pc, #340	; (adr r3, 801db40 <__ieee754_rem_pio2+0x338>)
 801d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f0:	4606      	mov	r6, r0
 801d9f2:	460f      	mov	r7, r1
 801d9f4:	4640      	mov	r0, r8
 801d9f6:	4649      	mov	r1, r9
 801d9f8:	f7e3 f8be 	bl	8000b78 <__aeabi_dmul>
 801d9fc:	f1ba 0f1f 	cmp.w	sl, #31
 801da00:	ec49 8b19 	vmov	d9, r8, r9
 801da04:	ec47 6b18 	vmov	d8, r6, r7
 801da08:	4680      	mov	r8, r0
 801da0a:	4689      	mov	r9, r1
 801da0c:	dc0b      	bgt.n	801da26 <__ieee754_rem_pio2+0x21e>
 801da0e:	4b60      	ldr	r3, [pc, #384]	; (801db90 <__ieee754_rem_pio2+0x388>)
 801da10:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801da14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801da18:	42ab      	cmp	r3, r5
 801da1a:	d004      	beq.n	801da26 <__ieee754_rem_pio2+0x21e>
 801da1c:	4602      	mov	r2, r0
 801da1e:	460b      	mov	r3, r1
 801da20:	4630      	mov	r0, r6
 801da22:	4639      	mov	r1, r7
 801da24:	e07f      	b.n	801db26 <__ieee754_rem_pio2+0x31e>
 801da26:	4642      	mov	r2, r8
 801da28:	464b      	mov	r3, r9
 801da2a:	ec51 0b18 	vmov	r0, r1, d8
 801da2e:	f7e2 feeb 	bl	8000808 <__aeabi_dsub>
 801da32:	460a      	mov	r2, r1
 801da34:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801da38:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 801da3c:	2b10      	cmp	r3, #16
 801da3e:	4601      	mov	r1, r0
 801da40:	4606      	mov	r6, r0
 801da42:	4617      	mov	r7, r2
 801da44:	ea4f 5525 	mov.w	r5, r5, asr #20
 801da48:	f340 80a4 	ble.w	801db94 <__ieee754_rem_pio2+0x38c>
 801da4c:	a33e      	add	r3, pc, #248	; (adr r3, 801db48 <__ieee754_rem_pio2+0x340>)
 801da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da52:	ec51 0b19 	vmov	r0, r1, d9
 801da56:	f7e3 f88f 	bl	8000b78 <__aeabi_dmul>
 801da5a:	ec59 8b18 	vmov	r8, r9, d8
 801da5e:	4606      	mov	r6, r0
 801da60:	460f      	mov	r7, r1
 801da62:	4632      	mov	r2, r6
 801da64:	463b      	mov	r3, r7
 801da66:	ee18 0a10 	vmov	r0, s16
 801da6a:	4649      	mov	r1, r9
 801da6c:	f7e2 fecc 	bl	8000808 <__aeabi_dsub>
 801da70:	ec41 0b18 	vmov	d8, r0, r1
 801da74:	4640      	mov	r0, r8
 801da76:	ec53 2b18 	vmov	r2, r3, d8
 801da7a:	4649      	mov	r1, r9
 801da7c:	f7e2 fec4 	bl	8000808 <__aeabi_dsub>
 801da80:	4632      	mov	r2, r6
 801da82:	463b      	mov	r3, r7
 801da84:	f7e2 fec0 	bl	8000808 <__aeabi_dsub>
 801da88:	a331      	add	r3, pc, #196	; (adr r3, 801db50 <__ieee754_rem_pio2+0x348>)
 801da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da8e:	4606      	mov	r6, r0
 801da90:	460f      	mov	r7, r1
 801da92:	ec51 0b19 	vmov	r0, r1, d9
 801da96:	f7e3 f86f 	bl	8000b78 <__aeabi_dmul>
 801da9a:	4632      	mov	r2, r6
 801da9c:	463b      	mov	r3, r7
 801da9e:	f7e2 feb3 	bl	8000808 <__aeabi_dsub>
 801daa2:	4680      	mov	r8, r0
 801daa4:	4689      	mov	r9, r1
 801daa6:	4642      	mov	r2, r8
 801daa8:	464b      	mov	r3, r9
 801daaa:	ec51 0b18 	vmov	r0, r1, d8
 801daae:	f7e2 feab 	bl	8000808 <__aeabi_dsub>
 801dab2:	460a      	mov	r2, r1
 801dab4:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801dab8:	1aed      	subs	r5, r5, r3
 801daba:	2d31      	cmp	r5, #49	; 0x31
 801dabc:	4601      	mov	r1, r0
 801dabe:	4606      	mov	r6, r0
 801dac0:	4617      	mov	r7, r2
 801dac2:	dd67      	ble.n	801db94 <__ieee754_rem_pio2+0x38c>
 801dac4:	a326      	add	r3, pc, #152	; (adr r3, 801db60 <__ieee754_rem_pio2+0x358>)
 801dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daca:	ec51 0b19 	vmov	r0, r1, d9
 801dace:	f7e3 f853 	bl	8000b78 <__aeabi_dmul>
 801dad2:	ec56 5b18 	vmov	r5, r6, d8
 801dad6:	4680      	mov	r8, r0
 801dad8:	4689      	mov	r9, r1
 801dada:	4642      	mov	r2, r8
 801dadc:	464b      	mov	r3, r9
 801dade:	ee18 0a10 	vmov	r0, s16
 801dae2:	4631      	mov	r1, r6
 801dae4:	f7e2 fe90 	bl	8000808 <__aeabi_dsub>
 801dae8:	ec41 0b18 	vmov	d8, r0, r1
 801daec:	4631      	mov	r1, r6
 801daee:	ec53 2b18 	vmov	r2, r3, d8
 801daf2:	4628      	mov	r0, r5
 801daf4:	f7e2 fe88 	bl	8000808 <__aeabi_dsub>
 801daf8:	4642      	mov	r2, r8
 801dafa:	464b      	mov	r3, r9
 801dafc:	f7e2 fe84 	bl	8000808 <__aeabi_dsub>
 801db00:	a319      	add	r3, pc, #100	; (adr r3, 801db68 <__ieee754_rem_pio2+0x360>)
 801db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db06:	4606      	mov	r6, r0
 801db08:	460f      	mov	r7, r1
 801db0a:	ec51 0b19 	vmov	r0, r1, d9
 801db0e:	f7e3 f833 	bl	8000b78 <__aeabi_dmul>
 801db12:	4632      	mov	r2, r6
 801db14:	463b      	mov	r3, r7
 801db16:	f7e2 fe77 	bl	8000808 <__aeabi_dsub>
 801db1a:	4680      	mov	r8, r0
 801db1c:	4689      	mov	r9, r1
 801db1e:	ec51 0b18 	vmov	r0, r1, d8
 801db22:	4642      	mov	r2, r8
 801db24:	464b      	mov	r3, r9
 801db26:	f7e2 fe6f 	bl	8000808 <__aeabi_dsub>
 801db2a:	e9c4 0100 	strd	r0, r1, [r4]
 801db2e:	4606      	mov	r6, r0
 801db30:	460f      	mov	r7, r1
 801db32:	e031      	b.n	801db98 <__ieee754_rem_pio2+0x390>
 801db34:	f3af 8000 	nop.w
 801db38:	54400000 	.word	0x54400000
 801db3c:	3ff921fb 	.word	0x3ff921fb
 801db40:	1a626331 	.word	0x1a626331
 801db44:	3dd0b461 	.word	0x3dd0b461
 801db48:	1a600000 	.word	0x1a600000
 801db4c:	3dd0b461 	.word	0x3dd0b461
 801db50:	2e037073 	.word	0x2e037073
 801db54:	3ba3198a 	.word	0x3ba3198a
 801db58:	6dc9c883 	.word	0x6dc9c883
 801db5c:	3fe45f30 	.word	0x3fe45f30
 801db60:	2e000000 	.word	0x2e000000
 801db64:	3ba3198a 	.word	0x3ba3198a
 801db68:	252049c1 	.word	0x252049c1
 801db6c:	397b839a 	.word	0x397b839a
 801db70:	3fe921fb 	.word	0x3fe921fb
 801db74:	4002d97b 	.word	0x4002d97b
 801db78:	3ff921fb 	.word	0x3ff921fb
 801db7c:	413921fb 	.word	0x413921fb
 801db80:	7fefffff 	.word	0x7fefffff
 801db84:	41700000 	.word	0x41700000
 801db88:	080208b0 	.word	0x080208b0
 801db8c:	3fe00000 	.word	0x3fe00000
 801db90:	08020830 	.word	0x08020830
 801db94:	e9c4 1200 	strd	r1, r2, [r4]
 801db98:	4632      	mov	r2, r6
 801db9a:	463b      	mov	r3, r7
 801db9c:	ec51 0b18 	vmov	r0, r1, d8
 801dba0:	f7e2 fe32 	bl	8000808 <__aeabi_dsub>
 801dba4:	4642      	mov	r2, r8
 801dba6:	464b      	mov	r3, r9
 801dba8:	f7e2 fe2e 	bl	8000808 <__aeabi_dsub>
 801dbac:	f1bb 0f00 	cmp.w	fp, #0
 801dbb0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801dbb4:	f6bf ae5e 	bge.w	801d874 <__ieee754_rem_pio2+0x6c>
 801dbb8:	f107 4500 	add.w	r5, r7, #2147483648	; 0x80000000
 801dbbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dbc0:	e9c4 6500 	strd	r6, r5, [r4]
 801dbc4:	e9c4 0302 	strd	r0, r3, [r4, #8]
 801dbc8:	f1ca 0a00 	rsb	sl, sl, #0
 801dbcc:	e652      	b.n	801d874 <__ieee754_rem_pio2+0x6c>
 801dbce:	2303      	movs	r3, #3
 801dbd0:	e698      	b.n	801d904 <__ieee754_rem_pio2+0xfc>
 801dbd2:	f7e2 fe1b 	bl	800080c <__adddf3>
 801dbd6:	4b24      	ldr	r3, [pc, #144]	; (801dc68 <__ieee754_rem_pio2+0x460>)
 801dbd8:	429d      	cmp	r5, r3
 801dbda:	4606      	mov	r6, r0
 801dbdc:	460f      	mov	r7, r1
 801dbde:	d016      	beq.n	801dc0e <__ieee754_rem_pio2+0x406>
 801dbe0:	a31b      	add	r3, pc, #108	; (adr r3, 801dc50 <__ieee754_rem_pio2+0x448>)
 801dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe6:	f7e2 fe11 	bl	800080c <__adddf3>
 801dbea:	4602      	mov	r2, r0
 801dbec:	460b      	mov	r3, r1
 801dbee:	e9c4 2300 	strd	r2, r3, [r4]
 801dbf2:	4630      	mov	r0, r6
 801dbf4:	4639      	mov	r1, r7
 801dbf6:	f7e2 fe07 	bl	8000808 <__aeabi_dsub>
 801dbfa:	a315      	add	r3, pc, #84	; (adr r3, 801dc50 <__ieee754_rem_pio2+0x448>)
 801dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc00:	f7e2 fe04 	bl	800080c <__adddf3>
 801dc04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801dc08:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801dc0c:	e632      	b.n	801d874 <__ieee754_rem_pio2+0x6c>
 801dc0e:	a312      	add	r3, pc, #72	; (adr r3, 801dc58 <__ieee754_rem_pio2+0x450>)
 801dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc14:	f7e2 fdfa 	bl	800080c <__adddf3>
 801dc18:	a311      	add	r3, pc, #68	; (adr r3, 801dc60 <__ieee754_rem_pio2+0x458>)
 801dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc1e:	4606      	mov	r6, r0
 801dc20:	460f      	mov	r7, r1
 801dc22:	f7e2 fdf3 	bl	800080c <__adddf3>
 801dc26:	4602      	mov	r2, r0
 801dc28:	460b      	mov	r3, r1
 801dc2a:	e9c4 2300 	strd	r2, r3, [r4]
 801dc2e:	4630      	mov	r0, r6
 801dc30:	4639      	mov	r1, r7
 801dc32:	f7e2 fde9 	bl	8000808 <__aeabi_dsub>
 801dc36:	a30a      	add	r3, pc, #40	; (adr r3, 801dc60 <__ieee754_rem_pio2+0x458>)
 801dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc3c:	f7e2 fde6 	bl	800080c <__adddf3>
 801dc40:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801dc44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801dc48:	e614      	b.n	801d874 <__ieee754_rem_pio2+0x6c>
 801dc4a:	bf00      	nop
 801dc4c:	f3af 8000 	nop.w
 801dc50:	1a626331 	.word	0x1a626331
 801dc54:	3dd0b461 	.word	0x3dd0b461
 801dc58:	1a600000 	.word	0x1a600000
 801dc5c:	3dd0b461 	.word	0x3dd0b461
 801dc60:	2e037073 	.word	0x2e037073
 801dc64:	3ba3198a 	.word	0x3ba3198a
 801dc68:	3ff921fb 	.word	0x3ff921fb
 801dc6c:	00000000 	.word	0x00000000

0801dc70 <__kernel_cos>:
 801dc70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc74:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 801dc78:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 801dc7c:	ed2d 8b04 	vpush	{d8-d9}
 801dc80:	4606      	mov	r6, r0
 801dc82:	460f      	mov	r7, r1
 801dc84:	4692      	mov	sl, r2
 801dc86:	469b      	mov	fp, r3
 801dc88:	da6c      	bge.n	801dd64 <__kernel_cos+0xf4>
 801dc8a:	f7e3 fa25 	bl	80010d8 <__aeabi_d2iz>
 801dc8e:	2800      	cmp	r0, #0
 801dc90:	f000 80ee 	beq.w	801de70 <__kernel_cos+0x200>
 801dc94:	4632      	mov	r2, r6
 801dc96:	463b      	mov	r3, r7
 801dc98:	4630      	mov	r0, r6
 801dc9a:	4639      	mov	r1, r7
 801dc9c:	f7e2 ff6c 	bl	8000b78 <__aeabi_dmul>
 801dca0:	a377      	add	r3, pc, #476	; (adr r3, 801de80 <__kernel_cos+0x210>)
 801dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dca6:	4604      	mov	r4, r0
 801dca8:	460d      	mov	r5, r1
 801dcaa:	f7e2 ff65 	bl	8000b78 <__aeabi_dmul>
 801dcae:	a376      	add	r3, pc, #472	; (adr r3, 801de88 <__kernel_cos+0x218>)
 801dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcb4:	f7e2 fdaa 	bl	800080c <__adddf3>
 801dcb8:	4622      	mov	r2, r4
 801dcba:	462b      	mov	r3, r5
 801dcbc:	f7e2 ff5c 	bl	8000b78 <__aeabi_dmul>
 801dcc0:	a373      	add	r3, pc, #460	; (adr r3, 801de90 <__kernel_cos+0x220>)
 801dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcc6:	f7e2 fd9f 	bl	8000808 <__aeabi_dsub>
 801dcca:	4622      	mov	r2, r4
 801dccc:	462b      	mov	r3, r5
 801dcce:	f7e2 ff53 	bl	8000b78 <__aeabi_dmul>
 801dcd2:	a371      	add	r3, pc, #452	; (adr r3, 801de98 <__kernel_cos+0x228>)
 801dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcd8:	f7e2 fd98 	bl	800080c <__adddf3>
 801dcdc:	4622      	mov	r2, r4
 801dcde:	462b      	mov	r3, r5
 801dce0:	f7e2 ff4a 	bl	8000b78 <__aeabi_dmul>
 801dce4:	a36e      	add	r3, pc, #440	; (adr r3, 801dea0 <__kernel_cos+0x230>)
 801dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcea:	f7e2 fd8d 	bl	8000808 <__aeabi_dsub>
 801dcee:	4622      	mov	r2, r4
 801dcf0:	462b      	mov	r3, r5
 801dcf2:	f7e2 ff41 	bl	8000b78 <__aeabi_dmul>
 801dcf6:	a36c      	add	r3, pc, #432	; (adr r3, 801dea8 <__kernel_cos+0x238>)
 801dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcfc:	f7e2 fd86 	bl	800080c <__adddf3>
 801dd00:	4622      	mov	r2, r4
 801dd02:	462b      	mov	r3, r5
 801dd04:	f7e2 ff38 	bl	8000b78 <__aeabi_dmul>
 801dd08:	ec41 0b18 	vmov	d8, r0, r1
 801dd0c:	4b6a      	ldr	r3, [pc, #424]	; (801deb8 <__kernel_cos+0x248>)
 801dd0e:	2200      	movs	r2, #0
 801dd10:	4620      	mov	r0, r4
 801dd12:	4629      	mov	r1, r5
 801dd14:	f7e2 ff30 	bl	8000b78 <__aeabi_dmul>
 801dd18:	ec53 2b18 	vmov	r2, r3, d8
 801dd1c:	4680      	mov	r8, r0
 801dd1e:	4689      	mov	r9, r1
 801dd20:	4620      	mov	r0, r4
 801dd22:	4629      	mov	r1, r5
 801dd24:	f7e2 ff28 	bl	8000b78 <__aeabi_dmul>
 801dd28:	4652      	mov	r2, sl
 801dd2a:	465b      	mov	r3, fp
 801dd2c:	4604      	mov	r4, r0
 801dd2e:	460d      	mov	r5, r1
 801dd30:	4630      	mov	r0, r6
 801dd32:	4639      	mov	r1, r7
 801dd34:	f7e2 ff20 	bl	8000b78 <__aeabi_dmul>
 801dd38:	4602      	mov	r2, r0
 801dd3a:	460b      	mov	r3, r1
 801dd3c:	4620      	mov	r0, r4
 801dd3e:	4629      	mov	r1, r5
 801dd40:	f7e2 fd62 	bl	8000808 <__aeabi_dsub>
 801dd44:	4602      	mov	r2, r0
 801dd46:	460b      	mov	r3, r1
 801dd48:	4640      	mov	r0, r8
 801dd4a:	4649      	mov	r1, r9
 801dd4c:	f7e2 fd5c 	bl	8000808 <__aeabi_dsub>
 801dd50:	4602      	mov	r2, r0
 801dd52:	460b      	mov	r3, r1
 801dd54:	2000      	movs	r0, #0
 801dd56:	4959      	ldr	r1, [pc, #356]	; (801debc <__kernel_cos+0x24c>)
 801dd58:	f7e2 fd56 	bl	8000808 <__aeabi_dsub>
 801dd5c:	ecbd 8b04 	vpop	{d8-d9}
 801dd60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd64:	4602      	mov	r2, r0
 801dd66:	460b      	mov	r3, r1
 801dd68:	f7e2 ff06 	bl	8000b78 <__aeabi_dmul>
 801dd6c:	a344      	add	r3, pc, #272	; (adr r3, 801de80 <__kernel_cos+0x210>)
 801dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd72:	4604      	mov	r4, r0
 801dd74:	460d      	mov	r5, r1
 801dd76:	f7e2 feff 	bl	8000b78 <__aeabi_dmul>
 801dd7a:	a343      	add	r3, pc, #268	; (adr r3, 801de88 <__kernel_cos+0x218>)
 801dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd80:	f7e2 fd44 	bl	800080c <__adddf3>
 801dd84:	4622      	mov	r2, r4
 801dd86:	462b      	mov	r3, r5
 801dd88:	f7e2 fef6 	bl	8000b78 <__aeabi_dmul>
 801dd8c:	a340      	add	r3, pc, #256	; (adr r3, 801de90 <__kernel_cos+0x220>)
 801dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd92:	f7e2 fd39 	bl	8000808 <__aeabi_dsub>
 801dd96:	4622      	mov	r2, r4
 801dd98:	462b      	mov	r3, r5
 801dd9a:	f7e2 feed 	bl	8000b78 <__aeabi_dmul>
 801dd9e:	a33e      	add	r3, pc, #248	; (adr r3, 801de98 <__kernel_cos+0x228>)
 801dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dda4:	f7e2 fd32 	bl	800080c <__adddf3>
 801dda8:	4622      	mov	r2, r4
 801ddaa:	462b      	mov	r3, r5
 801ddac:	f7e2 fee4 	bl	8000b78 <__aeabi_dmul>
 801ddb0:	a33b      	add	r3, pc, #236	; (adr r3, 801dea0 <__kernel_cos+0x230>)
 801ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddb6:	f7e2 fd27 	bl	8000808 <__aeabi_dsub>
 801ddba:	4622      	mov	r2, r4
 801ddbc:	462b      	mov	r3, r5
 801ddbe:	f7e2 fedb 	bl	8000b78 <__aeabi_dmul>
 801ddc2:	a339      	add	r3, pc, #228	; (adr r3, 801dea8 <__kernel_cos+0x238>)
 801ddc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddc8:	f7e2 fd20 	bl	800080c <__adddf3>
 801ddcc:	462b      	mov	r3, r5
 801ddce:	4622      	mov	r2, r4
 801ddd0:	f7e2 fed2 	bl	8000b78 <__aeabi_dmul>
 801ddd4:	4b3a      	ldr	r3, [pc, #232]	; (801dec0 <__kernel_cos+0x250>)
 801ddd6:	4599      	cmp	r9, r3
 801ddd8:	ec41 0b18 	vmov	d8, r0, r1
 801dddc:	dd96      	ble.n	801dd0c <__kernel_cos+0x9c>
 801ddde:	4b39      	ldr	r3, [pc, #228]	; (801dec4 <__kernel_cos+0x254>)
 801dde0:	4599      	cmp	r9, r3
 801dde2:	dc3a      	bgt.n	801de5a <__kernel_cos+0x1ea>
 801dde4:	2200      	movs	r2, #0
 801dde6:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 801ddea:	4934      	ldr	r1, [pc, #208]	; (801debc <__kernel_cos+0x24c>)
 801ddec:	2000      	movs	r0, #0
 801ddee:	4690      	mov	r8, r2
 801ddf0:	4699      	mov	r9, r3
 801ddf2:	f7e2 fd09 	bl	8000808 <__aeabi_dsub>
 801ddf6:	ec41 0b19 	vmov	d9, r0, r1
 801ddfa:	4b2f      	ldr	r3, [pc, #188]	; (801deb8 <__kernel_cos+0x248>)
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	4620      	mov	r0, r4
 801de00:	4629      	mov	r1, r5
 801de02:	f7e2 feb9 	bl	8000b78 <__aeabi_dmul>
 801de06:	4642      	mov	r2, r8
 801de08:	464b      	mov	r3, r9
 801de0a:	f7e2 fcfd 	bl	8000808 <__aeabi_dsub>
 801de0e:	ec53 2b18 	vmov	r2, r3, d8
 801de12:	4680      	mov	r8, r0
 801de14:	4689      	mov	r9, r1
 801de16:	4620      	mov	r0, r4
 801de18:	4629      	mov	r1, r5
 801de1a:	f7e2 fead 	bl	8000b78 <__aeabi_dmul>
 801de1e:	4652      	mov	r2, sl
 801de20:	465b      	mov	r3, fp
 801de22:	4604      	mov	r4, r0
 801de24:	460d      	mov	r5, r1
 801de26:	4630      	mov	r0, r6
 801de28:	4639      	mov	r1, r7
 801de2a:	f7e2 fea5 	bl	8000b78 <__aeabi_dmul>
 801de2e:	4602      	mov	r2, r0
 801de30:	460b      	mov	r3, r1
 801de32:	4620      	mov	r0, r4
 801de34:	4629      	mov	r1, r5
 801de36:	f7e2 fce7 	bl	8000808 <__aeabi_dsub>
 801de3a:	4602      	mov	r2, r0
 801de3c:	460b      	mov	r3, r1
 801de3e:	4640      	mov	r0, r8
 801de40:	4649      	mov	r1, r9
 801de42:	f7e2 fce1 	bl	8000808 <__aeabi_dsub>
 801de46:	4602      	mov	r2, r0
 801de48:	460b      	mov	r3, r1
 801de4a:	ec51 0b19 	vmov	r0, r1, d9
 801de4e:	f7e2 fcdb 	bl	8000808 <__aeabi_dsub>
 801de52:	ecbd 8b04 	vpop	{d8-d9}
 801de56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de5a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801deb0 <__kernel_cos+0x240>
 801de5e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 801dec8 <__kernel_cos+0x258>
 801de62:	eeb0 9a47 	vmov.f32	s18, s14
 801de66:	eef0 9a67 	vmov.f32	s19, s15
 801de6a:	f04f 0800 	mov.w	r8, #0
 801de6e:	e7c4      	b.n	801ddfa <__kernel_cos+0x18a>
 801de70:	ecbd 8b04 	vpop	{d8-d9}
 801de74:	4911      	ldr	r1, [pc, #68]	; (801debc <__kernel_cos+0x24c>)
 801de76:	2000      	movs	r0, #0
 801de78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de7c:	f3af 8000 	nop.w
 801de80:	be8838d4 	.word	0xbe8838d4
 801de84:	bda8fae9 	.word	0xbda8fae9
 801de88:	bdb4b1c4 	.word	0xbdb4b1c4
 801de8c:	3e21ee9e 	.word	0x3e21ee9e
 801de90:	809c52ad 	.word	0x809c52ad
 801de94:	3e927e4f 	.word	0x3e927e4f
 801de98:	19cb1590 	.word	0x19cb1590
 801de9c:	3efa01a0 	.word	0x3efa01a0
 801dea0:	16c15177 	.word	0x16c15177
 801dea4:	3f56c16c 	.word	0x3f56c16c
 801dea8:	5555554c 	.word	0x5555554c
 801deac:	3fa55555 	.word	0x3fa55555
 801deb0:	00000000 	.word	0x00000000
 801deb4:	3fe70000 	.word	0x3fe70000
 801deb8:	3fe00000 	.word	0x3fe00000
 801debc:	3ff00000 	.word	0x3ff00000
 801dec0:	3fd33332 	.word	0x3fd33332
 801dec4:	3fe90000 	.word	0x3fe90000
 801dec8:	3fd20000 	.word	0x3fd20000
 801decc:	00000000 	.word	0x00000000

0801ded0 <__kernel_rem_pio2>:
 801ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ded4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801ded8:	4cb8      	ldr	r4, [pc, #736]	; (801e1bc <__kernel_rem_pio2+0x2ec>)
 801deda:	9da2      	ldr	r5, [sp, #648]	; 0x288
 801dedc:	9308      	str	r3, [sp, #32]
 801dede:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801dee2:	9405      	str	r4, [sp, #20]
 801dee4:	3b01      	subs	r3, #1
 801dee6:	f112 0f14 	cmn.w	r2, #20
 801deea:	9004      	str	r0, [sp, #16]
 801deec:	910b      	str	r1, [sp, #44]	; 0x2c
 801deee:	9303      	str	r3, [sp, #12]
 801def0:	f2c0 8320 	blt.w	801e534 <__kernel_rem_pio2+0x664>
 801def4:	49b2      	ldr	r1, [pc, #712]	; (801e1c0 <__kernel_rem_pio2+0x2f0>)
 801def6:	1ed3      	subs	r3, r2, #3
 801def8:	fb81 0103 	smull	r0, r1, r1, r3
 801defc:	17db      	asrs	r3, r3, #31
 801defe:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 801df02:	9307      	str	r3, [sp, #28]
 801df04:	3301      	adds	r3, #1
 801df06:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 801df0a:	00db      	lsls	r3, r3, #3
 801df0c:	18d3      	adds	r3, r2, r3
 801df0e:	9306      	str	r3, [sp, #24]
 801df10:	9a07      	ldr	r2, [sp, #28]
 801df12:	9b03      	ldr	r3, [sp, #12]
 801df14:	1ad4      	subs	r4, r2, r3
 801df16:	9a05      	ldr	r2, [sp, #20]
 801df18:	18d6      	adds	r6, r2, r3
 801df1a:	d41a      	bmi.n	801df52 <__kernel_rem_pio2+0x82>
 801df1c:	3601      	adds	r6, #1
 801df1e:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 801df20:	f04f 0800 	mov.w	r8, #0
 801df24:	f04f 0900 	mov.w	r9, #0
 801df28:	4426      	add	r6, r4
 801df2a:	ad20      	add	r5, sp, #128	; 0x80
 801df2c:	e008      	b.n	801df40 <__kernel_rem_pio2+0x70>
 801df2e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801df32:	f7e2 fdb7 	bl	8000aa4 <__aeabi_i2d>
 801df36:	3401      	adds	r4, #1
 801df38:	42b4      	cmp	r4, r6
 801df3a:	e8e5 0102 	strd	r0, r1, [r5], #8
 801df3e:	d008      	beq.n	801df52 <__kernel_rem_pio2+0x82>
 801df40:	2c00      	cmp	r4, #0
 801df42:	daf4      	bge.n	801df2e <__kernel_rem_pio2+0x5e>
 801df44:	3401      	adds	r4, #1
 801df46:	4640      	mov	r0, r8
 801df48:	4649      	mov	r1, r9
 801df4a:	42b4      	cmp	r4, r6
 801df4c:	e8e5 0102 	strd	r0, r1, [r5], #8
 801df50:	d1f6      	bne.n	801df40 <__kernel_rem_pio2+0x70>
 801df52:	9b05      	ldr	r3, [sp, #20]
 801df54:	2b00      	cmp	r3, #0
 801df56:	f2c0 83b8 	blt.w	801e6ca <__kernel_rem_pio2+0x7fa>
 801df5a:	9b08      	ldr	r3, [sp, #32]
 801df5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801df60:	00da      	lsls	r2, r3, #3
 801df62:	9202      	str	r2, [sp, #8]
 801df64:	9a05      	ldr	r2, [sp, #20]
 801df66:	441a      	add	r2, r3
 801df68:	9201      	str	r2, [sp, #4]
 801df6a:	9a04      	ldr	r2, [sp, #16]
 801df6c:	a920      	add	r1, sp, #128	; 0x80
 801df6e:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 801df72:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801df76:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 801df7a:	9b03      	ldr	r3, [sp, #12]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	f04f 0400 	mov.w	r4, #0
 801df82:	f04f 0500 	mov.w	r5, #0
 801df86:	db11      	blt.n	801dfac <__kernel_rem_pio2+0xdc>
 801df88:	9e04      	ldr	r6, [sp, #16]
 801df8a:	4657      	mov	r7, sl
 801df8c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 801df90:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801df94:	f7e2 fdf0 	bl	8000b78 <__aeabi_dmul>
 801df98:	4602      	mov	r2, r0
 801df9a:	460b      	mov	r3, r1
 801df9c:	4620      	mov	r0, r4
 801df9e:	4629      	mov	r1, r5
 801dfa0:	f7e2 fc34 	bl	800080c <__adddf3>
 801dfa4:	4546      	cmp	r6, r8
 801dfa6:	4604      	mov	r4, r0
 801dfa8:	460d      	mov	r5, r1
 801dfaa:	d1ef      	bne.n	801df8c <__kernel_rem_pio2+0xbc>
 801dfac:	9b01      	ldr	r3, [sp, #4]
 801dfae:	f109 0901 	add.w	r9, r9, #1
 801dfb2:	4599      	cmp	r9, r3
 801dfb4:	e8eb 4502 	strd	r4, r5, [fp], #8
 801dfb8:	f10a 0a08 	add.w	sl, sl, #8
 801dfbc:	d1dd      	bne.n	801df7a <__kernel_rem_pio2+0xaa>
 801dfbe:	9a05      	ldr	r2, [sp, #20]
 801dfc0:	9804      	ldr	r0, [sp, #16]
 801dfc2:	a90c      	add	r1, sp, #48	; 0x30
 801dfc4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 801dfc8:	9902      	ldr	r1, [sp, #8]
 801dfca:	4401      	add	r1, r0
 801dfcc:	3b08      	subs	r3, #8
 801dfce:	468b      	mov	fp, r1
 801dfd0:	a90b      	add	r1, sp, #44	; 0x2c
 801dfd2:	9309      	str	r3, [sp, #36]	; 0x24
 801dfd4:	4613      	mov	r3, r2
 801dfd6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801dfda:	920a      	str	r2, [sp, #40]	; 0x28
 801dfdc:	9301      	str	r3, [sp, #4]
 801dfde:	9a01      	ldr	r2, [sp, #4]
 801dfe0:	a998      	add	r1, sp, #608	; 0x260
 801dfe2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 801dfe6:	2a00      	cmp	r2, #0
 801dfe8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 801dfec:	dd2a      	ble.n	801e044 <__kernel_rem_pio2+0x174>
 801dfee:	f50d 79e0 	add.w	r9, sp, #448	; 0x1c0
 801dff2:	eb09 08c2 	add.w	r8, r9, r2, lsl #3
 801dff6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801dffa:	4b72      	ldr	r3, [pc, #456]	; (801e1c4 <__kernel_rem_pio2+0x2f4>)
 801dffc:	2200      	movs	r2, #0
 801dffe:	4620      	mov	r0, r4
 801e000:	4629      	mov	r1, r5
 801e002:	f7e2 fdb9 	bl	8000b78 <__aeabi_dmul>
 801e006:	f7e3 f867 	bl	80010d8 <__aeabi_d2iz>
 801e00a:	f7e2 fd4b 	bl	8000aa4 <__aeabi_i2d>
 801e00e:	4b6e      	ldr	r3, [pc, #440]	; (801e1c8 <__kernel_rem_pio2+0x2f8>)
 801e010:	2200      	movs	r2, #0
 801e012:	4606      	mov	r6, r0
 801e014:	460f      	mov	r7, r1
 801e016:	f7e2 fdaf 	bl	8000b78 <__aeabi_dmul>
 801e01a:	4602      	mov	r2, r0
 801e01c:	460b      	mov	r3, r1
 801e01e:	4620      	mov	r0, r4
 801e020:	4629      	mov	r1, r5
 801e022:	f7e2 fbf1 	bl	8000808 <__aeabi_dsub>
 801e026:	f7e3 f857 	bl	80010d8 <__aeabi_d2iz>
 801e02a:	4604      	mov	r4, r0
 801e02c:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 801e030:	f84a 4b04 	str.w	r4, [sl], #4
 801e034:	4630      	mov	r0, r6
 801e036:	4639      	mov	r1, r7
 801e038:	f7e2 fbe8 	bl	800080c <__adddf3>
 801e03c:	45c8      	cmp	r8, r9
 801e03e:	4604      	mov	r4, r0
 801e040:	460d      	mov	r5, r1
 801e042:	d1da      	bne.n	801dffa <__kernel_rem_pio2+0x12a>
 801e044:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801e048:	4620      	mov	r0, r4
 801e04a:	4629      	mov	r1, r5
 801e04c:	464a      	mov	r2, r9
 801e04e:	f000 fc93 	bl	801e978 <scalbn>
 801e052:	2200      	movs	r2, #0
 801e054:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801e058:	4604      	mov	r4, r0
 801e05a:	460d      	mov	r5, r1
 801e05c:	f7e2 fd8c 	bl	8000b78 <__aeabi_dmul>
 801e060:	f000 fc0e 	bl	801e880 <floor>
 801e064:	4b59      	ldr	r3, [pc, #356]	; (801e1cc <__kernel_rem_pio2+0x2fc>)
 801e066:	2200      	movs	r2, #0
 801e068:	f7e2 fd86 	bl	8000b78 <__aeabi_dmul>
 801e06c:	4602      	mov	r2, r0
 801e06e:	460b      	mov	r3, r1
 801e070:	4620      	mov	r0, r4
 801e072:	4629      	mov	r1, r5
 801e074:	f7e2 fbc8 	bl	8000808 <__aeabi_dsub>
 801e078:	460d      	mov	r5, r1
 801e07a:	4604      	mov	r4, r0
 801e07c:	f7e3 f82c 	bl	80010d8 <__aeabi_d2iz>
 801e080:	4680      	mov	r8, r0
 801e082:	f7e2 fd0f 	bl	8000aa4 <__aeabi_i2d>
 801e086:	460b      	mov	r3, r1
 801e088:	4602      	mov	r2, r0
 801e08a:	4629      	mov	r1, r5
 801e08c:	4620      	mov	r0, r4
 801e08e:	f7e2 fbbb 	bl	8000808 <__aeabi_dsub>
 801e092:	464b      	mov	r3, r9
 801e094:	2b00      	cmp	r3, #0
 801e096:	4606      	mov	r6, r0
 801e098:	460f      	mov	r7, r1
 801e09a:	f340 8099 	ble.w	801e1d0 <__kernel_rem_pio2+0x300>
 801e09e:	9a01      	ldr	r2, [sp, #4]
 801e0a0:	a90c      	add	r1, sp, #48	; 0x30
 801e0a2:	3a01      	subs	r2, #1
 801e0a4:	f1c9 0318 	rsb	r3, r9, #24
 801e0a8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 801e0ac:	fa45 f103 	asr.w	r1, r5, r3
 801e0b0:	fa01 f303 	lsl.w	r3, r1, r3
 801e0b4:	1aeb      	subs	r3, r5, r3
 801e0b6:	f1c9 0517 	rsb	r5, r9, #23
 801e0ba:	a80c      	add	r0, sp, #48	; 0x30
 801e0bc:	fa43 f505 	asr.w	r5, r3, r5
 801e0c0:	2d00      	cmp	r5, #0
 801e0c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801e0c6:	4488      	add	r8, r1
 801e0c8:	f300 808c 	bgt.w	801e1e4 <__kernel_rem_pio2+0x314>
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	2300      	movs	r3, #0
 801e0d0:	4630      	mov	r0, r6
 801e0d2:	4639      	mov	r1, r7
 801e0d4:	f7e2 ffb8 	bl	8001048 <__aeabi_dcmpeq>
 801e0d8:	2800      	cmp	r0, #0
 801e0da:	f000 8251 	beq.w	801e580 <__kernel_rem_pio2+0x6b0>
 801e0de:	9b01      	ldr	r3, [sp, #4]
 801e0e0:	9a05      	ldr	r2, [sp, #20]
 801e0e2:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 801e0e6:	4552      	cmp	r2, sl
 801e0e8:	dc10      	bgt.n	801e10c <__kernel_rem_pio2+0x23c>
 801e0ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e0ee:	aa0c      	add	r2, sp, #48	; 0x30
 801e0f0:	3b01      	subs	r3, #1
 801e0f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e0f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e0f8:	2200      	movs	r2, #0
 801e0fa:	f853 1904 	ldr.w	r1, [r3], #-4
 801e0fe:	4283      	cmp	r3, r0
 801e100:	ea42 0201 	orr.w	r2, r2, r1
 801e104:	d1f9      	bne.n	801e0fa <__kernel_rem_pio2+0x22a>
 801e106:	2a00      	cmp	r2, #0
 801e108:	f040 80dd 	bne.w	801e2c6 <__kernel_rem_pio2+0x3f6>
 801e10c:	9b05      	ldr	r3, [sp, #20]
 801e10e:	aa0c      	add	r2, sp, #48	; 0x30
 801e110:	3b01      	subs	r3, #1
 801e112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e116:	2b00      	cmp	r3, #0
 801e118:	f040 80d0 	bne.w	801e2bc <__kernel_rem_pio2+0x3ec>
 801e11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e11e:	2301      	movs	r3, #1
 801e120:	f852 1904 	ldr.w	r1, [r2], #-4
 801e124:	3301      	adds	r3, #1
 801e126:	2900      	cmp	r1, #0
 801e128:	d0fa      	beq.n	801e120 <__kernel_rem_pio2+0x250>
 801e12a:	9901      	ldr	r1, [sp, #4]
 801e12c:	1c4a      	adds	r2, r1, #1
 801e12e:	18cb      	adds	r3, r1, r3
 801e130:	9302      	str	r3, [sp, #8]
 801e132:	4691      	mov	r9, r2
 801e134:	9b07      	ldr	r3, [sp, #28]
 801e136:	9908      	ldr	r1, [sp, #32]
 801e138:	eb02 0a03 	add.w	sl, r2, r3
 801e13c:	9b01      	ldr	r3, [sp, #4]
 801e13e:	440b      	add	r3, r1
 801e140:	4698      	mov	r8, r3
 801e142:	ab20      	add	r3, sp, #128	; 0x80
 801e144:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 801e148:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801e14c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801e14e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801e152:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 801e156:	ab70      	add	r3, sp, #448	; 0x1c0
 801e158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e15c:	9301      	str	r3, [sp, #4]
 801e15e:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801e162:	f7e2 fc9f 	bl	8000aa4 <__aeabi_i2d>
 801e166:	460b      	mov	r3, r1
 801e168:	9903      	ldr	r1, [sp, #12]
 801e16a:	4602      	mov	r2, r0
 801e16c:	2900      	cmp	r1, #0
 801e16e:	e9c8 2300 	strd	r2, r3, [r8]
 801e172:	4647      	mov	r7, r8
 801e174:	f04f 0400 	mov.w	r4, #0
 801e178:	f108 0808 	add.w	r8, r8, #8
 801e17c:	f04f 0500 	mov.w	r5, #0
 801e180:	db11      	blt.n	801e1a6 <__kernel_rem_pio2+0x2d6>
 801e182:	9e04      	ldr	r6, [sp, #16]
 801e184:	e001      	b.n	801e18a <__kernel_rem_pio2+0x2ba>
 801e186:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 801e18a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801e18e:	f7e2 fcf3 	bl	8000b78 <__aeabi_dmul>
 801e192:	4602      	mov	r2, r0
 801e194:	460b      	mov	r3, r1
 801e196:	4620      	mov	r0, r4
 801e198:	4629      	mov	r1, r5
 801e19a:	f7e2 fb37 	bl	800080c <__adddf3>
 801e19e:	455e      	cmp	r6, fp
 801e1a0:	4604      	mov	r4, r0
 801e1a2:	460d      	mov	r5, r1
 801e1a4:	d1ef      	bne.n	801e186 <__kernel_rem_pio2+0x2b6>
 801e1a6:	9b01      	ldr	r3, [sp, #4]
 801e1a8:	e8e3 4502 	strd	r4, r5, [r3], #8
 801e1ac:	9301      	str	r3, [sp, #4]
 801e1ae:	9b02      	ldr	r3, [sp, #8]
 801e1b0:	f109 0901 	add.w	r9, r9, #1
 801e1b4:	4599      	cmp	r9, r3
 801e1b6:	ddd2      	ble.n	801e15e <__kernel_rem_pio2+0x28e>
 801e1b8:	e710      	b.n	801dfdc <__kernel_rem_pio2+0x10c>
 801e1ba:	bf00      	nop
 801e1bc:	080209f8 	.word	0x080209f8
 801e1c0:	2aaaaaab 	.word	0x2aaaaaab
 801e1c4:	3e700000 	.word	0x3e700000
 801e1c8:	41700000 	.word	0x41700000
 801e1cc:	40200000 	.word	0x40200000
 801e1d0:	d16b      	bne.n	801e2aa <__kernel_rem_pio2+0x3da>
 801e1d2:	9b01      	ldr	r3, [sp, #4]
 801e1d4:	aa0c      	add	r2, sp, #48	; 0x30
 801e1d6:	3b01      	subs	r3, #1
 801e1d8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801e1dc:	15ed      	asrs	r5, r5, #23
 801e1de:	2d00      	cmp	r5, #0
 801e1e0:	f77f af74 	ble.w	801e0cc <__kernel_rem_pio2+0x1fc>
 801e1e4:	9b01      	ldr	r3, [sp, #4]
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	f108 0801 	add.w	r8, r8, #1
 801e1ec:	f340 81c6 	ble.w	801e57c <__kernel_rem_pio2+0x6ac>
 801e1f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e1f2:	2c00      	cmp	r4, #0
 801e1f4:	d151      	bne.n	801e29a <__kernel_rem_pio2+0x3ca>
 801e1f6:	9b01      	ldr	r3, [sp, #4]
 801e1f8:	2b01      	cmp	r3, #1
 801e1fa:	d020      	beq.n	801e23e <__kernel_rem_pio2+0x36e>
 801e1fc:	ab0c      	add	r3, sp, #48	; 0x30
 801e1fe:	2201      	movs	r2, #1
 801e200:	f853 4f04 	ldr.w	r4, [r3, #4]!
 801e204:	2c00      	cmp	r4, #0
 801e206:	d04b      	beq.n	801e2a0 <__kernel_rem_pio2+0x3d0>
 801e208:	1c53      	adds	r3, r2, #1
 801e20a:	a90c      	add	r1, sp, #48	; 0x30
 801e20c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 801e210:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 801e214:	9901      	ldr	r1, [sp, #4]
 801e216:	4299      	cmp	r1, r3
 801e218:	dd10      	ble.n	801e23c <__kernel_rem_pio2+0x36c>
 801e21a:	aa0c      	add	r2, sp, #48	; 0x30
 801e21c:	a80c      	add	r0, sp, #48	; 0x30
 801e21e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e222:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e226:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801e22a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801e22e:	e000      	b.n	801e232 <__kernel_rem_pio2+0x362>
 801e230:	681a      	ldr	r2, [r3, #0]
 801e232:	1a8a      	subs	r2, r1, r2
 801e234:	f843 2b04 	str.w	r2, [r3], #4
 801e238:	4283      	cmp	r3, r0
 801e23a:	d1f9      	bne.n	801e230 <__kernel_rem_pio2+0x360>
 801e23c:	2401      	movs	r4, #1
 801e23e:	9b06      	ldr	r3, [sp, #24]
 801e240:	2b00      	cmp	r3, #0
 801e242:	dd0e      	ble.n	801e262 <__kernel_rem_pio2+0x392>
 801e244:	2b01      	cmp	r3, #1
 801e246:	f000 816a 	beq.w	801e51e <__kernel_rem_pio2+0x64e>
 801e24a:	2b02      	cmp	r3, #2
 801e24c:	d109      	bne.n	801e262 <__kernel_rem_pio2+0x392>
 801e24e:	9b01      	ldr	r3, [sp, #4]
 801e250:	1e5a      	subs	r2, r3, #1
 801e252:	ab0c      	add	r3, sp, #48	; 0x30
 801e254:	a90c      	add	r1, sp, #48	; 0x30
 801e256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e25a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801e25e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801e262:	2d02      	cmp	r5, #2
 801e264:	f47f af32 	bne.w	801e0cc <__kernel_rem_pio2+0x1fc>
 801e268:	4632      	mov	r2, r6
 801e26a:	463b      	mov	r3, r7
 801e26c:	49b6      	ldr	r1, [pc, #728]	; (801e548 <__kernel_rem_pio2+0x678>)
 801e26e:	2000      	movs	r0, #0
 801e270:	f7e2 faca 	bl	8000808 <__aeabi_dsub>
 801e274:	4606      	mov	r6, r0
 801e276:	460f      	mov	r7, r1
 801e278:	2c00      	cmp	r4, #0
 801e27a:	f43f af27 	beq.w	801e0cc <__kernel_rem_pio2+0x1fc>
 801e27e:	9a06      	ldr	r2, [sp, #24]
 801e280:	49b1      	ldr	r1, [pc, #708]	; (801e548 <__kernel_rem_pio2+0x678>)
 801e282:	2000      	movs	r0, #0
 801e284:	f000 fb78 	bl	801e978 <scalbn>
 801e288:	4602      	mov	r2, r0
 801e28a:	460b      	mov	r3, r1
 801e28c:	4630      	mov	r0, r6
 801e28e:	4639      	mov	r1, r7
 801e290:	f7e2 faba 	bl	8000808 <__aeabi_dsub>
 801e294:	4606      	mov	r6, r0
 801e296:	460f      	mov	r7, r1
 801e298:	e718      	b.n	801e0cc <__kernel_rem_pio2+0x1fc>
 801e29a:	2301      	movs	r3, #1
 801e29c:	2200      	movs	r2, #0
 801e29e:	e7b4      	b.n	801e20a <__kernel_rem_pio2+0x33a>
 801e2a0:	9901      	ldr	r1, [sp, #4]
 801e2a2:	3201      	adds	r2, #1
 801e2a4:	428a      	cmp	r2, r1
 801e2a6:	d1ab      	bne.n	801e200 <__kernel_rem_pio2+0x330>
 801e2a8:	e7c9      	b.n	801e23e <__kernel_rem_pio2+0x36e>
 801e2aa:	4ba8      	ldr	r3, [pc, #672]	; (801e54c <__kernel_rem_pio2+0x67c>)
 801e2ac:	2200      	movs	r2, #0
 801e2ae:	f7e2 fee9 	bl	8001084 <__aeabi_dcmpge>
 801e2b2:	2800      	cmp	r0, #0
 801e2b4:	f040 8150 	bne.w	801e558 <__kernel_rem_pio2+0x688>
 801e2b8:	4605      	mov	r5, r0
 801e2ba:	e707      	b.n	801e0cc <__kernel_rem_pio2+0x1fc>
 801e2bc:	9b01      	ldr	r3, [sp, #4]
 801e2be:	1c5a      	adds	r2, r3, #1
 801e2c0:	4691      	mov	r9, r2
 801e2c2:	9202      	str	r2, [sp, #8]
 801e2c4:	e736      	b.n	801e134 <__kernel_rem_pio2+0x264>
 801e2c6:	ab0c      	add	r3, sp, #48	; 0x30
 801e2c8:	9a06      	ldr	r2, [sp, #24]
 801e2ca:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 801e2ce:	f8cd 801c 	str.w	r8, [sp, #28]
 801e2d2:	3a18      	subs	r2, #24
 801e2d4:	9503      	str	r5, [sp, #12]
 801e2d6:	9206      	str	r2, [sp, #24]
 801e2d8:	b973      	cbnz	r3, 801e2f8 <__kernel_rem_pio2+0x428>
 801e2da:	9b01      	ldr	r3, [sp, #4]
 801e2dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e2e0:	3b02      	subs	r3, #2
 801e2e2:	a90c      	add	r1, sp, #48	; 0x30
 801e2e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e2e8:	f853 1904 	ldr.w	r1, [r3], #-4
 801e2ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801e2f0:	3a18      	subs	r2, #24
 801e2f2:	2900      	cmp	r1, #0
 801e2f4:	d0f8      	beq.n	801e2e8 <__kernel_rem_pio2+0x418>
 801e2f6:	9206      	str	r2, [sp, #24]
 801e2f8:	9a06      	ldr	r2, [sp, #24]
 801e2fa:	4993      	ldr	r1, [pc, #588]	; (801e548 <__kernel_rem_pio2+0x678>)
 801e2fc:	2000      	movs	r0, #0
 801e2fe:	f000 fb3b 	bl	801e978 <scalbn>
 801e302:	f1ba 0f00 	cmp.w	sl, #0
 801e306:	4604      	mov	r4, r0
 801e308:	460d      	mov	r5, r1
 801e30a:	f2c0 81d4 	blt.w	801e6b6 <__kernel_rem_pio2+0x7e6>
 801e30e:	ab70      	add	r3, sp, #448	; 0x1c0
 801e310:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 801e314:	aa0c      	add	r2, sp, #48	; 0x30
 801e316:	f10a 0301 	add.w	r3, sl, #1
 801e31a:	9306      	str	r3, [sp, #24]
 801e31c:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 801e320:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801e324:	f10b 0908 	add.w	r9, fp, #8
 801e328:	9304      	str	r3, [sp, #16]
 801e32a:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 801e32e:	f7e2 fbb9 	bl	8000aa4 <__aeabi_i2d>
 801e332:	4622      	mov	r2, r4
 801e334:	462b      	mov	r3, r5
 801e336:	f7e2 fc1f 	bl	8000b78 <__aeabi_dmul>
 801e33a:	4606      	mov	r6, r0
 801e33c:	460f      	mov	r7, r1
 801e33e:	4b84      	ldr	r3, [pc, #528]	; (801e550 <__kernel_rem_pio2+0x680>)
 801e340:	4620      	mov	r0, r4
 801e342:	4629      	mov	r1, r5
 801e344:	e969 6702 	strd	r6, r7, [r9, #-8]!
 801e348:	2200      	movs	r2, #0
 801e34a:	f7e2 fc15 	bl	8000b78 <__aeabi_dmul>
 801e34e:	ab0c      	add	r3, sp, #48	; 0x30
 801e350:	4598      	cmp	r8, r3
 801e352:	4604      	mov	r4, r0
 801e354:	460d      	mov	r5, r1
 801e356:	d1e8      	bne.n	801e32a <__kernel_rem_pio2+0x45a>
 801e358:	ab48      	add	r3, sp, #288	; 0x120
 801e35a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 801e35e:	f8dd a014 	ldr.w	sl, [sp, #20]
 801e362:	f1ba 0f00 	cmp.w	sl, #0
 801e366:	f04f 0900 	mov.w	r9, #0
 801e36a:	db2c      	blt.n	801e3c6 <__kernel_rem_pio2+0x4f6>
 801e36c:	a374      	add	r3, pc, #464	; (adr r3, 801e540 <__kernel_rem_pio2+0x670>)
 801e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e372:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 801e554 <__kernel_rem_pio2+0x684>
 801e376:	465f      	mov	r7, fp
 801e378:	2400      	movs	r4, #0
 801e37a:	2500      	movs	r5, #0
 801e37c:	2600      	movs	r6, #0
 801e37e:	e003      	b.n	801e388 <__kernel_rem_pio2+0x4b8>
 801e380:	45b1      	cmp	r9, r6
 801e382:	db10      	blt.n	801e3a6 <__kernel_rem_pio2+0x4d6>
 801e384:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801e388:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801e38c:	f7e2 fbf4 	bl	8000b78 <__aeabi_dmul>
 801e390:	4602      	mov	r2, r0
 801e392:	460b      	mov	r3, r1
 801e394:	4620      	mov	r0, r4
 801e396:	4629      	mov	r1, r5
 801e398:	f7e2 fa38 	bl	800080c <__adddf3>
 801e39c:	3601      	adds	r6, #1
 801e39e:	45b2      	cmp	sl, r6
 801e3a0:	4604      	mov	r4, r0
 801e3a2:	460d      	mov	r5, r1
 801e3a4:	daec      	bge.n	801e380 <__kernel_rem_pio2+0x4b0>
 801e3a6:	9b01      	ldr	r3, [sp, #4]
 801e3a8:	9a02      	ldr	r2, [sp, #8]
 801e3aa:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e3ae:	454a      	cmp	r2, r9
 801e3b0:	e9c3 4500 	strd	r4, r5, [r3]
 801e3b4:	f1ab 0b08 	sub.w	fp, fp, #8
 801e3b8:	f109 0301 	add.w	r3, r9, #1
 801e3bc:	d006      	beq.n	801e3cc <__kernel_rem_pio2+0x4fc>
 801e3be:	f1ba 0f00 	cmp.w	sl, #0
 801e3c2:	4699      	mov	r9, r3
 801e3c4:	dad2      	bge.n	801e36c <__kernel_rem_pio2+0x49c>
 801e3c6:	2400      	movs	r4, #0
 801e3c8:	2500      	movs	r5, #0
 801e3ca:	e7ec      	b.n	801e3a6 <__kernel_rem_pio2+0x4d6>
 801e3cc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801e3ce:	f8dd a008 	ldr.w	sl, [sp, #8]
 801e3d2:	2b02      	cmp	r3, #2
 801e3d4:	dc1e      	bgt.n	801e414 <__kernel_rem_pio2+0x544>
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	f300 8105 	bgt.w	801e5e6 <__kernel_rem_pio2+0x716>
 801e3dc:	d113      	bne.n	801e406 <__kernel_rem_pio2+0x536>
 801e3de:	9c04      	ldr	r4, [sp, #16]
 801e3e0:	9d01      	ldr	r5, [sp, #4]
 801e3e2:	3408      	adds	r4, #8
 801e3e4:	2000      	movs	r0, #0
 801e3e6:	2100      	movs	r1, #0
 801e3e8:	442c      	add	r4, r5
 801e3ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801e3ee:	f7e2 fa0d 	bl	800080c <__adddf3>
 801e3f2:	42a5      	cmp	r5, r4
 801e3f4:	d1f9      	bne.n	801e3ea <__kernel_rem_pio2+0x51a>
 801e3f6:	9b03      	ldr	r3, [sp, #12]
 801e3f8:	b113      	cbz	r3, 801e400 <__kernel_rem_pio2+0x530>
 801e3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e3fe:	4619      	mov	r1, r3
 801e400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e402:	e9c3 0100 	strd	r0, r1, [r3]
 801e406:	9b07      	ldr	r3, [sp, #28]
 801e408:	f003 0007 	and.w	r0, r3, #7
 801e40c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e414:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801e416:	2b03      	cmp	r3, #3
 801e418:	d1f5      	bne.n	801e406 <__kernel_rem_pio2+0x536>
 801e41a:	f1ba 0f00 	cmp.w	sl, #0
 801e41e:	f000 8166 	beq.w	801e6ee <__kernel_rem_pio2+0x81e>
 801e422:	9a01      	ldr	r2, [sp, #4]
 801e424:	9b04      	ldr	r3, [sp, #16]
 801e426:	18d3      	adds	r3, r2, r3
 801e428:	e9d3 4500 	ldrd	r4, r5, [r3]
 801e42c:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 801e430:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 801e434:	4620      	mov	r0, r4
 801e436:	4629      	mov	r1, r5
 801e438:	4632      	mov	r2, r6
 801e43a:	463b      	mov	r3, r7
 801e43c:	f7e2 f9e6 	bl	800080c <__adddf3>
 801e440:	46a0      	mov	r8, r4
 801e442:	46a9      	mov	r9, r5
 801e444:	4604      	mov	r4, r0
 801e446:	460d      	mov	r5, r1
 801e448:	4622      	mov	r2, r4
 801e44a:	462b      	mov	r3, r5
 801e44c:	4630      	mov	r0, r6
 801e44e:	4639      	mov	r1, r7
 801e450:	f7e2 f9da 	bl	8000808 <__aeabi_dsub>
 801e454:	464b      	mov	r3, r9
 801e456:	4642      	mov	r2, r8
 801e458:	f7e2 f9d8 	bl	800080c <__adddf3>
 801e45c:	9b01      	ldr	r3, [sp, #4]
 801e45e:	455b      	cmp	r3, fp
 801e460:	e9cb 4500 	strd	r4, r5, [fp]
 801e464:	e9cb 0102 	strd	r0, r1, [fp, #8]
 801e468:	d1e2      	bne.n	801e430 <__kernel_rem_pio2+0x560>
 801e46a:	f1ba 0f01 	cmp.w	sl, #1
 801e46e:	f340 813e 	ble.w	801e6ee <__kernel_rem_pio2+0x81e>
 801e472:	9a01      	ldr	r2, [sp, #4]
 801e474:	9b04      	ldr	r3, [sp, #16]
 801e476:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
 801e47a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801e47e:	4413      	add	r3, r2
 801e480:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 801e484:	e9d3 4500 	ldrd	r4, r5, [r3]
 801e488:	f101 0a08 	add.w	sl, r1, #8
 801e48c:	9102      	str	r1, [sp, #8]
 801e48e:	4492      	add	sl, r2
 801e490:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 801e494:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 801e498:	4620      	mov	r0, r4
 801e49a:	4629      	mov	r1, r5
 801e49c:	4632      	mov	r2, r6
 801e49e:	463b      	mov	r3, r7
 801e4a0:	f7e2 f9b4 	bl	800080c <__adddf3>
 801e4a4:	46a0      	mov	r8, r4
 801e4a6:	46a9      	mov	r9, r5
 801e4a8:	4604      	mov	r4, r0
 801e4aa:	460d      	mov	r5, r1
 801e4ac:	4622      	mov	r2, r4
 801e4ae:	462b      	mov	r3, r5
 801e4b0:	4630      	mov	r0, r6
 801e4b2:	4639      	mov	r1, r7
 801e4b4:	f7e2 f9a8 	bl	8000808 <__aeabi_dsub>
 801e4b8:	4642      	mov	r2, r8
 801e4ba:	464b      	mov	r3, r9
 801e4bc:	f7e2 f9a6 	bl	800080c <__adddf3>
 801e4c0:	45d3      	cmp	fp, sl
 801e4c2:	e9ca 4500 	strd	r4, r5, [sl]
 801e4c6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e4ca:	d1e3      	bne.n	801e494 <__kernel_rem_pio2+0x5c4>
 801e4cc:	9c02      	ldr	r4, [sp, #8]
 801e4ce:	9b01      	ldr	r3, [sp, #4]
 801e4d0:	2600      	movs	r6, #0
 801e4d2:	2700      	movs	r7, #0
 801e4d4:	3410      	adds	r4, #16
 801e4d6:	441c      	add	r4, r3
 801e4d8:	f103 0510 	add.w	r5, r3, #16
 801e4dc:	4630      	mov	r0, r6
 801e4de:	4639      	mov	r1, r7
 801e4e0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801e4e4:	f7e2 f992 	bl	800080c <__adddf3>
 801e4e8:	42a5      	cmp	r5, r4
 801e4ea:	d1f9      	bne.n	801e4e0 <__kernel_rem_pio2+0x610>
 801e4ec:	4606      	mov	r6, r0
 801e4ee:	460f      	mov	r7, r1
 801e4f0:	9b03      	ldr	r3, [sp, #12]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	f040 80b5 	bne.w	801e662 <__kernel_rem_pio2+0x792>
 801e4f8:	9a01      	ldr	r2, [sp, #4]
 801e4fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e4fc:	e9d2 4500 	ldrd	r4, r5, [r2]
 801e500:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 801e504:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801e508:	9b07      	ldr	r3, [sp, #28]
 801e50a:	f003 0007 	and.w	r0, r3, #7
 801e50e:	e9c1 6704 	strd	r6, r7, [r1, #16]
 801e512:	e9c1 4500 	strd	r4, r5, [r1]
 801e516:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e51e:	9b01      	ldr	r3, [sp, #4]
 801e520:	1e5a      	subs	r2, r3, #1
 801e522:	ab0c      	add	r3, sp, #48	; 0x30
 801e524:	a90c      	add	r1, sp, #48	; 0x30
 801e526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e52a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801e52e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801e532:	e696      	b.n	801e262 <__kernel_rem_pio2+0x392>
 801e534:	2100      	movs	r1, #0
 801e536:	f06f 0317 	mvn.w	r3, #23
 801e53a:	9107      	str	r1, [sp, #28]
 801e53c:	e4e6      	b.n	801df0c <__kernel_rem_pio2+0x3c>
 801e53e:	bf00      	nop
 801e540:	40000000 	.word	0x40000000
 801e544:	3ff921fb 	.word	0x3ff921fb
 801e548:	3ff00000 	.word	0x3ff00000
 801e54c:	3fe00000 	.word	0x3fe00000
 801e550:	3e700000 	.word	0x3e700000
 801e554:	080209c0 	.word	0x080209c0
 801e558:	9b01      	ldr	r3, [sp, #4]
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	f108 0801 	add.w	r8, r8, #1
 801e560:	bfc8      	it	gt
 801e562:	2502      	movgt	r5, #2
 801e564:	f73f ae44 	bgt.w	801e1f0 <__kernel_rem_pio2+0x320>
 801e568:	4632      	mov	r2, r6
 801e56a:	463b      	mov	r3, r7
 801e56c:	4961      	ldr	r1, [pc, #388]	; (801e6f4 <__kernel_rem_pio2+0x824>)
 801e56e:	2000      	movs	r0, #0
 801e570:	f7e2 f94a 	bl	8000808 <__aeabi_dsub>
 801e574:	2502      	movs	r5, #2
 801e576:	4606      	mov	r6, r0
 801e578:	460f      	mov	r7, r1
 801e57a:	e5a7      	b.n	801e0cc <__kernel_rem_pio2+0x1fc>
 801e57c:	2400      	movs	r4, #0
 801e57e:	e65e      	b.n	801e23e <__kernel_rem_pio2+0x36e>
 801e580:	4639      	mov	r1, r7
 801e582:	9f06      	ldr	r7, [sp, #24]
 801e584:	9503      	str	r5, [sp, #12]
 801e586:	427a      	negs	r2, r7
 801e588:	4630      	mov	r0, r6
 801e58a:	f8cd 801c 	str.w	r8, [sp, #28]
 801e58e:	f000 f9f3 	bl	801e978 <scalbn>
 801e592:	4b59      	ldr	r3, [pc, #356]	; (801e6f8 <__kernel_rem_pio2+0x828>)
 801e594:	2200      	movs	r2, #0
 801e596:	4604      	mov	r4, r0
 801e598:	460d      	mov	r5, r1
 801e59a:	f7e2 fd73 	bl	8001084 <__aeabi_dcmpge>
 801e59e:	2800      	cmp	r0, #0
 801e5a0:	d055      	beq.n	801e64e <__kernel_rem_pio2+0x77e>
 801e5a2:	4b56      	ldr	r3, [pc, #344]	; (801e6fc <__kernel_rem_pio2+0x82c>)
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	4620      	mov	r0, r4
 801e5a8:	4629      	mov	r1, r5
 801e5aa:	f7e2 fae5 	bl	8000b78 <__aeabi_dmul>
 801e5ae:	f7e2 fd93 	bl	80010d8 <__aeabi_d2iz>
 801e5b2:	4606      	mov	r6, r0
 801e5b4:	f7e2 fa76 	bl	8000aa4 <__aeabi_i2d>
 801e5b8:	4b4f      	ldr	r3, [pc, #316]	; (801e6f8 <__kernel_rem_pio2+0x828>)
 801e5ba:	2200      	movs	r2, #0
 801e5bc:	f7e2 fadc 	bl	8000b78 <__aeabi_dmul>
 801e5c0:	460b      	mov	r3, r1
 801e5c2:	4602      	mov	r2, r0
 801e5c4:	4629      	mov	r1, r5
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	f7e2 f91e 	bl	8000808 <__aeabi_dsub>
 801e5cc:	9c01      	ldr	r4, [sp, #4]
 801e5ce:	f7e2 fd83 	bl	80010d8 <__aeabi_d2iz>
 801e5d2:	f104 0a01 	add.w	sl, r4, #1
 801e5d6:	ab0c      	add	r3, sp, #48	; 0x30
 801e5d8:	3718      	adds	r7, #24
 801e5da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801e5de:	9706      	str	r7, [sp, #24]
 801e5e0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 801e5e4:	e688      	b.n	801e2f8 <__kernel_rem_pio2+0x428>
 801e5e6:	9d01      	ldr	r5, [sp, #4]
 801e5e8:	9a06      	ldr	r2, [sp, #24]
 801e5ea:	2000      	movs	r0, #0
 801e5ec:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 801e5f0:	2100      	movs	r1, #0
 801e5f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801e5f6:	f7e2 f909 	bl	800080c <__adddf3>
 801e5fa:	42a5      	cmp	r5, r4
 801e5fc:	d1f9      	bne.n	801e5f2 <__kernel_rem_pio2+0x722>
 801e5fe:	9b03      	ldr	r3, [sp, #12]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d148      	bne.n	801e696 <__kernel_rem_pio2+0x7c6>
 801e604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e606:	e9c3 0100 	strd	r0, r1, [r3]
 801e60a:	460b      	mov	r3, r1
 801e60c:	9901      	ldr	r1, [sp, #4]
 801e60e:	4602      	mov	r2, r0
 801e610:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e614:	f7e2 f8f8 	bl	8000808 <__aeabi_dsub>
 801e618:	f1ba 0f00 	cmp.w	sl, #0
 801e61c:	dd0d      	ble.n	801e63a <__kernel_rem_pio2+0x76a>
 801e61e:	ad4a      	add	r5, sp, #296	; 0x128
 801e620:	2401      	movs	r4, #1
 801e622:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801e626:	3401      	adds	r4, #1
 801e628:	f7e2 f8f0 	bl	800080c <__adddf3>
 801e62c:	45a2      	cmp	sl, r4
 801e62e:	daf8      	bge.n	801e622 <__kernel_rem_pio2+0x752>
 801e630:	9b03      	ldr	r3, [sp, #12]
 801e632:	b113      	cbz	r3, 801e63a <__kernel_rem_pio2+0x76a>
 801e634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e638:	4619      	mov	r1, r3
 801e63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e63c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801e640:	9b07      	ldr	r3, [sp, #28]
 801e642:	f003 0007 	and.w	r0, r3, #7
 801e646:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801e64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e64e:	4620      	mov	r0, r4
 801e650:	4629      	mov	r1, r5
 801e652:	f7e2 fd41 	bl	80010d8 <__aeabi_d2iz>
 801e656:	9b01      	ldr	r3, [sp, #4]
 801e658:	aa0c      	add	r2, sp, #48	; 0x30
 801e65a:	469a      	mov	sl, r3
 801e65c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 801e660:	e64a      	b.n	801e2f8 <__kernel_rem_pio2+0x428>
 801e662:	9b01      	ldr	r3, [sp, #4]
 801e664:	4619      	mov	r1, r3
 801e666:	685a      	ldr	r2, [r3, #4]
 801e668:	68db      	ldr	r3, [r3, #12]
 801e66a:	680d      	ldr	r5, [r1, #0]
 801e66c:	688c      	ldr	r4, [r1, #8]
 801e66e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e674:	60cb      	str	r3, [r1, #12]
 801e676:	9b07      	ldr	r3, [sp, #28]
 801e678:	600d      	str	r5, [r1, #0]
 801e67a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801e67e:	604a      	str	r2, [r1, #4]
 801e680:	f003 0007 	and.w	r0, r3, #7
 801e684:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
 801e688:	608c      	str	r4, [r1, #8]
 801e68a:	610e      	str	r6, [r1, #16]
 801e68c:	614a      	str	r2, [r1, #20]
 801e68e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e696:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e698:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e69c:	e9c4 0300 	strd	r0, r3, [r4]
 801e6a0:	460b      	mov	r3, r1
 801e6a2:	9901      	ldr	r1, [sp, #4]
 801e6a4:	4602      	mov	r2, r0
 801e6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e6aa:	f7e2 f8ad 	bl	8000808 <__aeabi_dsub>
 801e6ae:	f1ba 0f00 	cmp.w	sl, #0
 801e6b2:	dcb4      	bgt.n	801e61e <__kernel_rem_pio2+0x74e>
 801e6b4:	e7be      	b.n	801e634 <__kernel_rem_pio2+0x764>
 801e6b6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801e6b8:	2b02      	cmp	r3, #2
 801e6ba:	dc0a      	bgt.n	801e6d2 <__kernel_rem_pio2+0x802>
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	dc11      	bgt.n	801e6e4 <__kernel_rem_pio2+0x814>
 801e6c0:	f47f aea1 	bne.w	801e406 <__kernel_rem_pio2+0x536>
 801e6c4:	2000      	movs	r0, #0
 801e6c6:	2100      	movs	r1, #0
 801e6c8:	e695      	b.n	801e3f6 <__kernel_rem_pio2+0x526>
 801e6ca:	9b08      	ldr	r3, [sp, #32]
 801e6cc:	00db      	lsls	r3, r3, #3
 801e6ce:	9302      	str	r3, [sp, #8]
 801e6d0:	e475      	b.n	801dfbe <__kernel_rem_pio2+0xee>
 801e6d2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801e6d4:	2b03      	cmp	r3, #3
 801e6d6:	f47f ae96 	bne.w	801e406 <__kernel_rem_pio2+0x536>
 801e6da:	ab48      	add	r3, sp, #288	; 0x120
 801e6dc:	2600      	movs	r6, #0
 801e6de:	2700      	movs	r7, #0
 801e6e0:	9301      	str	r3, [sp, #4]
 801e6e2:	e705      	b.n	801e4f0 <__kernel_rem_pio2+0x620>
 801e6e4:	ab48      	add	r3, sp, #288	; 0x120
 801e6e6:	2000      	movs	r0, #0
 801e6e8:	2100      	movs	r1, #0
 801e6ea:	9301      	str	r3, [sp, #4]
 801e6ec:	e787      	b.n	801e5fe <__kernel_rem_pio2+0x72e>
 801e6ee:	2600      	movs	r6, #0
 801e6f0:	2700      	movs	r7, #0
 801e6f2:	e6fd      	b.n	801e4f0 <__kernel_rem_pio2+0x620>
 801e6f4:	3ff00000 	.word	0x3ff00000
 801e6f8:	41700000 	.word	0x41700000
 801e6fc:	3e700000 	.word	0x3e700000

0801e700 <__kernel_sin>:
 801e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e704:	461f      	mov	r7, r3
 801e706:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e70a:	b083      	sub	sp, #12
 801e70c:	4616      	mov	r6, r2
 801e70e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801e712:	e9cd 6700 	strd	r6, r7, [sp]
 801e716:	4604      	mov	r4, r0
 801e718:	460d      	mov	r5, r1
 801e71a:	da04      	bge.n	801e726 <__kernel_sin+0x26>
 801e71c:	f7e2 fcdc 	bl	80010d8 <__aeabi_d2iz>
 801e720:	2800      	cmp	r0, #0
 801e722:	f000 8085 	beq.w	801e830 <__kernel_sin+0x130>
 801e726:	4622      	mov	r2, r4
 801e728:	462b      	mov	r3, r5
 801e72a:	4620      	mov	r0, r4
 801e72c:	4629      	mov	r1, r5
 801e72e:	f7e2 fa23 	bl	8000b78 <__aeabi_dmul>
 801e732:	4606      	mov	r6, r0
 801e734:	460f      	mov	r7, r1
 801e736:	4632      	mov	r2, r6
 801e738:	463b      	mov	r3, r7
 801e73a:	4620      	mov	r0, r4
 801e73c:	4629      	mov	r1, r5
 801e73e:	f7e2 fa1b 	bl	8000b78 <__aeabi_dmul>
 801e742:	a342      	add	r3, pc, #264	; (adr r3, 801e84c <__kernel_sin+0x14c>)
 801e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e748:	4682      	mov	sl, r0
 801e74a:	468b      	mov	fp, r1
 801e74c:	4630      	mov	r0, r6
 801e74e:	4639      	mov	r1, r7
 801e750:	f7e2 fa12 	bl	8000b78 <__aeabi_dmul>
 801e754:	a33f      	add	r3, pc, #252	; (adr r3, 801e854 <__kernel_sin+0x154>)
 801e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e75a:	f7e2 f855 	bl	8000808 <__aeabi_dsub>
 801e75e:	4632      	mov	r2, r6
 801e760:	463b      	mov	r3, r7
 801e762:	f7e2 fa09 	bl	8000b78 <__aeabi_dmul>
 801e766:	a33d      	add	r3, pc, #244	; (adr r3, 801e85c <__kernel_sin+0x15c>)
 801e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e76c:	f7e2 f84e 	bl	800080c <__adddf3>
 801e770:	4632      	mov	r2, r6
 801e772:	463b      	mov	r3, r7
 801e774:	f7e2 fa00 	bl	8000b78 <__aeabi_dmul>
 801e778:	a33a      	add	r3, pc, #232	; (adr r3, 801e864 <__kernel_sin+0x164>)
 801e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77e:	f7e2 f843 	bl	8000808 <__aeabi_dsub>
 801e782:	4632      	mov	r2, r6
 801e784:	463b      	mov	r3, r7
 801e786:	f7e2 f9f7 	bl	8000b78 <__aeabi_dmul>
 801e78a:	a338      	add	r3, pc, #224	; (adr r3, 801e86c <__kernel_sin+0x16c>)
 801e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e790:	f7e2 f83c 	bl	800080c <__adddf3>
 801e794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e796:	4680      	mov	r8, r0
 801e798:	4689      	mov	r9, r1
 801e79a:	b39b      	cbz	r3, 801e804 <__kernel_sin+0x104>
 801e79c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e7a0:	4b29      	ldr	r3, [pc, #164]	; (801e848 <__kernel_sin+0x148>)
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	f7e2 f9e8 	bl	8000b78 <__aeabi_dmul>
 801e7a8:	4642      	mov	r2, r8
 801e7aa:	464b      	mov	r3, r9
 801e7ac:	4680      	mov	r8, r0
 801e7ae:	4689      	mov	r9, r1
 801e7b0:	4650      	mov	r0, sl
 801e7b2:	4659      	mov	r1, fp
 801e7b4:	f7e2 f9e0 	bl	8000b78 <__aeabi_dmul>
 801e7b8:	4602      	mov	r2, r0
 801e7ba:	460b      	mov	r3, r1
 801e7bc:	4640      	mov	r0, r8
 801e7be:	4649      	mov	r1, r9
 801e7c0:	f7e2 f822 	bl	8000808 <__aeabi_dsub>
 801e7c4:	4632      	mov	r2, r6
 801e7c6:	463b      	mov	r3, r7
 801e7c8:	f7e2 f9d6 	bl	8000b78 <__aeabi_dmul>
 801e7cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7d0:	f7e2 f81a 	bl	8000808 <__aeabi_dsub>
 801e7d4:	a31a      	add	r3, pc, #104	; (adr r3, 801e840 <__kernel_sin+0x140>)
 801e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7da:	4606      	mov	r6, r0
 801e7dc:	460f      	mov	r7, r1
 801e7de:	4650      	mov	r0, sl
 801e7e0:	4659      	mov	r1, fp
 801e7e2:	f7e2 f9c9 	bl	8000b78 <__aeabi_dmul>
 801e7e6:	4602      	mov	r2, r0
 801e7e8:	460b      	mov	r3, r1
 801e7ea:	4630      	mov	r0, r6
 801e7ec:	4639      	mov	r1, r7
 801e7ee:	f7e2 f80d 	bl	800080c <__adddf3>
 801e7f2:	4602      	mov	r2, r0
 801e7f4:	460b      	mov	r3, r1
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	4629      	mov	r1, r5
 801e7fa:	f7e2 f805 	bl	8000808 <__aeabi_dsub>
 801e7fe:	b003      	add	sp, #12
 801e800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e804:	4602      	mov	r2, r0
 801e806:	460b      	mov	r3, r1
 801e808:	4630      	mov	r0, r6
 801e80a:	4639      	mov	r1, r7
 801e80c:	f7e2 f9b4 	bl	8000b78 <__aeabi_dmul>
 801e810:	a30b      	add	r3, pc, #44	; (adr r3, 801e840 <__kernel_sin+0x140>)
 801e812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e816:	f7e1 fff7 	bl	8000808 <__aeabi_dsub>
 801e81a:	4652      	mov	r2, sl
 801e81c:	465b      	mov	r3, fp
 801e81e:	f7e2 f9ab 	bl	8000b78 <__aeabi_dmul>
 801e822:	4622      	mov	r2, r4
 801e824:	462b      	mov	r3, r5
 801e826:	f7e1 fff1 	bl	800080c <__adddf3>
 801e82a:	b003      	add	sp, #12
 801e82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e830:	4620      	mov	r0, r4
 801e832:	4629      	mov	r1, r5
 801e834:	b003      	add	sp, #12
 801e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e83a:	bf00      	nop
 801e83c:	f3af 8000 	nop.w
 801e840:	55555549 	.word	0x55555549
 801e844:	3fc55555 	.word	0x3fc55555
 801e848:	3fe00000 	.word	0x3fe00000
 801e84c:	5acfd57c 	.word	0x5acfd57c
 801e850:	3de5d93a 	.word	0x3de5d93a
 801e854:	8a2b9ceb 	.word	0x8a2b9ceb
 801e858:	3e5ae5e6 	.word	0x3e5ae5e6
 801e85c:	57b1fe7d 	.word	0x57b1fe7d
 801e860:	3ec71de3 	.word	0x3ec71de3
 801e864:	19c161d5 	.word	0x19c161d5
 801e868:	3f2a01a0 	.word	0x3f2a01a0
 801e86c:	1110f8a6 	.word	0x1110f8a6
 801e870:	3f811111 	.word	0x3f811111

0801e874 <fabs>:
 801e874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801e878:	4770      	bx	lr
 801e87a:	bf00      	nop
 801e87c:	0000      	movs	r0, r0
	...

0801e880 <floor>:
 801e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e882:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e886:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 801e88a:	2d13      	cmp	r5, #19
 801e88c:	4602      	mov	r2, r0
 801e88e:	460b      	mov	r3, r1
 801e890:	460c      	mov	r4, r1
 801e892:	4606      	mov	r6, r0
 801e894:	dc1f      	bgt.n	801e8d6 <floor+0x56>
 801e896:	2d00      	cmp	r5, #0
 801e898:	db3d      	blt.n	801e916 <floor+0x96>
 801e89a:	4f35      	ldr	r7, [pc, #212]	; (801e970 <floor+0xf0>)
 801e89c:	412f      	asrs	r7, r5
 801e89e:	ea01 0c07 	and.w	ip, r1, r7
 801e8a2:	ea5c 0c00 	orrs.w	ip, ip, r0
 801e8a6:	d01b      	beq.n	801e8e0 <floor+0x60>
 801e8a8:	a32f      	add	r3, pc, #188	; (adr r3, 801e968 <floor+0xe8>)
 801e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ae:	f7e1 ffad 	bl	800080c <__adddf3>
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	f7e2 fbef 	bl	8001098 <__aeabi_dcmpgt>
 801e8ba:	b148      	cbz	r0, 801e8d0 <floor+0x50>
 801e8bc:	2c00      	cmp	r4, #0
 801e8be:	da04      	bge.n	801e8ca <floor+0x4a>
 801e8c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801e8c4:	fa43 f505 	asr.w	r5, r3, r5
 801e8c8:	442c      	add	r4, r5
 801e8ca:	ea24 0407 	bic.w	r4, r4, r7
 801e8ce:	2600      	movs	r6, #0
 801e8d0:	4621      	mov	r1, r4
 801e8d2:	4630      	mov	r0, r6
 801e8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8d6:	2d33      	cmp	r5, #51	; 0x33
 801e8d8:	dd05      	ble.n	801e8e6 <floor+0x66>
 801e8da:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801e8de:	d02a      	beq.n	801e936 <floor+0xb6>
 801e8e0:	4610      	mov	r0, r2
 801e8e2:	4619      	mov	r1, r3
 801e8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8e6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e8ea:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e8ee:	fa2c f707 	lsr.w	r7, ip, r7
 801e8f2:	4207      	tst	r7, r0
 801e8f4:	d0f4      	beq.n	801e8e0 <floor+0x60>
 801e8f6:	a31c      	add	r3, pc, #112	; (adr r3, 801e968 <floor+0xe8>)
 801e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fc:	f7e1 ff86 	bl	800080c <__adddf3>
 801e900:	2200      	movs	r2, #0
 801e902:	2300      	movs	r3, #0
 801e904:	f7e2 fbc8 	bl	8001098 <__aeabi_dcmpgt>
 801e908:	2800      	cmp	r0, #0
 801e90a:	d0e1      	beq.n	801e8d0 <floor+0x50>
 801e90c:	2c00      	cmp	r4, #0
 801e90e:	db1e      	blt.n	801e94e <floor+0xce>
 801e910:	ea26 0607 	bic.w	r6, r6, r7
 801e914:	e7dc      	b.n	801e8d0 <floor+0x50>
 801e916:	a314      	add	r3, pc, #80	; (adr r3, 801e968 <floor+0xe8>)
 801e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91c:	f7e1 ff76 	bl	800080c <__adddf3>
 801e920:	2200      	movs	r2, #0
 801e922:	2300      	movs	r3, #0
 801e924:	f7e2 fbb8 	bl	8001098 <__aeabi_dcmpgt>
 801e928:	2800      	cmp	r0, #0
 801e92a:	d0d1      	beq.n	801e8d0 <floor+0x50>
 801e92c:	2c00      	cmp	r4, #0
 801e92e:	db05      	blt.n	801e93c <floor+0xbc>
 801e930:	2600      	movs	r6, #0
 801e932:	4634      	mov	r4, r6
 801e934:	e7cc      	b.n	801e8d0 <floor+0x50>
 801e936:	f7e1 ff69 	bl	800080c <__adddf3>
 801e93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e93c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e940:	4a0c      	ldr	r2, [pc, #48]	; (801e974 <floor+0xf4>)
 801e942:	431e      	orrs	r6, r3
 801e944:	2e00      	cmp	r6, #0
 801e946:	bf18      	it	ne
 801e948:	4614      	movne	r4, r2
 801e94a:	2600      	movs	r6, #0
 801e94c:	e7c0      	b.n	801e8d0 <floor+0x50>
 801e94e:	2d14      	cmp	r5, #20
 801e950:	d008      	beq.n	801e964 <floor+0xe4>
 801e952:	2301      	movs	r3, #1
 801e954:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 801e958:	fa03 f505 	lsl.w	r5, r3, r5
 801e95c:	19ae      	adds	r6, r5, r6
 801e95e:	bf28      	it	cs
 801e960:	18e4      	addcs	r4, r4, r3
 801e962:	e7d5      	b.n	801e910 <floor+0x90>
 801e964:	3401      	adds	r4, #1
 801e966:	e7d3      	b.n	801e910 <floor+0x90>
 801e968:	8800759c 	.word	0x8800759c
 801e96c:	7e37e43c 	.word	0x7e37e43c
 801e970:	000fffff 	.word	0x000fffff
 801e974:	bff00000 	.word	0xbff00000

0801e978 <scalbn>:
 801e978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e97a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e97e:	4604      	mov	r4, r0
 801e980:	460d      	mov	r5, r1
 801e982:	460e      	mov	r6, r1
 801e984:	4617      	mov	r7, r2
 801e986:	bb53      	cbnz	r3, 801e9de <scalbn+0x66>
 801e988:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801e98c:	4603      	mov	r3, r0
 801e98e:	4333      	orrs	r3, r6
 801e990:	d024      	beq.n	801e9dc <scalbn+0x64>
 801e992:	4b37      	ldr	r3, [pc, #220]	; (801ea70 <scalbn+0xf8>)
 801e994:	2200      	movs	r2, #0
 801e996:	f7e2 f8ef 	bl	8000b78 <__aeabi_dmul>
 801e99a:	4b36      	ldr	r3, [pc, #216]	; (801ea74 <scalbn+0xfc>)
 801e99c:	429f      	cmp	r7, r3
 801e99e:	4604      	mov	r4, r0
 801e9a0:	460d      	mov	r5, r1
 801e9a2:	db16      	blt.n	801e9d2 <scalbn+0x5a>
 801e9a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e9a8:	460e      	mov	r6, r1
 801e9aa:	3b36      	subs	r3, #54	; 0x36
 801e9ac:	443b      	add	r3, r7
 801e9ae:	f240 72fe 	movw	r2, #2046	; 0x7fe
 801e9b2:	4293      	cmp	r3, r2
 801e9b4:	dc1c      	bgt.n	801e9f0 <scalbn+0x78>
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	dc3b      	bgt.n	801ea32 <scalbn+0xba>
 801e9ba:	f113 0f35 	cmn.w	r3, #53	; 0x35
 801e9be:	da2b      	bge.n	801ea18 <scalbn+0xa0>
 801e9c0:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e9c4:	429f      	cmp	r7, r3
 801e9c6:	dc13      	bgt.n	801e9f0 <scalbn+0x78>
 801e9c8:	2d00      	cmp	r5, #0
 801e9ca:	a121      	add	r1, pc, #132	; (adr r1, 801ea50 <scalbn+0xd8>)
 801e9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e9d0:	db37      	blt.n	801ea42 <scalbn+0xca>
 801e9d2:	a31f      	add	r3, pc, #124	; (adr r3, 801ea50 <scalbn+0xd8>)
 801e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d8:	f7e2 f8ce 	bl	8000b78 <__aeabi_dmul>
 801e9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e9e2:	4293      	cmp	r3, r2
 801e9e4:	d1e2      	bne.n	801e9ac <scalbn+0x34>
 801e9e6:	4602      	mov	r2, r0
 801e9e8:	460b      	mov	r3, r1
 801e9ea:	f7e1 ff0f 	bl	800080c <__adddf3>
 801e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9f0:	2d00      	cmp	r5, #0
 801e9f2:	a119      	add	r1, pc, #100	; (adr r1, 801ea58 <scalbn+0xe0>)
 801e9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e9f8:	db05      	blt.n	801ea06 <scalbn+0x8e>
 801e9fa:	a317      	add	r3, pc, #92	; (adr r3, 801ea58 <scalbn+0xe0>)
 801e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea00:	f7e2 f8ba 	bl	8000b78 <__aeabi_dmul>
 801ea04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea06:	a314      	add	r3, pc, #80	; (adr r3, 801ea58 <scalbn+0xe0>)
 801ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea0c:	a114      	add	r1, pc, #80	; (adr r1, 801ea60 <scalbn+0xe8>)
 801ea0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ea12:	f7e2 f8b1 	bl	8000b78 <__aeabi_dmul>
 801ea16:	e7f5      	b.n	801ea04 <scalbn+0x8c>
 801ea18:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 801ea1c:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 801ea20:	3336      	adds	r3, #54	; 0x36
 801ea22:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 801ea26:	4620      	mov	r0, r4
 801ea28:	4b13      	ldr	r3, [pc, #76]	; (801ea78 <scalbn+0x100>)
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	f7e2 f8a4 	bl	8000b78 <__aeabi_dmul>
 801ea30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea32:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 801ea36:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 801ea3a:	4620      	mov	r0, r4
 801ea3c:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 801ea40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea42:	a109      	add	r1, pc, #36	; (adr r1, 801ea68 <scalbn+0xf0>)
 801ea44:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ea48:	e7c3      	b.n	801e9d2 <scalbn+0x5a>
 801ea4a:	bf00      	nop
 801ea4c:	f3af 8000 	nop.w
 801ea50:	c2f8f359 	.word	0xc2f8f359
 801ea54:	01a56e1f 	.word	0x01a56e1f
 801ea58:	8800759c 	.word	0x8800759c
 801ea5c:	7e37e43c 	.word	0x7e37e43c
 801ea60:	8800759c 	.word	0x8800759c
 801ea64:	fe37e43c 	.word	0xfe37e43c
 801ea68:	c2f8f359 	.word	0xc2f8f359
 801ea6c:	81a56e1f 	.word	0x81a56e1f
 801ea70:	43500000 	.word	0x43500000
 801ea74:	ffff3cb0 	.word	0xffff3cb0
 801ea78:	3c900000 	.word	0x3c900000

0801ea7c <_init>:
 801ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea7e:	bf00      	nop
 801ea80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea82:	bc08      	pop	{r3}
 801ea84:	469e      	mov	lr, r3
 801ea86:	4770      	bx	lr

0801ea88 <_fini>:
 801ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea8a:	bf00      	nop
 801ea8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea8e:	bc08      	pop	{r3}
 801ea90:	469e      	mov	lr, r3
 801ea92:	4770      	bx	lr
